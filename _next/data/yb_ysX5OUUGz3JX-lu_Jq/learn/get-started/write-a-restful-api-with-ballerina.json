{"pageProps":{"frontmatter":{"layout":"ballerina-rest-api-guide-left-nav-pages-swanlake","title":"Write a RESTful API with Ballerina","permalink":"/learn/write-a-restful-api-with-ballerina/","description":"This guide helps you understand the basics of Ballerina constructs, which allow you to write RESTful APIs.","keywords":"ballerina, programming language, restful-api, ballerina packages, language-guide","active":"write-a-restful-api-with-ballerina","intro":"This guide helps you understand the basics of Ballerina constructs, which allow you to write RESTful APIs.","redirect_from":["/learn/writing-a-restful-api-with-ballerina","/learn/writing-a-restful-api-with-ballerina/","/learn/write-a-restful-api-with-ballerina","/learn/getting-started/writing-a-restful-api-with-ballerina/","/learn/getting-started/writing-a-restful-api-with-ballerina"]},"content":"\nDue to the batteries included nature of the Ballerina language, there is no need to add any third-party libraries to implement the RESTful API. The Ballerina standard library itself is adequate. In this API, you will be writing a simple CRUD-like RESTful service.\n\nIn this tutorial, you will be creating a RESTful API with two endpoints. The sample is built around a set of COVID-19 data.\n\n## Set up the prerequisites\n\nTo complete this tutorial, you need:\n\n1. A command terminal\n2. A text editor\n    >**Tip:** Preferably, [Visual Studio Code](https://code.visualstudio.com/) with the [Ballerina extension](https://marketplace.visualstudio.com/items?itemName=WSO2.ballerina) installed.\n3. A [Ballerina installation](https://ballerina.io/learn/installing-ballerina/setting-up-ballerina/)\n\n## Design the two endpoints\n\nThe first endpoint is about getting data from the service as well as adding data to the service. Therefore, the service should handle both HTTP `GET` and `POST` requests.\n- The `GET` request is to get data, and the response should be `200 OK`.\n- The `POST` request is to add data, and the response should be `201 Created`.\n\nThe second endpoint is about getting data filtered from the service. The data is filtered by the ISO code. Therefore, the second service accepts the ISO code as part of the URL and responds with the `200 OK` status code. In the event of an error, the relevant error is sent back to the client.\n\nFollowing is the URL for each endpoint, respectively.\n\n1. /covid/status/countries\n2. /covid/status/countries/{iso_code}\n\n## Create a package for your code\n\nBallerina uses packages to group code. In this case, a package with the default module is created by executing the following command.\n\n```bash\n$ bal new covid19 -t service\n```\n\nThis creates a folder named `covid19` along with a sample code for service. Navigate to the `covid19` directory, and execute the following command to start VSCode.\n\n```bash\n$ code .\n```\n\n`Ballerina.toml` is the file that makes the folder a Ballerina package. It also contains a test directory to include tests for the service. However, for the sake of simplicity, it will be ignored in this tutorial. You can just go through the sample in the `service.bal` to get a look and feel about Ballerina services. However, since you will be doing it from scratch, you can delete the entire code or edit it if you wish.\n\n## Create the COVID-19 dataset\n\nTo keep things simple, an in-memory dataset is used with three entries. Ballerina tables are used to store data. Each entry in the table is represented by a Ballerina record. Following is the definition of the record and the declaration of the table.\n\n```ballerina\npublic type CovidEntry record {|\n    readonly string iso_code;\n    string country;\n    decimal cases;\n    decimal deaths;\n    decimal recovered;\n    decimal active;\n|};\n\npublic final table<CovidEntry> key(iso_code) covidTable = table [\n    {iso_code: \"AFG\", country: \"Afghanistan\", cases: 159303, deaths: 7386, recovered: 146084, active: 5833},\n    {iso_code: \"SL\", country: \"Sri Lanka\", cases: 598536, deaths: 15243, recovered: 568637, active: 14656},\n    {iso_code: \"US\", country: \"USA\", cases: 69808350, deaths: 880976, recovered: 43892277, active: 25035097}\n];\n```\n\n## Write a resource to get all the COVID-19 data\n\nAs mentioned earlier, the first endpoint has two parts: getting data as well as adding data. In this section, the focus is on getting data.\n\nBallerina resources can only be inside a service. Therefore, first, a service needs to be created. If you have noticed, both endpoints have a common URL segment. When creating the service, the common URL segment can be moved to the service level as the base path.\n\nEach service is associated with an `http:Listener`, it is the Ballerina abstraction that deals with network-level details such as host, port, SSL, etc.\n\n```ballerina\nservice /covid/status on new http:Listener(9000) {\n}\n```\n\nAdding the first endpoint to the service.\n\n```ballerina\nservice /covid/status on new http:Listener(9000){\n\tresource function get countries() returns CovidEntry[] {\n        return covidTable.toArray();\n    }\n}\n```\n\nUnlike normal functions, resource functions can have accessors. In this case, the accessor is set to `get`, which means only HTTP `GET` requests could hit this resource.\n\nBallerina automatically serializes Ballerina records as JSON and sends them over the wire. The default status code HTTP responses are `200 OK`.\n\n## Write a resource to add COVID-19 data by ISO code\n\nThe second part of the first endpoint is about adding or appending new data to the dataset. Following is the second resource associated with the first endpoint.\n\n```ballerina\nresource function post countries(@http:Payload CovidEntry[] covidEntries)\n                                    returns CreatedCovidEntries|ConflictingIsoCodesError {\n\n    string[] conflictingISOs = from CovidEntry covidEntry in covidEntries\n        where covidTable.hasKey(covidEntry.iso_code)\n        select covidEntry.iso_code;\n\n    if conflictingISOs.length() > 0 {\n        return <ConflictingIsoCodesError>{\n            body: {\n                errmsg: string:'join(\" \", \"Conflicting ISO Codes:\", ...conflictingISOs)\n            }\n        };\n    } else {\n        covidEntries.forEach(covdiEntry => covidTable.add(covdiEntry));\n        return <CreatedCovidEntries>{body: covidEntries};\n    }\n}\n```\n> **Note**: To keep things simple, in this case, it was chosen to either accept the entire payload or send back an error.\n\nCopying this straightway results in an error, which is expected as the `CreatedCovidEntries` and `ConflictingIsoCodesError` types are not defined yet.\n\nThis resource is a bit more interesting than the second resource. To begin with, there is a resource argument named `covidEntries` annotated with `@http:Payload`. This means the resource is expecting a payload with type `CovideEntry[]`.\n\nFinally, as the return values, there are two types of records `CreatedCovidEntries` and `ConflictingIsoCodesError`. Following is the definition of `CreatedCovidEntries`.\n\n```ballerina\npublic type CreatedCovidEntries record {|\n   *http:Created;\n   CovidEntry[] body;\n|};\n```\n\nAs you can see, there is something new here. `*http:Created` is the Ballerina way of saying one type is a subtype of another. In this case, `CreatedCovidEntries` is a subtype of `*http:Created`. Ballerina has defined a set of types for each HTTP status code. This allows you to write services in a type-oriented way, which in turn is helpful when it comes to tooling and generating OpenAPI specifications for HTTP services. Returning this record results in an HTTP `201` response with a JSON payload. The body of the response is of type `CovidEntry[]`.\n\nSimilarly, the following is the definition of `ConflictingIsoCodesError`.\n\n```ballerina\npublic type ConflictingIsoCodesError record {|\n   *http:Conflict;\n   ErrorMsg body;\n|};\n\npublic type ErrorMsg record {|\n   string errmsg;\n|};\n```\n\nThe body of the response is of type `ErrorMsg`, which simply has a string field named `errmsg`. Based on the need, users can have any data type for their response body.\n\n## Write a resource to get filtered COVID-19 data by ISO code\n\nThis resource is a bit more different than the first two resources. As explained earlier, resource functions have accessors. In addition, it also supports hierarchical paths making it ideal for implementing RESTful APIs. Hierarchical paths can have path params. In this case, `iso_code` is used as the path param, which in turn, becomes a string variable.\n\n```ballerina\nresource function get countries/[string iso_code]() returns CovidEntry|InvalidIsoCodeError {\n    CovidEntry? covidEntry = covidTable[iso_code];\n    if covidEntry is () {\n        return {\n            body: {\n                errmsg: string `Invalid ISO Code: ${iso_code}`\n            }\n        };\n    }\n    return covidEntry;\n}\n```\n\nAs in the previous example, this resource also includes its own return types. However, the basic principle behind them is as the previous example. The following is the type definition of the `InvalidIsoCodeError`.\n\n```ballerina\npublic type InvalidIsoCodeError record {|\n    *http:NotFound;\n    ErrorMsg body;\n|};\n```\n## The complete code\n\nIt is always a good practice to document your interfaces. However, this example has omitted documentation for brevity. Nevertheless, any production-ready API interface must include API documentation.\n\nYou can run the service by executing the following command inside the `covid19` folder.\n\n```bash\n$ bal run\n```\n\n> **Note**: The console should have warning logs related to the isolatedness of resources. It is a built-in service concurrency safety feature of Ballerina.\n\nIn another terminal, execute the following `curl` commands to try out the service.\n\n```bash\n$ curl http://localhost:9000/covid/status/countries\n\n[{\"iso_code\":\"AFG\", \"country\":\"Afghanistan\", \"cases\":159303, \"deaths\":7386, \"recovered\":146084, \"active\":5833}, {\"iso_code\":\"SL\", \"country\":\"Sri Lanka\", \"cases\":598536, \"deaths\":15243, \"recovered\":568637, \"active\":14656}, {\"iso_code\":\"US\", \"country\":\"USA\", \"cases\":69808350, \"deaths\":880976, \"recovered\":43892277, \"active\":25035097}]\n\n$ curl http://localhost:9000/covid/status/countries/AFG\n\n{\"iso_code\":\"AFG\", \"country\":\"Afghanistan\", \"cases\":159303, \"deaths\":7386, \"recovered\":146084, \"active\":5833}\n\n$ curl http://localhost:9000/covid/status/countries -d '[{\"iso_code\":\"DEU\", \"country\":\"Germany\", \"cases\":159333, \"deaths\":7390, \"recovered\":126084, \"active\":6833}]'\n\n[{\"iso_code\":\"DEU\", \"country\":\"Germany\", \"cases\":159333.0, \"deaths\":7390.0, \"recovered\":126084.0, \"active\":6833.0}]\n```\n\nYou can also try generating an OpenAPI specification for the written service by executing the following command, which creates a `yaml` file in the current folder.\n\n```bash\n$ bal openapi -i service.bal\n```\nThe following is the complete code.\n```ballerina\nimport ballerina/http;\n\nservice /covid/status on new http:Listener(9000) {\n\n    resource function get countries() returns CovidEntry[] {\n        return covidTable.toArray();\n    }\n\n    resource function post countries(@http:Payload CovidEntry[] covidEntries)\n                                    returns CreatedCovidEntries|ConflictingIsoCodesError {\n\n        string[] conflictingISOs = from CovidEntry covidEntry in covidEntries\n            where covidTable.hasKey(covidEntry.iso_code)\n            select covidEntry.iso_code;\n\n        if conflictingISOs.length() > 0 {\n            return <ConflictingIsoCodesError>{\n                body: {\n                    errmsg: string:'join(\" \", \"Conflicting ISO Codes:\", ...conflictingISOs)\n                }\n            };\n        } else {\n            covidEntries.forEach(covdiEntry => covidTable.add(covdiEntry));\n            return <CreatedCovidEntries>{body: covidEntries};\n        }\n    }\n\n    resource function get countries/[string iso_code]() returns CovidEntry|InvalidIsoCodeError {\n        CovidEntry? covidEntry = covidTable[iso_code];\n        if covidEntry is () {\n            return {\n                body: {\n                    errmsg: string `Invalid ISO Code: ${iso_code}`\n                }\n            };\n        }\n        return covidEntry;\n    }\n}\n\npublic type CovidEntry record {|\n    readonly string iso_code;\n    string country;\n    decimal cases;\n    decimal deaths;\n    decimal recovered;\n    decimal active;\n|};\n\npublic final table<CovidEntry> key(iso_code) covidTable = table [\n    {iso_code: \"AFG\", country: \"Afghanistan\", cases: 159303, deaths: 7386, recovered: 146084, active: 5833},\n    {iso_code: \"SL\", country: \"Sri Lanka\", cases: 598536, deaths: 15243, recovered: 568637, active: 14656},\n    {iso_code: \"US\", country: \"USA\", cases: 69808350, deaths: 880976, recovered: 43892277, active: 25035097}\n];\n\npublic type CreatedCovidEntries record {|\n    *http:Created;\n    CovidEntry[] body;\n|};\n\npublic type ConflictingIsoCodesError record {|\n    *http:Conflict;\n    ErrorMsg body;\n|};\n\npublic type InvalidIsoCodeError record {|\n    *http:NotFound;\n    ErrorMsg body;\n|};\n\npublic type ErrorMsg record {|\n    string errmsg;\n|};\n```\n","id":"write-a-restful-api-with-ballerina"},"__N_SSG":true}