{"pageProps":{"frontmatter":{},"content":"<div class=\"release_notes\">\n<h1>Overview of jBallerina 1.2.0</h1>\n<p>jBallerina 1.2.0 is the first major release of 2020 and it includes a new set of features and significant improvements to the compiler, runtime, standard library, and developer tooling. It is based on the 2020R1 version of the Language Specification.</p>\n<h1>Highlights</h1>\n<ul>\n<li>Redesigned XML, Stream and Query support</li>\n<li>Based on a stable language specification: 2020R1</li>\n<li>Significant reduction in overall compilation time</li>\n<li>Added cookies and trailer support in HTTP</li>\n<li>Revamped Cache module</li>\n<li>Redesigned oneof field and map field support in gRPC and added client retry support for gRPC blocking unary calls</li>\n<li>Added custom serializer/deserializer and Avro support in the Kafka connector </li>\n<li>Introduced new Database connectors</li>\n<li>Introduced new client connectors (email, Slack, and Azure time-series)</li>\n<li>Support to mock functions when writing tests</li>\n<li>Test and code coverage report</li>\n<li>New tool to generate Ballerina bindings for Java APIs</li>\n<li>Several critical bug fixes</li>\n</ul>\n<h1>What&rsquo;s new in jBallerina 1.2.0?</h1>\n<h2>Language</h2>\n<p>The language implementation is based on the stable language specification version 2020R1. This implementation introduces a new set of features aimed at making integration further easier for the user. In addition to that, the XML and Lock implementations are out of their preview/experimental status.</p>\n<p>In addition to new features, this release also includes critical bug fixes and fixes done to align the implementation with the language specification. Some of these changes are backward incompatible. For a complete list of changes done since 1.1.0, see the <code>Language changes since jBallerina 1.1.0</code> section.</p>\n<h3>New XML design</h3>\n<p>This release introduces a revamped XML support along with XPath-like query syntax allowing easy and safe manipulation of XML data. </p>\n<h4>XML navigation expression</h4>\n<p>XML step expressions allow to query the children of an XML element or children of members of an XML sequence.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">xml x = xml `&lt;root&gt;\n                 &lt;person&gt;\n                     &lt;name&gt;\n                         &lt;fname&gt;William&lt;/fname&gt;\n                         &lt;lname&gt;Martin&lt;/lname&gt;\n                     &lt;/name&gt;\n                 &lt;/person&gt;\n                 &lt;person&gt;\n                     &lt;name&gt;\n                         &lt;fname&gt;David&lt;/fname&gt;\n                         &lt;lname&gt;Taylor&lt;/lname&gt;\n                     &lt;/name&gt;\n                 &lt;/person&gt;\n                 &lt;person&gt;\n                     &lt;name&gt;\n                         &lt;fname&gt;Daniel&lt;/fname&gt;\n                         &lt;lname&gt;Wilson&lt;/lname&gt;\n                     &lt;/name&gt;\n                 &lt;/person&gt;\n             &lt;/root&gt;`;\n\n// Select all children items, which are XML elements.\nxml allElementChildren = x/&lt;*&gt;;\n\n// Match first-level children with element name `person`.\n// Then, match the second level with element name `name`\n// and the third level with element name `fname`.\nxml fnameItems = x/&lt;person&gt;/&lt;name&gt;/&lt;fname&gt;;\n\n// Select all descendants, which match element name `fname`.\nxml fnameDescendents = x/**/&lt;fname&gt;;\n\n// Select all children items of `x`.\nxml allChildren = x/*;\n</code></pre>\n\n<p>XML filter expression allows filtering an XML sequence by an element name.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">xml x = xml `&lt;root&gt;\n                &lt;rectangle length=&quot;5&quot; width=&quot;10&quot;/&gt;\n                &lt;rectangle length=&quot;5&quot; width=&quot;5&quot;/&gt;\n                &lt;circle radius=&quot;2&quot;/&gt;\n                &lt;square side=&quot;6&quot;/&gt;\n            &lt;/root&gt;`;\n\nxml rectangles = x/*.&lt;rectangle&gt;;\n</code></pre>\n\n<h4>XML attribute access</h4>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">xmlns &quot;www.ballerina.io/ns&quot; as ns;\nxml val = xml `&lt;element type=&quot;fixed&quot; ns:count=&quot;2&gt;&lt;/element&gt;`;\nstring|error 'type = val.'type;\nstring|error count = val.ns:count;\n</code></pre>\n\n<p>XML attribute access is now lax typed. This means that compile-time type checking is relaxed and moved to runtime. Accessing a non-existent attribute or using field access expression on a non-XML element item will result in an error being returned. If optional field access syntax is used, then nil will be returned instead of an error when the field is not available. Attributes with namespace prefix are accessed using the <code>value.prefix:attrName</code> syntax where the XML prefix must be declared in the scope.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">xml val = xml `&lt;element type=&quot;fixed&quot;&gt;&lt;/element&gt;`;\nstring|error nonEx = val.nonExsistent; // result in error\nstring|error? nonExOptional = val?.nonExsistent; // result in nil\n</code></pre>\n\n<h3>New language-integrated query design</h3>\n<h4>Query expression</h4>\n<p>A query expression provides a language-integrated query feature using SQL-like syntax. </p>\n<p>In its most basic form, a query expression consists of four kinds of clauses: <code>from</code>, <code>let</code>, <code>where</code>, and <code>select</code>. The first clause must be a <code>from</code> clause and the last clause must be a <code>select</code> clause. The result of the query expression is a list. In this basic form, a query expression is just a list comprehension.</p>\n<p>The <code>from</code> clause works similarly to a foreach statement. It creates an iterator from an iterable value and then binds variables to each value returned by the iterator. The <code>where</code> clause is a <code>boolean</code> expression, which can refer to variables bound by the <code>from</code> clause; when the <code>where</code> expression evaluates to <code>false</code>, the iteration skips following clauses. The <code>let</code> clause binds variables. The <code>select</code> clause is evaluated for each iteration; the result of the query expression is a list whose members are the result of the <code>select</code> clause. </p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">Person[] outputPersonList =\n       from var person in personList\n       let string depName = &quot;WSO2&quot;, string replaceName = &quot;Alexander&quot;\n       where person.deptAccess == &quot;A&quot; &amp;&amp; person.firstName == &quot;Alex&quot;\n       select {\n              firstName: replaceName,\n              lastName: person.lastName,\n              deptAccess: depName\n       };\n</code></pre>\n\n<p>As of now, query expressions are supported by lists and streams.</p>\n<h4>Query action</h4>\n<p>The clauses in the query pipeline of a query action are executed in the same way as the clauses in the query pipeline of a query expression. The query action is executed as follows. For each input frame <code>f</code> emitted by the query pipeline, execute the block-statement with <code>f</code> in the scope.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">    error? result = from var student in studentList\n                    where student.score &gt; 1.0\n                    do {\n                        FullName fullName = {\n                            firstName: student.firstName, \n                            lastName: student.lastName\n                        };\n                        nameList.push(fullName);\n                    };\n</code></pre>\n\n<h3>New streams design</h3>\n<p>A stream is an object-like value that can generate a sequence of values. There is also a value associated with the completion of the generation of the sequence, which is either nil, indication of the generation of the sequence being completed successfully, or an error.</p>\n<p>A stream supports two primitive operations: a next operation and a close operation. The next operation has the same semantics as the next method on the <code>Iterator</code> abstract object type. The close operation informs the stream that there will be no more next operations and thus allows the stream to release resources used by the stream.</p>\n<p>A stream is iterable. A stream of type <code>stream&lt;T, C&gt;</code> has value type <code>T</code> and completion type <code>C</code>. Calling the next method on the iterator created for an iteration has the same effect as performing the next operation on the stream. The stream does not keep a copy of the sequence of values returned by the next operation. Any subsequent iteration operation on the same stream will not generate further values so the iteration sequence for iterations other than the first will be the empty sequence. </p>\n<p>The stream type provides methods (more precisely functions in the <code>lang.stream</code> library) similar to list:\n- map\n- foreach\n- filter\n- reduce\n- iterator</p>\n<p>The <code>map()</code> and <code>filter()</code> methods return streams and work lazily. Iterable basic types would have a <code>toStream()</code> method to convert to a stream; these should handle mutation similarly to iterators; as of now, it supports only for arrays.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">stream&lt;Person, error&gt; personStream = getPersonStream();\nstream&lt;Person, error&gt; filteredPersonStream = personStream.filter(function (Person person) returns boolean {\n   return person.age &gt; 100 &amp;&amp; person.name != &quot;James&quot;;\n});\n</code></pre>\n\n<h3>Expression-bodied functions</h3>\n<p>This release introduces expression-bodied functions whose body is a single expression. The expression function body takes the form <code>=&gt; E;</code>, where <code>E</code> is any expression. It is equivalent to the block function body, <code>{ return E; }</code>. The following is an example where a <code>Person</code> record is mapped to an <code>Employee</code> record using an expression-bodied function.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">function toEmployee(Person p, string pos) returns Employee =&gt; {\n    name: p.fname + &quot; &quot; + p.lname,\n    designation: pos\n};\n</code></pre>\n\n<h3>Let expressions</h3>\n<p>This release introduces let expression. It takes the form <code>let T B = E1 in E2</code>, where <code>E1</code> is evaluated resulting in a value <code>v</code>. The typed binding pattern <code>T B</code> is matched to <code>v</code>, causing assignments to the variables occurring in <code>B</code>. Then <code>E2</code> is evaluated with those variables in scope; the resulting value is the result of the let expression.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">const int globalVar = 2;\npublic function main() {\n    int b = let int x = 4, int y = 3 in x * y * globalVar; // b = 4 * 3 * 2 = 24\n}\n</code></pre>\n\n<h3>Improved mapping constructor syntax</h3>\n<h4>Spread operator</h4>\n<p>A mapping constructor expression can now have a spread field. A spread field can be used with another mapping value <code>V</code> to include all of the fields in <code>V</code> when creating the new mapping value.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Foo record {|\n    string s;\n    decimal d;\n|};\n\ntype Bar record {|\n    string s;\n    int i;\n    decimal...;\n|};\n\npublic function main() {\n    Foo f = {s: &quot;test str&quot;, d: 1.0};\n\n    // Spread field `...f` spreads the fields of `f` \n    // when creating the `Bar` value `b`. The required \n    // field `s` is provided via `f`. \n    // `b` will contain 3 fields; `s`, `i`, and `d`.\n    Bar b = {i: 1, ...f};\n}\n</code></pre>\n\n<h4>Variable names as fields of mapping constructors</h4>\n<p>A mapping constructor expression can also contain just a variable name (<code>foo</code>) as a field. This is equivalent to the key-value pair field <code>foo: foo</code>. The name of the variable is considered the key while the variable reference is considered the expression.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Employee record {|\n    string name;\n    string department;\n|};\n\npublic function main() {\n    string department = &quot;Finance&quot;;\n\n    // The variable-name `department` is \n    // used as a field here.\n    Employee e = {name: &quot;Jo&quot;, department};\n}\n</code></pre>\n\n<h3>Improvements to metadata</h3>\n<h4>Deprecation syntax</h4>\n<p>You can now mark type definitions, functions, object methods, and constants as deprecated using the <code>@deprecated</code> annotation. The compiler will generate warnings if a you use a deprecated construct. If the deprecated construct contains documentation, you need to add some additional bit of documentation called <code>Deprecated</code> documentation. The <code>Deprecated</code> documentation should ideally include details on why the construct was deprecated and suitable alternate options, which should be used instead.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\"># Creates and returns a `Baz` object.\n#\n# # Deprecated\n# This function is deprecated due to undesired side effects since it relies on module level\n# variables. Use the new and improved `newFoo()` function instead.\n@deprecated\npublic function foo() returns Baz {\n    // some logic which has side effects\n}\n</code></pre>\n\n<h4>Metadata on record and object fields</h4>\n<p>Metadata (documentation and annotations) are now allowed on record and object fields.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">// An annotation allowed on record fields.\nannotation foo on record field;\n\n// An annotation allowed on object fields.\nannotation bar on object field;\n\n// An annotation allowed on record and object fields.\nannotation baz on field;\n\n# Docs for this record.\npublic type Rec record {\n\n    # Docs for this field.\n    @foo\n    @baz\n    string s;\n};\n\n# Docs for this object.\npublic type Obj object {\n\n    # Docs for this field.\n    @bar\n    @baz\n    int i = 0;\n};\n</code></pre>\n\n<h3>Lang Library</h3>\n<h4>Builtin sub types of basic types</h4>\n<p>Lang Library modules provide a new set of built-in types. Each such built-in type that is a sub type of a basic type <code>B</code> is provided by the <code>lang.B</code> module. The following are the built-in types provided by the lang library modules.</p>\n<ul>\n<li>\n<p>Module <code>ballerina/lang.int</code></p>\n<ul>\n<li><code>Unsigned8</code></li>\n<li><code>Signed8</code></li>\n<li><code>Unsigned16</code></li>\n<li><code>Signed16</code></li>\n<li><code>Unsigned32</code></li>\n<li><code>Signed32</code></li>\n</ul>\n</li>\n<li>\n<p>Module <code>ballerina/lang.string</code></p>\n<ul>\n<li><code>Char</code></li>\n</ul>\n</li>\n<li>\n<p>Module <code>ballerina/lang.xml</code></p>\n<ul>\n<li><code>Element</code></li>\n<li><code>ProcessingInstruction</code></li>\n<li><code>Comment</code></li>\n<li><code>Text</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/lang.'int;\nimport ballerina/lang.'string;  \n\npublic function main() {\n    'int:Unsigned8 number = 200;\n    'string:Char char = &quot;A&quot;;\n}\n</code></pre>\n\n<h4>Redesigned <code>lang.xml</code> module</h4>\n<p>The XML lang module has been revamped to work with the <code>Element</code>, <code>Comment</code>, <code>ProcessingInstructions</code> and <code>Text</code> XML built-in types.  Previously, functions such as <code>getChildren()</code> and <code>getElementName()</code>, which are specific to an XML element type were allowed to be called on the <code>xml</code> type and if they were called on non-element items, it used to result in runtime errors. With <code>xml</code> built-in sub type improvements, these functions are statically type checked and only allowed on the built-in sub type <code>Element</code>. The same applies to other built-in sub types and functions.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/lang.'xml as xmllib;\n\npublic function main() {\n     xmllib:Element element = &lt;xmllib:Element&gt; xml `&lt;elem&gt; hello &lt;/elem&gt;`;\n     xml children = element.getChildren();\n}\n</code></pre>\n\n<p>The functions <code>isElement()</code>, <code>isProcessingInstruction()</code>, <code>isComment()</code> and <code>isText()</code> have been removed. The same functionality can be achieved using type testing as follows.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/lang.'xml;\npublic function main() {\n    xml cmnt = xml `&lt;!-- hello from comment --&gt;`;\n    boolean isComment = cmnt is 'xml:Comment;\n}\n</code></pre>\n\n<p>The functions <code>appendChildren()</code> and <code>removeChildren()</code> have been removed.</p>\n<h4>The <code>lang.boolean</code> module</h4>\n<p>The newly-added lang library module for the <code>boolean</code> basic type contains a function for parsing <code>string</code> values to <code>boolean</code> values. It accepts <code>”true”</code> or <code>”false”</code> in any combination of lower/upper case as well as <code>”1”</code> and <code>”0”</code>, which evaluates to <code>true</code> and <code>false</code> respectively. An error is returned for any other <code>string</code> value.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/lang.'boolean;\n\npublic function main() {\n    boolean|error b = 'boolean:fromString(&quot;true&quot;);\n}\n</code></pre>\n\n<h4>Enhanced <code>lang.int</code>, <code>lang.string</code>, <code>lang.array</code>, and <code>lang.map</code> modules</h4>\n<p>The above-mentioned lang library modules have been enhanced by adding new API elements (e.g., constants and functions). </p>\n<ul>\n<li><code>lang.int</code> module - Constants added: for max/min values of the <code>int</code> type </li>\n<li><code>lang.string</code> module - New functions added: <code>lastIndexOf()</code>, <code>equalsIgnoreCaseAscii()</code>, <code>toCodePointInt()</code>, <code>fromCodePointInt()</code></li>\n<li><code>lang.array</code> module - New functions added: <code>lastIndexOf()</code>, <code>toStream()</code></li>\n<li><code>lang.map</code> module - New functions added: <code>toArray()</code>, <code>removeIfHasKey()</code></li>\n</ul>\n<h3>Backward incompatible improvements and bug fixes</h3>\n<ul>\n<li>Listener variables are now final.</li>\n<li>The syntax for Unicode escapes in strings has changed from <code>\\u[CodePoint]</code> to <code>\\u{CodePoint}</code> so as to align with ECMAScript. Although this is an incompatible change, the previous syntax was not implemented.</li>\n<li>The semantics of the <code>lock</code> statement has been changed. Now, it acquires a single, program-wide, recursive mutex before executing a lock statement and releases the mutex after completing the execution of the lock statement.</li>\n<li>When a list constructor or a mapping constructor is used without a contextually-expected type, now a tuple or a record type is inferred rather than an array or a map type.</li>\n<li>The <code>x@</code> syntax  for accessing the attributes of an XML element has been removed.</li>\n<li>Now, member value assignment for a dynamic list adds filler values if the required members are not already filled and the relevant member type has a filler value.</li>\n<li>Functions with the same name were previously allowed in both the module and the module&rsquo;s tests. This is now disallowed and results in a compilation error.</li>\n<li>Now, out of range index access of <code>xml</code> sequences result in empty sequences rather than a panic. Using the <code>xml:get()</code> langlib method with an out of range index results in a panic.</li>\n</ul>\n<h2>Runtime</h2>\n<h3>Compilation time improvement</h3>\n<p>The compiler backend, which generates the Java bytecode for Ballerina programs was rewritten to reduce the time taken for Java bytecode generation. This resulted in a significant reduction in overall compilation time.</p>\n<h3>The <code>@strand</code> annotation</h3>\n<p>As per the Ballerina language specification, new strands should belong to the same thread as the currently executing strand. Strands, which belong to the same thread share the following characteristics. </p>\n<ul>\n<li>Only one strand can run simultaneously.</li>\n<li>The currently-running strand should yield to switch its thread to execute another strand.</li>\n<li>Strands belonging to a particular thread are cooperatively multitasked.</li>\n<li>All the strands created in a particular execution of a Ballerina program will be executed sequentially by a single thread. </li>\n</ul>\n<p>In some situations, it would be desirable to assign strands to different threads. You can change this behavior with an annotation but such an annotation was not available in Ballerina releases prior to 1.2.0. This has been a major spec deviation. </p>\n<p>A major revamp of our strand scheduler was done in this release to address the spec deviation. </p>\n<h2>Standard Library</h2>\n<h3>Enhanced HTTP module</h3>\n<h4>Cookie support</h4>\n<p>A new cookie API has been introduced for easily handling HTTP cookies. It provides the following features:\n- Enable the server to read cookies from the request and write cookies to the response (in &ldquo;Set-Cookie&rdquo; header).\n- Enable configuring the client to enable/disable cookies, enable/disable persistent cookies, and whether to block/unblock third-party cookies.\n- Add persistent cookies support and add support to plug custom persistent storages.  </p>\n<h4>Trailer support</h4>\n<p>Add support to create, read, update, and delete trailing headers in the response message. All existing header functions are changed to accept a finite-typed variable. The default value is set as <code>leading</code>, which means by default, those functions apply to leading headers. In order to apply trailer headers, you need to set the position as trailing as shown below.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">string trailerHeader = response.getHeader(&quot;foo&quot;, position = &quot;trailing&quot;);\n</code></pre>\n\n<h4>Other changes</h4>\n<ul>\n<li>In the previous versions, HTTP caching was enabled by default in the HTTP client. With 1.2.0, HTTP caching is now disabled by default.</li>\n</ul>\n<h3>Revamped Cache module</h3>\n<ul>\n<li>Introduced the Cache API v2.0.0, which introduces a <code>AbstractCache</code> object, which can be used to implement custom caches and the <code>AbstractEvictionPolicy</code> object, which can be used to implement custom eviction algorithms. By default, this provides a <code>Cache</code> object and <code>LruEvictionPolicy</code> object, which is an implementation of the LRU eviction algorithm.</li>\n<li>Prevented concurrent modifications and improved the runtime complexity to gain a better performance improvement compared to v1.0.0.</li>\n</ul>\n<h3>Enhanced gRPC module</h3>\n<h4>Redesigned <code>Oneof</code> field support</h4>\n<p>The <code>Oneof</code> fields in the protobuf definition are now mapped to optional fields in Ballerina. When you generate the code, the Ballerina record is generated with a new setter function for each field to restrict you from setting more than one of those fields and a valid function. </p>\n<p>For example,</p>\n<pre class=\"language-plaintext line-numbers basic\"><code class=\"language-plaintext\">message Person {\n  oneof identity {\n     string passportId = 1;\n     string nic = 2;\n  }\n}\n</code></pre>\n\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">public type Person record {|\n   string passportId?;\n   string nic?;\n|};\n\nfunction isValidPerson(Person a) returns boolean {\n   ...\n}\n\nfunction setPerson_PassportId(Person a, string passportId) {\n   ...\n}\n\nfunction setPerson_Nic(Person a, string nic) {\n   ...\n}\n</code></pre>\n\n<blockquote>\n<p><strong>Note:</strong> The previous <code>Oneof</code> design will not work from this release. If you are currently using it, you need to regenerate the code from the proto definition and change your code accordingly. </p>\n</blockquote>\n<h4>Redesigned Map field support</h4>\n<p>The map fields in the protobuf definition are now mapped to nested records in Ballerina.</p>\n<p>For example,</p>\n<pre class=\"language-plaintext line-numbers basic\"><code class=\"language-plaintext\">message HelloRequest {\n    map&lt;int32, string&gt; tags = 4;\n}\n</code></pre>\n\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">public type HelloRequest record {|\n    record {| int key; string value; |}[] tags = [];\n|};\n</code></pre>\n\n<h4>Added client retry support for unary blocking calls</h4>\n<p>Client retry is only supported in unary blocking calls. This will be supported in other messaging patterns in the future. \nRetry functionality can be enabled using the following retry configuration.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">grpc:ClientConfiguration clientConfiguration = {\n   retryConfiguration: {\n       retryCount: 5,\n       intervalInMillis: 2000,\n       maxIntervalInMillis: 10000,\n       backoffFactor: 2,\n       errorTypes: [grpc:INTERNAL_ERROR, grpc:UNAVAILABLE_ERROR]\n   }\n};\n</code></pre>\n\n<h4>Other improvements</h4>\n<ul>\n<li>Added Gzip compression support</li>\n<li>Improved the gRPC command to only create essentials in client and service modes</li>\n<li>The <code>name</code> field in the <code>ServiceConfig</code> annotation is now used to set the Service name. This is to support dynamic service registration.</li>\n</ul>\n<h3>Enhanced Kafka module</h3>\n<p>Ballerina Kafka is redesigned and version 2.0.0 is released. This has breaking changes hence older code may not work.</p>\n<h4>Breaking changes</h4>\n<ul>\n<li><code>kafka:ConsumerConfig</code> and <code>kafka:ProducerConfig</code> records are renamed to <code>kafka:ConsumerConfiguration</code> and <code>kafka:ProducerConfiguration</code> respectively to comply with the Ballerina naming conventions.</li>\n<li><code>send()</code> function of the <code>kafka:Producer</code> now accepts <code>anydata?</code> as the <code>key</code> and <code>anydata</code> as the <code>value</code> types as opposed to the existing <code>byte[]?</code> and <code>byte[]</code> respectively.</li>\n<li><code>bootstrapServers</code> configuration is now a required parameter for both the <code>kafka:ConsumerConfiguration</code> and <code>kafka:ProducerConfiguration</code> records.</li>\n</ul>\n<h4>Custom Serializer/Deserializer support</h4>\n<p>The Kafka module now supports a set of serializers and deserializers in contrast to the existing <code>byte[]</code> data. The introduced serializers / deserializers are:</p>\n<ul>\n<li><code>byte[]</code></li>\n<li><code>string</code></li>\n<li><code>int</code></li>\n<li><code>float</code></li>\n<li><code>avro</code></li>\n<li><code>custom</code></li>\n</ul>\n<h4>Avro Serializer/Deserializer</h4>\n<p>The Kafka module now supports Avro serialization/deserialization. This only supports Kafka values yet. Key serialization support will be added later. For more information, go to <a href=\"https://ballerina.io/v1-2/learn/api-docs/ballerina/\">The Standard Library</a>.</p>\n<h3>Enhanced Task module</h3>\n<p>The Ballerina Task module is enhanced with multiple attachment support.</p>\n<h4>Breaking changes</h4>\n<p>Named arguments for task attachments will not work now. For example, the following code will no longer compile.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">    task:Scheduler timer = new({ intervalInMillis: 1000 });\n    Person person = { name: &quot;Sam&quot;, age: 29 };\n    var attachResult = timer.attach(TimerService, attachment = p); \n</code></pre>\n\n<p>To make it work, change it as follows.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">    task:Scheduler timer = new({ intervalInMillis: 1000 });\n    Person person = { name: &quot;Sam&quot;, age: 29 };\n    var attachResult = timer.attach(TimerService, person);\n</code></pre>\n\n<h4>Multiple attachment support</h4>\n<p>Now, you can pass any number of attachments to the <code>attach()</code> function. For example,</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">    task:Scheduler timer = new({ intervalInMillis: 1000 });\n    Person person = { name: &quot;Sam&quot;, age: 29 };\n    Account account = { number: 188008, balance: 1233.02 };\n    var attachResult = timer.attach(TimerService, person, account);\n</code></pre>\n\n<h3>Deprecated JDBC Module</h3>\n<p>A new experimental JDBC2 module is introduced in the Ballerina 1.2 release and it will be fully supported by the 1.3 release. The existing JDBC module will be removed later in the 1.3 release.</p>\n<h3>Added observability support</h3>\n<p>Now, Publishers and Subscribers of all messaging connectors(Kafka, RabbitMQ, and JMS) support observability.</p>\n<h3>Organization name changes of connectors</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>Connector/Module</strong></th>\n<th align=\"center\"><strong>Old Org</strong></th>\n<th align=\"center\"><strong>New Org</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">JIRA</td>\n<td align=\"center\">wso2/jira7</td>\n<td align=\"center\">ballerina/jira7</td>\n</tr>\n<tr>\n<td align=\"center\">GoogleSpreadSheet</td>\n<td align=\"center\">wso2/gsheets4</td>\n<td align=\"center\">ballerinax/googleapis.sheets4</td>\n</tr>\n<tr>\n<td align=\"center\">Twilio</td>\n<td align=\"center\">wso2/twilio</td>\n<td align=\"center\">ballerinax/twilio</td>\n</tr>\n<tr>\n<td align=\"center\">FTP</td>\n<td align=\"center\">wso2/ftp</td>\n<td align=\"center\">ballerina/ftp</td>\n</tr>\n<tr>\n<td align=\"center\">Redis</td>\n<td align=\"center\">wso2/redis</td>\n<td align=\"center\">ballerina/redis</td>\n</tr>\n<tr>\n<td align=\"center\">JMS</td>\n<td align=\"center\">wso2/jms</td>\n<td align=\"center\">ballerina/java.jms</td>\n</tr>\n<tr>\n<td align=\"center\">MongoDB</td>\n<td align=\"center\">wso2/mongodb</td>\n<td align=\"center\">ballerina/mongodb</td>\n</tr>\n<tr>\n<td align=\"center\">GitHub</td>\n<td align=\"center\">wso2/github4</td>\n<td align=\"center\">ballerinax/github4</td>\n</tr>\n<tr>\n<td align=\"center\">Salesforce</td>\n<td align=\"center\">wso2/sfdc46</td>\n<td align=\"center\">ballerinax/sfdc46</td>\n</tr>\n<tr>\n<td align=\"center\">SOAP</td>\n<td align=\"center\">wso2/soap</td>\n<td align=\"center\">ballerina/soap</td>\n</tr>\n<tr>\n<td align=\"center\">Gmail</td>\n<td align=\"center\">wso2/gmail</td>\n<td align=\"center\">ballerinax/googleapis.gmail</td>\n</tr>\n<tr>\n<td align=\"center\">AmazonSQS</td>\n<td align=\"center\">wso2/amazonsqs</td>\n<td align=\"center\">ballerinax/aws.sqs</td>\n</tr>\n<tr>\n<td align=\"center\">AmazonS3</td>\n<td align=\"center\">wso2/amazons3</td>\n<td align=\"center\">ballerinax/aws.s3</td>\n</tr>\n<tr>\n<td align=\"center\">Java</td>\n<td align=\"center\">ballerinax/java</td>\n<td align=\"center\">ballerina/java</td>\n</tr>\n<tr>\n<td align=\"center\">Java Arrays</td>\n<td align=\"center\">ballerinax/java.arrays</td>\n<td align=\"center\">ballerina/java.arrays</td>\n</tr>\n</tbody>\n</table>\n<h3>Added new connectors</h3>\n<p>The following connectors are newly added in this release. </p>\n<ul>\n<li>Slack client connector</li>\n<li>Azure time-series client connector</li>\n<li>Email client connector</li>\n<li>Preview of new database connectors<ul>\n<li>JDBC connector</li>\n<li>MySQL connector</li>\n</ul>\n</li>\n</ul>\n<h3>Revamped connectors</h3>\n<p>The following connectors are revamped in this release.</p>\n<ul>\n<li>Google sheets connector</li>\n<li>Salesforce connector</li>\n</ul>\n<h2>Deployment</h2>\n<h3>Docker Annotations</h3>\n<p>Support for setting environment variables to the Docker image.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">@docker:Config {\n    env:{\n        testVar1: &quot;value1&quot;,\n        testVar2: &quot;value2&quot;\n    }\n}\n</code></pre>\n\n<p>The default base image for the generated Docker images have changed to <code>ballerina/jre8:v1</code>. Also, now, Docker images can be generated for <code>main()</code> functions.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">@docker:Config {}\npublic function main() {\n    io:println(&quot;Hello, World!&quot;);\n}\n</code></pre>\n\n<p>Ability to generate Docker images by only adding the import as <code>import ballerina/docker as _</code>. This will generate the Docker images with minimum configurations for services, listeners, and main functions.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/docker as _;\n\nlistener http:Listener helloWorldEP = new(9090);\n\n@http:ServiceConfig {\n    basePath: &quot;/helloWorld&quot;\n}\nservice helloWorld on helloWorldEP {\n    resource function sayHello (http:Caller outboundEP, http:Request request) {\n        …\n        }\n}\n</code></pre>\n\n<h3>Kubernetes Annotations</h3>\n<ul>\n<li>Support for setting a port for Kubernetes NodePort Service types is provided.</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">@kubernetes:Service {\n    nodePort: 31100,\n    serviceType: &quot;NodePort&quot;\n}\n</code></pre>\n\n<ul>\n<li>Support for mounting the <code>ballerina.conf</code> file as a Kubernetes Secret is provided.</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">@kubernetes:Secret {\n    conf: &quot;./conf/ballerina.conf&quot;\n}\n</code></pre>\n\n<ul>\n<li>Support for enabling Rolling Updates for Kubernetes Deployments is provided.</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">@kubernetes:Deployment {\n    updateStrategy: {\n            strategyType: kubernetes:STRATEGY_ROLLING_UPDATE,\n            maxUnavailable: 3,\n            maxSurge: &quot;45%&quot;\n    }\n}\n</code></pre>\n\n<ul>\n<li>Ability to generate Kubernetes artifacts by only adding the import as <code>import ballerina/docker as _</code> is provided. This will generate the Kubernetes artifacts with minimum configurations for services, listeners, and main functions.</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/kubernetes as _;\n\nlistener http:Listener helloWorldEP = new(9090);\n\n@http:ServiceConfig {\n    basePath: &quot;/helloWorld&quot;\n}\nservice helloWorld on helloWorldEP {\n    resource function sayHello (http:Caller outboundEP, http:Request request) {\n        ...\n    }\n}\n</code></pre>\n\n<h3>Knative Annotations</h3>\n<p>A new <code>@knative:Service</code> annotation is introduced. It allows you to generate Knative Service artifacts for Knative.</p>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/knative;\n\n@knative:Service {}\n@http:ServiceConfig {\n    basePath: &quot;/helloWorld&quot;\n}\nservice helloWorld on new http:Listener(8080) {\n    resource function sayHello(http:Caller outboundEP, http:Request request) {\n        ...\n    }\n}\n</code></pre>\n\n<h2>Dev tools</h2>\n<h3>Ballerina Bindgen tool</h3>\n<p>A CLI tool for generating Ballerina bridge code for Java APIs.</p>\n<blockquote>\n<p><strong>Note:</strong> The bindgen tool is still experimental. </p>\n</blockquote>\n<p>This CLI tool could be used to generate Ballerina bridge code for Java APIs. Here, Ballerina objects and the relevant Java interoperability mappings for specified Java classes will be auto-generated with the aim of providing a seamless coding experience to call existing Java code from Ballerina. These Ballerina bindings could be generated for Java classes residing inside Java libraries (for which the classpaths needs to be provided) or for standard Java classes. </p>\n<p><strong>Command:</strong></p>\n<pre class=\"highlight line-numbers  language-bash\"><code class=\"  language-bash\">ballerina bindgen [(-cp|--classpath) &lt;classpath&gt;...]\n                  [(-o|--output) &lt;output&gt;]\n                  (&lt;class-name&gt;...)\n</code></pre>\n\n<p><strong>Options:</strong>\n1. <code>(-cp|--classpath) &lt;classpath&gt;...</code>: One or more comma-delimited classpaths for obtaining the JAR files required for generating the Ballerina bindings. This is not needed if the Ballerina bridge code is to be generated for standard Java classes.\n2. <code>(-o|--output) &lt;output&gt;</code>: Location for the generated Ballerina bridge code. If this path is not specified, the output will be written to the same directory from where the command is run.\n3, <code>&lt;class-name&gt;...</code>: One or more space-separated fully-qualified Java class names for which the bridge code is to be generated.</p>\n<h3>Testerina</h3>\n<h4>Function Mocking support</h4>\n<p>The Ballerina test framework provides the capability to mock a function. By using the mocking feature, you can easily mock a function in a module that you are testing or a function of an imported module. This feature will help you to test your Ballerina code independently from other modules and functions. Function mocking is only supported for project-based execution in v1.2.0.</p>\n<p>The function specified with the <code>@test:Mock {}</code> annotation will be considered as a mock function, which gets triggered every time the original function is called. The original function that will be mocked should be defined using the annotation parameters.</p>\n<h4>Test report</h4>\n<p>The <code>ballerina build</code> and <code>ballerina test</code> commands now generate an HTML report at the end of test execution. This would contain the total test cases executed, passes, failures, and skipped tests with project-level, module-level, and individual test details. The link to the test report can be found at the end of the test execution.</p>\n<h4>Code coverage</h4>\n<p>Introduced the <code>--code-coverage</code> flag for <code>ballerina build</code> and <code>ballerina test</code> commands. When the flag is provided, an additional section with code coverage details will be displayed in the test report. This would contain coverage details at project-level, module-level, and of individual files. </p>\n<blockquote>\n<p><strong>Note:</strong> This is only supported with project-based execution in v1.2.0.</p>\n</blockquote>\n<h2>IDE Plugins &amp; Language Server</h2>\n<h3>Go to Definition support for Standard Library content</h3>\n<p>You can go to <a href=\"https://ballerina.io/v1-2/learn/api-docs/ballerina/\">The Standard library</a> content such as functions, action invocations, types, etc. by executing the <code>Go to Definition</code> action.</p>\n<h3>New code actions</h3>\n<ul>\n<li>All imports are optimized</li>\n<li>Abstract functions are implemented</li>\n</ul>\n<h3>Dynamic configuration updates support</h3>\n<p>Now, you do not need to restart the IDE make the user configurations effective.</p>\n<h2>List of issues fixed for 1.2.0</h2>\n<p>A complete list of issues fixed for 1.2.0 can be found <a href=\"https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+milestone%3A%22Ballerina+1.2.0%22+is%3Aclosed\">here</a>.</p>\n</div>"},"__N_SSG":true}