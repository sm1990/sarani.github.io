{"pageProps":{"frontmatter":{"permalink":"/spec/lang/2019R1/","redirect_from":["/spec/lang/v2019R1/"]},"content":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>Ballerina Language Specification, 2019R1</title>\n  <meta charset=\"utf-8\" />\n  <link rel=\"shortcut icon\" href=\"/img/favicon.ico\">\n  <style type=\"text/css\">\n    body { font-family: sans-serif; line-height: 1.38;  }\n    pre.grammar code, code.grammar { background-color: #00FFFF; }\n    pre, code { font-family: Consolas, monospace; }\n    table { border: solid thin; border-collapse: collapse; }\n    td, th { border: solid thin; padding: 0.5em; }\n    p.status { font-size: large; font-weight: bold; }\n  </style>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i&amp;display=swap\">\n<link rel=\"stylesheet\" href=\"style/ballerina-language-specification.css\">\n<script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script><script src=\"style/ballerina-language-specification.js\"></script>\n</head>\n<body>\n<h1>Ballerina Language Specification, 2019R1</h1>\n<p>\nPrimary contributors:\n</p>\n<ul>\n<li>James Clark, <a href=\"mailto:jjc@jclark.com\">jjc@jclark.com</a></li>\n<li>Sanjiva Weerawarana, <a href=\"mailto:sanjiva@weerawarana.org\">sanjiva@weerawarana.org</a></li>\n<li>Sameera Jayasoma, <a href=\"mailto:sameera@wso2.com\">sameera@wso2.com</a></li>\n<li>Hasitha Aravinda, <a href=\"mailto:hasitha@wso2.com\">hasitha@wso2.com</a></li>\n</ul>\n<p>\n(Other contributors are listed in <a href=\"#contributors\">Appendix C</a>.)\n</p>\n<p>\nCopyright Â© 2018, 2019 <a href=\"https://wso2.com/\">WSO2</a>\n</p>\n<p>\nLicensed under the <a\nhref=\"https://creativecommons.org/licenses/by-nd/4.0/\">Creative Commons\nAttribution-NoDerivatives 4.0 International</a> license\n</p>\n<p class=\"status\">\nLanguage and document status\n</p>\n<p>\nThe design of the Ballerina language is approaching stability.\n</p>\n<p>\nSome language features described by this specification are less stable than the\nrest of the language. These are marked with either as having either \"preview\" or\n\"experimental\" status. Preview status means that we expect the final design to\nbe close enough to the current design that it will be straightforward to update\ncode that makes uses the current design to the final design. Experimental status\nmeans that we believe that we want to have similar functionality, but we are not\nyet confident about how close the final design will be to the feature as\ncurrently described.\n</p>\n<p>\nIn addition, we know there are some areas where the specification needs to\nprovide more details about the semantics of the language.\n</p>\n<p>\nComments on this document are welcome and should be made by creating an issue in\n<code><a href=\"https://github.com/ballerina-platform/ballerina-spec\"\n>https://github.com/ballerina-platform/ballerina-spec</a></code>, which is the\nGitHub repository where this specification is maintained. The design of the\nlanguage may also be discussed in the <a\nhref=\"mailto:ballerina-dev@googlegroups.com\">ballerina-dev@googlegroups.com</a>\nmailing list.\n</p>\n<h2 class=\"toc\">Table of Contents</h2>\n<p><a href=\"#introduction\">1. Introduction</a></p>\n<p><a href=\"#notation\">2. Notation</a></p>\n<p><a href=\"#program_structure\">3. Program structure</a></p>\n<p><a href=\"#lexical_structure\">4. Lexical structure</a></p>\n<p><a href=\"#values_types\">5. Values, types and variables</a></p>\n<p><a href=\"#expressions\">6. Expressions</a></p>\n<p><a href=\"#actions_statements\">7. Actions and statements</a></p>\n<p><a href=\"#built-in_methods\">8. Built-in methods</a></p>\n<p><a href=\"#module_level\">9. Module-level declarations</a></p>\n<p><a href=\"#querying\">10. [Experimental] Querying</a></p>\n<p><a href=\"#transactions\">11. [Experimental] Transactions</a></p>\n<p><a href=\"#metadata\">12. Metadata</a></p>\n<p><a href=\"#references\">A. References</a></p>\n<p><a href=\"#changes\">B. Changes since previous versions</a></p>\n<p><a href=\"#contributors\">C. Other contributors</a></p>\n<h2 id=\"introduction\">1. Introduction</h2>\n<p>\nBallerina is a programming language intended for network distributed\napplications. It is a statically typed, concurrent programming language with all\nfunctionality expected of a modern, general purpose programming language. But it\nalso has several unusual aspects that make it particularly suitable for its\nintended purpose.\n</p>\n<p>\nFirst, it provides language constructs specifically for consuming and providing\nnetwork services. Future versions of Ballerina will add language constructs for\nother functionality often needed by network distributed applications such as\nsecurity, stream processing, distributed transactions and reliable messaging.\n</p>\n<p>\nSecond, it is designed to take advantage of sequence diagrams as a way of\ndescribing the interactions within network distributed applications. There is a\nclose correspondence between the function-level concurrency-related syntax and\nsequence diagrams; this syntax is in effect a syntax for writing sequence\ndiagrams. This makes it possible to provide an editable graphical representation\nof a function as a sequence diagram.\n</p>\n<p>\nThird, it has a type system that is more flexible and allows for looser coupling\nthat traditional statically typed languages. The type system is structural:\ninstead of requiring the program to explicitly say which types are compatible\nwith each other, compatibility of types and values is determined automatically\nbased on their structure; this is particularly useful when combining data from\nmultiple, independently-designed systems. In addition, the type system provides\nunion types and open records. This flexibility allows the type system to be used\nas a schema for the data that is exchanged in distributed applications.\nBallerina's data types are designed to work particularly well with JSON; any\nJSON value has a direct, natural representation as a Ballerina value. Ballerina\nalso provides support for XML and relational data.\n</p>\n<p>\nBallerina is not a research language. It is intended to be a pragmatic language\nsuitable for mass-market commercial adoption. It tries to feel familiar to\nprogrammers who are used to popular, modern C-family languages, notably Java,\nC#, JavaScript. It also borrows ideas from many other existing programming\nlanguages including TypeScript, Go, Rust, D, Kotlin, TypeScript, Swift, Python\nand Perl.\n</p>\n<p>\nBallerina is designed for modern development practices with a module based\ndevelopment model with namespace management via module repositories, including a\nglobally shared central repository. Module version management, dependency\nmanagement, testing, documentation, building and sharing are part of the\nlanguage platform design architecture and not left for later add-on tools.\n</p>\n<p>\nBallerina is a \"batteries included\" language: it comes with a standard library,\nwhich includes not only the usual low-level, general-purpose functionality, but\nalso support for a wide variety of network protocols, interface standards, data\nformats and authentication/authorization standards, which make writing secure,\nresilient distributed applications significantly easier than with other\nlanguages. The standard library is not specified in this document.\n</p>\n<h2 id=\"notation\">2. Notation</h2>\n<p>\nProductions are written in the form:\n</p>\n\n<pre>symbol := rhs\n</pre>\n<p>\nwhere symbol is the name of a nonterminal, and <code>rhs</code> is as follows:\n</p>\n<ul>\n<li><code>0xX</code> means the single character whose Unicode code point is\ndenoted by the hexadecimal numeral X</li>\n<li><code>^x</code> means any single Unicode code point that does not match x\nand is not a disallowed character;</li>\n<li><code>x..y</code> means any single Unicode character whose code point is\ngreater than or equal to that of x and less than or equal to that of y</li>\n<li><code class=\"grammar\">str</code> means the characters <code>str</code> literally</li>\n<li><code>symbol </code>means a reference to production for the nonterminal\n<code>symbol</code></li>\n<li><code>x|y</code> means x or y</li>\n<li><code>x&amp;y</code> means x and y interleaved in any order</li>\n<li><code>[x]</code> means zero or one times</li>\n<li><code>x?</code> means x zero or one times</li>\n<li><code>x*</code> means x zero or more times</li>\n<li><code>x+</code> means x one or more times</li>\n<li><code>(x)</code> means x (grouping)</li>\n</ul>\n<p>\nThe rhs of a symbol that starts with a lower-case letter implicitly allows white\nspace and comments, as defined by the production <code>TokenWhiteSpace</code>,\nbetween the terminals and nonterminals that it references.\n</p>\n<h2 id=\"program_structure\">3. Program structure</h2>\n<p>\nA Ballerina program is divided into modules. A module has a source form and a\nbinary form. The module is the unit of compilation; a Ballerina compiler\ntranslates the source form of a module into its binary form. A module may\nreference other modules. When a compiler translates a source module into a\nbinary module, it needs access only to the binary form of other modules\nreferenced from the source module.\n</p>\n<p>\nA binary module can only be referenced if it is placed in a module store. There\nare two kinds of module store: a repository and a project. A module stored in a\nrepository can be referenced from any other module. A module stored in a project\ncan only be referenced from other modules stored in the same project.\n</p>\n<p>\nA repository organizes binary modules into a 3-level hierarchy:\n</p>\n<ol>\n<li>organization;</li>\n<li>module name;</li>\n<li>version.</li>\n</ol>\n<p>\nOrganizations are identified by Unicode strings, and are unique within a\nrepository. A module name is a Unicode string and is unique within a repository\norganization. A particular module name can have one or more versions each\nassociated with a separate binary module. Versions are semantic, as described in\nthe SemVer specification.\n</p>\n<p>\nA project stores modules using a simpler single level hierarchy, in which the\nmodule is associated directly with the module name.\n</p>\n<p>\nA binary module is a sequence of octets. Its format is specified in the\nBallerina Platform Specification.\n</p>\n<p>\nAn abstract source module consists of:\n</p>\n<ul>\n<li>an ordered collection of one or more source parts; each source part is a\nsequence of octets that is the UTF-8 encoding of part of the source code for the\nmodule</li>\n<li>metadata containing the following\n<ul>\n<li>always required: module name</li>\n<li>required only if the source module is to be compiled into a binary module\nstored in a repository:\n<ul>\n<li>organization name</li>\n<li>version</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>\nAn abstract source module can be stored in a variety of concrete forms. For\nexample, the Ballerina Platform Specification describes a method for storing an\nabstract source module in a filesystem, where the source parts are files with a\n<code>.bal </code>extension stored in a directory, the module name comes from\nthe name of that directory, and the version and organization name comes from a\nconfiguration file <code>Ballerina.toml</code> in that directory.\n</p>\n<h2 id=\"lexical_structure\">4. Lexical structure</h2>\n<p>\nThe grammar in this document specifies how a sequence of Unicode code points is\ninterpreted as part of the source of a Ballerina module. A Ballerina module part\nis a sequence of octets (8-bit bytes); this sequence of octets is interpreted as\nthe UTF-8 encoding of a sequence of code points and must comply with the\nrequirements of RFC 3629.\n</p>\n<p>\nAfter the sequence of octets is decoded from UTF-8, the following two\ntransformations must be performed before it is parsed using the grammar in this\ndocument:\n</p>\n<ul>\n<li>if the sequence starts with a byte order mark (code point 0xFEFF), it must\nbe removed</li>\n<li>newlines are normalized as follows:\n<ul>\n<li>the two character sequence 0xD 0xA is replaced by 0xA</li>\n<li>a single 0xD character that is not followed by 0xD is replaced by 0xA</li>\n</ul>\n</li>\n</ul>\n<p>\nThe sequence of code points must not contain any of the following disallowed\ncode points:\n</p>\n<ul>\n<li>surrogates (0xD800 to 0xDFFF)</li>\n<li>non-characters (the 66 code points that Unicode designates as\nnon-characters)</li>\n<li>C0 control characters (0x0 to 0x1F and 0x1F) other than whitespace (0x9,\n0xA, 0xC, 0xD)</li>\n<li>C1 control characters (0x80 to 0x9F)</li>\n</ul>\n<p>\nNote that the grammar notation ^X does not allow the above disallowed code\npoints.\n</p>\n\n<pre\nclass=\"grammar\">identifier := UndelimitedIdentifier | DelimitedIdentifier\nUndelimitedIdentifier :=\n   IdentifierInitialChar IdentifierFollowingChar*\nDelimitedIdentifier := <code>^\"</code> StringChar+ <code>\"</code>\nIdentifierInitialChar := <code>A</code> .. <code>Z</code> | <code>a</code> .. <code>z</code> | <code>_</code> | UnicodeIdentifierChar\nIdentifierFollowingChar := IdentifierInitialChar | Digit\nUnicodeIdentifierChar := ^ ( AsciiChar | UnicodeNonIdentifierChar )\nAsciiChar := 0x0 .. 0x7F\nUnicodeNonIdentifierChar :=\n   UnicodePrivateUseChar\n   | UnicodePatternWhiteSpaceChar\n   | UnicodePatternSyntaxChar\nUnicodePrivateUseChar :=\n   0xE000 .. 0xF8FF\n   | 0xF0000 .. 0xFFFFD\n   | 0x100000 .. 0x10FFFD\nUnicodePatternWhiteSpaceChar := 0x200E | 0x200F | 0x2028 | 0x2029\nUnicodePatternSyntaxChar :=\n   character with Unicode property Pattern_Syntax=True\nDigit := <code>0</code> .. <code>9</code>\n</pre>\n<p>\nNote that the set of characters allowed in identifiers follows the requirements\nof Unicode TR31 for immutable identifiers; the set of characters is immutable in\nthe sense that it does not change between Unicode versions.\n</p>\n\n<pre\nclass=\"grammar\">TokenWhiteSpace := (Comment | WhiteSpaceChar)*\nComment := <code>//</code> AnyCharButNewline*\nAnyCharButNewline := ^ 0xA\nWhiteSpaceChar := 0x9 | 0xA | 0xD | 0x20\n</pre>\n<p>\n<code>TokenWhiteSpace</code> is implicitly allowed on the right hand side of\nproductions for non-terminals whose names start with a lower-case letter.\n</p>\n<h2 id=\"values_types\">5. Values, types and variables</h2>\n<p>\nBallerina programs operate on a rich universe of values. This universe of values\nis partitioned into a number of <em>basic types</em>; every value belongs to\nexactly one basic type.\n</p>\n<p>\nValues are of three kinds, each corresponding to a kind of basic type:\n</p>\n<ul>\n<li>simple values, like booleans and floating point numbers, which are not\nconstructed from other values;</li>\n<li>structured values, like mappings and lists, which create structures from\nother values;</li>\n<li>behavioral values, like functions, which allow parts of Ballerina programs\nto be handled in a uniform way with other values</li>\n</ul>\n<p>\nValues can be stored in variables or as members of structures. A simple value is\nstored directly in the variable or structure. However, for other types of value,\nwhat is stored in the variable or member is a reference to the value; the value\nitself has its own separate storage. Non-simple types (i.e. structured types and\nbehavioral types) are thus collectively called reference types. A reference\nvalue has an identity determined by its storage location. References make it\npossible for distinct members of a structure to refer to values that are\nidentical, in the sense that they are stored in the same location. Thus values\nin Ballerina represent not just trees but graphs.\n</p>\n<p>\nSimple values are inherently immutable because they have no identity distinct\nfrom their value. All basic types of structural values, with the exception of\nthe XML, are mutable, meaning the value referred to by a particular reference\ncan be changed. Whether a behavioural value is mutable depends on its basic\ntype: some of the behavioural basic types allow mutation, and some do not.\nMutation cannot change the basic type of a value. Mutation makes it possible for\nthe graphs of references between values to have cycles.\n</p>\n<p>\nBallerina programs use types to categorize values both at compile-time and\nruntime. Types deal with an abstraction of values, which does not consider\nstorage location or mutability. This abstraction is called a <em>shape</em>. A\ntype denotes a set of shapes. Subtyping in Ballerina is <em>semantic</em>: a\ntype S is a subtype of type T if the set of shapes denoted by S is a subset of\nthe set of shapes denoted by T. Every value has a corresponding shape. A shape\nis specific to a basic type: if two values have different basic types, then they\nhave different shapes. Since shapes do not deal with storage location, they have\nno concept of identity; shapes therefore represent trees rather graphs. For\nsimple values, there is no difference between a shape and a value, except for\none case: positive and negative zero of a floating point basic type are distinct\nvalues but have the same shape. There are two important relations between a\nvalue and a type:\n</p>\n<ul>\n<li>a value <em>looks like</em> a type at a particular point in the execution of\na program if its shape at that point is a member of the type;</li>\n<li>a value <em>belongs to</em> a type if it looks like the type, and it will\nnecessarily continue to look like the type no matter how the value is mutated.</li>\n</ul>\n<p>\nFor an immutable value, looking like a type and belonging to a type are the same\nthing.\n</p>\n<p>\nWhen a Ballerina program declares a variable to have a compile-time type, this\nmeans that the Ballerina compiler together with the runtime system will ensure\nthat the variable will only ever contain a value that belongs to the type.\nBallerina also provides mechanisms that take a value that looks like a type and\nuse it to create a value that belongs to a type.\n</p>\n<p>\nBallerina provides a rich variety of type descriptors, which programs use to\ndescribe types. For example, there is a type descriptor for each simple basic\ntype; there is a type descriptor that describes as type as a union of two types;\nthere is a type descriptor that uses a single value to describe a type that\ncontains a single shape. This means that values can look like and belong to\narbitrarily many types, even though they look like or belong to exactly one\n<em>basic</em> type.\n</p>\n<p>\nIn addition to describing a type, a type descriptor may also include information\nused to construct a value of the type, as well as metadata. Whereas the type\ndescribed by a type descriptor is known at compile time, this additional\ninformation may need to be resolved at runtime. The typedesc basic type\nrepresents a type descriptor that has been resolved.\n</p>\n<p>\nMost basic types of structured values (along with one basic type of simple\nvalue) are iterable, meaning that a value of the type can be accessed as a\nsequence of simpler values.\n</p>\n<p>\nThe following table summarizes the type descriptors provided by Ballerina.\nExperimental features are not included.\n</p>\n<table>\n  <tr>\n   <td><strong>Kind</strong></td>\n   <td><strong>Name</strong></td>\n   <td><strong>Set of values denoted by type descriptor</strong></td>\n  </tr>\n  <tr>\n   <td rowspan=\"6\" >basic, simple</td>\n   <td>nil</td>\n   <td>()</td>\n  </tr>\n  <tr>\n   <td>boolean</td>\n   <td>true, false</td>\n  </tr>\n  <tr>\n   <td>int</td>\n   <td>64-bit signed integers</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>64-bit IEEE 754-2008 binary floating point numbers</td>\n  </tr>\n  <tr>\n   <td>decimal</td>\n   <td>128-bit IEEE 754-2008 decimal floating point numbers</td>\n  </tr>\n  <tr>\n   <td>string</td>\n   <td>sequences of Unicode code points</td>\n  </tr>\n  <tr>\n   <td rowspan=\"7\" >basic, structured</td>\n   <td>array</td>\n   <td>an ordered list of values, optionally with a specific length, where a\nsingle type is specified for all members of the list,</td>\n  </tr>\n  <tr>\n   <td>tuple</td>\n   <td>an ordered list of values, where a type is specified separately for each\nmember of the list</td>\n  </tr>\n  <tr>\n   <td>map</td>\n   <td>a mapping from keys, which are strings, to values; specifies mappings in\nterms of a single type to which all keys are mapped</td>\n  </tr>\n  <tr>\n   <td>record</td>\n   <td>a mapping from keys, which are strings, to values; specifies maps in\nterms of names of fields (required keys) and value for each field</td>\n  </tr>\n  <tr>\n   <td>table</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>XML</td>\n   <td>a sequence of zero or more characters, XML elements, processing\ninstructions or comments</td>\n  </tr>\n  <tr>\n   <td>error</td>\n   <td>an indication that there has been an error, with a string identifying the\nreason for the error, and a mapping giving additional details about the error</td>\n  </tr>\n  <tr>\n   <td rowspan=\"5\" >basic, behavioral</td>\n   <td>function</td>\n   <td>a function with 0 or more specified parameter types and a single return\ntype</td>\n  </tr>\n  <tr>\n   <td>future</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>object</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>service</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>typedesc</td>\n   <td>a type descriptor</td>\n  </tr>\n  <tr>\n   <td rowspan=\"7\" >other</td>\n   <td>singleton</td>\n   <td>a single value described by a literal</td>\n  </tr>\n  <tr>\n   <td>union</td>\n   <td>the union of the component types</td>\n  </tr>\n  <tr>\n   <td>optional</td>\n   <td>the underlying type and ()</td>\n  </tr>\n  <tr>\n   <td>any</td>\n   <td>all values</td>\n  </tr>\n  <tr>\n   <td>anydata</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>byte</td>\n   <td>int in the range 0 to 255 inclusive</td>\n  </tr>\n  <tr>\n   <td>json</td>\n   <td>the union of (), int, float, decimal, string, and maps and arrays whose\nvalues are, recursively, json</td>\n  </tr>\n</table>\n<h3>Simple Values</h3>\n<p>\nA simple value belongs to exactly one of the following basic types:\n</p>\n<ul>\n<li>nil</li>\n<li>boolean</li>\n<li>int</li>\n<li>float</li>\n<li>decimal</li>\n<li>string</li>\n</ul>\n<p>\nThe type descriptor for each simple basic type contains all the values of the\nbasic type.\n</p>\n\n<pre\nclass=\"grammar\">simple-type-descriptor :=\n   nil-type-descriptor\n   | boolean-type-descriptor\n   | int-type-descriptor\n   | floating-point-type-descriptor\n   | string-type-descriptor\n</pre>\n<h4>Nil</h4>\n\n<pre\nclass=\"grammar\">nil-type-descriptor :=  <code>(</code> <code>)</code>\nnil-literal :=  <code>(</code> <code>)</code> | <code>null</code>\n</pre>\n<p>\nThe nil type contains a single value, called nil, which is used to represent the\nabsence of any other value. The nil value is written <code>()</code>. The nil\nvalue can also be written <code>null</code>, for compatibility with JSON; the\nuse of null should be restricted to JSON-related contexts.\n</p>\n<p>\nThe nil type is special, in that it is the only basic type that consists of a\nsingle value. The type descriptor for the nil type is not written using a\nkeyword, but is instead written <code>() </code>like the value.\n</p>\n<h4>Boolean</h4>\n\n<pre\nclass=\"grammar\">boolean-type-descriptor := <code>boolean</code>\nboolean-literal := <code>true</code> | <code>false</code>\n</pre>\n<p>\nThe boolean type consists of the values true and false.\n</p>\n<h4>Int</h4>\n\n<pre\nclass=\"grammar\">int-type-descriptor := <code>int</code>\nint-literal := DecimalNumber | HexIntLiteral\nDecimalNumber := <code>0</code> | NonZeroDigit Digit*\nHexIntLiteral := HexIndicator HexNumber\nHexNumber := HexDigit+\nHexIndicator := <code>0x</code> | <code>0X</code>\nHexDigit := Digit | <code>a</code> .. <code>f</code> | <code>A</code> .. <code>F</code>\nDigit := <code>0</code> .. <code>9</code>\nNonZeroDigit := <code>1</code> .. <code>9</code>\n</pre>\n<p>\nThe int type consists of integers between -9,223,372,036,854,775,808 and\n9,223,372,036,854,775,807 (i.e. signed integers than can fit into 64 bits using\na two's complement representation)\n</p>\n<h4>Floating point types</h4>\n\n<pre\nclass=\"grammar\">floating-point-type-descriptor := <code>float</code> | <code>decimal</code>\nfloating-point-literal :=\n   DecimalFloatingPointNumber | HexFloatingPointLiteral\nDecimalFloatingPointNumber :=\n   DecimalNumber Exponent [FloatingPointTypeSuffix]\n   | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n   | DecimalNumber FloatingPointTypeSuffix\nDottedDecimalNumber :=\n   DecimalNumber <code>.</code> Digit*\n   | <code>.</code> Digit+\nExponent := ExponentIndicator [Sign] Digit+\nExponentIndicator := <code>e</code> | <code>E</code>\nHexFloatingPointLiteral := HexIndicator HexFloatingPointNumber\nHexFloatingPointNumber :=\n   HexNumber HexExponent\n   | DottedHexNumber [HexExponent]\nDottedHexNumber :=\n   HexDigit+ <code>.</code> HexDigit*\n   | <code>.</code> HexDigit+\nHexExponent := HexExponentIndicator [Sign] Digit+\nHexExponentIndicator := <code>p</code> | <code>P</code>\nSign := <code>+</code> | <code>-</code>\nFloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\nDecimalTypeSuffix := <code>d</code> | <code>D</code>\nFloatTypeSuffix :=  <code>f</code> | <code>F</code>\n</pre>\n<p>\nThere are two basic types for floating point numbers:\n</p>\n<ul>\n<li>the float type corresponds to IEEE 754-2008 64-bit binary (radix 2) floating\npoint numbers</li>\n<li>the decimal type corresponds to IEEE 754-2008 128-bit decimal (radix 10)\nfloating point numbers</li>\n</ul>\n<p>\nThe multiple bit patterns that IEEE 754 treats as NaN are considered to be the\nsame value in Ballerina. Positive and negative zero of a floating point basic\ntype are distinct values, following IEEE 754, but are defined to have the same\nshape, so that they will usually be treated as being equal.\n</p>\n<p>\nIEEE-defined operations on floating point values must be performed using a\nrounding-direction attribute of roundTiesToEven (which is the default IEEE\nrounding direction, sometimes called <em>round to nearest</em>). All floating\npoint values, including the intermediate results of expressions, must use the\nvalue space defined for the float and decimal type; implementations must not use\nextended precision for intermediate results. This ensures that all\nimplementations will produce identical results. (This is the same as what is\nrequired by strictfp in Java.)\n</p>\n<h4>Strings</h4>\n\n<pre\nclass=\"grammar\">string-type-descriptor := <code>string</code>\nstring-literal := DoubleQuotedStringLiteral\nDoubleQuotedStringLiteral := <code>\"</code> (StringChar | StringEscape)* <code>\"</code>\nStringChar := ^ ( 0xA | 0xD | <code>\\</code> | <code>\"</code> )\nStringEscape := StringSingleEscape | StringNumericEscape\nStringSingleEscape := <code>\\t</code> | <code>\\n</code> | <code>\\r</code> | <code>\\\\</code> | <code>\\\"</code>\nStringNumericEscape := <code>\\u[</code> CodePoint <code>]</code>\nCodePoint := HexDigit+\n</pre>\n<p>\nA string is an immutable sequences of zero or more Unicode code points. Any code\npoint in the Unicode range of 0x0 to 0x10FFFF inclusive is allowed other than\nsurrogates (0xD800 to 0xDFFF inclusive).\n</p>\n<p>\nIn a <code>StringNumericEscape</code>, <code>CodePoint</code> must valid Unicode\ncode point; more precisely, it must  be a hexadecimal numeral denoting an\ninteger <em>n</em> where 0 &lt;= <em>n</em> &lt; 0xD800 or 0xDFFF &lt; n &lt;=\n0x10FFFF.\n</p>\n<p>\nA string is iterable as a sequence of its single code point substrings. String\nis the only simple type that is iterable.\n</p>\n<h3>Structured values</h3>\n<p>\nThere are five basic types of structured value. First, there are three container\nbasic types: list, mapping and table. Second, there is the xml basic type and\nthe error basic type, which are both special in different ways.\n</p>\n<p>\nValues of the container basic types are containers for other values, which are\ncalled their members.  Containers are mutable: the members contained in a\nparticular container can be changed. However, a container value can also be\nfrozen at runtime or compile time, which prevents any change to its members. A\nfrozen container value can refer only to immutable values: either other frozen\nvalues or values of basic types that are always immutable. Once frozen, a\ncontainer value remains frozen. Values of basic type xml can also be frozen as\ndescribed below.\n</p>\n<p>\nThe shape of the members of a container value contribute to the shape of the\ncontainer. Mutating a member of a container can thus cause the shape of the\ncontainer to change.\n</p>\n<p>\nA type descriptor for a container basic type describe the shape of the container\nin terms of the shapes of its members.  A container has an inherent type, which\nis a type descriptor which is part of the container's runtime value. At runtime,\nthe container prevents any mutation that might lead to the container having a\nshape that is not a member of its inherent type. Thus a container value belongs\nto a type if and only if that type is its inherent type or a subset of its\ninherent type.\n</p>\n<p>\nA frozen container value belongs to a type if and only if the type contains the\nshape of the value. In other words, freezing a container narrows its inherent\ntype to a type that consists of just its current shape.\n</p>\n\n<pre\nclass=\"grammar\">structured-type-descriptor :=\n   list-type-descriptor\n   | mapping-type-descriptor\n   | table-type-descriptor\n   | xml-type-descriptor\n   | error-type-descriptor\n</pre>\n<p>\nThe following table summarizes the type descriptors for structured types.\n</p>\n<table>\n  <tr>\n   <td></td>\n   <td>Integer index</td>\n   <td>String key</td>\n  </tr>\n  <tr>\n   <td>Basic type</td>\n   <td>list</td>\n   <td>mapping</td>\n  </tr>\n  <tr>\n   <td>Type descriptor with uniform member type</td>\n   <td>array</td>\n   <td>map</td>\n  </tr>\n  <tr>\n   <td>Type descriptor with separate member types</td>\n   <td>tuple</td>\n   <td>record</td>\n  </tr>\n</table>\n<p>\nA value is defined to be <em>pure</em> if it either\n</p>\n<ul>\n<li>is a simple value, or</li>\n<li>is a structured value, all of whose members are also pure values.</li>\n</ul>\n<p>\nA shape is pure if it is the shape of a pure value. A type is pure if it\ncontains only pure shapes.\n</p>\n<h4>Lists</h4>\n<p>\nA list value is a container that keeps its members in an ordered list. The\nnumber of members of the list is called the <em>length </em>of the list. A\nmember of a list can be referenced by an integer index representing its position\nin the list. For a list of length <em>n</em>, the indices of the members of the\nlist, from first to last, are 0,1,...,<em>n</em> - 1. The shape of a list value\nis an ordered list of the shapes of its members.\n</p>\n<p>\nA list is iterable as a sequence of its members.\n</p>\n<p>\nThe type of list values can be described by two kinds of type descriptors.\n</p>\n\n<pre\nclass=\"grammar\">list-type-descriptor :=\n   array-type-descriptor | tuple-type-descriptor\n</pre>\n<p>\nThe inherent type of a list value must be a <code>list-type-descriptor</code>.\nThe inherent type of a list value determines a type T<sub><em>i</em></sub> for a\nmember with index <em>i</em>. The runtime system will enforce a constraint that\na value written to index <em>i</em> will belong to type T<sub><em>i</em></sub>.\nNote that the constraint is not merely that the value looks like\nT<sub><em>i</em></sub>.\n</p>\n<p>\nBoth kinds of type descriptor are covariant in the types of their members.\n</p>\n<h5>Array types</h5>\n<p>\nAn array type-descriptor describes a type of list value by specifying the type\nthat the value for all members must belong to, and optionally, a length.\n</p>\n\n<pre\nclass=\"grammar\">array-type-descriptor := member-type-descriptor <code>[</code> [ array-length ] <code>]</code>\nmember-type-descriptor := type-descriptor\narray-length :=\n   int-literal\n   | constant-reference-expr\n   | inferred-array-length\ninferred-array-length := <code>*</code>\n</pre>\n<p>\nA type <code>T[]</code> contains a list shape if all members of the list shape\nare in <code>T</code>. A type <code>T[n]</code> contains a list shape if in\naddition the length of the list shape is n.\n</p>\n<p>\nA <code>constant-reference-expr</code> in an <code>array-length</code> must\nevaluate to a non-negative integer. An array length of <code>*</code> means that\nthe length of the array is to be inferred from the context; this is allowed only\nwithin a type descriptor occurring in a context that is specified to be\ninferable; its meaning is the same as if the length was specified explicitly.\n</p>\n<p>\nNote also that <code>T[n]</code> is a subtype of <code>T[]</code>, and that if\n<code>S</code> is a subtype of <code>T</code>, then <code>S[]</code> is a\nsubtype of <code>T[]</code>; this is a consequence of the definition of\nsubtyping in terms of subset inclusion of the corresponding sets of shapes.\n</p>\n<p>\nAn array <code>T[]</code> is iterable as a sequence of values of type\n<code>T</code>.\n</p>\n<h5>Tuple types</h5>\n<p>\nA tuple type descriptor describes a type of list value by specifying a separate\ntype for each member of the list.\n</p>\n\n<pre\nclass=\"grammar\">tuple-type-descriptor :=\n   <code>[</code> tuple-member-type-descriptors <code>]</code>\ntuple-member-type-descriptors :=\n   member-type-descriptor (<code>,</code> member-type-descriptor)* [<code>,</code> tuple-rest-descriptor]\n   | [ tuple-rest-descriptor ]\ntuple-rest-descriptor := type-descriptor <code>...</code>\n\n</pre>\n<p>\nA tuple type descriptor T with m member type descriptors contains a list shape L\nof length n if and only if:\n</p>\n<ul>\n<li>m is less than or equal to n</li>\n<li>the i-th member type descriptor of T contains the i-th member of L for each\ni from 1 to m;</li>\n<li>if n is greater than m, then T has a tuple-rest-descriptor\nR<code>...</code>, and R contains the j-th member of L for each j from m + 1 to\nn.</li>\n</ul>\n<p>\nNote that a tuple type where all the <code>member-type-descriptor</code>s are\nthe same and there is no tuple-rest-descriptor is equivalent to an\narray-type-descriptor with a length.\n</p>\n<h4>Mappings</h4>\n<p>\nA mapping value is a container where each member has a key, which is a string,\nthat uniquely identifies within the mapping. We use the term <em>field</em> to\nmean the member together its key; the name of the field is the key, and the\nvalue of the field is that value of the member; no two fields in a mapping value\ncan have the same name.\n</p>\n<p>\nThe shape of a mapping value is an unordered collection of field shapes one for\neach field. The field shape for a field f has a name, which is the same as the\nname of f, and a shape, which is the shape of the value of f.\n</p>\n<p>\nA mapping is iterable as sequence of fields, where each field is represented by\na 2-tuple <code>(<em>s</em>, <em>val</em>)</code> where <code><em>s\n</em></code>is a string for the name of a field, and <code><em>val</em></code>\nis the value of  the field. The order of the fields in the sequence is\nimplementation-dependent, but implementations are encouraged to preserve and use\nthe order in which the fields were added.\n</p>\n\n<p>\nThe type of mapping values can be described by two kinds of type descriptors.\n</p>\n\n<pre\nclass=\"grammar\">mapping-type-descriptor :=\n   map-type-descriptor | record-type-descriptor\n</pre>\n<p>\nThe inherent type of a mapping value must be a\n<code>mapping-type-descriptor</code>. The inherent type of a mapping value\ndetermines a type T<sub><em>f</em></sub> for the value of the field with name\n<em>f</em>. The runtime system will enforce a constraint that a value written to\nfield <em>f</em> will belong to type T<sub><em>f</em></sub>. Note that the\nconstraint is not merely that the value looks like T<sub><em>f</em></sub>.\n</p>\n<p>\nBoth kinds of type descriptor are covariant in the types of their members.\n</p>\n<h5>Map types</h5>\n<p>\nA map type-descriptor describes a type of mapping value by specifying the type\nthat the value for all fields must belong to.\n</p>\n\n<pre\nclass=\"grammar\">map-type-descriptor := <code>map</code> type-parameter\ntype-parameter := <code>&lt;</code> type-descriptor <code>></code>\n</pre>\n<p>\nA type <code>map&lt;T></code> contains a mapping shape <em>m</em> if every field\nshape in <em>m</em> has a value shape that is in <code>T</code>.\n</p>\n<p>\nA value belonging to type <code>map&lt;T></code> is iterable as a sequence of\nvalues of type <code>(string, T)</code>.\n</p>\n<h5>Record types</h5>\n<p>\nA record type descriptor describes a type of mapping value by specifying a type\nseparately for the value of each field.\n</p>\n\n<pre\nclass=\"grammar\">record-type-descriptor :=\n   inclusive-record-type-descriptor | exclusive-record-type-descriptor\ninclusive-record-type-descriptor :=\n   <code>record</code> <code>{</code> field-descriptor* <code>}</code>\nexclusive-record-type-descriptor :=\n   <code>record</code> <code>{|</code> field-descriptor* [record-rest-descriptor] <code>|}</code>\nfield-descriptor :=\n   individual-field-descriptor | record-type-reference\nindividual-field-descriptor :=\n   type-descriptor field-name [<code>?</code> | default-value] <code>;</code>\ndefault-value := <code>=</code> expression\nrecord-type-reference := <code>*</code> type-descriptor-reference <code>;</code>\nrecord-rest-descriptor := type-descriptor <code>...</code> <code>;</code>\n</pre>\n<p>\nEach <code>individual-field-descriptor</code> specifies an additional constraint\nthat a mapping value shape must satisfy for it to be a member of the described\ntype. The constraint depends on whether <code>?</code> is present:\n</p>\n<ul>\n<li>if <code>?</code> is not present, then the constraint is that the mapping\nvalue shape must have a field shape with the specified field-name and with a\nvalue shape that is a member of the specified type-descriptor; this is called a\nrequired field;</li>\n<li>if <code>?</code> is present, then the constraint is that if the mapping\nvalue shape has a field shape with the specified field-name, then its value\nshape must be a member of the specified type-descriptor; this is called an\noptional field.</li>\n</ul>\n<p>\nThe order of the <code>individual-field-descriptor</code>s within a\n<code>record-type-descriptor</code> is not significant. Note that the delimited\nidentifier syntax allows the field name to be any non-empty string.\n</p>\n<p>\nAn exclusive-record-type-descriptor, which uses the <code>{|</code> and\n<code>|}</code> delimiters, allows exclusively the fields described. More\nprecisely, for a mapping value shape and a record-type-descriptor, let the extra\nfield shapes be the field shapes of the mapping value shapes whose names are not\nthe same as field-name of any individual-field-descriptor; a mapping value shape\nis a member of the type described by an exclusive-record-type-descriptor only if\neither:\n</p>\n<ul>\n<li>there are no extra fields shapes, or</li>\n<li>there is a record-rest-descriptor <code>T...</code>, and the value shape of\nevery extra field shape is a member of <code>T</code>.</li>\n</ul>\n<p>\nAn inclusive-record-type-descriptor, which uses the <code>{</code> and\n<code>}</code> delimiters, allows any mapping value that includes the fields\ndescribed. More precisely, a type descriptor <code>record { F };</code> is\nequivalent to <code>record {| F; T...; |}</code>, where T is the type that\ncontains all pure shapes (which can be written as <code>anydata|error</code>).\n</p>\n<p>\nA record type descriptor that either is an inclusive-record-type-descriptor or\nis an exclusive-record-type-descriptor with a record-rest-descriptor is called\n<em>open</em>; a record type descriptor that is not open is called\n<em>closed</em>.\n</p>\n<p>\nA <code>default-value</code> specifies a default value for the field, which is\nused when the record type descriptor is used to construct a mapping value but no\nvalue is specified explicitly for the field. The type descriptor contains a\n0-argument function closure for each default value. The closure is created from\nthe expression when the type descriptor is resolved. The closure is evaluated to\ncreate a field value each time the default is used in the construction of a\nmapping value. The default value does not affect the type described by the type\ndescriptor.\n</p>\n<p>\nA <code>record-type-reference</code> pulls in fields from a named record type.\nThe <code>type-descriptor-reference</code> must reference a type defined by a\n<code>record-type-descriptor</code>. The <code>field-descriptor</code>s and any\n<code>record-rest-descriptor</code> are copied into the type being defined; the\nmeaning is the same as if they had been specified explicitly. For default\nvalues, the closure rather than the expression is copied in. A\n<code>record-rest-descriptor</code> in the referencing type overrides any\n<code>record-rest-descriptor</code> in the referenced type. For the purposes of\nresolving a <code>record-type-reference</code>, a referenced or referencing type\nthat is an <code>inclusive-record-type-descriptor</code> is treated as if it\nwere the equivalent <code>exclusive-record-type-descriptor</code> with an\nexplicit <code>record-rest-descriptor</code>.\n</p>\n<h4>[Preview] Tables</h4>\n<p>\nA table is intended to be similar to the table of relational database table. A\ntable value contains an immutable set of column names and a mutable bag of rows.\nEach column name is a string; each row is a mapping that associates a value with\nevery column name; a bag of rows is a collection of rows that is unordered and\nallows duplicates.\n</p>\n<p>\nA table value also contains a boolean flag for each column name saying whether\nthat column is a primary key for the table; this flag is immutable. If no\ncolumns have this flag, then the table does not have a primary key. Otherwise\nthe value for all primary keys together must uniquely identify each row in the\ntable; in other words, a table cannot have two rows where for every column\nmarked as a primary key, that value of that column in both rows is the same.\n</p>\n\n<pre\nclass=\"grammar\">table-type-descriptor := <code>table</code> <code>{</code> column-type-descriptor+ <code>}</code>\ncolumn-type-descriptor :=\n   individual-column-type-descriptor\n   | column-record-type-reference\nindividual-column-type-descriptor :=\n   [<code>key</code>] type-descriptor column-name <code>;</code>\ncolumn-record-type-reference :=\n   <code>*</code> type-reference [key-specifier (<code>,</code> key-specifier)*] <code>;</code>\nkey-specifier := <code>key</code> column-name\ncolumn-name := identifier\n</pre>\n<p>\nA table type descriptor has a descriptor for each column, which specifies the\nname of the column, whether that column is part of a primary key and the type\nthat values in that column must belong to. The type descriptor for the column\nmust be a pure type. If a column is part of a primary key, then the type\ndescriptor for the column must also allow only non-nil simple values.\n</p>\n<p>\nNote that a table type T' will be a subtype of a table type T if and only if:\n</p>\n<ul>\n<li>T and T' have the same set of column names;</li>\n<li>T and T' have the same set of primary keys; and</li>\n<li>for each column, the type for that column in T' is a subtype of the type of\nthat column in T.</li>\n</ul>\n<p>\nA table is iterable as a sequence of mapping values, one for each row, where\neach mapping value has a field for each column, with the column as the field\nname and the value of that column in that row as the field value. The mapping\nvalues will belong to a closed record type.\n</p>\n<p>\nIssues:\n</p>\n<ul>\n<li>Need to say that unique constraint is part of the value.</li>\n<li>Do we want to allow values that are distinct but numerically equal e.g. -0.0\nand +0.0 or 1.0 and 1 in primary key columns?</li>\n</ul>\n<h4>XML</h4>\n\n<pre class=\"grammar\">xml-type-descriptor := <code>xml</code>\n</pre>\n<p>\nAn XML value represents an immutable sequence of zero or more of the items that\ncan occur inside an XML element, specifically:\n</p>\n<ul>\n<li>elements</li>\n<li>characters</li>\n<li>processing instructions</li>\n<li>comments</li>\n</ul>\n<p>\nThe attributes of an element are represented by a map&lt;string>. The content of\neach element in the sequence is itself a distinct XML value. Although the\nsequence is immutable, an element can be mutated to change its content to be\nanother XML value.\n</p>\n<p>\nAn XML value is iterable as a sequence of its items, where each character item\nis represented by a string with a single code point and other items are\nrepresented by a singleton XML value. A single XML item, such as an element, is\nrepresented by a sequence consisting of just that item.\n</p>\n<h4>Error</h4>\n\n<pre\nclass=\"grammar\">error-type-descriptor := <code>error</code> [error-type-params]\nerror-type-params := <code>&lt;</code> (explicit-error-type-params | inferred-error-type-param) <code>&gt;</code>\nexplicit-error-type-params := reason-type-descriptor [<code>,</code> detail-type-descriptor]\nreason-type-descriptor := type-descriptor\ndetail-type-descriptor := type-descriptor\ninferred-error-type-param := <code>*</code>\n</pre>\n<p>\nAn error value belongs to the error basic type, which is a basic type which is\ndistinct from other structured types and is used only for representing errors.\nAn error value contains the following information:\n</p>\n<ul>\n<li>a reason, which is a string identifier for the category of error</li>\n<li>a detail, which is a frozen mapping providing additional information about\nthe error</li>\n<li>a stack trace</li>\n</ul>\n<p>\nAn error value is immutable, since the detail is frozen and the stack trace\ninformation cannot be changed.\n</p>\n<p>\nThe shape of an error value consists of the shape of the reason and the shape of\nthe detail; the stack trace is not part of the shape. A type descriptor\nerror&lt;<var>r</var>, <var>d</var>&gt; contains an error shape if <var>r</var>\ncontains the shape's reason, and <var>d</var>, if present, contains the shape's\ndetail. The bare type error contains all error shapes. The\nreason-type-descriptor must be a subtype of string; the detail-type-descriptor\nmust be a subtype of <code>record { }</code> (which is equivalent to\n<code>map&lt;anydata|error&gt;</code>).\n</p>\n<p>\nA type of <code>error&lt;*&gt;</code> means that the type is a subtype of error,\nwhere the precise subtype is to be inferred from the context. This is allowed\nonly within type descriptors occurring in a context that is specified to be\ninferable.\n</p>\n<p>\nError is the only structured basic type that is not iterable.\n</p>\n<h3>Behavioral values</h3>\n\n<pre\nclass=\"grammar\">behavioral-type-descriptor :=\n   function-type-descriptor\n   | object-type-descriptor\n   | future-type-descriptor\n   | service-type-descriptor\n   | stream-type-descriptor\n   | typedesc-type-descriptor\n</pre>\n<h4 id=\"functions\">Functions</h4>\n\n<pre\nclass=\"grammar\">function-type-descriptor := <code>function</code> function-signature\nfunction-signature := <code>(</code> param-list <code>)</code> return-type-descriptor\nreturn-type-descriptor := [ <code>returns</code> annots type-descriptor ]\nparam-list :=\n   required-params [<code>,</code> defaultable-params] [<code>,</code> rest-param]\n   | defaultable-params [<code>,</code> rest-param]\n   | [rest-param]\nrequired-params := required-param (<code>,</code> required-param)*\nrequired-param := annots type-descriptor param-name\ndefaultable-params := defaultable-param (<code>,</code> defaultable-param)*\ndefaultable-param := annots type-descriptor param-name default-value\nrest-param := annots type-descriptor <code>...</code> [param-name]\n</pre>\n<p>\nA function is a part of a program that can be explicitly executed. In Ballerina,\na function is also a value, implying that it can be stored in variables, and\npassed to or returned from functions. When a function is executed, it is passed\nan argument list as input and returns a value as output.\n</p>\n<p>\nWhen the execution of a function returns to its caller, it returns exactly one\nvalue. A function that would in other programming languages not return a value\nis represented in Ballerina by a function returning <code>()</code>. Note that\nthe function definition does not have to explicitly return <code>()</code>; a\nreturn statement or falling off the end of the function body will implicitly\nreturn <code>()</code>.\n</p>\n<p>\nThe argument list passed to a function consists of zero or arguments in order;\neach argument is a value, but the argument list itself is not passed as a value.\nThe argument list must conform to the param-list as described in this section.\nUsually, the compiler's type checking will ensure that this is the case; if not,\nthe function will panic.\n</p>\n<p>\nIt is convenient to consider the complete param-list as having a type. This type\nis described by a tuple-type-descriptor that has a member-type-descriptor for\neach required-param and defaultable-param, and has a tuple-rest-descriptor if\nand only if there is a rest-param. The i-th member-type-descriptor of the tuple\ntype descriptor is the same as the type-descriptor of the i-th member of the\nparam-list; the type-descriptor of the tuple-rest-descriptor, if present, is the\nsame as the type-descriptor of the rest-param.\n</p>\n<p>\nAn argument list consisting of values v<sub>1</sub>,..., v<sub>n</sub> conforms\nto a param-list that has type P, if and only if for each i with 1 &lt;= i &lt;=\nn, vi belongs to T<sub>i</sub>, where T<sub>i</sub> is defined to be the type\nthat contains a shape s if and only if P contains a list shape whose i-th member\nis s.\n</p>\n<p>\nWhen an argument list is passed to a function, the non-rest parameters are\ninitialized from the arguments in the argument list in order. The conformance of\nthe argument list to the param-list declared for the function ensures that each\nparameter will be initialized to a value that belongs to the declared type of\nthe parameter. If there is a rest-param, then that is a initialized to a newly\ncreated lists containing the remaining arguments in the argument-list; the\ninherent type of this list will be T[] where T is the type of the rest-param.\nThe conformance of the argument list ensures that the members of this list will\nbelong to type T.\n</p>\n<p>\nA defaultable-param is a parameter for which a default value is specified. The\nexpression specifying the default value may refer to previous parameters by\nname. For each defaultable parameter, the function's type descriptor includes a\nclosure that computes the default value for the parameter using the values of\nprevious parameters. The caller of the function uses the closures in the\nfunction's type descriptor to compute default values for any defaultable\narguments that were not specified explicitly. These default values are included\nin the argument list passed to the function. Whether a parameter is defaultable,\nand what its default is, do not affect the shape of the function and thus do not\naffect typing. The closures computing the defaultable parameters are created\nwhen the type descriptor is resolved; the default value is computed by calling\nthe closure each time the function is called and the corresponding parameter is\nnot specified. Whether a parameter is defaultable is used at compile time, but\nthe closure that computes the default value is only used at runtime.\n</p>\n<p>\nThe name of each parameter is included in the function's type descriptor. A\ncaller of the function may specify parameters by name. In this case, the caller\nuses the parameter name at compile time in conjunction with the type descriptor\nto create the argument list. The parameter names do not affect the shape of the\nfunction and thus do not affect typing.\n</p>\n<p>\nThe process by which the function caller creates an argument list, which may\nmake use of arguments specified both by position and by name, is described in\nmore detail in the <a href=\"#function_call\">section on function calls</a>.\n</p>\n<p>\nFunction types are covariant in their return types and contravariant in the type\nof their parameter lists. More precisely, a function type with return type R and\nparameter list type P is a subtype of a function type with return type R' and\nparameter list type P' if and only if R is a subtype of R' and P' is a subtype\nof P. A function value f belongs to a function type T if the declared type of f\nis a subtype of T.\n</p>\n<h4>Objects</h4>\n<p>\nObjects are a combination of fields along with a set of associated functions,\ncalled methods, which can be used to manipulate them. An object's methods are\nassociated with the object when the object is constructed and cannot be changed\nthereafter. The fields and methods of an object are in separate namespaces, so\nit is possible for an object to have a field and a method with the same name.\n</p>\n<p>\nAn object type descriptor, in addition to describing the object type, also\ndefines a way to construct an object of this type, in particular it provides the\nmethod definitions that are associated with the object when it is constructed.\n</p>\n<p>\nIt is also possible to have an object type descriptor that only describes an\nobject type and cannot be used to construct an object; this is called an\nabstract object type descriptor.\n</p>\n\n<pre\nclass=\"grammar\">object-type-descriptor :=\n   object-type-quals <code>object</code> <code>{</code>\n      object-member-descriptor*    <code>}</code>\nobject-type-quals :=\n   [<code>abstract</code>] [<code>client</code>] | [<code>client</code>] <code>abstract</code>\nobject-member-descriptor :=\n   object-field-descriptor\n   | object-method\n   | object-type-reference\n</pre>\n<p>\nIf <code>object-type-quals</code> contains the keyword <code>abstract</code>,\nthen the object type descriptor is an abstract object type descriptor. An\nabstract object type descriptor must not have an object-ctor-function.\n</p>\n<p>\nIf <code>object-type-quals</code> contains the keyword <code>client</code>, then\nthe object type is a client object type. A client object type may have remote\nmethods; other objects types must not.\n</p>\n<h5>Fields</h5>\n\n<pre\nclass=\"grammar\">object-field-descriptor :=\n   object-visibility-qual type-descriptor field-name [default-value]<code>;</code>\n</pre>\n<p>\nAn <code>object-field-descriptor</code> specifies a field of the object. The\nnames of all the fields of an object must be distinct.\n</p>\n<h5>Methods</h5>\n<p>\nMethods are functions that are associated to the object and are called via a\nvalue of that type using a <code>method-call-expr</code>.\n</p>\n\n<pre\nclass=\"grammar\">object-method := method-decl | method-defn\nmethod-decl :=\n   metadata\n   object-visibility-qual [<code>remote</code>]\n   <code>function</code> method-name function-signature <code>;</code>\nmethod-defn :=\n   metadata\n   method-defn-quals\n   <code>function</code> method-name function-signature method-body\nmethod-defn-quals := object-visibility-qual [<code>remote</code>]\nmethod-name := identifier\nmethod-body := function-body\n</pre>\n<p>\nThe names of all the methods of an object must be distinct: there is no method\noverloading. Method names beginning with two underscores are reserved for use by <a\nhref=\"#built-in_abstract_object_types\">built-in abstract object types</a>.\n</p>\n<p>\nWithin a <code>method-body</code>, the fields and methods of the object are not\nimplicitly in-scope; instead the keyword <code>self</code> is bound to the\nobject and can be used to access fields and methods of the object.\n</p>\n<p>\nAll the methods of an object type must be either declared or defined in the\nobject. A <code>method-decl</code> declares a method without defining it; a\n<code>method-defn</code> also supplies a definition.  An abstract object type\ndescriptor must not contain a <code>method-defn</code>.\n</p>\n<p>\nA method that is declared or defined with the remote qualifier is a remote\nmethod. A remote method is allowed only in a client object. A remote method is\ninvoked using a different syntax from a non-remote method.\n</p>\n<p>\nAny method that is declared but not defined within an object that is not\nabstract must be defined outside the object at the top-level of the module:\n</p>\n\n<pre\nclass=\"grammar\">outside-method-defn :=\n   annots\n   method-defn-quals\n   <code>function</code> qual-method-name function-signature function-body\nqual-method-name := object-type-name <code>.</code> method-name\n</pre>\n<p>\nThe <code>method-defn-quals</code> on an outside-method-defn must contain the\nsame qualifiers (both <code>remote</code> and visibility qualifiers) as the\ndeclaration of the method within the object.\n</p>\n<h5>Visibility</h5>\n\n<pre\nclass=\"grammar\">object-visibility-qual := [explicit-visibility-qual]\nexplicit-visibility-qual := <code>public</code> | <code>private</code>\n</pre>\n<p>\nEach field and method of an object type is visible within and can be accessed\nfrom a specific region of code, which is specified by its object-visibility-qual\nas follows:\n</p>\n<ul>\n<li>if the object-visibility qual is <code>private</code>, then the visibility\nregion consists of the methods defined by this object type descriptor;</li>\n<li>if the object-visibility-qual is empty, then the visibility region is the\nentire module containing this object type descriptor; this is called\nmodule-level visibility;</li>\n<li>if the object-visibility-qual is <code>public</code>, then the visibility region\ncontains all modules.</li>\n</ul>\n<p>\nThe visibility of a method or field of an abstract object type cannot be\n<code>private</code>.\n</p>\n<h5>Typing</h5>\n\n<p>\nThe shape of an object consists of an unordered collection of object field\nshapes and an unordered collection of object method shapes. An object field\nshape or object method shape is a triple consisting of the name of the field or\nmethod, the visibility region, and a shape for the value of the field or for the\nmethod's function.\n</p>\n<p>\nAn object type is inclusive, in a similar way to an\ninclusive-record-type-descriptor: an object shape belongs to an object type if\nit has at least the fields and methods described in the object-type-descriptor.\nThus all object values belong to the type <code>object { }</code>.\n</p>\n<p>\nAn object-type-descriptor that has a field with name f, visibility region R and\ntype T contains an object shape only if the object shape contains an object\nfield shape that has name f, visibility region R and a value shape that is\ncontained in T. An object-type-descriptor that has a method with name m,\nvisibility region R and function type T contains an object shape only if the\nobject shape contains an object method shape that has name m, visibility region\nR and a function value that belongs to type T.\n</p>\n<p>\nThus an object type T' is a subtype of an object type T only if for each field\nor method f of T there is a corresponding field or method f' of T such that the\ntype of f' in T' is a subtype of the type of f in T and the visibility region of\nf' in T' is the same as the visibility region of f in T.\n</p>\n<p>\nThis implies that:\n</p>\n<ul>\n<li>if an object type descriptor T has private fields or methods, then it is not\npossible to define another object type descriptor that is a subtype of T,\nand</li>\n<li>if an object type descriptor T has fields or methods with module-level\nvisibility, then it is possible to define another object type descriptor that is\na subtype of T only within the same module as T.</li>\n</ul>\n \n<h5>Initialization</h5>\n<p>\nA non-abstract object type provides a way to initialize an object of the type.\nAn object is initialized by:\n</p>\n<ol>\n<li>allocating storage for the object</li>\n<li>initializing each field with its default value, if it has one</li>\n<li>initializing the methods of the object using the type's method definitions</li>\n<li>calling the object's <code>__init</code> method, if there is one</li>\n</ol>\n<p>\nThe return type of the <code>__init</code> method must be a subtype of the union\nof error and nil, and must contain nil; if <code>__init</code> returns an error,\nit means that initialization of the object failed. The <code>__init</code>\nmethod can declare parameters in the same way as any other method.\n</p>\n<p>\nAt any point in the body of a <code>__init</code> method, the compiler\ndetermines which fields are potentially uninitialized. A field is potentially\nuninitialized at some point if that field does not have a default value and it\nis not definitely assigned at that point. It is a compile error if a\n<code>__init</code> method:\n</p>\n<ul>\n<li>accesses a field at a point where it is potentially initialized, or</li>\n<li>at a point where there is any potentially uninitialized value\n<ul>\n<li>returns nil, or</li>\n<li>uses the <code>self</code> variable other than to access or modify the value of a field.</li>\n</ul>\n</li>\n</ul>\n<p>\nAn object must have a __init method unless all its fields have a default value.\nAn object without a __init method behaves as it had a __init method with no\nparameters and an empty body (which will always return nil).\n</p>\n<p>\nThe visibility of the <code>__init</code> method cannot be <code>private</code>.\n</p>\n<h5>Object type references</h5>\n\n<pre\nclass=\"grammar\">object-type-reference :=\n   <code>*</code> type-descriptor-reference <code>;</code>\n</pre>\n<p>\nThe <code>type-descriptor-reference</code> in an\n<code>object-type-reference</code> must reference an abstract object type. The\nobject-member-descriptors from the referenced type are copied into the type\nbeing defined; the meaning is the same as if they had been specified explicitly.\n</p>\n<p>\nIf a non-abstract object type T<sub>o</sub> has a type reference to an abstract\nobject type T<sub>a</sub>, then each method declared in T<sub>a</sub> must be\ndefined in T<sub>o</sub> using either a <code>method-defn</code> or an\n<code>outside-method-defn</code> with the same visibility. If T<sub>a</sub> has\na method or field with module-level visibility, the T<sub>o</sub> must be in the\nsame module.\n</p>\n<h4>Futures</h4>\n\n<pre\nclass=\"grammar\">future-type-descriptor := <code>future</code> [type-parameter]\n</pre>\n<p>\nA future value represents a value to be returned by a named worker.  A future\nvalue belongs to a type <code>future&lt;T></code> if the value to be returned\nbelongs to T.\n</p>\n<p>\nA value belongs to a type <code>future</code> (without the type-parameter)\nif it has basic type future.\n</p>\n<h4>[Preview] Services</h4>\n\n<pre\nclass=\"grammar\">service-type-descriptor := <code>service</code>\n</pre>\n<p>\nA service value contains resources and methods. A service method is similar to\nan object method. A resource is a special kind of method, with associated\nconfiguration data, that is invoked in response to network input received by a\nListener.\n</p>\n<p>\nAll service values belong to the type <code>service</code>.\n</p>\n<p>\nIt is planned that a future version of Ballerina will provide a mechanism that\nallows more precise typing of services. In the meantime, implementations can use\nannotations on type definitions to support this.\n</p>\n<h4>[Preview] Streams</h4>\n\n<pre\nclass=\"grammar\">stream-type-descriptor := <code>stream</code> [type-parameter]\n</pre>\n<p>\nA value of type <code>stream&lt;T></code> is a distributor for values of type\n<code>T</code>: when a value v of type T is put into the stream, a function will\nbe called for each subscriber to the stream with v as an argument. T must be a\npure type.\n</p>\n<p>\nA value belongs to a type <code>stream</code> (without the type-parameter)\nif it has basic type stream.\n</p>\n\n<h4>Type descriptors</h4>\n<pre\nclass=\"grammar\">typedesc-type-descriptor := <code>typedesc</code> [type-parameter]\n</pre>\n<p>\nA type descriptor value is an immutable value representing a resolved type\ndescriptor. The type typedesc contains all values with basic type typedesc. A\ntypedesc value <var>t</var> belongs to a type typedesc&lt;<var>T</var>&gt; if\nand only if the type described by <code>t</code> is a subtype of <var>T</var>.\nThe typedesc type is thus covariant with its type parameter.\n</p>\n<p>\nReferencing an identifier defined by a type definition in an expression context\nwill result in a type descriptor value.\n</p>\n\n<h3>Type descriptors</h3>\n<pre\nclass=\"grammar\">type-descriptor :=\n   simple-type-descriptor\n   | structured-type-descriptor\n   | behavioral-type-descriptor\n   | singleton-type-descriptor\n   | union-type-descriptor\n   | optional-type-descriptor\n   | any-type-descriptor\n   | anydata-type-descriptor\n   | byte-type-descriptor\n   | json-type-descriptor\n   | type-descriptor-reference\n   | <code>(</code> type-descriptor <code>)</code>\ntype-descriptor-reference := qualified-identifier\n</pre>\n<p>\nIt is important to understand that the type descriptors specified in this\nsection do not add to the universe of values. They are just adding new ways to\ndescribe subsets of this universe.\n</p>\n<h4>Singleton types</h4>\n\n<pre\nclass=\"grammar\">singleton-type-descriptor := simple-const-expr\n\n</pre>\n<p>\nA singleton type is a type containing a single shape. A singleton type is\ndescribed using an compile-time constant expression for a single value: the type\ncontains the shape of that value. Note that it is possible for the\nvariable-reference within the simple-const-expr to reference a structured value.\n</p>\n<h4>Union types</h4>\n\n<pre\nclass=\"grammar\">union-type-descriptor := type-descriptor <code>|</code> type-descriptor\n</pre>\n<p>\nThe value space of a union type <code>T1|T2</code> is the union of\n<code>T1</code> and <code>T2</code>.\n</p>\n<h4>Optional types</h4>\n\n<pre\nclass=\"grammar\">optional-type-descriptor := type-descriptor <code>?</code>\n</pre>\n<p>\nA type <code>T?</code> means T optionally, and is exactly equivalent to\n<code>T|()</code>.\n</p>\n<h4>Any Type</h4>\n\n<pre class=\"grammar\">any-type-descriptor := <code>any</code>\n</pre>\n<p>\nThe type descriptor <code>any</code> describes the type consisting of all values\nother than errors. A value belongs to the any type if and only if its basic type\nis not error. Thus all values belong to the type <code>any|error</code>. Note\nthat a structure with members that are errors belongs to the <code>any</code>\ntype.\n</p>\n<h4>Anydata type</h4>\n\n<pre\nclass=\"grammar\">anydata-type-descriptor := <code>anydata</code>\n</pre>\n<p>\nThe type descriptor <code>anydata</code> describes the type of all pure values\nother than errors. The type <code>anydata</code> contains a shape if and only if\nthe shape is pure and is not the shape of an error value.\n</p>\n<p>\nThus the type <code>anydata|error</code> is the supertype of all pure types. The\ntype <code>anydata</code> is equivalent to the union\n</p>\n\n<pre\n>  () | boolean | int | float | decimal | string\n    | (anydata|error)[] | map&lt;anydata|error>\n    | xml | table\n</pre>\n<h4>Byte type</h4>\n\n<pre class=\"grammar\">byte-type-descriptor := <code>byte</code>\n</pre>\n<p>\nThe byte type is an abbreviation for a union of the int values in the range 0 to\n255 inclusive.\n</p>\n<h4>JSON types</h4>\n\n<pre\nclass=\"grammar\">json-type-descriptor := json\n\njson means  () | boolean | int | float | decimal | string | json[] | map&lt;json>\n</pre>\n<h3 id=\"built-in_abstract_object_types\">Built-in abstract object types</h3>\n<p>\nThere are several abstract object types that are built-in in the sense that the\nlanguage treats objects with these types specially. Note that it is only the\ntypes that are built-in; the names of these types are not built-in.\n</p>\n<p>\n<strong>Note</strong> It is likely that a future version of this specification\nwill provide generic types, so that a library can provide definitions of these\nbuilt-in types.\n</p>\n<h4>Iterator</h4>\n<p>\nA value that is iterable as a sequence of values of type T provides a way of\ncreating an iterator object that matches the type\n</p>\n\n<pre\n>    abstract object {\n       public next() returns record {| T value; |}?;\n    }\n</pre>\n<p>\nIn this specification, we refer to this type as Iterator&lt;T>.\n</p>\n<p>\nConceptually an iterator represents a position between members of the sequence.\nPossible positions are at the beginning (immediately before the first member if\nany), between members and at the end (immediately after the last member if any).\nA newly created iterator is at the beginning position. For an empty sequence,\nthere is only one possible position which is both at the beginning and at the\nend.\n</p>\n<p>\nThe <code>next()</code> method behaves as follows:\n</p>\n<ul>\n<li>if the iterator is currently at the end position, return nil</li>\n<li>otherwise\n<ul>\n<li>move the iterator to next position, and</li>\n<li>return a record <code>{ value: v }</code> where v is the member of the\nsequence between the previous position and the new position</li>\n</ul>\n</li>\n</ul>\n<p>\nNote that it is not possible for the <code>next()</code> method simply to return\na member of the sequence, since a nil member would be indistinguishable from the\nreturn value for the end position.\n</p>\n<h4>Iterable</h4>\n<p>\nAn object can make itself be iterable as a sequence of values of type T by\nproviding a method named <code>__iterator</code> which returns a value that is a\nsubtype of Iterator&lt;T>. In this specification, we refer to this type as\nIterable&lt;T>.\n</p>\n<h4>Collection</h4>\n<p>\nAn object can declare itself to be a collection of values of type V indexed by\nkeys of type K, but defining a <code>__get(K k)</code> method returning a value\nof type V, that returns the value associated with key k. If the collection is\nmutable, then the object can also declare a <code>__put(K k, V v)</code> method\nthat changes the value associated with key k to to value v. In this\nspecification, we refer to these types as ImmutableCollection&lt;T> and\nMutableCollection&lt;T>.\n</p>\n<h4>Listener</h4>\n<p>\nThe Listener type is defined as follows.\n</p>\n\n<pre>abstract object {\n   function __attach (service s, string? name = ()) returns error?;\n   function __start () returns error?;\n   function __stop () returns error?;\n}\n</pre>\n<p>\nNote that if an implementation does precise service typing using annotations on\ntype definitions, it will need to treat Listener as being parameterized in the\nprecise service type that is used to the first argument to\n<code>__attach</code>.\n</p>\n<h3>Abstract operations</h3>\n<p>\nThese section specifies a number of operations that can be performed on values.\nThese operations are for internal use by the specification.  These operations\nare named in CamelCase to distinguish them from built-in methods.\n</p>\n<h4>Freeze</h4>\n<p>\nFreeze(v) is defined for any pure value v. The result of Freeze(v) is always v.\nIt recursively freezes any structural values and their members, thus maintaining\nthe invariant that frozen values can only refer to immutable values. Freeze(v)\nfor a value v is already frozen or is of an immutable type (i.e. a simple type\nof error) just returns v without modifying it.  Freeze(v) must terminate for any\npure value v, even if v has cycles.\n</p>\n<h4>Clone</h4>\n<p>\nClone(v) is defined for any pure value v. It performs a deep copy, recursively\ncopying all structural values and their members. Clone(v) for a value v that is\nfrozen or of an immutable type (ie a simple type or error) returns v. If v is a\ncontainer, Clone(v) has the same inherent type as v.  The graph of references of\nClone(v) must have the same structure as that of v. This implies that the number\nof distinct references reachable from Clone(v) must be the same as the number of\ndistinct references reachable from v.  Clone(v) must terminate for any pure\nvalue v, even if v has cycles.\n</p>\n<p>\nClone(v) cannot be implemented simply by recursively calling Clone on all\nmembers of v. Rather Clone must maintain a map that records the result of\ncloning each reference value. When a Clone operation starts, this map as empty.\nWhen cloning a reference value, it must use the result recorded in the map if\nthere is one.\n</p>\n<h4>UnfrozenClone</h4>\n<p>\nUnfrozenClone works the same as Clone except for its treatment of frozen values.\nWhereas for a frozen value v, Clone(v) is v, UnfrozenClone(v) returns a new\nvalue that is not frozen and that has the same shape as v. UnfrozenClone handles\nvalues of immutable types (simple types and errors) in the same way as Clone.\nLike Clone, UnfrozenClone preserves graph structure.\n</p>\n<h4>SameShape</h4>\n<p>\nSameShape(v1, v2) is defined for any pure values v1, v2. It returns true or\nfalse depending of whether v1 and v2 have the same shape. SameShape(v1, v2) must\nterminate for any pure values v1 and v2, even if v1 or v2 have cycles.\nSameShape(v1, v2) returns true if v1 and v2 have the same shape, even if the\ngraphs of references of v1 and v2 have different structures.  If two values v1\nand v2 have different basic types, then SameShape(v1, v2) will be false.\n</p>\n<p>\nThe possibility of cycles means that SameShape cannot be implemented simply by\ncalling SameShape recursively on members. Rather SameShape must maintaom a\nmapping that records for each pair of references whether it is already in\nprocess of comparing those references. When a SameShape operation starts, this\nmap is empty. Whenever it starts to compare two references, it should see\nwhether it has already recorded that pair (in either order), and, if it has,\nproceed on the assumption that they compare equal.\n</p>\n<p>\nSameShape(Clone(x), x) is guaranteed to be true for any pure value.\n</p>\n<h4>NumericConvert</h4>\n<p>\nNumericConvert(t, v) is defined if t is the typedesc for float, decimal or int,\nand v is a numeric value. It converts v to a value in t, or returns an error,\naccording to the following table.\n</p>\n<table>\n  <tr>\n   <td>from  \\ to</td>\n   <td>float</td>\n   <td>decimal</td>\n   <td>int</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>unchanged</td>\n   <td>closest math value</td>\n   <td rowspan=\"2\" >round, error for NaN or out of int range</td>\n  </tr>\n  <tr>\n   <td>decimal</td>\n   <td>closest math value</td>\n   <td>unchanged</td>\n  </tr>\n  <tr>\n   <td>int</td>\n   <td>same  math value</td>\n   <td>same math value</td>\n   <td>unchanged</td>\n  </tr>\n</table>\n<h3>Binding patterns and variables</h3>\n<h4>Binding patterns</h4>\n<p>\nBinding patterns are used to support destructuring, which allows different parts\nof a single structured value each to be assigned to separate variables at the\nsame time.\n</p>\n\n<pre\nclass=\"grammar\">binding-pattern :=\n   capture-binding-pattern\n   | wildcard-binding-pattern\n   | list-binding-pattern\n   | mapping-binding-pattern\n   | error-binding-pattern\ncapture-binding-pattern := variable-name\nvariable-name := identifier\nwildcard-binding-pattern := <code>_</code>\nlist-binding-pattern := <code>[</code> list-member-binding-patterns <code>]</code>\nlist-member-binding-patterns :=\n   binding-pattern (<code>,</code> binding-pattern)* [<code>,</code> rest-binding-pattern]\n   | [ rest-binding-pattern ]\nmapping-binding-pattern := <code>{</code> field-binding-patterns <code>}</code>\nfield-binding-patterns :=\n   field-binding-pattern (<code>,</code> field-binding-pattern)* [<code>,</code> rest-binding-pattern]\n   | [ rest-binding-pattern ] \nfield-binding-pattern :=\n   field-name <code>:</code> binding-pattern\n   | variable-name\nrest-binding-pattern := <code>...</code> variable-name\nerror-binding-pattern := <code>error</code> <code>(</code> error-arg-list-binding-pattern <code>)</code>\nerror-arg-list-binding-pattern :=\n   simple-binding-pattern (<code>,</code> named-arg-binding-pattern)* [<code>,</code> rest-binding-pattern]\n   | named-arg-binding-pattern (<code>,</code> named-arg-binding-pattern)* [<code>,</code> rest-binding-pattern]\n   | [ rest-binding-pattern ]\nsimple-binding-pattern :=\n   capture-binding-pattern\n   | wildcard-binding-pattern\nnamed-arg-binding-pattern := arg-name <code>=</code> binding-pattern\n</pre>\n<p>\nA binding pattern may succeed or fail in matching a value. A successful match\ncauses values to be assigned to all the variables occurring the binding-pattern.\n</p>\n<p>\nA binding pattern matches a value in any of the following cases.\n</p>\n<ul>\n<li>a capture-binding-pattern always matches a value and causes the matched\nvalue to be assigned to named variable;</li>\n<li>a wildcard-binding-pattern matches a value if the value belongs to type any,\nin other words if the basic type of the value is not error; it does not cause\nany assignments to be made;</li>\n<li>a list-binding-pattern with m binding patterns matches a list with n\nmembers if m is less than or equal to m, and the i-th binding pattern matches\nthe i-th member of the list for each i in 1 to m, and either m is equal to n or\nthe list-binding-pattern includes a rest-binding-pattern; if there is a\nrest-binding-pattern <code>...v</code>, then a successful match causes a new\nlist value consisting of all members of the matched list except for the the\nfirst m values to be assigned to <code>v</code>;</li>\n<li>a mapping-binding-pattern { f<sub>1</sub>: p<sub>1</sub>, f<sub>2</sub>:\np<sub>2</sub>, ..., f<sub>n</sub>: p<sub>n</sub>, r } matches a mapping value m\nthat includes fields f<sub>1</sub>, f<sub>2</sub>, ... , f<sub>n</sub> if\np<sub>i</sub> matches the value of field f<sub>i</sub> for each i in 1 to n; if\nr is <code>...v</code> then a successful match causes a new mapping value\nconsisting of all the other fields to be assigned to <code>v</code>; a\nfield-binding-pattern consisting of just a variable-name <code>x</code> is\nequivalent to a field-binding-pattern <code>x: x</code>;\n</li>\n<li>an error-binding-pattern error(p<sub>r</sub>, f<sub>1</sub> = p<sub>1</sub>,\nf<sub>2</sub> = p<sub>2</sub>, ..., f<sub>n</sub> = p<sub>n</sub>, r) matches an\nerror value if it has an error reason string that matches p<sub>r</sub> and a\ndetail record that has fields f<sub>1</sub>, f<sub>2</sub>, ... , f<sub>n</sub> such\nthat p<sub>i</sub> matches the value of field f<sub>i</sub> for each i in 1 to\nn; if r is <code>...v</code> then a successful match causes a new mapping value\nconsisting of all fields other than f<sub>1</sub>, f<sub>2</sub>, ... ,\nf<sub>n</sub> to be assigned to <code>v</code>;</li>\n</ul>\n<p>\nAll the variables in a binding-pattern must be distinct e.g. (x, x) is not\nallowed.\n</p>\n<p>\nGiven a type descriptor for every variable in a binding-pattern, there is a type\ndescriptor for the binding-pattern that will contain a value just in case that\nthe binding pattern successfully matches the value causing each variable to be\nassigned a value belonging to the type descriptor for that variable.\n</p>\n<ul>\n<li>for a capture-binding-pattern, the type descriptor is the type descriptor\nfor that variable;</li>\n<li>for a wildcard-binding-pattern, the type descriptor is any</li>\n<li>for a list-binding-pattern, the type descriptor is a tuple type descriptor;</li>\n<li>for a mapping-binding-pattern, the type descriptor is a record type\ndescriptor;</li>\n<li>for an error-binding-pattern, the type descriptor is an error type\ndescriptor.</li>\n</ul>\n\n<h4>Typed binding patterns</h4>\n\n<pre\nclass=\"grammar\">typed-binding-pattern := inferable-type-descriptor binding-pattern\ninferable-type-descriptor := type-descriptor | <code>var</code>\n</pre>\n<p>\nA typed-binding-pattern combines a type-descriptor and a binding-pattern, and is\nused to create the variables occurring in the binding-pattern. If var is used\ninstead of a type-descriptor, it means the type is inferred. How the type is\ninferred depends on the context of the typed-binding-pattern. An\ninferable-type-descriptor is an inferable context for a type descriptor, which\nmeans that <code>*</code> can be used with the type descriptor to infer certain\nparts of it.\n</p>\n<p>\nThe simplest and most common form of a typed-binding-pattern is for the binding\npattern to consist of just a variable name. In this case, the variable is\nconstrained to contain only values matching the type descriptor.\n</p>\n<p>\nWhen the binding pattern is more complicated, the binding pattern must be\nconsistent with the type-descriptor, so that the type-descriptor unambiguously\ndetermines a type for each variable occurring in the binding pattern. A binding\npattern occurring in a typed-binding-pattern must also be irrefutable with\nrespect to the type of value against which it is to be matched. In other words,\nthe compiler will ensure that matching such a binding pattern against a value\nwill never fail at runtime.\n</p>\n<h4>Variable scoping</h4>\n<p>\nFor every variable, there is place in the program that creates it. Variables are\nlexically scoped: every variable has a scope which determines the region of the\nprogram within which the variable can be referenced.\n</p>\n<p>\nThere are two kinds of scope: module scope and block scope. A variable with\nmodule scope can be referenced anywhere within a module. Identifiers with module\nscope are used to identify not only variables but other module-level entities\nsuch as functions.\n</p>\n<p>\nA variable with block scope can be referenced only within a particular block\n(always delimited with curly braces). Block-scope variables are created by a\nvariety of different constructs, many of which use a typed-binding-pattern.\nParameters are treated as read-only variables with block scope.\n</p>\n<p>\nA variable with block scope can have the same name as a variable with module\nscope; the former variable will hide the latter variable while the former\nvariable is in scope. However, it is a compile error if a variable with block\nscope has the same name as another variable with block scope and the two scopes\noverlap.\n</p>\n<h2 id=\"expressions\">6. Expressions</h2>\n\n<pre\nclass=\"grammar\">expression := \n   literal\n   | list-constructor-expr\n   | mapping-constructor-expr\n   | table-constructor-expr\n   | service-constructor-expr\n   | string-template-expr\n   | xml-expr\n   | new-expr\n   | variable-reference-expr\n   | field-access-expr\n   | annot-access-expr\n   | index-expr\n   | xml-attributes-expr\n   | function-call-expr\n   | method-call-expr\n   | error-constructor-expr\n   | anonymous-function-expr\n   | arrow-function-expr\n   | type-cast-expr\n   | typeof-expr\n   | unary-expr\n   | multiplicative-expr\n   | additive-expr\n   | shift-expr\n   | range-expr\n   | numeric-comparison-expr\n   | is-expr\n   | equality-expr\n   | binary-bitwise-expr\n   | logical-expr\n   | conditional-expr\n   | check-expr\n   | trap-expr\n   | table-query-expr\n   | <code>(</code> expression <code>)</code>\n</pre>\n<p>\nFor simplicity, the expression grammar is ambiguous. The following table shows\nthe various types of expression in decreasing order of precedence, together with\nassociativity.\n</p>\n<table>\n  <tr>\n   <td><strong>Operator</strong></td>\n   <td><strong>Associativity</strong></td>\n  </tr>\n  <tr>\n   <td>\n<code>x.k</code>\n<br />\n<code>x.@a</code>\n<br />\n<code>f(x)</code>\n<br />\n<code>x.f(y)</code>\n<br />\n<code>x[y]</code>\n<br />\n<code>new T(x)</code>\n   </td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>+x</code>\n<br />\n<code>-x</code>\n<br />\n<code>~x</code>\n<br />\n<code>!x</code>\n<br />\n<code>&lt;T> x</code>\n<br />\n<code>typeof x</code>\n   </td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>x * y</code>\n<br />\n<code>x / y</code>\n<br />\n<code>x % y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x + y</code>\n<br />\n<code>x - y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x &lt;&lt; y</code>\n<br />\n<code>x >> y</code>\n<br />\n<code>>>></code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x ... y</code>\n<br />\n<code>x ..&lt; y</code>\n   </td>\n   <td>non</td>\n  </tr>\n  <tr>\n   <td>\n<code>x &lt; y</code>\n<br />\n<code>x > y</code>\n<br />\n<code>x &lt;= y</code>\n<br />\n<code>x >= y</code>\n<br />\n<code>x is y</code>\n   </td>\n   <td>non</td>\n  </tr>\n  <tr>\n   <td>\n<code>x == y</code>\n<br />\n<code>x != y</code>\n<br />\n<code>x === y</code>\n<br />\n<code>x !== y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x &amp; y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x ^ y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x | y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x &amp;&amp; y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x || y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x ?: y</code></td>\n   <td>right</td>\n  </tr>\n  <tr>\n   <td><code>x ? y : z</code></td>\n   <td>right</td>\n  </tr>\n  <tr>\n   <td><code>(x) => y</code></td>\n   <td>right</td>\n  </tr>\n</table>\n<h3>Expression evaluation</h3>\n<p>\nWhen the evaluation of an expression completes normally, it produces a result,\nwhich is a value. The evaluation of an expression may also complete abruptly.\nThere are two kinds of abrupt completion: check-fail and panic. With both kinds\nof abrupt completion there is an associated value, which always has basic type\nerror.\n</p>\n<p>\nThe following sections describes how each kind expression is evaluated, assuming\nthat evaluation of subexpressions complete normally. Except where explicitly\nstated to the contrary, expressions handle abrupt completion of subexpressions\nas follows. If in the course of evaluating an expression E, the evaluation of\nsome subexpression E1 completes abruptly, then then evaluation of E also\ncompletes abruptly in the same way as E1.\n</p>\n<h3>Static typing of expressions</h3>\n<p>\nA type is computed for every expression at compile type; this is called the\nstatic type of the expression. The compiler and runtime together guarantee that\nif the evaluation of an expression at runtime completes normally, then the\nresulting value will belong to the static type. A type is also computed for\ncheck-fail abrupt completion, which will be a (possibly empty) subtype of error;\nhowever, for panic abrupt completion, no type is computed.\n</p>\n<p>\nThe detailed rules for the static typing of expressions are quite elaborate and\nare not specified completely in this document. This document only mentions some\nkey points that programmers might need to be aware of.\n</p>\n<h4>Contextually expected type</h4>\n<p>\nFor a context in which an expression occurs, there may be a type descriptor that\ndescribes the static type that the expression is expected to have. This is\ncalled the <em>contextually expected type</em>. For example, if a variable is\ndeclared by a type descriptor TD, then TD will be the contextually expected type\nfor the expression initializing the variable. A type descriptor must be\nresolved before it can be used to provide a contextually expected type.</p>\n<p>\nMany kinds of expression that construct values use the contextually expected\ntype to determine the type of value constructed, rather than requiring the type\nto be specified explicitly. For each such kind of expression, there is a set of\nbasic types (most often consisting of a single basic type) that the value\nconstructed by that kind of expression will always belong to. In this case, the\ncontextually expected type is narrowed by intersecting it with this set of basic\ntypes; this narrowed type is called the <em>applicable</em> contextually\nexpected type. The narrowing is performed on the type descriptor by first\nnormalizing the type descriptor into a union, where each member of the union is\nnot a union and describes shapes from a single basic type, and then eliminating\nany members of the union with the wrong basic type; if this leaves no members,\nthen it is a compile-time error; if it leaves a single member of the union, then\nthe the applicable contextually expected type is this single member, otherwise\nit is a union of the remaining members.\n</p>\n<p>\nNote the language provides a way to say that the type of a variable is to be\ninferred from the static type of the expression used to initialize the variable.\nIn this case, there is no contextually expected type for the evaluation of the\nexpression. Not having a contextually expected type is different from having a\ncontextually expected type that allows all values.\n</p>\n<h4>Precise and broad types</h4>\n<p>\nThere is an additional complexity relating to inferring types. Expressions in\nfact have two static types, a precise type and a broad type. Usually, the\nprecise type is used. However, in a few situations, using the precise type would\nbe inconvenient, and so Ballerina uses the broad type. In particular, the broad\ntype is used for inferring the type of an implicitly typed non-final variable.\nSimilarly, the broad type is used when it is necessary to infer the member type\nof the inherent type of a container.\n</p>\n<p>\nIn most cases, the precise type and the broad type of an expression are the\nsame. For a compound expression, the broad type of an expression is computed\nfrom the broad type of the sub-expressions in the same way as the precise type\nof the expression is computed from the precise type of sub-expressions.\nTherefore in most cases, there is no need to mention the distinction between\nprecise and broad types.\n</p>\n<p>\nThe most important case where the precise type and the broad type are different\nis literals. The precise type is a singleton type containing just the shape of\nthe value that the literal represents, whereas the broad type is the precise\ntype widened to contain the entire basic type of which it is a subtype. For\nexample, the precise type of the string literal <code>\"X\"</code> is the\nsingleton type <code>\"X\"</code>, but the broad type is <code>string</code>.\n</p>\n<p>\nFor a type-cast-expr, the precise type and the broad type are the type\nspecified in the cast.\n</p>\n<h3>Casting and conversion</h3>\n<p>\nBallerina makes a sharp distinction between type conversion and type casting.\n</p>\n<p>\nCasting a value does not change the value. Any value always belongs to multiple\ntypes. Casting means taking a value that is statically known to be of one type,\nand using it in a context that requires another type; casting checks that the\nvalue is of that other type, but does not change the value.\n</p>\n<p>\nConversion is a process that takes as input a value of one type and produces as\noutput a possibly distinct value of another type. Note that conversion does not\nmutate the input value.\n</p>\n<p>\nBallerina always requires programmers to make conversions explicit, even between\ndifferent types of number; there are no implicit conversions.\n</p>\n<h3>Constant expressions</h3>\n\n<pre\nclass=\"grammar\">const-expr := \n   literal\n   | list-constructor-expr\n   | mapping-constructor-expr\n   | table-constructor-expr\n   | string-template-expr\n   | xml-expr\n   | constant-reference-expr\n   | type-cast-expr\n   | unary-expr\n   | multiplicative-expr\n   | additive-expr\n   | shift-expr\n   | range-expr\n   | numeric-comparison-expr\n   | is-expr\n   | equality-expr\n   | binary-bitwise-expr\n   | logical-expr\n   | conditional-expr\n   | <code>(</code> const-expr <code>)</code>\n</pre>\n<p>\nWithin a <code>const-expr</code>, any nested expression must also be a\nconst-expr.\n</p>\n\n<pre\nclass=\"grammar\">constant-reference-expr := variable-reference-expr\n</pre>\n<p>\nA <code>constant-reference-expr</code> must reference a constant defined with\n<code>module-const-decl</code>.\n</p>\n<p>\nA <code>const-expr</code> is evaluated at compile-time. The result of a\n<code>const-expr</code> is automatically frozen. Note that the syntax of\nconst-expr does not allow for the construction of error values.\n</p>\n\n<pre\nclass=\"grammar\">simple-const-expr :=\n  nil-literal\n  | boolean\n  | [Sign] int-literal\n  | [Sign] floating-point-literal\n  | string-literal\n  | const-reference-expr\n</pre>\n<p>\nA simple-const-expr is a restricted form of const-expr used in contexts where\nvarious forms of constructor expression would not make sense. Its semantics are\nthe same as a const-expr.\n</p>\n<h3>Literals</h3>\n\n<pre\nclass=\"grammar\">literal :=\n   nil-literal\n   | boolean-literal\n   | numeric-literal\n   | string-literal\n   | byte-array-literal\nnumeric-literal := int-literal | floating-point-literal\n</pre>\n<p>\nA numeric-literal represents a value belonging to one of the basic types\nint, float or decimal. The basic type to which the value belongs is determined\nas follows:\n</p>\n<ul>\n<li>if the numeric-literal includes a <code>FloatTypeSuffix</code>, then the\nbasic type is float;</li>\n<li>if the numeric-literal includes a <code>DecimalTypeSuffix</code>, then the\nbasic type is decimal;</li>\n<li>if the numeric-literal is a <code>HexFloatingPointLiteral</code>, then the\nbasic type is float;</li>\n<li>otherwise, the basic type depends on the applicable expected numeric type\n(where the possible basic types are int, float and decimal):\n<ul>\n<li>if the applicable contextually expected type is a subtype of decimal, then\nthe basic type is decimal;</li>\n<li>if the applicable contextually expected type is a subtype of float, then the\nbasic type is float;</li>\n<li>otherwise, if the numeric literal is an int-literal, then the basic type is\nint;</li>\n<li>otherwise, the basic type is float.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe precise type of a numeric-literal is the singleton type containing just the\nshape of the value that the numeric-literal represents. The broad type is\nthe basic type of which the precise type is a subset.\n</p>\n\n<pre\nclass=\"grammar\">byte-array-literal := Base16Literal | Base64Literal\nBase16Literal := <code>base16</code> WS <code>`</code> HexGroup* WS <code>`</code>\nHexGroup := WS HexDigit WS HexDigit\nBase64Literal := <code>base64</code> WS <code>`</code> Base64Group* [PaddedBase64Group] WS <code>`</code>\nBase64Group :=\n   WS Base64Char WS Base64Char WS Base64Char WS Base64Char\nPaddedBase64Group :=\n   WS Base64Char WS Base64Char WS Base64Char WS PaddingChar\n   | WS Base64Char WS Base64Char WS PaddingChar WS PaddingChar\nBase64Char := <code>A</code> .. <code>Z</code> | <code>a</code> .. <code>z</code> | <code>0</code> .. <code>9</code> | <code>+</code> | <code>/</code>\nPaddingChar := <code>=</code>\nWS := WhiteSpaceChar*\n</pre>\n<p>\nThe static type of byte-array-literal is <code>byte[N]</code>, where N is the\nnumber of bytes encoded by the Base16Literal or Base64Literal. The inherent type\nof the array value created is also <code>byte[N]</code>.\n</p>\n<h3>List constructor</h3>\n\n<pre\nclass=\"grammar\">list-constructor-expr := <code>[</code> [ expr-list ] <code>]</code>\nexpr-list = expression (<code>,</code> expression)*\n</pre>\n<p>\nCreates a new list value. The members of the list come from evaluating each\nexpression in the expr-list in order.\n</p>\n<p>\nThe inherent type of the newly created list is derived from the applicable\ncontextually expected type. It is an error if there is no contextually expected\ntype. If the applicable contextually expected type is a list type descriptor,\nthen that used as the inherent type. If the applicable contextually expected\ntype is a union type descriptor, then any members of the union that do not\ncontain list shapes of length N will be ignored, where N is the number of\nexpressions in the <code>expr-list</code>; it is a compile-time error if this\ndoes not leave a single list type descriptor, which is then used as the inherent\ntype. The static type of the list-constructor-expr will be the same as the\ninherent type.\n</p>\n<p>\nThe type that the inherent type requires for each list member provides the\ncontextually expected type for the expression for the member.\n</p>\n<p>\nSome members of a list can be filled in automatically. A member can be filled in\nautomatically if its type descriptor, as determined by the inherent type of the\nlist, provides a way to create a <em>filler</em> value. The following table\nspecifies the filler value for each kind of type descriptor that provides one.\n</p>\n<table>\n<tr>\n<th>Type descriptor</th>\n<th>Filler value</th>\n<th>When provided</th>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>+0.0f</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>decimal</code></td>\n<td><code>+0.0d</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>\"\"</code></td>\n<td></td>\n</tr>\n<tr>\n<td>list type descriptor</td>\n<td><code>[]</code></td>\n<td>if that is a valid constructor for the type</td>\n</tr>\n<tr>\n<td>mapping type descriptor</td>\n<td><code>{ }</code></td>\n<td>if that is a valid constructor for the type</td>\n</tr>\n<tr>\n<td>table</td>\n<td>empty table (with no rows)</td>\n<td></td>\n</tr>\n<tr>\n<td>object</td>\n<td><code>new T()</code></td>\n<td>if this is valid and its static type does not include error, where\n<code>T</code> is the object type descriptor (an abstract object type will not\nhave a filler value)</td>\n</tr>\n<tr>\n<td><code>xml</code></td>\n<td><code>xml``</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>stream&lt;T&gt;</code></td>\n<td><code>new stream&lt;T&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>singleton</td>\n<td>the single value used to specify the type</td>\n<td></td>\n</tr>\n<tr>\n<td rowspan=\"2\">union</td>\n<td><code>()</code></td>\n<td>if <code>()</code> is a member of the union</td>\n</tr>\n<tr>\n<td>the filler value for basic type B</td>\n<td>if all members of the union belong to a single basic type B,\nand the filler value for B also belongs to the union</td>\n</tr>\n<tr>\n<td><code>T?</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>any</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>anydata</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>byte</code></td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>json</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n</table>\n<p>\nThe inherent type of a list establishes either a fixed length for the list or\njust a minimum length for the list, which may be zero. In the latter case, for\neach <var>j</var> greater than <var>m</var>, where <var>m</var> is the minimum\nlength of the list, the inherent type of the list must be such that\n<var>j</var>-th member can be filled in automatically. In either case, a list\nconstructor may specify only the first <var>k</var> members, provided that for\neach <var>i</var> from <var>k</var> + 1 up to the fixed length of the list, the\n<var>i</var>-th member can be filled in automatically.\n</p>\n\n<h3>Mapping constructor</h3>\n\n<pre\nclass=\"grammar\">mapping-constructor-expr := <code>{</code> [field (<code>,</code> field)*] <code>}</code>\nfield := (literal-field-name | computed-field-name) <code>:</code> value-expr\nliteral-field-name := field-name | string-literal\ncomputed-field-name := <code>[</code> expression <code>]</code>\nvalue-expr := expression\n</pre>\n<p>\nA mapping-constructor-expr creates a new mapping value. An expression can be\nused to specify the name of a field by enclosing the expression in square\nbrackets.\n</p>\n<p>\nThe inherent type of the newly created mapping is derived from the applicable\ncontextually expected type. It is an error if there is no contextually expected\ntype. If the applicable contextually expected type is a mapping type descriptor,\nthen that used as the inherent type. If the applicable contextually expected\ntype is a union type descriptor, then any members of the union that are\ninconsistent with the field names specified as a literal-field-name in the\nmapping-constructor-expr will be ignored; it is a compile-time error if this\ndoes not leave a single mapping type descriptor, which is then used as the\ninherent type. The static type of the mapping-constructor-expr will be the same\nas the inherent type.\n</p>\n<p>\nIf the inherent type descriptor is a record type descriptor, a field will be\nadded to the constructed value using the default value from the type descriptor\nfor any field that is not specified explicitly in the mapping constructor and\nthat has a default value.\n</p>\n<p>\nThe type that the inherent type requires for each field provides the\ncontextually expected type for the value-expr for that field. The contextually\nexpected type for a computed-field-name is string.\n</p>\n\n<h3>[Preview] Table constructor</h3>\n\n<pre\nclass=\"grammar\">table-constructor-expr :=\n   <code>table</code> <code>{</code> [column-descriptors [<code>,</code> table-rows]] <code>}</code>\ncolumn-descriptors := <code>{</code> column-descriptor (<code>,</code> column-descriptor)* <code>}</code>\ncolumn-descriptor := column-constraint* column-name\ncolumn-constraint :=\n   <code>key</code>\n   | <code>unique</code>\n   | <code>auto</code> auto-kind \nauto-kind := auto-kind-increment\nauto-kind-increment := <code>increment</code> [<code>(</code>seed<code>,</code> increment<code>)</code>]\nseed := integer\nincrement := integer\ntable-rows :=  <code>[</code> table-row (<code>,</code> table-row)* <code>]</code>\ntable-row := <code>{</code> expression (<code>,</code> expression)* <code>}</code>\n</pre>\n<p>\nThe contextually expected type of the table-constructor-expr determines the\ninherent type of the constructed value.\n</p>\n<p>\nFor example,\n</p>\n\n<pre>table {\n  { key firstName, key lastName, position },\n  [ \n    {\"Sanjiva\", \"Weerawarana\", \"lead\" },\n    {\"James\", \"Clark\", \"design co-lead\" }\n  ]\n}\n</pre>\n<h3>Service constructor</h3>\n\n<pre\nclass=\"grammar\">service-constructor-expr := annots <code>service</code> service-body-block\nservice-body-block := <code>{</code> service-method-defn* <code>}</code>\nservice-method-defn :=\n   metadata\n   service-method-defn-quals\n   function identifier function-signature method-body\nservice-method-defn-quals :=\n   [explicit-visibility-qual | <code>resource</code>]\n</pre>\n<p>\nA <code>service-constructor-expr</code> constructs a service value. The result\nof evaluating a service-constructor-expr is a value of type service. If a\nservice-method-defn contains a resource qualifier, then it defines a resource,\notherwise it defines a method. The self variable can be used in a method-body of\na service-method-defn in the same way as for objects.\n</p>\n<p>\nEach service value has a distinct type descriptor. (Evaluating a service\nconstructor thus has an effect analogous to defining an anonymous object type\nand then creating a value of that type.)\n</p>\n<p>\nThe return type of a resource must be a subtype of <code>error?</code> and must contain\nnil.\n</p>\n<h3>String template expression</h3>\n\n<pre\nclass=\"grammar\">string-template-expr := <code>string</code> BacktickString\nBacktickString :=\n  <code>`</code> BacktickItem* Dollar* <code>`</code>\nBacktickItem :=\n   BacktickSafeChar\n   | BacktickDollarsSafeChar\n   | Dollar* interpolation\ninterpolation := <code>${</code> expression <code>}</code>\nBacktickSafeChar := ^ ( <code>`</code> | <code>$</code> )\nBacktickDollarsSafeChar :=  <code>$</code>+ ^ ( <code>{</code> | <code>`</code> | <code>$</code>)\nDollar := <code>$</code>\n</pre>\n<p>\nA <code>string-template-expr</code> interpolates the results of evaluating\nexpressions into a literal string. The static type of the expression in each\ninterpolation must be a simple type and must not be nil. Within a\n<code>BacktickString</code>, every character that is not part of an\n<code>interpolation</code> is interpreted as a literal character. A\nstring-template-expr is evaluated by evaluating the expression in each\ninterpolation in the order in which they occur, and converting the result of the\neach evaluation to a string as if using by <code>&lt;string></code>. The result\nof evaluating the <code>string-template-expr</code> is a string comprising the\nliteral characters and the results of evaluating and converting the\ninterpolations, in the order in which they occur in the\n<code>BacktickString</code>.\n</p>\n<p>\nA literal <code>`</code> can be included in string template by using an\ninterpolation <code>${\"`\"}</code>.\n</p>\n<h3>XML expression</h3>\n\n<pre\nclass=\"grammar\">xml-expr := <code>xml</code> BacktickString\n</pre>\n<p>\nAn XML expression creates an XML value as follows:\n</p>\n<ol>\n<li>The backtick string is parsed to produce a string of literal characters with\ninterpolated expressions</li>\n<li>The result of the previous step is parsed as XML content. More precisely, it\nis parsed using the production <code>content</code> in the W3C XML\nRecommendation. For the purposes of parsing as XML, each interpolated expression\nis interpreted as if it were an additional character allowed by the CharData and\nAttValue productions but no other. The result of this step is an XML Infoset\nconsisting of an ordered list of information items such as could occur as the\n[children] property of an element information item, except that interpolated\nexpressions may occur as Character Information Item or in the [normalized value]\nof an Attribute Information Item. Interpolated expressions are not allowed in\nthe value of a namespace attribute.</li>\n<li>This infoset is then converted to an XML value, together with an ordered\nlist of interpolated expressions, and for each interpolated expression a\nposition within the XML value at which the value of the expression is to be\ninserted.</li>\n<li>The static type of an expression occurring in an attribute value must be a\nsimple type and must not be nil. The static type type of an expression occurring\nin content can either be xml or a non-nil simple type.</li>\n<li>When the xml-expr is evaluated, the interpolated expressions are evaluated\nin the order in which they occur in the <code>BacktickString</code>, and\nconverted to strings if necessary. A new copy is made of the XML value and the\nresult of the expression evaluations are inserted into the corresponding\nposition in the newly created XML value. This XML value is the result of the\nevaluation.</li>\n</ol>\n<h3>New expression</h3>\n\n<pre\nclass=\"grammar\">new-expr := explicit-new-expr | implicit-new-expr\nexplicit-new-expr := new type-descriptor <code>(</code> arg-list <code>)</code>\n</pre>\n<p>\nA new-expr constructs a new object.</p>\n<p>\nAn explicit-new-expr allocates storage for the object and initializes it,\npassing the supplied arg-list to the object's <code>__init</code> method. It is\na compile error if the type-descriptor does not specify an object type or if the\narg-list does not match the signature of the object type's <code>__init</code>\nmethod. If the result of calling the <code>__init</code> method is an error\nvalue e, then the result of evaluating the explicit-new-expr is e; otherwise the\nresult is the newly initialized object.\n</p>\n<p>\nAn explicit-type-expr specifying a type descriptor T has static type T, except\nthat if the type of the <code>__init</code> method is E?, where E is a subtype\nof error, then it has static type T|E.\n</p>\n<pre\nclass=\"grammar\">implicit-new-expr := new [<code>(</code> arg-list <code>)</code>]\n</pre>\n<p>\nAn implicit-new-expr is equivalent to an explicit-new-expr that specifies the\napplicable contextually expected type as the type descriptor. An\nimplicit-new-expr consisting of just <code>new</code> is equivalent to\n<code>new()</code>.\n</p>\n<h3>Variable reference expression</h3>\n\n<pre\nclass=\"grammar\">variable-reference-expr := variable-reference\nvariable-reference := qualified-identifier\n</pre>\n<p>\nA variable-reference can refer to a variable, a parameter, a constant (defined\nwith a module constant declaration) or a type (defined with a type definition).\n</p>\n<p>\nIf the variable-reference references a type defined with a type definition, then\nthe result of evaluating the variable-reference-expr is a typedesc value for\nthat type.\n</p>\n<h3>Field access expression</h3>\n\n<pre\nclass=\"grammar\">field-access-expr := expression <code>.</code> field-name\n</pre>\n<p>\n{MISSING}\n</p>\n<h3>Annotation access expression</h3>\n\n<pre\nclass=\"grammar\">annot-access-expr := expression <code>@.</code> annot-tag-reference\n</pre>\n<p>\nThe annot-tag-reference must refer to an annotation tag declared with an\nannotation declaration. The static type of expression must be a subtype of\n<code>typedesc</code>.\n</p>\n<p>\nAn <code>annot-access-expr</code> is evaluated by first evaluating\n<code>expression</code> resulting in a typedesc value <em>t</em>. If <em>t</em>\nhas an annotation with the tag referenced by <code>annot-tag-reference</code>,\nthen the result of the <code>annot-access-expr</code> is the value of that\nannotation; otherwise, the result is nil.\n</p>\n<p>\nThe static type of the <code>annot-access-expr</code> is T? where T is the type\nof the annotation tag.\n</p>\n<h3>Index expression</h3>\n\n<pre\nclass=\"grammar\">index-expr := expression <code>[</code> expression <code>]</code>\n</pre>\n<p>\n{MISSING}\n</p>\n<p>\nEvaluation of an index-expr that attempts to accessing a list with an out of\nbounds index will complete abruptly with a panic.\n</p>\n<h3>[Preview] XML attributes expression</h3>\n\n<pre\nclass=\"grammar\">xml-attributes-expr := expression <code>@</code>\n</pre>\n<p>\nReturns the attributes map of a singleton xml value, or nil if the operand is\nnot a singleton xml value. The result type is <code>map&lt;string>?</code>.\n</p>\n<h3 id=\"function_call\">Function call expression</h3>\n\n<pre\nclass=\"grammar\">function-call-expr := [<code>start</code>] function-reference <code>(</code> arg-list <code>)</code>\nfunction-reference := variable-reference\narg-list :=\n   positional-args [<code>,</code> other-args]\n   | [other-args]\npositional-args := positional-arg (<code>,</code> positional-arg)*\npositional-arg := expression\nother-args := named-args | rest-arg\nnamed-args := named-arg (<code>,</code> named-arg)*\nnamed-arg := arg-name <code>=</code> expression\narg-name := identifier\nrest-arg := <code>...</code> expression\n</pre>\n<p>\nA function-call-expr is evaluated by constructing an argument list and passing\nthe argument list to the function referred to by the variable-name. If the\nfunction terminates normally, then the result of the function-call-expr is the\nreturn value of the function; otherwise the function-call-expr completes\nabruptly with a panic. The static type of the function-call-expr is the return\ntype of the function type.\n</p>\n<p>\nHowever, if <code>start</code> is specified, then the called function is\nexecuted on a new strand, and the result of the <code>function-call-expr</code>\nis a value of type future&lt;T>, where T is the return type of the function\ncalled.\n</p>\n<p>\nThe variable-reference must refer to a variable with function type. The type\ndescriptor of that function type is used to construct an argument list from the\nspecified arg-list. Note that it is the type descriptor of the declared type of\nthe variable that is used for this purpose, rather than the runtime type\ndescriptor of the referenced function value.\n</p>\n<p>\nThe expressions occurring in the arg-list are evaluated in the order in which\nthey occur in the arg-list. The result of evaluating each positional-arg is\nadded to the argument list in order. The contextually expected type for the\nexpression in the i-th positional-arg is the type of the i-th parameter.\n</p>\n<p>\nIf there is a rest-arg, then it is evaluated. The result must be a list value.\nEach member of the list value is added to the argument in the order that it\noccurs. The static type of the list value must be such as to guarantee that the\nresulting argument list will conform to the function's declared param-list. The\nrest-arg is not restricted to supplying the part of the argument list that will\nbe bound to a rest-param, and its static type is not restricted to being an\narray type. If there is rest-arg, then no parameter defaults are added.\n</p>\n<p>\nIf there is no rest-arg, then each non-rest parameter that was not supplied by\npositional argument is added in order from a named parameter, if there is one,\nand otherwise using the parameter default. The contextually expected type for\nthe expression specifying a named argument is the type declared for the\ncorresponding parameter. A default parameter is computed by calling the closure\nin the type descriptor, passing it the previous arguments in the argument list.\nIt is a compile-time error if there is a non-rest parameter for which there was\nno positional argument and no named argument and which is not defaultable. It is\nalso an error if there is a named argument for a parameter that was supplied by\na positional argument.\n</p>\n<p>\nWhen a function to be called results from the evaluation of an expression that\nis not merely a variable reference, the function can be called either by first\nstoring the value of the expression in a variable or using the <code>call</code>\nbuilt-in method on functions.\n</p>\n\n<h3>Method call expression</h3>\n\n<pre\nclass=\"grammar\">method-call-expr := [<code>start</code>] expression <code>.</code> method-name <code>(</code> arg-list <code>)</code>\n</pre>\n<p>\nThe basic type of the value that results from evaluating expression determines\nhow the method-name is used to lookup the method to call. If the basic type is\nservice or object, then the method is looked up in the object's methods;\notherwise, the method is looked up in the built-in methods of that basic type. A\nmethod-call-expr cannot be used to call a remote method; it can only be called\nby a remote-method-call-action. A method-call-expr cannot be used to invoke a\nresource.\n</p>\n<p>\nIf <code>start</code> is specified, then the called method is executed on a new\nstrand, and the result of the <code>method-call-expr</code> is a value of type\nfuture&lt;T>, where T is the return type of the method called.\n</p>\n<h3>Error constructor</h3>\n\n<pre\nclass=\"grammar\">error-constructor-expr := <code>error</code> <code>(</code> error-arg-list <code>)</code>\nerror-arg-list :=\n   positional-arg (<code>,</code> named-arg)*\n   | [named-arg (<code>,</code> named-arg)*]\n</pre>\n<p>\nAn error-constructor-expr constructs a new error value. The positional-arg, if\npresent, specifies the error reason string. Each named-arg specifies a field of\nthe error detail mapping. The static type of positional-arg must be a subtype of\nstring; the static type of each named-arg must be a pure type. The stack trace\ndescribes the stack at the point where the error constructor was evaluated.\n</p>\n<p>\nIf there is a contextually expected type and the type of the error reason of\nthe applicable contextually expected error type is a singleton string type, then\nthe positional-arg can be omitted and the error reason will be the single\nstring allowed by the type.\n</p>\n<p>\nIf there is a contextually expected type and the applicable contextually\nexpected type is an error type (rather than a union) with detail type\n<var>d</var>, then the error detail mapping will also have a field for any\ndefaultable fields of <var>d</var> for which no named-arg was specified.\n</p>\n<p>\nEvaluating the error-constructor-expr creates a new detail record. The result of\nevaluating each named-arg and every defaultable arg is cloned using the Clone\nabstract operation, then frozen using the Freeze abstract operation, before\nbeing added to the detail record. The detail record is itself frozen after all\nfields have been added.\n</p>\n\n<h3>Anonymous function expression</h3>\n\n<pre\nclass=\"grammar\">anonymous-function-expr :=\n  annots <code>function</code> function-signature function-body-block\n</pre>\n<p>\nEvaluating an anonymous-function-expr creates a closure, whose basic type is\nfunction. If function-body-block refers to a block-scope variable defined\noutside of the function-body-block, the closure will capture a reference to that\nvariable; the captured reference will refer to the same storage as the original\nreference not a copy.\n</p>\n<h3>Arrow function expression</h3>\n\n<pre\nclass=\"grammar\">arrow-function-expr := arrow-param-list <code>=></code> expression\narrow-param-list :=\n   identifier\n   | <code>(</code>[identifier (<code>,</code> identifier)*]<code>)</code>\n</pre>\n<p>\nArrow functions provide a convenient alternative to anonymous function\nexpressions that can be used for many simple cases. An arrow function can only\nbe used in a context where a function type is expected. The types of the\nparameters are inferred from the expected function type. The scope of the\nparameters is <code>expression</code>. The static type of the arrow function\nexpression will be a function type whose return type is the static type of\n<code>expression</code>. If the contextually expected type for the\n<code>arrow-function-expr</code> is a function type with return type T, then the\ncontextually expected type for <code>expression</code> is T.\n</p>\n<h3>Type cast expression</h3>\n\n<pre\nclass=\"grammar\">type-cast-expr := <code>&lt;</code> type-descriptor <code>></code> expression\n</pre>\n<p>\nA <code>type-cast-expr</code> casts the value resulting from evaluating\n<code>expression</code> to the type described by the type-descriptor, performing\na numeric conversion if required.\n</p>\n<p>\nA type-cast-expr is evaluated by first evaluating <code>expression</code>\nresulting in a value v. Let T be the type described by\n<code>type-descriptor</code>. If v belongs T, then the result of the\ntype-cast-expr is v. Otherwise, if T includes shapes from exactly one basic\nnumeric type N and v is belongs to another basic numeric type, then let n be\nNumericConvert(N, v); if n is not an error and n belongs to T, then the result\nof the type-cast-expr is n. Otherwise, the evaluation of the type-cast-expr\ncompletes abruptly with a panic.\n</p>\n<p>\nLet T be the static type described by <code>type-descriptor</code>, and let TE\nbe the static type of <code>expression</code>. Then the static type of the\n<code>type-cast-expr</code> is the intersection of T and TE', where TE' is TE\nwith its numeric shapes transformed to take account to the possibility of the\nnumeric conversion specified in the previous paragraph.\n</p>\n<p>\nThe <code>type-descriptor</code> provides the contextually expected type for\n<code>expression</code>.\n</p>\n<h3>Typeof expression</h3>\n\n<pre\nclass=\"grammar\">typeof-expr := <code>typeof</code> expression\n</pre>\n<p>\nThe result of a <code>typeof-expr</code> is a typedesc value for the runtime\ntype of v, where v is the result of evaluating <code>expression</code>.\n</p>\n<p>\nThe runtime type of v is the narrowest type to which v belongs.\n</p>\n<ul>\n<li>When v is a simple value, the resulting typedesc will describe a type\nconsisting of a single shape, which is the shape of the value. The typedesc will\nnot have any annotations. Each evaluation of <code>typeof</code> with a simple\nvalue produces a new typedesc value.</li>\n<li>When v is a reference value, each evaluation of <code>typeof</code> with an\nidentical reference value produces an identical typedesc value. The type\ndescriptor resulting from <code>typeof</code> will be identical to the type\ndescriptor used to construct the value. For containers, this is the same as the\ninherent type, except in the case where the inherent type of a structured value\nhas been changed by freeze or stamp methods. For behavioural values, this is the\nsame as the type descriptor used with new. Any annotations that were attached to\nthe type descriptor used to construct the value will this be available on the\nconstructed value.</li>\n</ul>\n<p>\nThe static type of <code>typeof-expr</code> is typedesc&lt;T>, where T is the\nstatic type of <code>expression</code>.\n</p>\n<h3>Unary expression</h3>\n\n<pre\nclass=\"grammar\">unary-expr :=\n   <code>+</code> expression\n   | <code>-</code> expression\n   | <code>~</code> expression\n   | <code>!</code> expression\n\n</pre>\n<p>\nThe unary <code>-</code> operator performs negation. The static type of the\noperand must be a number; the static type of the result is the same basic type\nas the static type of the operand. The semantics for each basic type are as\nfollows:\n</p>\n<ul>\n<li>int: negation for int is the same as subtraction from zero; an exception is\nthrown on overflow, which happens when the operand is -2<sup>63</sup></li>\n<li>float, decimal: negation for floating point types corresponds to the negate\noperation as defined by IEEE 754-2008 (this is not the same as subtraction from\nzero); no exceptions are thrown</li>\n</ul>\n<p>\nThe unary + operator returns the value of its operand expression. The static\ntype of the operand must be a number, and the static type of the result is the\nsame as the static type of the operand expression.\n</p>\n<p>\nThe ~ operator inverts the bits of its operand expression. The static type of\nthe operand must be int, and the static type of the result is an int.\n</p>\n<p>\nThe <code>!</code> operator performs logical negation. The static type of the\noperand expression must be boolean. The <code>!</code> operator returns true if\nits operand is false and false if its operand is true.\n</p>\n<h3>Multiplicative expression</h3>\n\n<pre\nclass=\"grammar\">multiplicative-expr :=\n   expression <code>*</code> expression\n   | expression <code>/</code> expression\n   | expression <code>%</code> expression\n</pre>\n<p>\nThe <code>*</code> operator performs multiplication; the <code>/</code> operator\nperforms division; the <code>%</code> operator performs remainder.\n</p>\n<p>\nThe static type of both operand expressions is required to be the same basic\ntype; this basic type will be the static type of the result. The following basic\ntypes are allowed:\n</p>\n<ul>\n<li>int\n<ul>\n<li>* performs integer multiplication; an exception will be thrown on overflow</li>\n<li>/ performs integer division, with any fractional part discarded ie with\ntruncation towards zero; an exception will be thrown on division by zero or on\noverflow (which happens if the first operand is -2<sup>63</sup> and the second\noperand is -1)</li>\n<li>% performs integer remainder consistent with integer division, so that if\nx/y does not throw an exception, then (x/y)*y + (x%y) is equal to x; an\nexception will be thrown if the second operand is zero; if the first operand is\n-2<sup>63</sup> and the second operand is -1, then the result is 0</li>\n</ul>\n</li>\n<li>float, decimal\n<ul>\n<li><code>*</code> performs the multiplication operation with the destination\nformat being the same as the source format, as defined by IEEE 754-2008; no\nexceptions are thrown</li>\n<li><code>/</code> performs the division operation with the destination format\nbeing the same as the source format, as defined by IEEE 754-2008; no exceptions\nare thrown</li>\n<li><code>%</code> performs a remainder operation; the remainder is not the\nIEEE-defined remainder operation but is instead a remainder operation analogous\nto integer remainder; more precisely,\n<ul>\n<li>if x is NaN or y is NaN or x is an infinity or y is a zero, then x % y is\nNaN</li>\n<li>for finite x, and infinite y, x % y is x</li>\n<li>for finite x and finite non-zero y, x % y is equal to the result of rounding\nx - (y Ã n)  to the nearest representable value using the roundTiesToEven\nrounding mode, where n is the integer that is nearest to the mathematical\nquotient of x and y without exceeding it in magnitude; if the result is zero,\nthen its sign is that of x</li>\n<li>no exceptions are thrown</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Additive expression</h3>\n\n<pre\nclass=\"grammar\">additive-expr :=\n   expression <code>+</code> expression\n   | expression <code>-</code> expression\n</pre>\n<p>\nThe <code>+</code> operator is used for both addition and concatenation; the\n<code>-</code> operator is used for subtraction.\n</p>\n<p>\nIt is required that either\n</p>\n<ul>\n<li>the static type of both operand expressions is the same basic type, in which\ncase this basic type will be the static type of the result, or</li>\n<li>the static type of one operand expression must be xml and of the other\noperand expression must be string, in which case the static type of the result\nis xml</li>\n</ul>\n<p>\nThe semantics for each basic type is as follows:\n</p>\n<ul>\n<li>int\n<ul>\n<li>+ performs integer addition; an exception will be thrown on overflow</li>\n<li>- peforns integer subtraction; an exception will be thrown on overflow</li>\n</ul>\n</li>\n<li>float, decimal\n<ul>\n<li>+ performs the addition operation with the destination format being the same\nas the source format, as defined by IEEE 754-2008; no exceptions are thrown</li>\n<li> - performs the subtraction operation with the destination format being the\nsame as the source format, as defined by IEEE 754-2008; no exceptions are thrown</li>\n</ul>\n</li>\n<li>string, xml\n<ul>\n<li>if both operands are a string, then the result is a string that is the\nconcatenation of the operands</li>\n<li>if both operands are xml, then the result is a new xml sequence that is the\nconcatenation of the operands; the new xml sequence contains a shallow copy of\nboth operands; this operation does not perform a copy of the content or\nattributes of any elements in sequence</li>\n<li>if one operand is a string and one is xml, the string is treated as if it\nwere an xml sequence with one character item for each code point in the string</li>\n</ul>\n</li>\n</ul>\n<h3>Shift expression</h3>\n\n<pre\nclass=\"grammar\">shift-expr :=\n   expression <code>&lt;&lt;</code> expression\n   expression <code>>></code> expression\n   expression <code>>>></code> expression\n</pre>\n<p>\nA shift-expr performs a bitwise shift. Both operand expressions must have static\ntype that is a subtype of int. The left hand operand is the value to be shifted;\nthe right hand value is the shift amount; all except the bottom 6 bits of the\nshift amount are masked out (as if by x &amp; 0x3F). Then a bitwise shift is\nperformed depending on the operator:\n</p>\n<ul>\n<li><code>&lt;&lt;</code> performs a left shift, the bits shifted in on the\nright are zero</li>\n<li><code>>></code> performs  a signed right shift; the bits shifted in on the\nleft are the same as the most significant bit</li>\n<li><code>>>></code> performs a unsigned right shift, the bits shifted in on the\nleft are zero</li>\n</ul>\n<p>\nIf the operator is >> or >>> and the left hand operand is a subtype of byte,\nthen the static type of the result is byte; otherwise the static type of the\nresult is int.\n</p>\n<h3>Range expression</h3>\n\n<pre\nclass=\"grammar\">range-expr :=\n   expression <code>...</code> expression\n   | expression <code>..&lt;</code> expression\n</pre>\n<p>\nA range-expr results in a new array of integers in increasing order including\nall integers n such that\n</p>\n<ul>\n<li>the value of the first expression is less than or equal to n, and</li>\n<li>n is\n<ul>\n<li>if the operator is <code>...</code>, less than or equal to the value of the\nsecond expression</li>\n<li>if the operator is <code>..&lt;</code>, less than the value of the second\nexpression</li>\n</ul>\n</li>\n</ul>\n<p>\nIt is a compile error if the static type of either expression is not a subtype\nof int.\n</p>\n<p>\nA range-expr is designed to be used in a foreach statement, but it can be used\nanywhere.\n</p>\n<h3>Numerical comparison expression</h3>\n\n<pre\nclass=\"grammar\">numerical-comparison-expr :=\n   expression <code>&lt;</code> expression\n   | expression <code>></code> expression\n   | expression <code>&lt;=</code> expression\n   | expression <code>>=</code> expression\n</pre>\n<p>\nA numerical-comparison-expr compares two numbers.\n</p>\n<p>\nThe static type of both operands must be of the same basic type, which must be\nint, float or decimal. The static type of the result is boolean.\n</p>\n<p>\nFloating point comparisons follow IEEE, 754-2008, so\n</p>\n<ul>\n<li>if either operand is NaN, the result is false</li>\n<li>positive and negative zero compare equal</li>\n</ul>\n<h3>Type test expression</h3>\n\n<pre\nclass=\"grammar\">is-expr :=\n   expression <code>is</code> type-descriptor\n</pre>\n<p>\nAn is-expr tests where a value belongs to a type.\n</p>\n<p>\nAn is-expr is evaluated by evaluating the expression yielding a result v. If v\nbelongs to the type denoted by type-descriptor, then the result of the is-expr\nis true; otherwise the result of the is-expr is false.\n</p>\n<h3>Equality expression</h3>\n\n<pre\nclass=\"grammar\">equality-expr :=\n   expression <code>==</code> expression\n   | expression <code>!=</code> expression\n   | expression <code>===</code> expression\n   | expression <code>!==</code> expression\n</pre>\n<p>\nAn equality-expr tests whether two values are equal. For all four operators, it\nis a compile time error if the intersection of the static types of the operands\nis empty.\n</p>\n<p>\nThe === operator tests for exact equality.  The !== operator results in the\nnegation of the result of the === operator.  Two values are exactly equal if\nthey have the same basic type T and\n</p>\n<ul>\n<li>if T is simple type, the values are identical values within the set of\nvalues allowed for T</li>\n<li>if T is a reference type, the values refer to the same storage</li>\n</ul>\n<p>\nThe == operator tests for deep equality. The != operator results in the negation\nof the result of the == operator. For both == and !=, both operands must have a\nstatic type that is pure. Two values v1, v2 are deeply equal if SameShape(v1,\nv2) is true.\n</p>\n<p>\nNote that === and == are the same for simple values except as regards floating\npoint zero: == treats positive and negative zero from the same basic type as\nequal whereas === treats them as unequal. Both == and === treat two NaN values\nfrom the same basic type as equal. This means that none of these operators\ncorrespond to operations defined by IEEE 754-2008, because they do not treat NaN\nin the special way defined for those operations.\n</p>\n<h3>Binary bitwise expression</h3>\n\n<pre\nclass=\"grammar\">binary-bitwise-expr :=\n   bitwise-and-expr\n   | bitwise-xor-expr\n   | bitwise-or expr\nbitwise-and-expr = expression <code>&amp;</code> expression\nbitwise-xor-expr = expression <code>^</code> expression\nbitwise-or-expr = expression <code>|</code> expression\n</pre>\n<p>\nA binary-bitwise-expr does a bitwise AND, XOR, or OR operation on its operands.\n</p>\n<p>\nThe static type of both operands must be a subtype of int.  The static type of\nthe result is as follows:\n</p>\n<ul>\n<li>for AND, if the type of one operand is a subtype of byte, then the result\nhas type byte; otherwise, the result has type int;</li>\n<li>for OR, if the type of both operands have a type that is a subtype of byte,\nthen the result has type byte; otherwise, the result has type int;</li>\n<li>for XOR, the result has type int.</li>\n</ul>\n<h3>Logical expression</h3>\n\n<pre\nclass=\"grammar\">logical-expr :=\n   expression <code>&amp;&amp;</code> expression\n   | expression <code>||</code> expression\n</pre>\n<h3>Conditional expression</h3>\n\n<pre\nclass=\"grammar\">conditional-expr :=\n   expression <code>?</code> expression <code>:</code> expression\n   | expression <code>?:</code> expression\n</pre>\n<p>\nL <code>?:</code> R is evaluated as follows:\n</p>\n<ol>\n<li>Evaluate L to get a value x</li>\n<li>If x is not nil, then return x.</li>\n<li>Otherwise, return the result of evaluating R.</li>\n</ol>\n<h3>Check expression</h3>\n\n<pre\nclass=\"grammar\">check-expression := <code>check</code> expression\n</pre>\n<p>\nEvaluates expression resulting in value v. If v has basic type error, then\ncheck-expression completes abruptly with a check-fail with associated value v.\nOtherwise evaluation completes normally with result v.\n</p>\n<p>\nIf the static type of expression e is T|E, where E is a subtype of error, then\nthe static type of check e is T.\n</p>\n<h3>Trap expression</h3>\n<p>\nThe trap expression stops a panic and gives access to the error value associated\nwith the panic.\n</p>\n<pre\nclass=\"grammar\">trap-expr := <code>trap</code> expression\n</pre>  \n<p>\nSemantics are:\n</p>\n<ul>\n<li>Evaluate <code>expression</code> resulting in value v\n<ul>\n<li>If evaluation completes abruptly with panic with associated value e, then\nresult of trap-exp is e</li>\n<li>Otherwise result of trap-expr  is v</li>\n</ul>\n</li>\n<li>If type of <code>expr</code> is T, then type of <code>trap expr</code> is\nT|error.</li>\n</ul>\n<h2 id=\"actions_statements\">7. Actions and statements</h2>\n<h3>Actions</h3>\n\n<pre\nclass=\"grammar\">action :=\n   remote-method-call-action\n   | worker-receive-action \n   | wait-action\n   | flush-action\n   | synchronous-send-action\n   | check-action\n   | trap-action\n   | <code>(</code> action <code>)</code>\naction-or-expr := action | expression\ncheck-action := <code>check</code> action\ntrap-action := <code>trap</code> action\n</pre>\n<p>\nActions are an intermediate syntactic category between expressions and\nstatements. Actions are similar to expressions, in that they yield a value.\nHowever, an action cannot be nested inside an expression; it can only occur as\npart of a statement or nested inside other actions. This is because actions are\nshown in the sequence diagram in the graphical syntax.\n</p>\n<p>\nAn action is evaluated in the same way as an expression. Static typing for\nactions is the same as for expressions.\n</p>\n<p>\nA <code>check-action</code> and <code>trap-actio</code>n is evaluated in the\nsame way as a <code>check-exp</code>r and <code>trap-expr</code> respectively.\n</p>\n<h3>Function and worker execution</h3>\n\n<pre\nclass=\"grammar\">function-body-block :=\n   <code>{</code> [default-worker-init, named-worker-decl+] default-worker <code>}</code>\ndefault-worker-init := sequence-stmt\ndefault-worker := sequence-stmt\nnamed-worker-decl :=\n   <code>worker</code> worker-name return-type-descriptor <code>{</code> sequence-stmt <code>}</code>\nworker-name := identifier\n</pre>\n<p>\nA worker represents a thread of control running within a function. A statement\nis always executed in the context of a current worker. A worker is in one of\nthree states: running, suspended or terminated. When a worker is in the\nterminated state, it has a termination value. A worker terminates either\nnormally or abnormally. An abnormal termination results from a panic, and in\nthis case the termination value is always an error. If the termination value of\na normal termination is an error, then the worker is said to have terminated\nwith failure; otherwise the worker is said to have terminated with success. Note\nthat an error termination value resulting from a normal termination is\ndistinguished from an error termination value resulting from an abnormal\ntermination.\n</p>\n<p>\nA function always has a single default worker, which is unnamed. When a function\nis called, the current worker is suspended, and a default worker for the called\nfunction is started. When the default worker terminates, the function returns to\nits caller, and the caller's worker is resumed. If the default worker terminates\nnormally, then its termination value provides the return value of the function.\nIf the default worker terminates abnormally, then the evaluation of the function\ncall expression completes abruptly with a panic and the default worker's\ntermination value provides the associated value for the abrupt completion of the\nfunction call. The function's return type is the same as the return type of the\nfunction's default worker.\n</p>\n<p>\nThe default worker of a function and the worker that called the function belong\nto the same thread of control, which is called a <em>strand</em>. Only one\nworker in a strand is running at any given time.\n</p>\n<p>\nA function also has zero or more named workers. Each named worker runs on its\nown new strand. The termination of a function is independent of the termination\nof its named workers. The termination of a named worker does not automatically\nresult in the termination of its function. When a default worker terminates\ncausing the function to terminate, the function does not automatically wait for\nthe termination of its named workers. There is a wait-action that allows one\nworker to explicitly wait for the termination of another worker.\n</p>\n<p>\nA named worker has a return type. If the worker terminates normally, the\ntermination value will belong to the return type. If the return type of a worker\nis not specified, it defaults to nil as for functions. A return-type-descriptor\nin a named-worker-decl is an inferable context for a type descriptor, which\nmeans that <code>*</code> can be used to infer parts of the type descriptor; in\nparticular, it is convenient to use <code>error&lt;*&gt;</code> to specify the\nerror type.\n</p>\n<p>\nWhen a function has named workers, the default worker executes in three stages,\nas follows:\n</p>\n<ol>\n<li>The statements in default-worker-init are executed.</li>\n<li>All the named workers are started. Each named worker executes its\nsequence-stmt on its strand.</li>\n<li>The statements in default-worker are executed. This happens without waiting\nfor the termination of the named workers started in stage 2.</li>\n</ol>\n<p>\nVariables declared in default-worker-init are in scope within named workers,\nwhereas variables declared in default-worker are not.\n</p>\n<p>\nThe execution of a worker's sequence-stmt may result in the execution of a\nstatement that causes the worker to terminate. For example, a return statement\ncauses the worker to terminate. If this does not happen, then the worker\nterminates as soon as it has finished executing its sequence-stmt. In this case,\nthe worker terminates normally, and the termination value is nil. In other\nwords, falling off the end of a worker is equivalent to <code>return;</code>,\nwhich is in turn equivalent to <code>return ();</code>.\n</p>\n<p>\nThe parameters declared for a function are in scope in the function-body-block.\nThey are implicitly final: they can be read but not modified. They are in scope\nfor named workers as well as for the default worker.\n</p>\n<p>\nThe name of a worker is in-scope as a final local variable. The scope is the\nfunction-body-block with the exception of the default-worker-init. When the\nworker name is accessed using a variable-reference-expr, it has type\nfuture&lt;T>, where T is the return type of the worker.\n</p>\n<p>\nIn the above, function includes method, and function call includes method call.\n</p>\n<h3>Statement execution</h3>\n\n<pre\nclass=\"grammar\">statement := \n   action-stmt\n   | block-stmt\n   | local-var-decl-stmt\n   | local-type-defn-stmt\n   | xmlns-decl-stmt\n   | assignment-stmt\n   | compound-assignment-stmt\n   | destructuring-assignment-stmt\n   | call-stmt\n   | if-else-stmt\n   | match-stmt\n   | foreach-stmt\n   | while-stmt\n   | break-stmt\n   | continue-stmt\n   | fork-stmt\n   | panic-stmt\n   | lock-stmt\n   | async-send-stmt\n   | return-stmt\n   | transaction-stmt\n   | transaction-control-stmt\n</pre>\n<p>\nThe execution of any statement may involve the evaluation of actions and\nexpressions, and the execution of substatements. The following sections\ndescribes how each kind of statement is evaluated, assuming that the evaluation\nof those expressions and actions completes normally, and assuming that the\nexecution of any substatements does not cause termination of the current worker.\n Except where explicitly stated to the contrary, statements handle abrupt\ncompletion of the evaluation of expressions and actions as follows. If in the\ncourse of executing a statement, the evaluation of some expression or action\ncompletes abruptly with associated value e, then the current worker is\nterminated with termination value e; if the abrupt termination is a check-fail,\nthen the termination is normal, otherwise the termination is abnormal. If the\nexecution of a substatement causes termination of the current worker, then the\nexecution of the statement terminates at that point.\n</p>\n\n<pre\nclass=\"grammar\">sequence-stmt := statement*\nblock-stmt := <code>{</code> sequence-stmt <code>}</code>\n</pre>\n<p>\nA <code>sequence-stmt</code> executes its statements sequentially. A\n<code>block-stmt</code> is executed by executing its <code>sequence-stmt</code>.\n</p>\n<h3>Fork statement</h3>\n\n<pre\nclass=\"grammar\">fork-stmt := <code>fork</code> <code>{</code> named-worker-decl+ <code>}</code>\n</pre>\n<p>\nThe fork statement starts one or more named workers, which run in parallel with\neach other, each in its own new strand.\n</p>\n<p>\nVariables and parameters in scope for the fork-stmt remain in scope within the\nworkers (similar to the situation with parameters and workers in a function\nbody).\n</p>\n<p>\nThe scope of the worker name declared in a named-worker-decl includes both other\nworkers in the same fork-stmt and the block containing the fork-stmt starting\nfrom the point immediately after the fork-stmt. When a worker-name is in scope\nit can be accessed using a variable-reference-expr, resulting in a value of type\nfuture&lt;T>, where T is the return type of that worker.\n</p>\n<h3>Wait action</h3>\n<p>\nA wait-action waits for one or more workers to terminate, and gives access to\ntheir termination values.\n</p>\n\n<pre\nclass=\"grammar\">wait-action :=\n   single-wait-waction\n   | multiple-wait-action\n   | alternate-wait-action\n\nwait-future-expr := expression but not mapping-constructor-expr\n</pre>\n<p>\nA wait-future-expr is used by a wait-action to refer to the worker to be waited\nfor. Its static type must be future&lt;T> for some T. It can use a variable\nreference to refer to an in-scope named-worker-decl, which will be treated as a\nreference to a variable of type future&lt;T> where T is the return value of the\nworker.\n</p>\n<p>\nNote that it is only possible to wait for a named worker, which will start its\nown strand. It is not possible to wait for a default worker, which runs on an\nexisting strand.\n</p>\n<p>\nA mapping-constructor-expr is not recognized as a wait-future-expr (it would not\ntype-check in any case).\n</p>\n<h4>Single wait action</h4>\n\n<pre\nclass=\"grammar\">single-wait-action := <code>wait</code> wait-future-expr\n</pre>\n<p>\nA single-wait-action waits for a single future.\n</p>\n<p>\nA single-wait-action is evaluated by evaluating wait-future-expr resulting in a\nvalue f, which must be of basic type future. It then waits until the strand of\nthe future has terminated. If the strand terminates normally, the\nsingle-wait-action completes normally with the termination value of the strand\nas the result. Otherwise, the single-wait-action completes abruptly with a\npanic, with the associated value being the termination value of the strand,\nwhich will be an error.\n</p>\n<p>\nIf the static type of the wait-future-expr is future&lt;T> , then the static\ntype of the single-wait-action is then T.\n</p>\n<h4>Multiple wait action</h4>\n\n<pre\nclass=\"grammar\">multiple-wait-action := <code>wait</code> <code>{</code> wait-field (<code>,</code> wait-field)* <code>}</code>\nwait-field :=\n  variable-name\n  | field-name <code>:</code> wait-future-expr\n</pre>\n<p>\nA multiple-wait-action waits for multiple futures, returning the result as a\nrecord.\n</p>\n<p>\nA wait-field that is a variable-name <code>v</code> is equivalent to a\nwait-field <code>v: v</code>, where <code>v</code> must be the name of an\nin-scope named worker.\n</p>\n<p>\nA multiple-wait-action is evaluated by evaluating all of the wait-future-exprs\nresulting in a value of type future for each wait-field. It then waits for all\nof these futures. If all the futures complete normally, then it constructs a\nrecord with a field for each wait-field, whose name is the field-name and whose\nvalue is the completion value of the strand.\n</p>\n<h4>Alternate wait action </h4>\n\n<pre\nclass=\"grammar\">alternate-wait-action := <code>wait</code> wait-future-expr (<code>|</code> wait-future-expr)+\n</pre>\n<p>\nAn alternate-wait-action waits for one of multiple futures to terminate.\n</p>\n<p>\nAn alternate-wait-action is evaluated by first evaluating all of the\nwait-future-exprs, resulting in a set of future values. It then starts waiting\nfor all of the futures. As soon as one of the futures completes normally with a\nnon-error value v, the alternate-wait-action completes normally with result v.\nIf all of the futures complete normally with an error, then it completes\nnormally with result e, where e is the termination value of the last future to\ncomplete.\n</p>\n<p>\nIf the static type of the wait-future-exprs is future&lt;T1>, future&lt;T2>, ...,\nfuture&lt;Tn>, then the static type of the alternative-wait action is T1|T1|. .\n.Tn\n</p>\n<h3>Worker message passing</h3>\n<p>\nMessages can be sent between workers.\n</p>\n<p>\nSends and receives are matched up at compile-time. This allows the connection\nbetween the send and the receive to be shown in the sequence diagram. It is also\nguarantees that any sent message will be received, provided that neither the\nsending nor the receiving worker terminate abnormally or with an error.\n</p>\n<p>\nMessages can only be sent between workers that are peers of each other. The\ndefault worker and the named workers in a function are peers of each other. The\nworkers created in a fork-stmt are also peers of each other. The workers created\nin a fork-stmt are not peers of the default worker and named workers created by\na function.\n</p>\n\n<pre\nclass=\"grammar\">peer-worker := worker-name | <code>default</code>\n</pre>\n<p>\nA worker-name refers to a worker named in a named-worker-decl, which must be in\nscope; default refers to the default worker. The referenced worker must be a\npeer worker.\n</p>\n<p>\nEach worker maintains a separate logical queue for each peer worker to which it\nsends messages; a sending worker sends a message by adding it to the queue; a\nreceiving worker receives a message by removing it from the sending worker's\nqueue for that worker; messages are removed in the order in which they were\nadded to the queue.\n</p>\n<h4>Send action and send statement</h4>\n\n<pre\nclass=\"grammar\">sync-send-action := expression <code>->></code> peer-worker\nasync-send-stmt := expression <code>-></code> peer-worker <code>;</code>\n</pre>\n<p>\nThe sync-send-action and async-send-stmt send a message to another worker. In\nboth cases, the message is the result of applying the Clone abstract operation\nto the result of evaluating expr. The message is sent to the worker identified\nby peer-worker.\n</p>\n<p>\nIn both cases, the message is added to the message queue maintained by the\nsending  worker for messages to be sent to the sending worker. Conceptually, the\nmessage is added to the queue even if the receiving worker has already\nterminated.\n</p>\n<p>\nFor each async-send-stmt and sync-send-action S, the compiler determines a\nunique corresponding receive-action R, such that a message sent by S will be\nreceived by R, unless R's worker has terminated abnormally or with failure. It\nis a compile-time error if this cannot be done. The compiler determines a\n<em>failure type</em> for the corresponding receive-action. If the\nreceive-action was not executed and its worker terminated normally, then the\ntermination value of the worker will belong to the failure type. The failure\ntype will be a (possibly empty) subtype of error.\n</p>\n<p>\nThe execution of the async-send-stmt completes as soon as the message is added\nto the queue. A subsequent flush action can be used to check whether the message\nwas received.\n</p>\n<p>\nThe sync-send-action is evaluated by waiting until the receiving worker either\nexecutes a receive action that receives the queued message or terminates. The\nevaluation of sync-send-action completes as follows:\n</p>\n<ul>\n<li>if the queued message was received, then normally with result nil;</li>\n<li>otherwise\n<ul>\n<li>if the receiving worker terminated with failure, then normally with the\nresult being the the termination value of the receiving worker, which will be an\nerror;</li>\n<li>if the receiving worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the receiving worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the sync-send-action is F|() where F is the failure type of\nthe corresponding receive action. If F is empty, then this static type will be\nequivalent to ().\n</p>\n<p>\nThe contextually expected type used to interpret <code>expression</code> is the\ncontextually expected type from the corresponding receive-action.\n</p>\n<p>\nIf the receive-action corresponding to an async-send-stmt has a non-empty\nfailure type, then it is a compile-time error unless it can be determined that a\nsync-send-action or a flush-action will be executed before the sending worker\nterminates with success.\n</p>\n<p>\nIf a worker W is about to terminate normally and there are messages still to be\nsent in a queue (which must be the result of executing an async-send-stmt), then\nthe worker waits until the messages have been received or some receiving worker\nterminates. If a receiving worker R terminates without the message being\nreceived, R must have terminated abnormally, because the rule in the preceding\nparagraph. In this case, W terminates abnormally and W will use R's termination\nvalue as its termination value.\n</p>\n<h4>Receive action</h4>\n\n<pre\nclass=\"grammar\">receive-action := single-receive-action | multiple-receive-action\n</pre>\n<h5>Single receive action</h5>\n\n<pre\nclass=\"grammar\">single-receive-action := <code>&lt;-</code> peer-worker\n</pre>\n<p>\nA single-receive-action receives a message from a single worker.\n</p>\n<p>\nFor each single-receive-action R receiving from worker W, the compiler\ndetermines a <em>corresponding send set</em>. The corresponding send set S is a\nset of sync-send-actions and async-send-stmts in W, such that\n</p>\n<ul>\n<li>in any execution of W that terminates successfully, exactly one member of S\nis executed and is executed once only</li>\n<li>if R is evaluated, it will receive the single message sent by a member of S,\nunless W has terminated abnormally or with failure.</li>\n</ul>\n<p>\nThe compiler terminates a failure type for the corresponding send set. If no\nmember of the corresponding send set was executed/evaluated and the sending\nworker terminated normally, then the termination value of the sending worker\nwill belong to the failure type. The failure type will be a (possibly empty)\nsubtype of error.\n</p>\n<p>\nA single-receive-action is evaluated by waiting until there is a message\navailable in the queue or the sending worker terminates.  The evaluation of\nsingle-receive-action completes as follows:\n</p>\n<ul>\n<li>if a message becomes available in the queue, then the first available\nmessage is removed and the evaluation completes normally with the result being\nthat message;</li>\n<li>otherwise\n<ul>\n<li>if the sending worker terminated with failure, then normally with the result\nbeing the the termination value of the sending worker, which will be an error;</li>\n<li>if the sending worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the sending worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the single-receive-action is T|F where T is the union of the\nstatic type of the expressions in the corresponding send set and F is the\nfailure type of the corresponding send set.\n</p>\n<h5>Multiple receive action</h5>\n\n<pre\nclass=\"grammar\">multiple-receive-action :=\n   <code>&lt;-</code>  <code>{</code> receive-field (<code>,</code> receive-field)* <code>}</code>\nreceive-field :=\n   peer-worker\n   | field-name <code>:</code> peer-worker\n</pre>\n<p>\nA multiple-receive-action receives a message from multiple workers.\n</p>\n<p>\nA peer-worker can occur at most once in a multiple-receive-action.\n</p>\n<p>\nA receive-field consisting of a peer-worker <code>W</code> is equivalent to a\nfield <code>W:W</code>.\n</p>\n<p>\nThe compiler determines a corresponding send set for each receive field, in the\nsame way as for a single-receive-action. A multiple-receive-action is evaluated\nby waiting until there is a message available in the queue for every\npeer-worker.  If any of the peer workers W terminate before a message becomes\navailable, then the evaluation of the multiple-receive-action completes as\nfollows\n</p>\n<ul>\n<li>if the sending worker terminated with failure, then normally with the result\nbeing the the termination value of the sending worker, which will be an error;</li>\n<li>if the sending worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the sending worker.</li>\n</ul>\n<p>\nOtherwise, the result of the evaluation of multiple-receive-action completes by\nremoving the first message from each queue and constructing a record with one\nfield for each receive-field, where the value of the record is the message\nreceived.\n</p>\n<p>\nThe contextually expected typed for the multiple-receive-action determines a\ncontextually expected type for each receive-field, in the same way as for a\nmapping constructor. The contextually expected type for each receive-field\nprovides the contextually expected type for the expression in each member of the\ncorresponding send set.\n</p>\n<p>\nThe static type of multiple-receive-action is R|F where\n</p>\n<ul>\n<li>R is a record type, where R is determined in the same way as for a mapping\nconstructor, where the static type of each field comes from the union of the\nstatic types of the expressions in each member of the corresponding send set and\nthe contextually expected type is the contextually expected type of the\nmultiple-receive-action</li>\n<li>F is the union of the failure types for the corresponding send set for each\nreceive-field</li>\n</ul>\n<h4>Flush action</h4>\n\n<pre\nclass=\"grammar\">flush-action := <code>flush</code> [peer-worker]\n</pre>\n<p>\nIf peer-worker is specified, then flush waits until the queue of messages to be\nreceived by peer-worker is empty or until the peer-worker terminates.\n</p>\n<p>\nSend-receive correspondence for async-send-stmt implies that the queue will\neventually become empty, unless the peer-worker terminates abnormally or with\nfailure. The evaluation of flush-action completes as follows:\n</p>\n<ul>\n<li>if the queue of messages is empty, then normally with result nil;</li>\n<li>otherwise\n<ul>\n<li>if the peer-worker terminated with failure, then normally with the result\nbeing the the termination value of the peer-worker, which will be an error;</li>\n<li>if the peer-worker terminated abnormally, then abruptly with a panic, with\nthe associated value being the termination value of the peer-worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the flush-action has a preceding async-send-stmt without any intervening\nsync-send-action or other flush-action, then the static type of the flush-action\nis F|(), where F is the failure type of the receive-action corresponding to that\nasync-send-stmt. Otherwise, the static type of the flush-action is nil.\n</p>\n<p>\nIf peer-worker is omitted, then the flush-action flushes the queues to all other\nworkers. In this case, the static type will be the union of the static type of\nflush on each worker separately.\n</p>\n<h4>Send-receive correspondence</h4>\n<p>\nThis section provides further details about how compile-time correspondence is\nestablished between sends and receive. This is based on the concept of the index\nof a message in its queue: a message has index n in its queue if it is the nth\nmessage added to the queue during the current execution of the worker.\n</p>\n<ul>\n<li>A send action/statement has index i in its queue if the message that it adds\nto the queue is always the i-th message added to the queue during the execution\nof its worker. It is a compile time error if a send statement or action does not\nhave an index in its queue.</li>\n<li>A receive action has index i in a queue if any message that it removes from\nthe queue is always the i-th message removed from the queue during the execution\nof its worker. It is a compile time error if a receive action does not have an\nindex in each of its queues.</li>\n<li>A send action/statement and a receive action correspond if they have the\nsame index in a queue.</li>\n<li>It is a compile time error if two or more receive actions have the same\nindex in a queue.</li>\n<li>A send action/statement is in the same send set as another send\naction/statement if they have the same index in a queue. It is allowed for a\nsend set to have more than one member.</li>\n<li>The maximum index that a receive action has in a queue must be the same as\nthe maximum index that a send action or statement has in that queue.</li>\n<li>It is a compile time error if it is possible for a worker to terminate with\nsuccess before it has executed all its receive actions.</li>\n<li>It is a compile time error if it is possible for a worker to terminate with\nsuccess before it has executed one member from every send set.</li>\n</ul>\n<h3>Local variable declaration statements</h3>\n\n<pre\nclass=\"grammar\">local-var-decl-stmt :=\n   local-init-var-decl-stmt\n   | local-no-init-var-decl-stmt\nlocal-init-var-decl-stmt :=\n   annots [<code>final</code>] typed-binding-pattern <code>=</code> action-or-expr <code>;</code>\n</pre>\n<p>\nA <code>local-var-decl-stmt</code> is used to declare variables with a scope\nthat is local to the block in which they occur.\n</p>\n<p>\nThe scope of variables declared in a <code>local-var-decl-stmt</code> starts\nimmediately after the statement and continues to the end of the block statement\nin which it occurs.\n</p>\n<p>\nA local-init-var-decl-stmt is executed by evaluating the action-or-expr\nresulting in a value, and then matching the typed-binding-pattern to the value,\ncausing assignments to the variables occurring in the typed-binding-pattern. The\ntyped-binding-pattern is used unconditionally, meaning that it is a compile\nerror if the static types do not guarantee the success of the match. If the\ntyped-binding-pattern uses <code>var</code>, then the type of the variable is\ninferred from the static type of the action-or-expr; if the\nlocal-init-var-decl-stmt includes final, the precise type is used, and otherwise\nthe broad type is used. If the typed-binding-pattern specifies a\ntype-descriptor, then that type-descriptor provides the contextually expected\ntype for action-or-expr.\n</p>\n<p>\nIf <code>final</code> is specified, then the variables declared must not be\nassigned to outside the local-init-var-decl-stmt.\n</p>\n\n<pre\nclass=\"grammar\">local-no-init-var-decl-stmt :=\n   annots [<code>final</code>] type-descriptor variable-name <code>;</code>\n</pre>\n<p>\nA local variable declared <code>local-no-init-var-decl-stmt</code> must be\ndefinitely assigned at each point that the variable is referenced. This means\nthat the compiler must be able to verify that the local variable will have been\nassigned before that point. If <code>final</code> is specified, then the\nvariable must not be assigned more than once.\n</p>\n<h3>Implicit variable type narrowing</h3>\n<p>\nUsually the type of a reference to a variable is determined by the variable's\ndeclaration, either explicitly specified by a type descriptor or inferred from\nthe static type of the initializer.\n</p>\n<p>\nIn addition, this section defines cases where a variable is used in certain\nkinds of boolean expression in a conditional context, and it can be proved at\ncompile time that the value stored in local variable or parameter will, within a\nparticular region of code, always belong to a type that is narrower that the\nstatic type of the variable. In these cases, references to the variable within\nparticular regions of code will have a static type that is narrower that the\nvariable type.\n</p>\n<p>\nGiven an expression E with static type boolean, and a variable x with static\ntype Tx, we define how to determine\n</p>\n<ul>\n<li>a narrowed type for x implied by truth of E and</li>\n<li>a narrowed type for x implied by falsity of E</li>\n</ul>\n<p>\nbased on the syntactic form of E as follows.\n</p>\n<ul>\n<li>If E has the form x is T, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of Tx and\nT</li>\n<li>the narrowed type for x implied by falsity of E is Tx with T removed</li>\n</ul>\n</li>\n<li>If E has the form x == E1 or E1 == x where the static type of E1 is an\nexpression whose static type is a singleton simple type T1, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of Tx and\nT1</li>\n<li>the narrowed type for x implied by falsity of E is Tx with T1 removed</li>\n</ul>\n</li>\n<li>If E has the form x != E1 or E1 != x where the static type of E1 is an\nexpression whose static type is a singleton simple type T1, then\n<ul>\n<li>the narrowed type for x implied by truth of E is Tx with T1 removed</li>\n<li>the narrowed type for x implied by falsity of E is the intersection of Tx\nand T1</li>\n</ul>\n</li>\n<li>If E has the form !E1, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the narrowed type for x\nimplied by falsity of E1</li>\n<li>the narrowed type for x implied by falsity of E is the narrowed type for x\nimplied by truth of E1</li>\n</ul>\n</li>\n<li>If E has the form E1 &amp;&amp; E2\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of T1 and\nT2, where T1 is the narrowed type for x implied by the truth of T1 and T2 is the\nnarrowed type for x implied by the truth of T2</li>\n<li>the narrowed type for x implied by falsity of E is T1|T2, where T1 is the\nnarrowed type for x implied by the falsity of E1, and T2 is the intersection of\nT3 and T4, where T3 is the narrowed type for x implied by the truth of E1 and T4\nis  the narrowed type for x implied by the falsity of E2</li>\n</ul>\n</li>\n<li>If E has the form E1 || E2, then\n<ul>\n<li> the narrowed type for x implied by truth of E is T1|T2, where T1 is the\nnarrowed type for x implied by the truth of E1, and T2 is the intersection of T3\nand T4, where T3 is the narrowed type for x implied by the falsity of E1 and T4\nis the narrowed type for x implied by the truth of E2</li>\n<li>the narrowed type for x implied by falsity of E is the intersection of T1\nand T2, where T1 is narrowed type for x implied by the falsity of E1 and T2 is\nthe narrowed type for x implied by the falsity of E2</li>\n</ul>\n</li>\n<li>If E has any other form, then\n<ul>\n<li>the narrowed type for x implied by the truth of E is Tx</li>\n<li>the narrowed type for x implied by the falsity of E is Tx</li>\n</ul>\n</li>\n</ul>\n<p>\nNarrowed types apply to regions of code as follows:\n</p>\n<ul>\n<li>in an expression E1 || E2, the narrowed types implied by the falsity of E1\napply within E2</li>\n<li>in an expression E1 &amp;&amp; E2, the narrowed types implied by the truth of E1\napply within E2</li>\n<li>in an expression E1 ? E2 : E3, the narrowed types implied by the truth of E1\napply within E2 and the narrowed types implied by the falsity of E1 apply within\nE3</li>\n<li>in a statement if E1 { B1 } else { B2 }, the narrowed types implied by the\ntruth of E1 apply within B1 and the narrowed types implied by the falsity of E1\napply within E2</li>\n<li>in a match-clause P if E => { B }, the narrowed types implied by the truth\nof E apply within B</li>\n<li>the narrowed type for a variable x no longer applies as soon as there is a\npossibility of x being assigned to</li>\n</ul>\n<h3>Local type definition statement</h3>\n\n<pre\nclass=\"grammar\">local-type-defn-stmt :=\n   annots <code>type</code> identifier type-descriptor <code>;</code>\n</pre>\n<p>\nA local-type-defn-stmt binds the identifier to a type descriptor within the\nscope of the current block. The type-descriptor is resolved when the statement\nis executed.\n</p>\n<h3>XML namespace declaration statement</h3>\n\n<pre\nclass=\"grammar\">xmlns-decl-stmt := <code>xmlns</code> xml-namespace [ <code>as</code> identifier ] <code>;</code>\nxml-namespace := simple-const-expr\n</pre>\n<p>\nThe xml-decl-stmt is used to declare a XML namespace. If the identifier is\nomitted then the default namespace is defined. Once a default namespace is\ndefined, it is applicable for all XML values in the current scope. If an\nidentifier is provided then that identifier is the namespace prefix used to\nqualify elements and/or attribute names.  The static type of the\nsimple-const-expr must be a subtype of string.\n</p>\n<h3>Assignment statement</h3>\n\n<pre\nclass=\"grammar\">assignment-stmt := lhs <code>=</code> action-or-expr <code>;</code>\nlhs :=\n   variable-reference\n   | lhs <code>.</code> field-name\n   | lhs <code>[</code> expression <code>]</code>\n   | lhs <code>@</code>\n</pre>\n<p>\nAn <code>lhs</code> evaluates to a storage location, into which a value can be\nstored and from which a value can be fetched.\n</p>\n<p>\nWhen a list value has an inherent type that is not fixed length. then attempting\nto write a member of a list at an index <em>i</em> that is greater than or equal\nto the current length of the list will first increase the length of the list to\n<em>i</em> + 1, with the newly added members of the array being filled in\nautomatically.\n</p>\n<p>\nThe type of lhs provides the contextually expected type for action-or-expr.\n</p>\n<h3>Compound assignment statement</h3>\n\n<pre\nclass=\"grammar\">compound-assignment-stmt := \n   lhs CompoundAssignmentOperator action-or-expr <code>;</code>\nCompoundAssignmentOperator := BinaryOperator <code>=</code>\nBinaryOperator := <code>+</code> | <code>-</code> | <code>*</code> | <code>/</code> | <code>&amp;</code> | <code>|</code> | <code>^</code> | <code>&lt;&lt;</code> | <code>>></code> | <code>>>></code>\n</pre>\n<p>\nThese statements update the value of the LHS variable to the value that results\nfrom applying the corresponding binary operator to the value of the variable and\nthe value of the expression.\n</p>\n<h3>Destructuring assignment statement</h3>\n\n<pre\nclass=\"grammar\">destructure-assignment-stmt :=\n   binding-pattern-not-variable-reference <code>=</code> action-or-expr <code>;</code>\nbinding-pattern-not-variable-reference :=\n   wildcard-binding-pattern\n   | list-binding-pattern\n   | mapping-binding-pattern\n   | error-binding-pattern\n</pre>\n<p>\nA destructuring assignment is executed by evaluating the action-or-expr\nresulting in a value v, and then matching the binding pattern to v, causing\nassignments to the variables occurring in the binding pattern.\n</p>\n<p>\nThe binding-pattern has a static type implied by the static type of the\nvariables occurring in it. The static type of action-or-expr must be a subtype\nof this type.\n</p>\n<h3>Action statement</h3>\n\n<pre class=\"grammar\">action-stmt := action <code>;</code>\n</pre>\n<p>\nAn action-stmt is a statement that is executed by evaluating an action and\ndiscarding the resulting value, which must be nil. It is a compile-time error if\nthe static type of an action in an action-stmt is not nil.\n</p>\n<h3>Call statement</h3>\n\n<pre\nclass=\"grammar\">call-stmt := call-expr <code>;</code>\ncall-expr :=\n   function-call-expr\n   | method-call-expr\n   | <code>check</code> call-expr\n   | <code>trap</code> call-expr\n</pre>\n<p>\nA call-stmt is executed by evaluating call-expr as an expression and discarding\nthe resulting value, which must be nil.  It is a compile-time error if the\nstatic type of the call-expr in an call-stmt is not nil.\n</p>\n<h3>Remote method call action</h3>\n\n<pre\nclass=\"grammar\">remote-method-call-action :=\n   [<code>start</code>] expression <code>-></code> method-name <code>(</code> arg-list <code>)</code>\n</pre>\n<p>\nCalls a remote method. This works the same as a method call expression, except\nthat it is used only for a method with the <code>remote</code> modifier.\n</p>\n<p>\nIf <code>start</code> is specified, then the called method is executed on a new\nstrand, and the result of the <code>remote-method-call-expr</code> is a value of type\nfuture&lt;T>, where T is the return type of the method called.\n</p>\n\n<h3>Conditional statement</h3>\n\n<pre\nclass=\"grammar\">if-else-stmt :=\n   <code>if</code> expression block-stmt \n   [ <code>else</code> <code>if</code> expression block-stmt ]* \n   [ <code>else</code> block-stmt ]\n</pre>\n<p>\nThe if-else statement is used for conditional execution.\n</p>\n<p>\nThe static type of the expression following <code>if</code> must be boolean.\nWhen an expression is true then the corresponding block statement is executed\nand the if statement completes. If no expression is true then, if the else block\nis present, the corresponding block statement is executed.\n</p>\n<h3>Match statement</h3>\n\n<pre\nclass=\"grammar\">match-stmt := <code>match</code> action-or-expr <code>{</code> match-clause+ <code>}</code>\nmatch-clause :=\n  match-pattern-list [match-guard] <code>=></code> block-stmt\nmatch-guard := <code>if</code> expression\n</pre>\n<p>\nA match statement selects a block statement to execute based on which patterns a\nvalue matches.\n</p>\n<p>\nA match-stmt is executed as follows:\n</p>\n<ol>\n<li>the expression is evaluated resulting in some value v;</li>\n<li>for each match-clause in order:\n<ol>\n<li>a match of match-pattern against v is attempted</li>\n<li>if the attempted match fails, the execution of the match-stmt continues to\nthe next match-clause</li>\n<li>if the attempted match succeeds, then the variables in match-pattern are\ncreated</li>\n<li>if there is a match-guard, then the expression in match-guard is executed\nresulting in a value b</li>\n<li>if b is false, then the execution of the match-stmt continues to the next\nmatch-clause</li>\n<li>otherwise, the block-stmt in the match-clause is executed</li>\n<li>execution of the match-stmt completes</li>\n</ol>\n</li>\n</ol>\n<p>\nThe scope of any variables created in a match-pattern-list of a match-clause is\nboth the match-guard, if any, and the block-stmt in that match-clause. The\nstatic type of the expression in match-guard must be a subtype of boolean.\n</p>\n\n<pre\nclass=\"grammar\">match-pattern-list := \n  match-pattern (<code>|</code> match-pattern)*\n</pre>\n<p>\nA match-pattern-list can be matched against a value. An attempted match can\nsucceed or fail. A match-pattern-list is matched against a value by attempting\nto match each match-pattern until a match succeeds.\n</p>\n<p>\nAll the match-patterns in a given match-pattern-list must bind the same set of\nvariables.\n</p>\n\n<pre\nclass=\"grammar\">match-pattern :=\n  <code>var</code> binding-pattern\n   | wildcard-match-pattern\n   | const-pattern\n   | list-match-pattern\n   | mapping-match-pattern\n   | error-match-pattern\n</pre>\n<p>\nA match-pattern combines the destructuring done by a binding-pattern with the\nability to match a constant value.\n</p>\n<p>\nNote that an identifier can be interpreted in two different ways within a\nmatch-pattern:\n</p>\n<ul>\n<li>in the scope of a <code>var</code>, an identifier names a variable which is\nto be bound to a part of the matched value when a pattern match succeeds;</li>\n<li>outside the scope of a var, an identifier references a constant that a value\nmust match for the pattern match to succeed.</li>\n</ul>\n<p>\nA match-pattern must be linear: a variable that is to be bound cannot occur more\nthan once in a match-pattern.\n</p>\n\n<pre\nclass=\"grammar\">const-pattern := simple-const-expr\n</pre>\n<p>\nA const-pattern denotes a single value. Matching a const-pattern against a value\nsucceeds if the value has the same shape as the value denoted by the\nconst-pattern. A variable-reference in a const-pattern must refer to a constant.\nSuccessfully matching a const-pattern does not cause any variables to be\ncreated.\n</p>\n<p>\nMatching a wildcard-match-pattern against a value succeeds if the value belongs to\ntype any, in other words if the basic type of the value is not error.\n</p>\n\n<pre\nclass=\"grammar\">wildcard-match-pattern := <code>_</code>\nlist-match-pattern := <code>[</code> list-member-match-patterns <code>]</code>\nlist-member-match-patterns :=\n   match-pattern (<code>,</code> match-pattern)* [<code>,</code> rest-match-pattern]\n   | [ rest-match-pattern ]\nmapping-match-pattern := <code>{</code> field-match-patterns <code>}</code>\nfield-match-patterns :=\n   field-match-pattern (<code>,</code> field-match-pattern)* [<code>,</code> rest-match-pattern]\n   | [ rest-match-pattern ] \nfield-match-pattern := field-name <code>:</code> match-pattern\nrest-match-pattern := <code>...</code> <code>var</code> variable-name\nerror-match-pattern := <code>error</code> <code>(</code> error-arg-list-match-pattern <code>)</code>\nerror-arg-list-match-pattern :=\n   simple-match-pattern (<code>,</code> named-arg-match-pattern)* [<code>,</code> rest-match-pattern]\n   | named-arg-match-pattern (<code>,</code> named-arg-match-pattern)* [<code>,</code> rest-match-pattern]\n   | [ rest-match-pattern]\nsimple-match-pattern :=\n   wildcard-match-pattern\n   | const-pattern\n   | <code>var</code> variable-name\nnamed-arg-match-pattern := arg-name <code>=</code> match-pattern\n</pre>\n\n<p>\nMatching a <code>mapping-match-pattern</code> against a mapping value succeeds\nif and only every <code>field-match-pattern</code> matches against a field of\nthe value. The variable in the <code>rest-match-pattern</code>, if specified, is\nbound to a new mapping that contains just the fields for which that did not\nmatch a <code>field-match-pattern</code>.\n</p>\n\n<h3>Foreach statement</h3>\n\n<pre\nclass=\"grammar\">foreach-stmt :=\n   <code>foreach</code> typed-binding-pattern <code>in</code> action-or-expr block-stmt\n</pre>\n<p>\nA foreach statement iterates over a sequence, executing a block statement once\nfor each member of the sequence.\n</p>\n<p>\nThe scope of any variables created in typed-binding-pattern is block-stmt. These\nvariables are implicitly final.\n</p>\n<p>\nIn more detail, a foreach statement executes as follows:\n</p>\n<ol>\n<li>evaluate the expression resulting in a value c</li>\n<li>create an iterator object i from c as follows\n<ol>\n<li>if c is a basic type that is iterable, then i is the result of calling\nc.iterator()</li>\n<li>if c is an object and c belongs to Iterable&lt;T> for some T, then i is the\nresult of calling c.__iterator()</li>\n</ol>\n</li>\n<li>call i.next() resulting in a value n</li>\n<li>if n is nil, then terminate execution of the foreach statement</li>\n<li>match typed-binding-pattern to n.value causing assignments to any variables\nthat were created in typed-binding-pattern</li>\n<li>execute block-stmt with the variable bindings from step 5 in scope; in the\ncourse of so doing\n<ol>\n<li>the execution of a break-stmt terminates execution of the foreach statement</li>\n<li>the execution of a continue-stmt causes execution to proceed immediately to\nstep 3</li>\n</ol>\n</li>\n<li>go back to step 3</li>\n</ol>\n<p>\nIn step 2, the compiler will give an error if the static type of expression is\nnot suitable for 2a or 2b.\n</p>\n<p>\nIn step 5, the typed-binding-pattern is used unconditionally, and the compiler\nwill check that the static types guarantee that the match will succeed. If the\ntyped-binding-pattern uses var, then the type will be inferred from the type of\n<code>expression</code>.\n</p>\n<h3>While statement</h3>\n\n<pre\nclass=\"grammar\">while-stmt := <code>while</code> expression block-stmt\n</pre>\n<p>\nA while statement repeatedly executes a block statement so long as a\nboolean-valued expression evaluates to true.\n</p>\n<p>\nIn more detail, a while statement executes as follows:\n</p>\n<ol>\n<li>evaluate expression;</li>\n<li>if expression evaluates to false, terminate execution of the while\nstatement;</li>\n<li>execute block-stmt; in the course of so doing\n<ol>\n<li>the execution of a break-stmt results in termination of execution of the\nwhile statement</li>\n<li>the execution of a continue-stmt causes execution to proceed immediately to\nstep 1</li>\n</ol>\n</li>\n<li>go back to step 1.</li>\n</ol>\n<p>\nThe static type of <code>expression</code> must be a subtype of boolean.\n</p>\n<h3>Continue statement</h3>\n\n<pre\nclass=\"grammar\">continue-stmt := <code>continue</code> <code>;</code>\n</pre>\n<p>\nA continue statement is only allowed if it is lexically enclosed within a\nwhile-stmt or a foreach-stmt. Executing a continue statement causes execution of\nthe nearest enclosing while-stmt or foreach-stmt to jump to the end of the\noutermost block-stmt in the while-stmt or foreach-stmt.\n</p>\n<h3>Break statement</h3>\n\n<pre class=\"grammar\">break-stmt := <code>break</code> <code>;</code>\n</pre>\n<p>\nA break statement is only allowed if it is lexically enclosed within a\nwhile-stmt or a foreach-stmt. Executing a break statement causes the nearest\nenclosing while-stmt or foreach-stmt to terminate.\n</p>\n<h3>[Experimental] Lock statement</h3>\n\n<pre\nclass=\"grammar\">lock-stmt := <code>lock</code> block-stmt\n</pre>\n<p>\nA lock statement is used to execute a series of assignment statements in a\nserialized manner. For each variable that is used as an L-value within the block\nstatement, this statement attempts to first acquire a lock and the entire\nstatement executes only after acquiring all the locks. If a lock acquisition\nfails after some have already been acquired then all acquired locks are released\nand the process starts again.\n</p>\n<p>\n<strong>Note</strong> <em>The design of shared data access is likely to change\nin a future version.</em>\n</p>\n<h3>Panic statement</h3>\n\n<pre\nclass=\"grammar\">panic-stmt := <code>panic</code> expression <code>;</code>\n</pre>\n<p>\nA panic statement terminates the current worker abnormally. The result of\nevaluating <code>expression</code> provides the termination value of the worker.\n</p>\n<p>\nThe static type of <code>expression</code> must be a subtype of error.\n</p>\n<h3>Return statement</h3>\n\n<pre\nclass=\"grammar\">return-stmt := <code>return</code> [ action-or-expr ] <code>;</code>\n</pre>\n<p>\nA return statement terminates the current worker normally.The result of\nevaluating the action-or-expr provides the termination value of the worker. If\naction-or-expr is omitted, then the termination value is nil.\n</p>\n<h2 id=\"built-in_methods\">8. Built-in methods</h2>\n<p>\nThe following built-in methods are available.\n</p>\n<h3>Generic methods</h3>\n<p>\nThe following methods are provided on a variety of different basic types, with a\nconsistent semantics.\n</p>\n<h4>length</h4>\n<p>\nThe length method returns an integer representing the number of items that a\nvalue contains, where the meaning of item depends on the basic type of value.\nThe following list specifies the basic types for which it is provided, and the\nmeaning on each basic type:\n</p>\n<ul>\n<li>string: is the number of code points in the string</li>\n<li>list: the number of members of the list</li>\n<li>mapping: the length of a mapping is the number of members in the mapping</li>\n<li>table: the number of rows in the table</li>\n<li>xml: the number of content items in this XML value, where each character,\nelement, comment and processing instructions is counted as a single content item</li>\n</ul>\n<h4>iterator</h4>\n<p>\nThe iterator method is provided for all iterable basic types. It returns a new\nobject belonging to the Iterator&lt;T> abstract type, where T depends on the\nbasic type as follows:\n</p>\n<ul>\n<li>string: T is string; it will iterate over the substrings of length 1</li>\n<li>list: T is the union of the type of members of the list</li>\n<li>mapping: T is (string, M) where M is the union of the types of the members\nof the mapping</li>\n<li>table: T is a record representing a single row</li>\n<li>xml: T is string|xml</li>\n</ul>\n<h4>freeze, clone, unfrozenClone</h4>\n<p>\nThe freeze, clone and unfrozenClone built-in methods work in a similar way. They\nare provided on all structural types other than error, and all basic types other\nthan nil. When applied to a value v, the method starts by checking whether v is\na pure value; if it is not, the method returns an error. (If v belongs to type\nanydata, then it is guaranteed that v is a pure value.) Otherwise, the method\nreturns Freeze(v), Clone(v) or UnfrozenClone(v).\n</p>\n<p>\nThe static type of the return type of applying one of these methods to an\nexpression of type T is T if T is a subtype of anydata, and otherwise is\nT|error.\n</p>\n<h4>isFrozen</h4>\n<p>\nThe isFrozen method is provided on all structural types other than error. When\napplied to a value v, it returns true if the value is frozen and false\notherwise.\n</p>\n<h3>Floating point methods</h3>\n<p>\nThe following  built-in methods are provided on both the decimal and float basic\ntypes. They all return boolean.\n</p>\n<ul>\n<li>isFinite: true iff this is neither infinity nor NaN</li>\n<li>isInfinite: true iff this is infinity (plus or minus)</li>\n<li>isNaN: true iff this is NaN</li>\n</ul>\n<h3>Error methods</h3>\n<p>\nThe following  built-in methods are provided on the error basic type:\n</p>\n<ul>\n<li>reason: returns the error's reason string</li>\n<li>detail: returns the error's detail record as a frozen mapping</li>\n<li>stackTrace: returns an object representing the stack trace of the error</li>\n</ul>\n<h3>Function methods</h3>\n<p>\nThe following built-in method is provided on the function basic type:\n</p>\n<ul>\n<li>call: <code>f.call(args)</code> means the same as <code>f(args)</code>; this\nallows f to be an arbitrary expression</li>\n</ul>\n<h3>Typedesc methods</h3>\n<p>\nThe stamp and convert methods are provided on typedesc values. They both take a\nsingle parameter of type anydata, and return a value of type T|error where T is\nthe type denoted by the typedesc value.\n</p>\n<h4>stamp</h4>\n<p>\nThe stamp method takes a single argument of type anydata.\n</p>\n<p>\nt.stamp(v) works as follows\n</p>\n<ol>\n<li>It checks that v is a tree. If v is a reference value, and the graph\nstructure of v is not a tree, then stamp returns an error.</li>\n<li>If the shape of v is not a member of the set of shapes denoted by t (i.e. v\ndoes not look like t), then stamp will attempt to modify it so that it is by\nusing numeric conversions (as defined by the NumericConvert operation) on\nmembers of containers and by adding fields for which a default value is defined.\nIf this fails or can be done in more than one way, then stamp will return an\nerror. Frozen structures will not be modified, nor will new structures be\ncreated.</li>\n<li>At this point, v looks like t. Now stamp narrows the inherent type of v, and\nrecursively of any members of v, so that the v belongs to t, and then returns v.\nAny frozen values in v are left unchanged by this.</li>\n</ol>\n<h4>convert</h4>\n<p>\nThe convert method takes a single argument of type anydata. It is similar to\nstamp, but it does not modify its argument.\n</p>\n<p>\nt.convert(v) works as follows:\n</p>\n<ol>\n<li>It checks that v is a tree. If v is a reference value, and the graph\nstructure of v is not a tree, then convert returns an error.</li>\n<li>convert now creates a new value that has the same shape as v, except\npossibly for differences in numeric types and for the addition of fields for\nwhich a default value is defined, but belongs to type</li>\n</ol>\n<h2 id=\"module_level\">9. Module-level declarations</h2>\n<p>\nEach source part in a Ballerina module must match the production\n<code>module-part</code>.\n</p>\n<p>\nThe import declarations must come before other declarations; apart from this,\nthe order of the definitions and declarations at the top-level of a module is\nnot significant.\n</p>\n\n<pre\nclass=\"grammar\">module-part := import-decl* other-decl*\nother-decl := metadata other-decl-item\nother-decl-item :=\n   module-type-defn\n   | module-const-decl\n   | module-var-decl\n   | listener-decl\n   | function-defn\n   | outside-method-defn\n   | service-decl\n   | xmlns-decl-stmt\n   | annotation-decl\n</pre>\n<h3>Module and program execution</h3>\n<p>\nCreating a Ballerina program from a collection of modules requires that one\nmodule is identified as the <em>root</em> module. The modules comprising the\nprogram consist of the root module together with transitive closure of its\nimported modules.\n</p>\n<p>\nIf the root module of the program has a function called <code>main</code>, then\nit must be public and its return type must both be a subtype of\n<code>error?</code> and contain nil. Any parameters must have a type that is a\nsubtype of anydata; they are not restricted to strings.\n</p>\n<p>\nIf the root module does not have a function called <code>main</code>, then there\nmust be at least one service declared in at least one of the program's modules.\n</p>\n<p>\nWhen a Ballerina program is executed, the arguments to main come from the\ncommand line made available by the operating system. The format of the command\nline is operating system dependent, but is typically some sort of string or\narray of strings. The implementation should make use of the declared parameter\ntypes of main in attempting to convert the                  supplied command\nline into an argument list acceptable to main. It may also make use of\nannotations on main.\n</p>\n<p>\nThe execution of a program can terminate in one of three ways: success, failure\nor abnormal. In the failure and abnormal cases, there is an associated error\nvalue. For the failure case, the type of the error value can be determined at\ncompile time.\n</p>\n<p>\nThe execution of a Ballerina has two or three consecutive phases:\n</p>\n<ol>\n<li>init</li>\n<li>main</li>\n<li>listen</li>\n</ol>\n<p>\nThere is always an init phase. There must be at least one of the main or listen\nphases, and there may be both.\n</p>\n<p>\nIn the init phase, every module comprising the program is initialized, in such\nan order than a module is always initialized after all the modules it imports\nhave been initialized. If a module fails to initialize, then the program\nterminates.\n</p>\n<p>\nThe main phase happens only if the root module has a main function. In this\ncase, the main function is executed with arguments converted from the supplied\ncommand line. If the main function returns an error, then the program\nterminates.\n</p>\n<p>\nIf the main function returns nil and there is no listener registered with any\nmodule, then the program terminates successfully.\n</p>\n<p>\nOtherwise the listen phase happens. In  this phase, all the listeners that have\nbeen registered with any of the modules are started, by calling their\n<code>__start</code> method. (If there was no main function, then the successful\ninitialization of the required service declaration will ensure that at least one\nlistener will have been registered.)\n</p>\n<p>\nThe listen phase continues to execute until either the program explicitly exits,\nby calling a standard library function, or the user explicitly requests the\ntermination the program using an implementation-dependent operating system\nfacility (such as a signal on a POSIX system). In the latter case, the program\nwill call the __stop request on each registered listener before terminating.\n</p>\n<h3>Import declaration</h3>\n\n<pre\nclass=\"grammar\">import-decl := \n   <code>import</code> [org-name <code>/</code>] pkg-name [<code>version</code> sem-ver] \n   [<code>as</code> module-identifier] <code>;</code>\nmodule-identifier := identifier\norg-name := identifier\npkg-name := identifier (<code>.</code> identifier)*\nsem-ver := major-num [<code>.</code> minor-num [<code>.</code> patch-num]]\nmajor-num := DecimalNumber\nminor-num := DecimalNumber\npatch-num := DecimalNumber\n\nqualified-identifier := [module-identifier <code>:</code>] identifier\n</pre>\n<p>\nA module-identifier in a qualified-identifier must refer to a module-identifier\nspecified in an import-declaration in the same source part.\n</p>\n<h3>Module type definition</h3>\n\n<pre\nclass=\"grammar\">module-type-defn :=\n   metadata\n   <code>public</code>? <code>type</code> identifier type-descriptor <code>;</code>\n</pre>\n<h3>Module variable declaration</h3>\n\n<pre\nclass=\"grammar\">module-var-decl :=\n   metadata\n   [<code>final</code>]\n   typed-binding-pattern <code>=</code> expression <code>;</code>\n</pre>\n<p>\nThe scope of variables declared in a module-var-decl is the entire module. Note\nthat module variables are not allowed to be public. If final is specified, then\nit is not allowed to assign to the variable. If the typed-binding-pattern uses\n<code>var</code>, then the type of the variable is inferred from the static type\nof <code>expression</code>; if the module-var-decl includes <code>final</code>,\nthe precise type is used, and otherwise the broad type is used. If the\ntyped-binding-pattern specifies a type-descriptor, then that type-descriptor\nprovides the contextually expected type for action-or-expr.\n</p>\n<h3>Module constant declaration</h3>\n\n<pre\nclass=\"grammar\">module-const-decl :=\n   metadata\n   <code>public</code>? <code>const</code> [type-descriptor] identifier <code>=</code> const-expr <code>;</code>\n</pre>\n<p>\nA module-const-decl declares a compile-time constant. A compile-time constant is\nan named immutable value, known at compile-time. A compile-time constant can be\nused like a variable, and can also be referenced in contexts that require a\nvalue that is known at compile-time, such as in a type-descriptor or in a\nmatch-pattern.\n</p>\n<p>\nThe type of the constant is the singleton type containing just the shape of the\nvalue named by the constant. The type of the constant determines the static type\nof a variable-reference-expr that references this constant.\n</p>\n<p>\nIf type-descriptor is present, then it provides the contextually expected type\nfor the interpretation of const-expr. It is a compile-time error if the static\ntype of const-expr is not a subtype of that type. The type-descriptor must\nspecify a type that is a subtype of anydata. Note that the type-descriptor does\nnot specify the type of the constant, although the type of the constant will all\nbe a subtype of the type specified by the type-descriptor.\n</p>\n<h3>Listener declaration</h3>\n\n<pre\nclass=\"grammar\">listener-decl :=\n   metadata\n   <code>public</code>? <code>listener</code> [type-descriptor] identifier <code>=</code> expression <code>;</code>\n</pre>\n<p>\nA <code>listener-decl</code> defines a module listener.\n</p>\n<p>\nA module listener is an object value that belongs to the Listener abstract\nobject type and is managed as part of the module's lifecycle. A module may have\nmultiple listeners.\n</p>\n<p>\nA module-listener can be referenced by a variable-reference, but cannot be\nmodified. It is this similar to a final variable declaration, except that it\nalso registers the value with the module as a listener.\n</p>\n<p>\nA module listener has a static type, which must be a subtype of the Listener\ntype. If the type-descriptor is present it specifies the module listener's\nstatic type; if it is not present, the the static type of the listener is the\nstatic type of <code>expression</code>.\n</p>\n<h3>Function definition</h3>\n\n<pre\nclass=\"grammar\">function-defn := \n   metadata\n   [<code>public</code>]\n   <code>function</code> identifier function-signature function-body\nfunction-body := function-body-block | external-function-body\nexternal-function-body := <code>=</code> annots <code>external</code> <code>;</code>\n</pre>\n<p>\nAn <code>extern-function-body</code> means that the implementation of the\nfunction is not provided in the Ballerina source module.\n</p>\n<h3>Service declaration</h3>\n\n<pre\nclass=\"grammar\">service-decl :=\n  metadata\n  <code>service</code> [identifier] <code>on</code> expression-list service-body-block\nexpression-list := expression (<code>,</code> expression)*\n</pre>\n<p>\nCreates a service and attaches it to one or more listeners.\n</p>\n<p>\nThis works as follows:\n</p>\n<ul>\n<li>service-body is the same as what goes inside a service constructor</li>\n<li>expression is evaluated to an object obj that matches the Listener interface\nor an error; if its an error then module initialization panics</li>\n<li>obj is registered with the module as one of its endpoints (registering the\nsame object multiple times is the same as registering it once)</li>\n<li>service-body-block is evaluated as in a service-constructor to get a service\nvalue s;  the parameter type of obj.__attach determines the contextually\nexpected type</li>\n<li>identifier, if present, works as a final variable whose value is s</li>\n<li>s is attached to obj using obj.__attach; the identifier is supplied as an\nargument to obj.attach along with s (nil if not present)</li>\n<li>if __attach returns an error, then module initialization panics</li>\n</ul>\n<h2 id=\"querying\">10. [Experimental] Querying</h2>\n<p>\nBallerina tables and streams are designed for processing data at rest and data\nin motion, respectively.\n</p>\n<h3>Table query expressions</h3>\n\n<pre\nclass=\"grammar\">table-query-expr := \n   <code>from</code> query-source [query-join-type query-join-source] \n      [query-select] [query-group-by] [query-order-by]\n      [query-having] [query-limit]\nquery-source := identifier [<code>as</code> identifier] [query-where]\nquery-where := <code>where</code> expression\nquery-join-type := [([<code>left</code> | <code>right</code> | <code>full</code>] <code>outer</code>)| <code>inner</code>] <code>join</code>\nquery-join-source := query-source <code>on</code> expression\nquery-select := <code>select</code> (<code>*</code> | query-select-list)\nquery-select-list := \n   expression [<code>as</code> identifier] (, expression [<code>as</code> identifier])*\nquery-group-by := <code>group</code> <code>by</code> identifier (<code>,</code> identifier)*\nquery-order-by :=\n   <code>order</code> <code>by</code> identifier [(<code>ascending</code> | <code>descending</code>)]\n      (<code>,</code> identifier [(<code>ascending</code> | <code>descending</code>)])*\nquery-having := <code>having</code> expression\nquery-limit := <code>limit</code> int-literal\n</pre>\n<p>\nQuery expressions being language integrated SQL-like querying to Ballerina\ntables.\n</p>\n<h3>Streaming queries</h3>\n\n<pre\nclass=\"grammar\">forever-stmt :=\n   <code>forever</code> <code>{</code> \n      streaming-query-pattern+\n   <code>}</code>\nstreaming-query-pattern :=\n   streaming-query-expr <code>=></code> <code>(</code> array-type-descriptor identifier <code>)</code>\n      block-stmt\nstreaming-query-expr :=\n   <code>from</code> (sq-source [query-join-type sq-join-source]) | sq-pattern\n      [query-select] [query-group-by] [query-order-by]\n      [query-having] [query-limit] \n      [sq-output-rate-limiting]\nsq-source := \n   identifier [query-where] [sq-window [query-where]] \n      [<code>as</code> identifier]*\nsq-window := <code>window</code> function-call-exp\nsq-join-source := sq-source <code>on</code> expression\nsq-output-rate-limiting := \n   sq-time-or-event-output | sq-snapshot-output\nsq-time-or-event-output := \n   (<code>all</code> | <code>last</code> | <code>first</code>) <code>every</code> int-literal (time-scale | <code>events</code>)\nsq-snapshot-output :=\n   <code>snapshot</code> <code>every</code> int-literal time-scale\ntime-scale := <code>seconds</code> | <code>minutes</code> | <code>hours</code> | <code>days</code> | <code>months</code> | <code>years</code>\nsq-pattern := [<code>every</code>] sp-input [sp-within-clause]\nsp-within-clause := <code>within</code> expression\nsp-input :=\n   sp-edge-input (<code>followed</code> <code>by</code>) | <code>,</code> streaming-pattern-input\n   | <code>not</code> sp-edge-input (<code>and</code> sp-edge-input) | (<code>for</code> simple-literal)\n   | [sp-edge-input ( <code>and</code> | <code>or</code> ) ] sp-edge-input\n   | <code>(</code> sp-input <code>)</code>\nsp-edge-input :=\n   identifier [query-where] [int-range-expr] [<code>as</code> identifier]\n</pre>\n<p>\nThe forever statement is used to execute a set of streaming queries against some\nnumber of streams concurrently and to execute a block of code when a pattern\nmatches. The statement will never complete and therefore the worker containing\nit will never complete. See section 10 for details.\n</p>\n<h2 id=\"transactions\">11. [Experimental] Transactions</h2>\n\n<pre\nclass=\"grammar\">transaction-stmt := <code>transaction</code> trans-conf? block-stmt trans-retry?\ntransaction-control-stmt := retry-stmt | abort-stmt\ntrans-conf := trans-conf-item (<code>,</code> trans-conf-item)*\ntrans-conf-item := trans-retries | trans-oncommit | trans-onabort\ntrans-retries := <code>retries</code> <code>=</code> expression\ntrans-oncommit := <code>oncommit</code> <code>=</code> identifier\ntrans-onabort := <code>onabort</code> <code>=</code> identifier\ntrans-retry := <code>onretry</code> block-stmt\nretry-stmt := <code>retry</code> <code>;</code>\nabort-stmt := <code>abort</code> <code>;</code>\n</pre>\n<p>\nA transaction statement is used to execute a block of code within a 2PC\ntransaction. A transaction can be established by this statement or it may\ninherit one from the current worker.\n</p>\n<h3>Initiated transactions</h3>\n<p>\nIf no transaction context is present in the worker then the transaction\nstatement starts a new transaction (i.e., becomes the initiator) and executes\nthe statements within the transaction statement.\n</p>\n<p>\nUpon completion of the block the transaction is immediately tried to be\ncommitted. If the commit succeeds, then if there's an on-commit handler\nregistered that function gets invoked to signal that the commit succeeded. If\nthe commit fails, and if the transaction has not been retried more times than\nthe value of the retries configuration, then the on-retry block is executed and\nthe transaction block statement will execute again in its entirety. If there are\nno more retries available then the commit is aborted the on-abort function is\ncalled.\n</p>\n<p>\nThe transaction can also be explicitly aborted using an abort statement, which\nwill call the on-abort function and give up the transaction (without retrying).\n</p>\n<p>\nIf a retry statement is executed if the transaction has not been retried more\ntimes than the value of the retries configuration, then the on-retry block is\nexecuted and the transaction block statement will execute again in its entirety.\n</p>\n<h3>Participated transactions</h3>\n<p>\nIf a transaction context is present in the executing worker context, then the\ntransaction statement joins that transaction and becomes a participant of that\nexisting transaction. In this case, retries will not occur as the transaction is\nunder the control of the initiator. Further, if the transaction is locally\naborted (by using the abort statement), the transaction gets marked for abort\nand the participant will fail the transaction when it is asked to prepare for\ncommit by the coordinator of the initiator. When the initiating coordinator\ndecides to abort the transaction it will notify all the participants globally\nand their on-abort functions will be invoked. If the initiating coordinator\ndecides to retry the transaction then a new transaction is created and the\nprocess starts with the entire containing executable entity (i.e. resource or\nfunction) being re-invoked with the new transaction context.\n</p>\n<p>\nWhen the transaction statement reaches the end of the block the transaction is\nmarked as ready to commit. The actual commit will happen when the coordinator\nsends a commit message to the participant and after the commit occurs the\non-commit function will be invoked. Thus, reaching the end of the transaction\nstatement and going past does not have the semantic of the transaction being\ncommitted nor of it being aborted. Thus, if statements that follow the\ntransaction statement they are unaware whether the transaction has committed or\naborted.\n</p>\n<p>\nWhen in a participating transaction, a retry statement is a no-op.\n</p>\n<h3>Transaction propagation</h3>\n<p>\nThe transaction context in a worker is always visible to invoked functions. Thus\nany function invoked within a transaction, which has a transaction statement\nwithin it, will behave according to the \"participated transactions\" semantics\nabove.\n</p>\n<p>\nThe transaction context is also propagated over the network via the Ballerina\nMicrotransaction Protocol [XXX].\n</p>\n<h2 id=\"metadata\">12. Metadata</h2>\n<p>\nBallerina allows metadata to be attached to a construct by specifying the\nmetadata before the construct.\n</p>\n\n<pre\nclass=\"grammar\">metadata := [DocumentationString] annots\n</pre>\n<p>\nThere are two forms of metadata: documentation and annotations.\n</p>\n<h3>Annotations</h3>\n\n<pre\nclass=\"grammar\">annots := annotation*\nannotation := <code>@</code> annot-tag-reference annot-value\n</pre>\n<p>\nAnnotations provide structured metadata about a particular construct. Multiple\nannotations can be applied to a single construct. An annotation consists of a\ntag and a value.\n</p>\n\n<pre\nclass=\"grammar\">annotation-decl :=\n   metadata\n   [<code>public</code>] [<code>const</code>] <code>annotation</code> [type-descriptor] annot-tag \n   [<code>on</code> annot-attach-points]\nannot-tag := identifier\n</pre>\n<p>\nAn annotation-decl declares an annotation tag. Annotations tags are in a\nseparate namespace and cannot conflict with other module level declarations and\ndefinitions.\n</p>\n<p>\nThe type-descriptor specifies the type of the annotation tag. The type must be a\nsubtype of one of the following three types: <code>true</code>,\n<code>map&lt;anydata></code>, <code>map&lt;anydata>[]</code>. If the\ntype-descriptor is omitted, then the type is <code>true</code>.\n</p>\n\n<pre\nclass=\"grammar\">annot-tag-reference := qualified-identifier\nannot-value := [mapping-constructor-expr]\n</pre>\n<p>\nAn annot-tag-reference in an annotation must refer to an annot-tag declared in\nan annotation declaration. If the annotation includes a\nmapping-constructor-expr, then the value of the annotation is the mapping value\nresulting from evaluating the mapping-constructor-expr; otherwise the value is\nthe boolean value <code>true</code>.\n</p>\n<p>\nFor every construct that has an annotation with a particular tag, there is an\neffective value for that annotation tag, which is constructed from all the\nannotations with that tag that were attached to that construct. The effective\nvalue belongs to the type of the annotation tag.\n</p>\n<p>\nThe type of the annotation tag constrains both the annotation value and the\noccurrence of multiple annotations with the same tag on a single construct as\nfollows.\n</p>\n<ul>\n<li>If the type of the annotation tag is T[] for some T, then the\nmapping-constructor-expr must be specified and its static type must be a subtype\nof T; multiple annotations are allowed; the effective value is a list of all\nannotations with the tag in the order specified.</li>\n<li>Otherwise, multiple annotations with this tag are not allowed and the\neffective value for the tag is the value of the single annotation with the tag.\n<ul>\n<li>If the type of the annotation tag is true, then the mapping-constructor-expr\nmust not be specified.</li>\n<li>Otherwise, the mapping-constructor-expr must be specified and its static\ntype must be a subtype of the type of the annotation tag.</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the annotation-decl for a tag specifies <code>const</code>, then a\nmapping-constructor-expr in annotations with that tag must be a const-expr and\nis evaluated at compile-time with the semantics of a const-expr. Otherwise, the\nmapping-constructor-expr is evaluated when the annotation is evaluated and the\nresulting value is automatically frozen.\n</p>\n<p>\nAn annotation applied to a module-level declaration is evaluated when the module\nis initialized. An annotation applied to a service constructor is evaluated when\nthe service constructor is evaluated. An annotation occurring within a type\ndescriptor is evaluated when the type descriptor is resolved.\n</p>\n\n<pre\nclass=\"grammar\">annot-attach-points := annot-attach-point (<code>,</code> annot-attach-point)*\nannot-attach-point :=\n   dual-attach-point\n   | source-only-attach-point\ndual-attach-point := [<code>source</code>] dual-attach-point-ident\ndual-attach-point-ident :=\n   [<code>object</code>] <code>type</code>\n   | [<code>object</code>|<code>resource</code>] <code>function</code>\n   | <code>parameter</code>\n   | <code>return</code>\n   | <code>service</code>\n   | <code>listener</code>\nsource-only-attach-point := <code>source</code> source-only-attach-point-ident\nsource-only-attach-point-ident :=\n   <code>annotation</code>\n   | <code>external</code>\n   | <code>var</code>\n   | <code>const</code>\n</pre>\n<p>\nThe <code>annot-attach-points</code> specify the constructs to which an\nannotation can be attached.\n</p>\n<p>\nWhen an attachment point is prefixed with <code>source</code>, then the\nannotation is attached to a fragment of the source rather than to any runtime\nvalue, and thus is not available at runtime. If any of the attachment points\nspecify <code>source</code>, the annotation-decl must specify\n<code>const</code>.\n</p>\n<p>\nWhen an attachment point is not prefixed with source, then the annotation is\naccessible at runtime by applying the annotation access operator to a typedesc\nvalue.\n</p>\n<p>\nThe available attachment points are described in the following table.\n</p>\n<table>\n  <tr>\n   <td><strong>Attachment point name</strong></td>\n   <td><strong>Syntactic attachment point(s)</strong></td>\n   <td><strong>Attached to which type descriptor at runtime</strong></td>\n  </tr>\n  <tr>\n   <td>type</td>\n   <td>module-type-defn</td>\n   <td>defined  type</td>\n  </tr>\n  <tr>\n   <td>object type</td>\n   <td>module-type-defn whose type descriptor is a non-abstract object type\ndescriptor</td>\n   <td>defined type (which will be type of objects constructed using this type)</td>\n  </tr>\n  <tr>\n   <td>function</td>\n   <td>function-defn, method-decl, method-defn, outside-method-defn,\nanonymous-function-expr, service-method-defn</td>\n   <td>type of function</td>\n  </tr>\n  <tr>\n   <td>resource function</td>\n   <td>service-method-defn with resource modifier</td>\n   <td>type of function, on service value</td>\n  </tr>\n  <tr>\n   <td>return</td>\n   <td>returns-type-descriptor</td>\n   <td>indirectly to type of function</td>\n  </tr>\n  <tr>\n   <td>parameter</td>\n   <td>individual-param, rest-param</td>\n   <td>indirectly to type of function</td>\n  </tr>\n  <tr>\n   <td>service</td>\n   <td>service-decl, service-constructor-expr</td>\n   <td>type of service</td>\n  </tr>\n  <tr>\n   <td>listener</td>\n   <td>listener-decl</td>\n   <td>type of object</td>\n  </tr>\n  <tr>\n   <td>var</td>\n   <td>module-var-decl, local-var-decl-stmt</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>const</td>\n   <td>module-const-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>annotation</td>\n   <td>annotation-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>external</td>\n   <td>external-function-body</td>\n   <td>none</td>\n  </tr>\n</table>\n<h3>Documentation</h3>\n<p>\nA documentation string is an item of metadata that can be associated with\nmodule-level Ballerina constructs and with method declarations. The purpose of\nthe documentation strings for a module is to enable a programmer to use the\nmodule. Information not useful for this purpose should be provided in in\ncomments.\n</p>\n<p>\nA documentation string has the format of one or more lines each of which has a\n<code>#</code> optionally preceded by blank space.\n</p>\n<p>\nThe documentation statement is used to document various Ballerina constructs.\n</p>\n\n<pre\nclass=\"grammar\">DocumentationString := DocumentationLine +\nDocumentationLine := BlankSpace* <code>#</code> [Space] DocumentationContent\nDocumentationContent := (^ 0xA)* 0xA\nBlankSpace := Tab | Space\nSpace := 0x20\nTab := 0x9\n</pre>\n<p>\nA <code>DocumentationString</code> is recognized only at the beginning of a\nline. The content of a documentation string is the concatenation of the\n<code>DocumentationContent</code> of each <code>DocumentationLine</code> in the\n<code>DocumentationString</code>. Note that a single space following the # is\nnot treated as part of the DocumentationContent.\n</p>\n<p>\nThe content of a <code>DocumentationString</code> is parsed as Ballerina\nFlavored Markdown (BFM). BFM is also used for a separate per-module\ndocumentation file, conventionally called <code>Module.md</code>.\n</p>\n<h3>Ballerina Flavored Markdown</h3>\n<p>\nBallerina Flavored Markdown is GitHub Flavored Markdown, with some additional\nconventions.\n</p>\n<p>\nIn the documentation string attached to a function or method, there must be\ndocumentation for each parameter, and for the return value if the return value\nis not nil. The documentation for the parameters and a return value must consist\nof a Markdown list, where each list item must have the form <code>ident -\ndoc</code>, where ident is either the parameter name or return, and doc is the\ndocumentation of that parameter or of the return value.\n</p>\n<p>\nThe documentation for an object must contain a list of fields rather than\nparameters. Private fields should not be included in the list.\n</p>\n<p>\nBFM also provides conventions for referring to Ballerina-defined names from\nwithin documentation strings in a source file. An identifier in backticks\n<code>`X`</code>, when preceded by one of the following words:\n</p>\n<ul>\n<li><code>type</code></li>\n<li><code>endpoint</code></li>\n<li><code>service</code></li>\n<li><code>variable</code></li>\n<li><code>var</code></li>\n<li><code>annotation</code></li>\n<li><code>module</code></li>\n<li><code>function</code></li>\n<li><code>parameter</code></li>\n</ul>\n<p>\nis assumed to be a reference to a Ballerina-defined name of the type indicated\nby the word. In the case of <code>parameter</code>, the name must be unqualified\nand be the name of a parameter of the function to which the documentation string\nis attached. For other cases, if the name is unqualified it must refer to a\npublic name of the appropriate type in the source file's module; if it is a\nqualified name M:X, then the source file must have imported M, and X must refer\nto a public name of an appropriate type in M. BFM also recognizes\n<code>`f()`</code> as an alternative to <code>function `f`</code>. In both\ncases, f can have any of the following forms (where m is a module import, x is a\nfunction name, t is an object type name, and y is a method name):\n</p>\n\n<pre\n>    x()\n    m:x()\n    t.y()\n    m:t.y()\n</pre>\n<p>\nExample\n</p>\n\n<pre\n>    # Adds parameter `x` and parameter `y`\n    # + x - one thing to be added\n    # + y - another thing to be added\n    # + return - the sum of them\n    function add (int x, int y) returns int  { return x + y; }\n</pre>\n<h2 id=\"references\">A. References</h2>\n<ul>\n<li>Unicode</li>\n<li>XML</li>\n<li>JSON</li>\n<li>RFC 3629 UTF-8</li>\n<li>IEEE 754-2008</li>\n<li>GitHub Markdown</li>\n</ul>\n<h2 id=\"changes\">B. Changes since previous versions</h2>\n<h3>Summary of changes from 0.990 to 2019R1</h3>\n<p>\nThe specification has switched to a new versioning scheme. The <var>n</var>-th\nversion of the specification released in year 20<var>xy</var> will be labelled\n20<var>xy</var>R<var>n</var>.\n</p>\n<ol>\n<li>Tuples types now use square brackets, rather than parentheses, as do tuple\nbinding patterns and tuple match patterns. Array constructors and tuple\nconstructors are now unified into list constructors, which use square brackets.\nTuple types can have zero members or one member, and can use <code>T...</code>\nsyntax allow trailing members of a specified type.</li>\n<li>The way that record type descriptors express openness has changed. Instead\nof the <code>!...</code> syntax, there are two flavours of record type\ndescriptor, which use different delimiters: <code>record {| |}</code> allows any\nmapping that has exclusively the specified fields, whereas <code>record {\n}</code> allows any mapping that includes the specified fields; the former can\nuse the <code>T...</code> syntax, whereas the latter cannot. The\n<code>!...</code> is no longer allowed for record binding patterns and record\nmatch patterns.</li>\n<li>The syntax for an array with an array length that is inferred has changed\nfrom <code>T[!...]</code> to <code>T[*]</code>.</li>\n<li>A type descriptor of <code>error&lt;*&gt;</code> can be used to specify an\nerror type whose subtype is inferred.</li>\n<li>A new expression can no longer be used to create values of structural types;\nit is only allowed for objects.</li>\n<li>Symbolic string literals <code>'ident</code> have been removed (compile time\nconstants provide a more convenient approach).</li>\n<li><code>untaint</code> expression has been removed (this will be handled by\nannotations instead).</li>\n<li>The syntax for named arguments in a function call has reverted to\n<code>arg=</code> from <code>arg:</code>, since the latter caused syntactic\nambiguities.</li>\n<li>The syntax for error constructors specifies fields of the error detail\nseparately as named arguments, rather than specifying the error detail as a\nsingle argument; the syntax for binding patterns and match patterns for error\nvalues has also changed accordingly.</li>\n<li>The error reason argument can be omitted from an error constructor if it\ncan be determined from the contextually expected type.</li>\n<li>The syntax for annotation declarations has been revised; the places where\nannotations are allowed has been revised to match the possible attachment\npoints.</li>\n<li>An <code>@.</code> binary operator has been added for accessing annotations\nat runtime.</li>\n<li>A unary <code>typeof</code> operator has been added.</li>\n<li>The <code>typedesc</code> type now takes an optional type parameter.</li>\n<li>The type parameters for <code>future</code> and <code>stream</code> are now\noptional.</li>\n<li>The syntax for a function with an external implementation has changed to use\n<code>=external</code> in place of the curly braces.</li>\n<li>A numeric literal can use a suffix of <code>d</code> or <code>f</code> to\nindicate that it represents a value belonging to the decimal or float type\nrespectively.</li>\n<li>Record type descriptors may now specify a default value for fields.</li>\n<li>Providing a default value for a parameter no longer affects whether a function\ncall must supply the argument for that parameter positionally or by name. Instead\nthe argument for any parameter can be supplied either positionally or by name.\nTo avoid ambiguity, all arguments specified positionally must be specified before\narguments specified by name.</li>\n<li>Expressions specifying the default value for function parameters are not\ncompile time constants, and are evaluated each time they are used to supply a\nmissing argument.</li>\n<li>In the argument list of a function or method call, positional arguments are\nnow required to be specified before named arguments.</li>\n<li>Types may now be defined within a block.</li>\n</ol>\n<h3>Summary of changes from 0.980 to 0.990</h3>\n<p>\n<strong>Structural types and values</strong>\n</p>\n<ol>\n<li>Concepts relating to typing of mutable structural values have been changed\nin order to make type system sound.</li>\n<li>The <code>match</code> statement has been redesigned.</li>\n<li>The <code>but</code> expression has been removed.</li>\n<li>The <code>is</code> expression for dynamic type testing has been added.</li>\n<li>The type-cast-expr &lt;T>E now performs unsafe type casts.The only\nconversions it performs are numeric conversions.</li>\n<li>The <code>anydata</code> type has been added, which is a union of simple and\nstructural types.</li>\n<li>Records are now by default open to <code>anydata|error</code>, rather than\n<code>any</code>.</li>\n<li>Type parameters for built-in types (map, stream, future), which previously\ndefaulted to any, are now required.</li>\n<li>The type parameter for json (e.g. json&lt;T>) is not allowed any more.</li>\n<li>Type for table columns are restricted to subtype of anydata|error.</li>\n<li>There are now two flavors of equality operator: == and != for deep equality\n(which is allowed only for <code>anydata</code>), and ===  and !== for exact\nequality.</li>\n<li>There is a built-in clone operation for performing a deep copy on values of\ntype anydata.</li>\n<li>There is a built-in freeze operation for making structural values deeply\nimmutable.</li>\n<li>Compile-time constants (which are always a subtype of anydata and frozen)\nhave been added.</li>\n<li>Singleton types have been generalized: any compile-time constant can be made\ninto a singleton value.</li>\n<li>Variables can be declared final, with a similar semantic to Java.</li>\n<li>Errors are now immutable.</li>\n<li>Module variables are not allowed to be public: only compile-time constants\ncan be public.</li>\n</ol>\n<p>\n<strong>Error handling</strong>\n</p>\n<ol>\n<li>The <code>any</code> type no longer includes <code>error</code>.</li>\n<li><code>check</code> is now an expression.</li>\n<li>Exceptions have been replaced by panics\n<ol>\n<li>the <code>throw</code> statement has been replaced by the <code>panic</code>\nstatement</li>\n<li>the<code> try</code> statement has been replaced by the <code>trap</code>\nexpression</li>\n</ol>\n</li>\n<li>Object constructors (which could not return errors) have been replaced by\n<code>__init</code> methods (which can return errors).</li>\n</ol>\n<p>\n<strong>Concurrency</strong>\n</p>\n<ol>\n<li>Workers in functions have been redesigned. In particular, workers now have a\nreturn value.</li>\n<li>The <code>done</code> statement has been removed.</li>\n<li>The fork/join statement has been redesigned.</li>\n<li>A syntactic category between expression and statement, called action, has\nbeen added.</li>\n<li>A synchronous message send action has been added.</li>\n<li>A flush action has been added to flush asynchronously sent messages.</li>\n<li>A wait action has been added to wait for a worker and get its return value.</li>\n<li>Futures have been unified with workers. A future&lt;T> represents a value to\nbe returned by a named worker.</li>\n<li>Error handling of message send/receive has been redesigned.</li>\n</ol>\n<p>\n<strong>Endpoints and services</strong>\n</p>\n<ol>\n<li>Client endpoints have been replaced by client objects, and actions on client\nendpoints have been replaced by remote methods on client objects. Remote methods\nare called using a remote method call action, which replaces the action\ninvocation statement.</li>\n<li>Module endpoint declaration has been replaced by module listener\ndeclaration, which uses the Listener built-in object type.</li>\n<li>The service type has been added as a new basic type of behavioural value,\ntogether with service constructor expressions for creating service values.</li>\n<li>Module service definitions have been redesigned.</li>\n</ol>\n<p>\n<strong>Miscellaneous changes</strong>\n</p>\n<ol>\n<li>Public/private visibility qualifiers must be repeated on an outside method\ndefinition.</li>\n</ol>\n<h3>Summary of changes from 0.970 to 0.980</h3>\n<ol>\n<li>The decimal type has been added.</li>\n<li>There are no longer any implicit numeric conversions.</li>\n<li>The type of a numeric literal can be inferred from the context.</li>\n<li>The error type is now a distinct basic type.</li>\n<li>The byte type has been added as a predefined subtype of int; blobs have been\nreplaced by arrays of bytes.</li>\n<li>The syntax of string templates and xml literals has been revised and\nharmonized.</li>\n<li>The syntax of anonymous functions has been revised to provide two\nalternative syntaxes: a full syntax similar to normal function definitions and a\nmore convenient arrow syntax for when the function body is an expression.</li>\n<li>The cases of a match statement are required to be exhaustive.</li>\n<li>The + operator is specified to do string and xml concatenation as well as\naddition.</li>\n<li>Bitwise operators have been added (<code>&lt;&lt;</code>, <code>>></code>,\n<code>>>></code>, <code>&amp;</code>, <code>|</code>, <code>^</code>,\n<code>~</code>) rather than = after the argument name.</li>\n<li>In a function call or method call, named arguments have changed to use\n<code>:</code></li>\n<li>A statement with <code>check</code> always handles an error by returning it,\nnot by throwing it.</li>\n<li><code>check</code> is allowed in compound assignment statements.</li>\n<li>Method names are now looked up differently from field names; values of types\nother than objects can now have built-in methods.</li>\n<li>The <code>lengthof</code> unary expression has been removed; the length\nbuilt-in method can be used instead.</li>\n<li>The semantics of &lt;T>expr have been specified.</li>\n<li>The value space for tuples and arrays is now unified, in the same way as the\nvalue space for records and maps was unified. This means that tuples are now\nmutable. Array types can now have a length.</li>\n<li>The <code>next</code> keyword has been changed to <code>continue</code>.</li>\n<li>The syntax and semantics of destructuring is now done in a consistent way\nfor the but expression, the match statement, the foreach statement,\ndestructuring assignment statements and variable declarations.</li>\n<li>The implied initial value is not used as a default initializer in variable\ndeclarations. A local variable whose declaration omits the initializer must be\ninitialized by an assignment before it is used. A global variable declaration\nmust always have an initializer. A new expression can be used with any reference\ntype that has an implicit initial value.</li>\n<li>Postfix increment and decrement statements have been removed.</li>\n<li>The <code>...</code> and <code>..&lt;</code> operators have been added for\ncreating integer ranges; this replaces the foreach statement's special treatment\nof integer ranges.</li>\n<li>An object type can be declared to be abstract, meaning it cannot be used\nwith <code>new</code>.</li>\n<li>By default,  a record type now allows extra fields other than those\nexplicitly mentioned; <code>T...</code> requires extra fields to be of type T\nand <code>!...</code> disallows extra fields.</li>\n<li>In a mapping constructor, an expression can be used for the field name by\nenclosing the expression in square brackets (as in ECMAScript).</li>\n<li>Integer arithmetic operations are specified to throw an exception on\noverflow.</li>\n<li>The syntax for documentation strings has changed.</li>\n<li>The deprecated construct has been removed (data related to deprecation will\nbe provided by an annotation; documentation related to deprecation will be part\nof the documentation string).</li>\n<li>The order of fields, methods and constructors in object types is no longer\nconstrained.</li>\n<li>A function or method can be defined as <code>extern</code>. The\n<code>native</code> keyword has been removed.</li>\n</ol>\n<h2 id=\"contributors\">C. Other contributors</h2>\n<p>\nThe following contributed to establishing the design principles of the language:\n</p>\n<ul>\n<li>Frank Leymann, <a href=\"mailto:frank.leymann@iaas.uni-stuttgart.de\">frank.leymann@iaas.uni-stuttgart.de</a></li>\n<li>Srinath Perera, <a href=\"mailto:srinath@wso2.com\">srinath@wso2.com</a></li>\n<li>Kasun Indrasiri, <a href=\"mailto:kasun@wso2.com\">kasun@wso2.com</a></li>\n</ul>\n<p>\nThe following also contributed to the language in a variety of ways (in\nalphabetical order):\n</p>\n<ul>\n<li>Shafreen Anfar, <a href=\"mailto:shafreen@wso2.com\">shafreen@wso2.com</a></li>\n<li>Afkham Azeez, <a href=\"mailto:azeez@wso2.com\">azeez@wso2.com</a></li>\n<li>Anjana Fernando, <a href=\"mailto:anjana@wso2.com\">anjana@wso2.com</a></li>\n<li>Chanaka Fernando, <a href=\"mailto:chanakaf@wso2.com\">chanakaf@wso2.com</a></li>\n<li>Joseph Fonseka, <a href=\"mailto:joseph@wso2.com\">joseph@wso2.com</a></li>\n<li>Paul Fremantle, <a href=\"mailto:paul@wso2.com\">paul@wso2.com</a></li>\n<li>Antony Hosking, <a href=\"mailto:antony.hosking@anu.edu.au\">antony.hosking@anu.edu.au</a></li>\n<li>Tyler Jewell, <a href=\"mailto:tylerjewell@gmail.com\">tylerjewell@gmail.com</a></li>\n<li>Anupama Pathirage, <a href=\"mailto:anupama@wso2.com\">anupama@wso2.com</a></li>\n<li>Manuranga Perera, <a href=\"mailto:manu@wso2.com\">manu@wso2.com</a></li>\n<li>Supun Thilina Sethunga, <a href=\"mailto:supuns@wso2.com\">supuns@wso2.com</a></li>\n<li>Sriskandarajah Suhothayan, <a href=\"mailto:suho@wso2.com\">suho@wso2.com</a></li>\n<li>Isuru Udana, <a href=\"mailto:isuruu@wso2.com\">isuruu@wso2.com</a></li>\n<li>Rajith Lanka Vitharana, <a href=\"mailto:rajithv@wso2.com\">rajithv@wso2.com</a></li>\n<li>Mohanadarshan Vivekanandalingam, <a href=\"mailto:mohan@wso2.com\">mohan@wso2.com</a></li>\n<li>Lakmal Warusawithana, <a href=\"mailto:lakmal@wso2.com\">lakmal@wso2.com</a></li>\n<li>Ayoma Wijethunga, <a href=\"mailto:ayoma@wso2.com\">ayoma@wso2.com</a></li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}