{"pageProps":{"frontmatter":{"permalink":"/spec/lang/2020R1/","redirect_from":["spec/lang/v2020R1/","spec/lang/v2020R1/lib/","spec/lang/2020R1/lib/"]},"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Ballerina Language Specification, 2020R1</title>\n  <meta charset=\"utf-8\">\n  <link rel=\"shortcut icon\" href=\"/img/favicon.ico\">\n  <style type=\"text/css\">\n    body { font-family: sans-serif; line-height: 1.38;  }\n    pre.grammar code, code.grammar { background-color: #D0D0D0; }\n    pre, code { font-family: Consolas, monospace; }\n    table { border: solid thin; border-collapse: collapse; }\n    td, th { border: solid thin; padding: 0.5em; }\n    p.status { font-size: large; font-weight: bold; }\n  </style>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i&amp;display=swap\">\n<link rel=\"stylesheet\" href=\"style/ballerina-language-specification.css\">\n<script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script><script src=\"style/ballerina-language-specification.js\"></script>\n</head>\n<body>\n<h1>Ballerina Language Specification, 2020R1</h1>\n<p>\nPrimary contributors:\n</p>\n<ul>\n<li>James Clark, <a href=\"mailto:jjc@jclark.com\">jjc@jclark.com</a>\n</li>\n<li>Sanjiva Weerawarana, <a href=\"mailto:sanjiva@weerawarana.org\">sanjiva@weerawarana.org</a>\n</li>\n<li>Sameera Jayasoma, <a href=\"mailto:sameera@wso2.com\">sameera@wso2.com</a>\n</li>\n<li>Hasitha Aravinda, <a href=\"mailto:hasitha@wso2.com\">hasitha@wso2.com</a>\n</li>\n</ul>\n<p>\n(Other contributors are listed in <a href=\"#contributors\">Appendix D</a>.)\n</p>\n<p>\nCopyright Â© 2018, 2019, 2020 <a href=\"https://wso2.com/\">WSO2</a>\n</p>\n<p>\nLicensed under the <a href=\"https://creativecommons.org/licenses/by-nd/4.0/\">Creative Commons\nAttribution-NoDerivatives 4.0 International</a> license\n</p>\n<p class=\"status\">\nLanguage and document status\n</p>\n<p>\nThe language described in this specification is now stable, with the exception\nof features that are explicitly marked as having <em>Preview</em> status. We\nexpect the final design of these features to be close enough to the current\ndesign that it will be straightforward for code that makes uses the current\ndesign to be updated to the final design.\n</p>\n<p>\nComments on this document are welcome and should be made by creating an issue in\n<code><a href=\"https://github.com/ballerina-platform/ballerina-spec\">https://github.com/ballerina-platform/ballerina-spec</a></code>, which is the\nGitHub repository where this specification is maintained. The design of the\nlanguage may also be discussed in the <a href=\"mailto:ballerina-dev@googlegroups.com\">ballerina-dev@googlegroups.com</a>\nmailing list.\n</p>\n<section class=\"toc\"><h2>Table of contents</h2>\n<ul>\n<li>1. <a href=\"#introduction\">Introduction</a>\n</li>\n<li>2. <a href=\"#notation\">Notation</a>\n</li>\n<li>3. <a href=\"#program_structure\">Program structure</a>\n</li>\n<li>4. <a href=\"#lexical_structure\">Lexical structure</a>\n</li>\n<li>5. <a href=\"#values_types\">Values, types and variables</a><ul>\n<li>5.1 <a href=\"#section_5.1\">Simple values</a><ul>\n<li>5.1.1 <a href=\"#section_5.1.1\">Nil</a>\n</li>\n<li>5.1.2 <a href=\"#section_5.1.2\">Boolean</a>\n</li>\n<li>5.1.3 <a href=\"#section_5.1.3\">Int</a>\n</li>\n<li>5.1.4 <a href=\"#section_5.1.4\">Floating point types</a><ul>\n<li>5.1.4.1 <a href=\"#section_5.1.4.1\">Float</a>\n</li>\n<li>5.1.4.2 <a href=\"#section_5.1.4.2\">Decimal</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.2 <a href=\"#section_5.2\">Sequence values</a><ul>\n<li>5.2.1 <a href=\"#section_5.2.1\">Strings</a>\n</li>\n<li>5.2.2 <a href=\"#XML\">XML</a><ul><li>5.2.2.1 <a href=\"#section_5.2.2.1\">XML namespaces</a>\n</li></ul>\n</li>\n</ul>\n</li>\n<li>5.3 <a href=\"#section_5.3\">Structured values</a><ul>\n<li>5.3.1 <a href=\"#section_5.3.1\">Lists</a><ul>\n<li>5.3.1.1 <a href=\"#section_5.3.1.1\">Array types</a>\n</li>\n<li>5.3.1.2 <a href=\"#section_5.3.1.2\">Tuple types</a>\n</li>\n</ul>\n</li>\n<li>5.3.2 <a href=\"#section_5.3.2\">Mappings</a><ul>\n<li>5.3.2.1 <a href=\"#section_5.3.2.1\">Map types</a>\n</li>\n<li>5.3.2.2 <a href=\"#section_5.3.2.2\">Record types</a>\n</li>\n</ul>\n</li>\n<li>5.3.3 <a href=\"#section_5.3.3\">[Preview] Tables</a>\n</li>\n<li>5.3.4 <a href=\"#section_5.3.4\">Error</a>\n</li>\n</ul>\n</li>\n<li>5.4 <a href=\"#section_5.4\">Behavioral values</a><ul>\n<li>5.4.1 <a href=\"#functions\">Functions</a>\n</li>\n<li>5.4.2 <a href=\"#section_5.4.2\">Objects</a><ul>\n<li>5.4.2.1 <a href=\"#section_5.4.2.1\">Fields</a>\n</li>\n<li>5.4.2.2 <a href=\"#section_5.4.2.2\">Methods</a>\n</li>\n<li>5.4.2.3 <a href=\"#section_5.4.2.3\">Visibility</a>\n</li>\n<li>5.4.2.4 <a href=\"#section_5.4.2.4\">Typing</a>\n</li>\n<li>5.4.2.5 <a href=\"#section_5.4.2.5\">Initialization</a>\n</li>\n<li>5.4.2.6 <a href=\"#section_5.4.2.6\">Object type references</a>\n</li>\n</ul>\n</li>\n<li>5.4.3 <a href=\"#section_5.4.3\">Futures</a>\n</li>\n<li>5.4.4 <a href=\"#section_5.4.4\">[Preview] Services</a>\n</li>\n<li>5.4.5 <a href=\"#section_5.4.5\">Type descriptors</a>\n</li>\n<li>5.4.6 <a href=\"#section_5.4.6\">Handles</a>\n</li>\n<li>5.4.7 <a href=\"#section_5.4.7\">[Preview] Streams</a>\n</li>\n</ul>\n</li>\n<li>5.5 <a href=\"#section_5.5\">Other type descriptors</a><ul>\n<li>5.5.1 <a href=\"#section_5.5.1\">Singleton types</a>\n</li>\n<li>5.5.2 <a href=\"#section_5.5.2\">Union types</a>\n</li>\n<li>5.5.3 <a href=\"#section_5.5.3\">Optional types</a>\n</li>\n<li>5.5.4 <a href=\"#section_5.5.4\">Any type</a>\n</li>\n<li>5.5.5 <a href=\"#anydata\">Anydata type</a>\n</li>\n<li>5.5.6 <a href=\"#section_5.5.6\">Never type</a>\n</li>\n<li>5.5.7 <a href=\"#byte_type\">Byte type</a>\n</li>\n<li>5.5.8 <a href=\"#section_5.5.8\">JSON types</a>\n</li>\n<li>5.5.9 <a href=\"#section_5.5.9\">Type reference</a>\n</li>\n</ul>\n</li>\n<li>5.6 <a href=\"#built-in_abstract_object_types\">Built-in abstract object types</a><ul>\n<li>5.6.1 <a href=\"#section_5.6.1\">Iterator</a>\n</li>\n<li>5.6.2 <a href=\"#section_5.6.2\">Iterable</a>\n</li>\n<li>5.6.3 <a href=\"#StreamImplementor\">StreamImplementor</a>\n</li>\n<li>5.6.4 <a href=\"#section_5.6.4\">Listener</a>\n</li>\n</ul>\n</li>\n<li>5.7 <a href=\"#section_5.7\">Abstract operations</a><ul>\n<li>5.7.1 <a href=\"#FillMember\">FillMember</a>\n</li>\n<li>5.7.2 <a href=\"#Clone\">Clone</a>\n</li>\n<li>5.7.3 <a href=\"#ImmutableClone\">ImmutableClone</a>\n</li>\n<li>5.7.4 <a href=\"#section_5.7.4\">SameShape</a>\n</li>\n<li>5.7.5 <a href=\"#section_5.7.5\">NumericConvert</a>\n</li>\n</ul>\n</li>\n<li>5.8 <a href=\"#section_5.8\">Binding patterns and variables</a><ul>\n<li>5.8.1 <a href=\"#section_5.8.1\">Binding patterns</a>\n</li>\n<li>5.8.2 <a href=\"#section_5.8.2\">Typed binding patterns</a>\n</li>\n<li>5.8.3 <a href=\"#section_5.8.3\">Variable and identifier scoping</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>6. <a href=\"#expressions\">Expressions</a><ul>\n<li>6.1 <a href=\"#section_6.1\">Expression evaluation</a>\n</li>\n<li>6.2 <a href=\"#section_6.2\">Static typing of expressions</a><ul>\n<li>6.2.1 <a href=\"#lax_static_typing\">Lax static typing</a>\n</li>\n<li>6.2.2 <a href=\"#section_6.2.2\">Contextually expected type</a>\n</li>\n<li>6.2.3 <a href=\"#section_6.2.3\">Precise and broad types</a>\n</li>\n</ul>\n</li>\n<li>6.3 <a href=\"#section_6.3\">Casting and conversion</a>\n</li>\n<li>6.4 <a href=\"#section_6.4\">Constant expressions</a>\n</li>\n<li>6.5 <a href=\"#section_6.5\">Literals</a>\n</li>\n<li>6.6 <a href=\"#section_6.6\">List constructor</a>\n</li>\n<li>6.7 <a href=\"#section_6.7\">Mapping constructor</a>\n</li>\n<li>6.8 <a href=\"#section_6.8\">[Preview] Table constructor</a>\n</li>\n<li>6.9 <a href=\"#section_6.9\">Service constructor</a>\n</li>\n<li>6.10 <a href=\"#section_6.10\">String template expression</a>\n</li>\n<li>6.11 <a href=\"#section_6.11\">XML template expression</a>\n</li>\n<li>6.12 <a href=\"#section_6.12\">New expression</a>\n</li>\n<li>6.13 <a href=\"#section_6.13\">Variable reference expression</a>\n</li>\n<li>6.14 <a href=\"#section_6.14\">Field access expression</a>\n</li>\n<li>6.15 <a href=\"#section_6.15\">Optional field access expression</a>\n</li>\n<li>6.16 <a href=\"#section_6.16\">XML attribute access expression</a>\n</li>\n<li>6.17 <a href=\"#section_6.17\">Annotation access expression</a>\n</li>\n<li>6.18 <a href=\"#section_6.18\">Member access expression</a>\n</li>\n<li>6.19 <a href=\"#function_call\">Function call expression</a>\n</li>\n<li>6.20 <a href=\"#section_6.20\">Method call expression</a>\n</li>\n<li>6.21 <a href=\"#section_6.21\">Error constructor</a>\n</li>\n<li>6.22 <a href=\"#section_6.22\">Anonymous function expression</a>\n</li>\n<li>6.23 <a href=\"#section_6.23\">Let expression</a>\n</li>\n<li>6.24 <a href=\"#section_6.24\">Type cast expression</a>\n</li>\n<li>6.25 <a href=\"#section_6.25\">Typeof expression</a>\n</li>\n<li>6.26 <a href=\"#section_6.26\">Unary expression</a>\n</li>\n<li>6.27 <a href=\"#section_6.27\">Multiplicative expression</a>\n</li>\n<li>6.28 <a href=\"#section_6.28\">Additive expression</a>\n</li>\n<li>6.29 <a href=\"#section_6.29\">Shift expression</a>\n</li>\n<li>6.30 <a href=\"#section_6.30\">Range expression</a>\n</li>\n<li>6.31 <a href=\"#section_6.31\">Numerical comparison expression</a>\n</li>\n<li>6.32 <a href=\"#section_6.32\">Type test expression</a>\n</li>\n<li>6.33 <a href=\"#section_6.33\">Equality expression</a>\n</li>\n<li>6.34 <a href=\"#section_6.34\">Binary bitwise expression</a>\n</li>\n<li>6.35 <a href=\"#section_6.35\">Logical expression</a>\n</li>\n<li>6.36 <a href=\"#section_6.36\">Conditional expression</a>\n</li>\n<li>6.37 <a href=\"#section_6.37\">Checking expression</a>\n</li>\n<li>6.38 <a href=\"#section_6.38\">Trap expression</a>\n</li>\n<li>6.39 <a href=\"#section_6.39\">Query expression</a><ul>\n<li>6.39.1 <a href=\"#section_6.39.1\">From clause</a>\n</li>\n<li>6.39.2 <a href=\"#section_6.39.2\">Where clause</a>\n</li>\n<li>6.39.3 <a href=\"#section_6.39.3\">Let clause</a>\n</li>\n<li>6.39.4 <a href=\"#section_6.39.4\">Select clause</a>\n</li>\n</ul>\n</li>\n<li>6.40 <a href=\"#section_6.40\">XML navigation expression</a><ul>\n<li>6.40.1 <a href=\"#section_6.40.1\">XML name pattern</a>\n</li>\n<li>6.40.2 <a href=\"#section_6.40.2\">XML filter expression</a>\n</li>\n<li>6.40.3 <a href=\"#section_6.40.3\">XML step expression</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>7. <a href=\"#actions_statements\">Actions and statements</a><ul>\n<li>7.1 <a href=\"#section_7.1\">Actions</a>\n</li>\n<li>7.2 <a href=\"#section_7.2\">Threads and strands</a>\n</li>\n<li>7.3 <a href=\"#section_7.3\">Function and worker execution</a>\n</li>\n<li>7.4 <a href=\"#section_7.4\">Statement execution</a>\n</li>\n<li>7.5 <a href=\"#section_7.5\">Fork statement</a>\n</li>\n<li>7.6 <a href=\"#section_7.6\">Start action</a>\n</li>\n<li>7.7 <a href=\"#section_7.7\">Wait action</a><ul>\n<li>7.7.1 <a href=\"#section_7.7.1\">Single wait action</a>\n</li>\n<li>7.7.2 <a href=\"#section_7.7.2\">Multiple wait action</a>\n</li>\n<li>7.7.3 <a href=\"#section_7.7.3\">Alternate wait action </a>\n</li>\n</ul>\n</li>\n<li>7.8 <a href=\"#section_7.8\">Worker message passing</a><ul>\n<li>7.8.1 <a href=\"#section_7.8.1\">Send action</a>\n</li>\n<li>7.8.2 <a href=\"#section_7.8.2\">Receive action</a><ul>\n<li>7.8.2.1 <a href=\"#section_7.8.2.1\">Single receive action</a>\n</li>\n<li>7.8.2.2 <a href=\"#section_7.8.2.2\">Multiple receive action</a>\n</li>\n</ul>\n</li>\n<li>7.8.3 <a href=\"#section_7.8.3\">Flush action</a>\n</li>\n<li>7.8.4 <a href=\"#section_7.8.4\">Send-receive correspondence</a>\n</li>\n</ul>\n</li>\n<li>7.9 <a href=\"#section_7.9\">Remote interaction</a>\n</li>\n<li>7.10 <a href=\"#section_7.10\">Query action</a>\n</li>\n<li>7.11 <a href=\"#section_7.11\">Local variable declaration statements</a>\n</li>\n<li>7.12 <a href=\"#section_7.12\">Implicit variable type narrowing</a>\n</li>\n<li>7.13 <a href=\"#section_7.13\">Local type definition statement</a>\n</li>\n<li>7.14 <a href=\"#XML_namespace_declaration_statement\">XML namespace declaration statement</a>\n</li>\n<li>7.15 <a href=\"#section_7.15\">Assignment</a><ul>\n<li>7.15.1 <a href=\"#section_7.15.1\">Lvalues</a>\n</li>\n<li>7.15.2 <a href=\"#section_7.15.2\">Assignment statement</a>\n</li>\n<li>7.15.3 <a href=\"#section_7.15.3\">Compound assignment statement</a>\n</li>\n<li>7.15.4 <a href=\"#section_7.15.4\">Destructuring assignment statement</a>\n</li>\n</ul>\n</li>\n<li>7.16 <a href=\"#section_7.16\">Action statement</a>\n</li>\n<li>7.17 <a href=\"#section_7.17\">Call statement</a>\n</li>\n<li>7.18 <a href=\"#section_7.18\">Conditional statement</a>\n</li>\n<li>7.19 <a href=\"#section_7.19\">Match statement</a>\n</li>\n<li>7.20 <a href=\"#section_7.20\">Foreach statement</a>\n</li>\n<li>7.21 <a href=\"#section_7.21\">While statement</a>\n</li>\n<li>7.22 <a href=\"#section_7.22\">Continue statement</a>\n</li>\n<li>7.23 <a href=\"#section_7.23\">Break statement</a>\n</li>\n<li>7.24 <a href=\"#section_7.24\">Panic statement</a>\n</li>\n<li>7.25 <a href=\"#section_7.25\">Return statement</a>\n</li>\n<li>7.26 <a href=\"#section_7.26\">Lock statement</a>\n</li>\n</ul>\n</li>\n<li>8. <a href=\"#module_level\">Module-level declarations</a><ul>\n<li>8.1 <a href=\"#section_8.1\">Import declaration</a>\n</li>\n<li>8.2 <a href=\"#section_8.2\">Module and program execution</a>\n</li>\n<li>8.3 <a href=\"#section_8.3\">Listeners and services</a><ul>\n<li>8.3.1 <a href=\"#section_8.3.1\">Listener declaration</a>\n</li>\n<li>8.3.2 <a href=\"#section_8.3.2\">Service declaration</a>\n</li>\n</ul>\n</li>\n<li>8.4 <a href=\"#section_8.4\">Function definition</a>\n</li>\n<li>8.5 <a href=\"#section_8.5\">Module type definition</a>\n</li>\n<li>8.6 <a href=\"#section_8.6\">Module variable declaration</a>\n</li>\n<li>8.7 <a href=\"#section_8.7\">Module constant declaration</a>\n</li>\n<li>8.8 <a href=\"#section_8.8\">Module XML namespace declaration</a>\n</li>\n</ul>\n</li>\n<li>9. <a href=\"#metadata\">Metadata</a><ul>\n<li>9.1 <a href=\"#section_9.1\">Annotations</a>\n</li>\n<li>9.2 <a href=\"#section_9.2\">Documentation</a>\n</li>\n<li>9.3 <a href=\"#section_9.3\">Ballerina Flavored Markdown</a>\n</li>\n</ul>\n</li>\n<li>10. <a href=\"#lang_library\">Lang library</a><ul><li>10.1 <a href=\"#built-in_subtypes\">Built-in subtypes</a>\n</li></ul>\n</li>\n<li>A. <a href=\"#references\">References</a>\n</li>\n<li>B. <a href=\"#changes\">Changes since previous versions</a><ul>\n<li>B.1 <a href=\"#section_B.1\">Summary of changes from 2019R3 to 2020R1</a>\n</li>\n<li>B.2 <a href=\"#section_B.2\">Summary of changes from 2019R2 to 2019R3</a>\n</li>\n<li>B.3 <a href=\"#section_B.3\">Summary of changes from 2019R1 to 2019R2</a>\n</li>\n<li>B.4 <a href=\"#section_B.4\">Summary of changes from 0.990 to 2019R1</a>\n</li>\n<li>B.5 <a href=\"#section_B.5\">Summary of changes from 0.980 to 0.990</a>\n</li>\n<li>B.6 <a href=\"#section_B.6\">Summary of changes from 0.970 to 0.980</a>\n</li>\n</ul>\n</li>\n<li>C. <a href=\"#planned_future_functionality\">Planned future functionality</a>\n</li>\n<li>D. <a href=\"#contributors\">Other contributors</a>\n</li>\n</ul></section>\n<section>\n<h2 id=\"introduction\">1. Introduction</h2>\n<p>\nBallerina is a statically typed, concurrent programming language, focusing on\nnetwork interaction and structured data. It is intended to be the core of a\nlanguage-centric middleware platform. It has all the general-purpose\nfunctionality expected of a modern programming language, but it also has several\nunusual aspects that make it particularly suitable for its intended purpose.\n</p>\n<p>\nFirst, it provides language constructs specifically for consuming and providing\nnetwork services. Future versions of Ballerina will add language constructs for\nother middleware functionality such as event stream processing, distributed\ntransactions and reliable messaging; this is described in more detail in <a href=\"#planned_future_functionality\">Appendix C</a>.\n</p>\n<p>\nSecond, its abstractions and syntax for concurrency and network interaction have\nbeen designed so that there is a close correspondence with sequence diagrams.\nThis enables a bidirectional mapping for any Ballerina function between its\ntextual representation in the syntax described in this specification and its\ngraphical representation as a sequence diagram, such that the sequence diagram\nfully shows the aspects of the behavior of that function that relate to\nconcurrency and network interaction.\n</p>\n<p>\nThird, it has a type system that is more flexible and allows for looser coupling\nthan traditional statically typed languages. The type system is structural:\ninstead of requiring the program to explicitly say which types are compatible\nwith each other, compatibility of types and values is determined automatically\nbased on their structure; this is particularly useful when combining data from\nmultiple, independently-designed systems. In addition, the type system provides\nunion types and open records. This flexibility allows the type system to be used\nas a schema for the data that is exchanged in distributed applications.\nBallerina's data types are designed to work particularly well with JSON; any\nJSON value has a direct, natural representation as a Ballerina value. Ballerina\nalso provides support for XML and tabular data.\n</p>\n<p>\nBallerina is not a research language. It is intended to be a pragmatic language\nsuitable for mass-market commercial adoption. It tries to feel familiar to\nprogrammers who are used to popular, modern C-family languages, notably Java, C#\nand JavaScript. It also gets ideas and inspiration from many other existing\nprogramming languages including TypeScript, Go, Rust, D, Kotlin, Swift, Python\nand Perl.\n</p>\n<p>\nThe Ballerina language has been designed in conjunction with the Ballerina\nplatform, which provides comprehensive support for a module-based software\ndevelopment model, including versioning, dependency management, testing,\ndocumentation, building and sharing. Modules are organized into repositories;\nthere is a globally-shared, central repository, but repositories can also be\nlocal.\n</p>\n<p>\nThe Ballerina language includes a small library, the lang library, which\nprovides fundamental operations on the data types defined by the language; the\nlang library is defined by this specification. The Ballerina platform includes\nan extensive standard library, which includes not only the usual low-level,\ngeneral-purpose functionality, but also support for a wide variety of network\nprotocols, interface standards, data formats and authentication/authorization\nstandards, which make writing secure, resilient distributed applications\nsignificantly easier than with other languages. The standard library is not\nspecified in this document.\n</p>\n</section>\n<section>\n<h2 id=\"notation\">2. Notation</h2>\n<p>\nProductions are written in the form:\n</p>\n\n<pre>symbol := rhs\n</pre>\n<p>\nwhere symbol is the name of a nonterminal, and <code>rhs</code> is as follows:\n</p>\n<ul>\n<li>\n<code>0xX</code> means the single character whose Unicode code point is\ndenoted by the hexadecimal numeral X</li>\n<li>\n<code>^x</code> means any single Unicode code point that does not match x\nand is not a disallowed character;</li>\n<li>\n<code>x..y</code> means any single Unicode character whose code point is\ngreater than or equal to that of x and less than or equal to that of y</li>\n<li>\n<code class=\"grammar\">str</code> means the characters <code>str</code> literally</li>\n<li>\n<code>symbol </code>means a reference to production for the nonterminal\n<code>symbol</code>\n</li>\n<li>\n<code>x|y</code> means x or y</li>\n<li>\n<code>x&amp;y</code> means x and y, interleaved in any order</li>\n<li>\n<code>[x]</code> means zero or one times</li>\n<li>\n<code>x?</code> means x zero or one times</li>\n<li>\n<code>x*</code> means x zero or more times</li>\n<li>\n<code>x+</code> means x one or more times</li>\n<li>\n<code>(x)</code> means x (grouping)</li>\n</ul>\n<p>\nThe <code>rhs</code> of a symbol that starts with a lower-case letter implicitly allows white\nspace and comments, as defined by the production <code>TokenWhiteSpace</code>,\nbetween the terminals and nonterminals that it references.\n</p>\n</section>\n<section>\n<h2 id=\"program_structure\">3. Program structure</h2>\n<p>\nA Ballerina program is divided into modules. A module has a source form and a\nbinary form. The module is the unit of compilation; a Ballerina compiler\ntranslates the source form of a module into its binary form. A module may\nreference other modules. When a compiler translates a source module into a\nbinary module, it needs access only to the binary form of other modules\nreferenced from the source module.\n</p>\n<p>\nA binary module can only be referenced if it is placed in a module store. There\nare two kinds of module store: a repository and a project. A module stored in a\nrepository can be referenced from any other module. A module stored in a project\ncan only be referenced from other modules stored in the same project.\n</p>\n<p>\nA repository organizes binary modules into a 3-level hierarchy:\n</p>\n<ol>\n<li>organization;</li>\n<li>module name;</li>\n<li>version.</li>\n</ol>\n<p>\nOrganizations are identified by Unicode strings, and are unique within a\nrepository. Any organization name starting with the string\n<code>ballerina</code> is reserved for use by\nthe Ballerina platform. A module name is a Unicode string and is unique within a\nrepository organization. A particular module name can have one or more versions\neach associated with a separate binary module. Versions are semantic, as\ndescribed in the SemVer specification.\n</p>\n<p>\nA project stores modules using a simpler single-level hierarchy, in which the\nmodule is associated directly with the module name.\n</p>\n<p>\nA binary module is a sequence of octets. Its format is specified in the\nBallerina platform.\n</p>\n<p>\nAn abstract source module consists of:\n</p>\n<ul>\n<li>an ordered collection of one or more source parts; each source part is a\nsequence of octets that is the UTF-8 encoding of part of the source code for the\nmodule</li>\n<li>metadata containing the following\n<ul>\n<li>always required: module name</li>\n<li>required only if the source module is to be compiled into a binary module\nstored in a repository:\n<ul>\n<li>organization name</li>\n<li>version</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>\nAn abstract source module can be stored in a variety of concrete forms. For\nexample, the Ballerina platform describes a method for storing an\nabstract source module in a filesystem, where the source parts are files with a\n<code>.bal </code>extension stored in a directory, the module name comes from\nthe name of that directory, and the version and organization name comes from a\nconfiguration file <code>Ballerina.toml</code> in that directory.\n</p>\n</section>\n<section>\n<h2 id=\"lexical_structure\">4. Lexical structure</h2>\n<p>\nThe grammar in this document specifies how a sequence of Unicode code points is\ninterpreted as part of the source of a Ballerina module. A Ballerina module part\nis a sequence of octets (8-bit bytes); this sequence of octets is interpreted as\nthe UTF-8 encoding of a sequence of code points and must comply with the\nrequirements of RFC 3629.\n</p>\n<p>\nAfter the sequence of octets is decoded from UTF-8, the following two\ntransformations must be performed before it is parsed using the grammar in this\ndocument:\n</p>\n<ul>\n<li>if the sequence starts with a byte order mark (code point 0xFEFF), it must\nbe removed</li>\n<li>newlines are normalized as follows:\n<ul>\n<li>the two character sequence 0xD 0xA is replaced by 0xA</li>\n<li>a single 0xD character that is not followed by 0xD is replaced by 0xA</li>\n</ul>\n</li>\n</ul>\n<p>\nThe sequence of code points must not contain any of the following disallowed\ncode points:\n</p>\n<ul>\n<li>surrogates (0xD800 to 0xDFFF)</li>\n<li>non-characters (the 66 code points that Unicode designates as\nnon-characters)</li>\n<li>C0 control characters (0x0 to 0x1F and 0x1F) other than whitespace (0x9,\n0xA, 0xC, 0xD)</li>\n<li>C1 control characters (0x80 to 0x9F)</li>\n</ul>\n<p>\nNote that the grammar notation ^X does not allow the above disallowed code\npoints.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"identifier\">identifier</span> := <a href=\"#UnquotedIdentifier\"><span class=\"ntref\">UnquotedIdentifier</span></a> | <a href=\"#QuotedIdentifier\"><span class=\"ntref\">QuotedIdentifier</span></a>\n<span class=\"ntdfn\" id=\"UnquotedIdentifier\">UnquotedIdentifier</span> :=\n   <a href=\"#IdentifierInitialChar\"><span class=\"ntref\">IdentifierInitialChar</span></a> <a href=\"#IdentifierFollowingChar\"><span class=\"ntref\">IdentifierFollowingChar</span></a>*\n<span class=\"ntdfn\" id=\"QuotedIdentifier\">QuotedIdentifier</span> := <code>'</code> <a href=\"#QuotedIdentifierChar\"><span class=\"ntref\">QuotedIdentifierChar</span></a>+\n<span class=\"ntdfn\" id=\"QuotedIdentifierChar\">QuotedIdentifierChar</span> :=\n  <a href=\"#IdentifierFollowingChar\"><span class=\"ntref\">IdentifierFollowingChar</span></a>\n  | <a href=\"#QuotedIdentifierEscape\"><span class=\"ntref\">QuotedIdentifierEscape</span></a>\n  | <a href=\"#StringNumericEscape\"><span class=\"ntref\">StringNumericEscape</span></a>\n<span class=\"ntdfn\" id=\"IdentifierInitialChar\">IdentifierInitialChar</span> :=  <a href=\"#AsciiLetter\"><span class=\"ntref\">AsciiLetter</span></a> | <code>_</code> | <a href=\"#UnicodeIdentifierChar\"><span class=\"ntref\">UnicodeIdentifierChar</span></a>\n<span class=\"ntdfn\" id=\"IdentifierFollowingChar\">IdentifierFollowingChar</span> := <a href=\"#IdentifierInitialChar\"><span class=\"ntref\">IdentifierInitialChar</span></a> | <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>\n<span class=\"ntdfn\" id=\"QuotedIdentifierEscape\">QuotedIdentifierEscape</span> := <code>\\</code> ^ ( <a href=\"#AsciiLetter\"><span class=\"ntref\">AsciiLetter</span></a> | 0x9 | 0xA | 0xD | <a href=\"#UnicodePatternWhiteSpaceChar\"><span class=\"ntref\">UnicodePatternWhiteSpaceChar</span></a> )\n<span class=\"ntdfn\" id=\"AsciiLetter\">AsciiLetter</span> := <code>A</code> .. <code>Z</code> | <code>a</code> .. <code>z</code>\n<span class=\"ntdfn\" id=\"UnicodeIdentifierChar\">UnicodeIdentifierChar</span> := ^ ( <a href=\"#AsciiChar\"><span class=\"ntref\">AsciiChar</span></a> | <a href=\"#UnicodeNonIdentifierChar\"><span class=\"ntref\">UnicodeNonIdentifierChar</span></a> )\n<span class=\"ntdfn\" id=\"AsciiChar\">AsciiChar</span> := 0x0 .. 0x7F\n<span class=\"ntdfn\" id=\"UnicodeNonIdentifierChar\">UnicodeNonIdentifierChar</span> :=\n   <a href=\"#UnicodePrivateUseChar\"><span class=\"ntref\">UnicodePrivateUseChar</span></a>\n   | <a href=\"#UnicodePatternWhiteSpaceChar\"><span class=\"ntref\">UnicodePatternWhiteSpaceChar</span></a>\n   | <a href=\"#UnicodePatternSyntaxChar\"><span class=\"ntref\">UnicodePatternSyntaxChar</span></a>\n<span class=\"ntdfn\" id=\"UnicodePrivateUseChar\">UnicodePrivateUseChar</span> :=\n   0xE000 .. 0xF8FF\n   | 0xF0000 .. 0xFFFFD\n   | 0x100000 .. 0x10FFFD\n<span class=\"ntdfn\" id=\"UnicodePatternWhiteSpaceChar\">UnicodePatternWhiteSpaceChar</span> := 0x200E | 0x200F | 0x2028 | 0x2029\n<span class=\"ntdfn\" id=\"UnicodePatternSyntaxChar\">UnicodePatternSyntaxChar</span> := <em>character with Unicode property Pattern_Syntax=True</em>\n<span class=\"ntdfn\" id=\"Digit\">Digit</span> := <code>0</code> .. <code>9</code>\n</pre>\n<p>\nNote that the set of characters allowed in identifiers follows the requirements\nof Unicode TR31 for immutable identifiers; the set of characters is immutable in\nthe sense that it does not change between Unicode versions.\n</p>\n<p>\nThe QuotedIdentifier syntax allows an arbitrary non-empty string to be treated\nas an identifier. In particular, a reserved keyword <code><var>K</var></code>\ncan be used as an identifier by preceding it with a single quote i.e.\n<code>'<var>K</var></code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"TokenWhiteSpace\">TokenWhiteSpace</span> := (<a href=\"#Comment\"><span class=\"ntref\">Comment</span></a> | <a href=\"#WhiteSpaceChar\"><span class=\"ntref\">WhiteSpaceChar</span></a>)*\n<span class=\"ntdfn\" id=\"Comment\">Comment</span> := <code>//</code> <a href=\"#AnyCharButNewline\"><span class=\"ntref\">AnyCharButNewline</span></a>*\n<span class=\"ntdfn\" id=\"AnyCharButNewline\">AnyCharButNewline</span> := ^ 0xA\n<span class=\"ntdfn\" id=\"WhiteSpaceChar\">WhiteSpaceChar</span> := 0x9 | 0xA | 0xD | 0x20\n</pre>\n<p>\n<code>TokenWhiteSpace</code> is implicitly allowed on the right hand side of\nproductions for non-terminals whose names start with a lower-case letter.\n</p>\n</section>\n<section>\n<h2 id=\"values_types\">5. Values, types and variables</h2>\n<p>\nBallerina programs operate on a rich universe of values. This universe of values\nis partitioned into a number of <em>basic types</em>; every value belongs to\nexactly one basic type.\n</p>\n<p>\nValues are of four kinds, each corresponding to a kind of basic type:\n</p>\n<ul>\n<li>simple values, like booleans and floating point numbers, which are not\nconstructed from other values;</li>\n<li>structured values, like mappings and lists, which create structures from\nother values;</li>\n<li>sequence values, which combine aspects of simple values and structured\nvalues;</li>\n<li>behavioral values, like functions, which allow parts of Ballerina programs\nto be handled in a uniform way with other values</li>\n</ul>\n<p>\nThere is a fundamental distinction between values that have a <em>storage\nidentity</em> and values that do not. A value that has storage identity has an\nidentity that comes from the location where the value is stored. All structural\nand behavioural values have a storage identity, whereas all simple values do\nnot. Storage identity for sequence values is more complicated and will be\nexplained in the section on sequence values.\n</p>\n<p>\nValues can be stored in variables or as members of structures. When a value has\nno storage identity, it can be stored directly in the variable or structure.\nHowever, when a value has storage identity, what is stored in the variable or\nmember is a reference to the location where the value is stored rather than the\nvalue itself. Storage identity allows values in Ballerina to represent not just\ntrees but graphs.\n</p>\n<p>\nBallerina provides the ability to test whether two values have the same storage\nidentity, but does not expose the specific storage location of a value. For\nvalues with storage identity, there is the concept of creating a <em>new</em>\nvalue: this means creating a value that has a storage identity that is different\nfrom any existing value. For values with storage identity, there is also the\nconcept of <em>copying</em>: it means to create a value that is the same, except\nfor having a new storage identity. The concept of having storage identity is\nsimilar to the concept of a reference type in some other programming languages,\nbut also accomodates the concept of a sequence value.\n</p>\n<p>\nStorage identity is tied to mutability. Mutation is only well-defined for values\nwith storage identity. When a value stored in some storage location is mutated,\nthe change will be visible through all variables referring to the value in that\nlocation. But not all values with storage identity can be mutated: a value may\nnot support mutation even though it has a storage identity.\n</p>\n<p>\nBallerina programs use types to categorize values both at compile-time and\nruntime. Types deal with an abstraction of values that does not consider storage\nidentity. This abstraction is called a <em>shape</em>. A type denotes a set of\nshapes. Subtyping in Ballerina is <em>semantic</em>: a type S is a subtype of\ntype T if the set of shapes denoted by S is a subset of the set of shapes\ndenoted by T. Every value has a corresponding shape. A shape is specific to a\nbasic type: if two values have different basic types, then they have different\nshapes. Since shapes do not deal with storage identity, they represent trees\nrather graphs. For simple values, there is no difference between a shape and a\nvalue, with the exception of floating point values where the shape does not\nconsider representation details that do not affect the mathematical value being\nrepresented. There are two important relations between a value and a type:\n</p>\n<ul>\n<li>a value <em>looks like</em> a type at a particular point in the execution of\na program if its shape at that point is a member of the type;</li>\n<li>a value <em>belongs to</em> a type if it looks like the type, and it will\nnecessarily continue to look like the type no matter how the value is mutated.</li>\n</ul>\n<p>\nFor an immutable value, looking like a type and belonging to a type are the same\nthing.\n</p>\n<p>\nWhen a Ballerina program declares a variable to have a compile-time type, this\nmeans that the Ballerina compiler together with the runtime system will ensure\nthat the variable will only ever contain a value that belongs to the type.\nBallerina also provides mechanisms that take a value that looks like a type and\nuse it to create a value that belongs to a type.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"type-descriptor\">type-descriptor</span> :=\n   <a href=\"#simple-type-descriptor\"><span class=\"ntref\">simple-type-descriptor</span></a>\n   | <a href=\"#sequence-type-descriptor\"><span class=\"ntref\">sequence-type-descriptor</span></a>\n   | <a href=\"#structured-type-descriptor\"><span class=\"ntref\">structured-type-descriptor</span></a>\n   | <a href=\"#behavioral-type-descriptor\"><span class=\"ntref\">behavioral-type-descriptor</span></a>\n   | <a href=\"#other-type-descriptor\"><span class=\"ntref\">other-type-descriptor</span></a>\n</pre>\n<p>\nBallerina provides a rich variety of type descriptors, which programs use to\ndescribe types. For example, there is a type descriptor for each simple basic\ntype; there is a type descriptor that describes as type as a union of two types;\nthere is a type descriptor that uses a single value to describe a type that\ncontains a single shape. This means that values can look like and belong to\narbitrarily many types, even though they look like or belong to exactly one\n<em>basic</em> type.\n</p>\n<p>\nThe following table summarizes the type descriptors provided by Ballerina.\n</p>\n<table>\n  <tr>\n   <td><strong>Kind</strong></td>\n   <td><strong>Name</strong></td>\n   <td><strong>Set of values denoted by type descriptor</strong></td>\n  </tr>\n  <tr>\n   <td rowspan=\"5\">basic, simple</td>\n   <td>nil</td>\n   <td>()</td>\n  </tr>\n  <tr>\n   <td>boolean</td>\n   <td>true, false</td>\n  </tr>\n  <tr>\n   <td>int</td>\n   <td>64-bit signed integers</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>64-bit IEEE 754-2008 binary floating point numbers</td>\n  </tr>\n  <tr>\n   <td>decimal</td>\n   <td>decimal floating point numbers</td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">basic, sequence</td>\n   <td>string</td>\n   <td>a sequence of Unicode scalar values</td>\n  </tr>\n  <tr>\n   <td>XML</td>\n   <td>a sequence of zero or more elements, processing instructions, comments or\ntext items</td>\n  </tr>\n  <tr>\n   <td rowspan=\"6\">basic, structured</td>\n   <td>array</td>\n   <td>an ordered list of values, optionally with a specific length, where a\nsingle type is specified for all members of the list</td>\n  </tr>\n  <tr>\n   <td>tuple</td>\n   <td>an ordered list of values, where a type is specified separately for each\nmember of the list</td>\n  </tr>\n  <tr>\n   <td>map</td>\n   <td>a mapping from keys, which are strings, to values; specifies mappings in\nterms of a single type to which all keys are mapped</td>\n  </tr>\n  <tr>\n   <td>record</td>\n   <td>a mapping from keys, which are strings, to values; specifies maps in\nterms of names of fields (required keys) and value for each field</td>\n  </tr>\n  <tr>\n   <td>table</td>\n   <td>a two-dimensional collection of immutable values</td>\n  </tr>\n  <tr>\n   <td>error</td>\n   <td>an indication that there has been an error, with a string identifying the\nreason for the error, and a mapping giving additional details about the error</td>\n  </tr>\n  <tr>\n   <td rowspan=\"7\">basic, behavioral</td>\n   <td>function</td>\n   <td>a function with 0 or more specified parameter types and a single return\ntype</td>\n  </tr>\n  <tr>\n   <td>future</td>\n   <td>a value to be returned by a function execution</td>\n  </tr>\n  <tr>\n   <td>object</td>\n   <td>a combination of named fields and named methods</td>\n  </tr>\n  <tr>\n   <td>service</td>\n   <td>a collection of named methods, including resource methods</td>\n  </tr>\n  <tr>\n   <td>typedesc</td>\n   <td>a type descriptor</td>\n  </tr>\n  <tr>\n   <td>handle</td>\n   <td>reference to externally managed storage</td>\n  </tr>\n  <tr>\n   <td>stream</td>\n   <td>a sequence of values that can be generated lazily</td>\n  </tr>\n  <tr>\n   <td rowspan=\"8\">other</td>\n   <td>singleton</td>\n   <td>a single value described by a literal</td>\n  </tr>\n  <tr>\n   <td>union</td>\n   <td>the union of the component types</td>\n  </tr>\n  <tr>\n   <td>optional</td>\n   <td>the underlying type and ()</td>\n  </tr>\n  <tr>\n   <td>any</td>\n   <td>any value other than an error</td>\n  </tr>\n  <tr>\n   <td>anydata</td>\n   <td>not an error and does not contain behavioral members at any depth</td>\n  </tr>\n  <tr>\n   <td>never</td>\n   <td>no value</td>\n  </tr>\n  <tr>\n   <td>byte</td>\n   <td>int in the range 0 to 255 inclusive</td>\n  </tr>\n  <tr>\n   <td>json</td>\n   <td>the union of (), int, float, decimal, string, and maps and arrays whose\nvalues are, recursively, json</td>\n  </tr>\n</table>\n<p>\nIn addition to describing a type, a type descriptor may also include information\nused to construct a value of the type, as well as metadata. Whereas the type\ndescribed by a type descriptor is known at compile time, this additional\ninformation may need to be resolved at runtime. The typedesc basic type\nrepresents a type descriptor that has been resolved.\n</p>\n<p>\nValues of some basic types are <em>iterable</em>. An iterable value supports an\niteration operation, which treats the iterable value as consisting of a sequence\nof zero or more simpler values, which are in some sense a part of the iterable\nvalue; the iteration operation provides the values in the sequence, one after\nanother. The sequence of values that an iteration operation on a value provides\nis the <em>iteration sequence</em> of the value. Each iterable basic type\ndefines the iteration sequence for a value of that basic type. There is also a\nvalue associated with the completion of the iteration operation, which is nil if\nthe iteration completed successfully and an error otherwise. The iteration\noperation thus determines two associated types for an iterable type: the value\ntype, which is the type of the values in the iteration sequence, and the\ncompletion type, which is the type of the iteration completion value.\n</p>\n<p>\nThe following tables summarizes the iterable basic types.\n</p>\n<table>\n<tr>\n<th>Basic type</th>\n<th>Iteration sequence</th>\n<th>Type descriptor</th>\n<th>Value type</th>\n<th>Completion type</th>\n</tr>\n<tr>\n<td>string</td>\n<td>length 1 substrings</td>\n<td><code>string</code></td>\n<td><code>string:Char</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>xml</td>\n<td>singleton xml values</td>\n<td><code>xml&lt;T&gt;</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>list</td>\n<td>members in order</td>\n<td><code>T[]</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>mapping</td>\n<td>members</td>\n<td><code>map&lt;T&gt;</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>stream</td>\n<td>items</td>\n<td><code>stream&lt;T,C&gt;</code></td>\n<td><code>T</code></td>\n<td><code>C</code></td>\n</tr>\n</table>\n\n<section>\n<h3 id=\"section_5.1\">5.1 Simple values</h3>\n<p>\nA simple value belongs to exactly one of the following basic types:\n</p>\n<ul>\n<li>nil</li>\n<li>boolean</li>\n<li>int</li>\n<li>float</li>\n<li>decimal</li>\n</ul>\n<p>\nThe type descriptor for each simple basic type contains all the values of the\nbasic type.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"simple-type-descriptor\">simple-type-descriptor</span> :=\n   <a href=\"#nil-type-descriptor\"><span class=\"ntref\">nil-type-descriptor</span></a>\n   | <a href=\"#boolean-type-descriptor\"><span class=\"ntref\">boolean-type-descriptor</span></a>\n   | <a href=\"#int-type-descriptor\"><span class=\"ntref\">int-type-descriptor</span></a>\n   | <a href=\"#floating-point-type-descriptor\"><span class=\"ntref\">floating-point-type-descriptor</span></a>\n</pre>\n<section>\n<h4 id=\"section_5.1.1\">5.1.1 Nil</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"nil-type-descriptor\">nil-type-descriptor</span> :=  <code>(</code> <code>)</code>\n<span class=\"ntdfn\" id=\"nil-literal\">nil-literal</span> :=  <code>(</code> <code>)</code> | <code>null</code>\n</pre>\n<p>\nThe nil type contains a single value, called nil, which is used to represent the\nabsence of any other value. The nil value is written <code>()</code>. The nil\nvalue can also be written <code>null</code>, for compatibility with JSON; the\nuse of null should be restricted to JSON-related contexts.\n</p>\n<p>\nThe nil type is special, in that it is the only basic type that consists of a\nsingle value. The type descriptor for the nil type is not written using a\nkeyword, but is instead written <code>()</code> like the value.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.1.2\">5.1.2 Boolean</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"boolean-type-descriptor\">boolean-type-descriptor</span> := <code>boolean</code>\n<span class=\"ntdfn\" id=\"boolean-literal\">boolean-literal</span> := <code>true</code> | <code>false</code>\n</pre>\n<p>\nThe boolean type consists of the values true and false.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.1.3\">5.1.3 Int</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"int-type-descriptor\">int-type-descriptor</span> := <code>int</code>\n<span class=\"ntdfn\" id=\"int-literal\">int-literal</span> := <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> | <a href=\"#HexIntLiteral\"><span class=\"ntref\">HexIntLiteral</span></a>\n<span class=\"ntdfn\" id=\"DecimalNumber\">DecimalNumber</span> := <code>0</code> | <a href=\"#NonZeroDigit\"><span class=\"ntref\">NonZeroDigit</span></a> <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>*\n<span class=\"ntdfn\" id=\"HexIntLiteral\">HexIntLiteral</span> := <a href=\"#HexIndicator\"><span class=\"ntref\">HexIndicator</span></a> <a href=\"#HexNumber\"><span class=\"ntref\">HexNumber</span></a>\n<span class=\"ntdfn\" id=\"HexNumber\">HexNumber</span> := <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n<span class=\"ntdfn\" id=\"HexIndicator\">HexIndicator</span> := <code>0x</code> | <code>0X</code>\n<span class=\"ntdfn\" id=\"HexDigit\">HexDigit</span> := <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a> | <code>a</code> .. <code>f</code> | <code>A</code> .. <code>F</code>\n<span class=\"ntdfn\" id=\"NonZeroDigit\">NonZeroDigit</span> := <code>1</code> .. <code>9</code>\n</pre>\n<p>\nThe int type consists of integers between -9,223,372,036,854,775,808 and\n9,223,372,036,854,775,807 (i.e. signed integers than can fit into 64 bits using\na two's complement representation).\n</p>\n<p>\nThe <a href=\"#byte_type\"><code>byte</code> type</a> is a subtype of\n<code>int</code>. The <code>lang.int</code> lang library module are also\nprovides <a href=\"#built-in_subtypes\">built-in subtypes</a> for signed and\nunsigned integers representable in 8, 16 and 32 bits.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.1.4\">5.1.4 Floating point types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"floating-point-type-descriptor\">floating-point-type-descriptor</span> := <code>float</code> | <code>decimal</code>\n<span class=\"ntdfn\" id=\"floating-point-literal\">floating-point-literal</span> :=\n   <a href=\"#DecimalFloatingPointNumber\"><span class=\"ntref\">DecimalFloatingPointNumber</span></a> | <a href=\"#HexFloatingPointLiteral\"><span class=\"ntref\">HexFloatingPointLiteral</span></a>\n<span class=\"ntdfn\" id=\"DecimalFloatingPointNumber\">DecimalFloatingPointNumber</span> :=\n   <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> <a href=\"#Exponent\"><span class=\"ntref\">Exponent</span></a> [<a href=\"#FloatingPointTypeSuffix\"><span class=\"ntref\">FloatingPointTypeSuffix</span></a>]\n   | <a href=\"#DottedDecimalNumber\"><span class=\"ntref\">DottedDecimalNumber</span></a> [<a href=\"#Exponent\"><span class=\"ntref\">Exponent</span></a>] [<a href=\"#FloatingPointTypeSuffix\"><span class=\"ntref\">FloatingPointTypeSuffix</span></a>]\n   | <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> <a href=\"#FloatingPointTypeSuffix\"><span class=\"ntref\">FloatingPointTypeSuffix</span></a>\n<span class=\"ntdfn\" id=\"DottedDecimalNumber\">DottedDecimalNumber</span> :=\n   <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> <code>.</code> <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>*\n   | <code>.</code> <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n<span class=\"ntdfn\" id=\"Exponent\">Exponent</span> := <a href=\"#ExponentIndicator\"><span class=\"ntref\">ExponentIndicator</span></a> [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n<span class=\"ntdfn\" id=\"ExponentIndicator\">ExponentIndicator</span> := <code>e</code> | <code>E</code>\n<span class=\"ntdfn\" id=\"HexFloatingPointLiteral\">HexFloatingPointLiteral</span> := <a href=\"#HexIndicator\"><span class=\"ntref\">HexIndicator</span></a> <a href=\"#HexFloatingPointNumber\"><span class=\"ntref\">HexFloatingPointNumber</span></a>\n<span class=\"ntdfn\" id=\"HexFloatingPointNumber\">HexFloatingPointNumber</span> :=\n   <a href=\"#HexNumber\"><span class=\"ntref\">HexNumber</span></a> <a href=\"#HexExponent\"><span class=\"ntref\">HexExponent</span></a>\n   | <a href=\"#DottedHexNumber\"><span class=\"ntref\">DottedHexNumber</span></a> [<a href=\"#HexExponent\"><span class=\"ntref\">HexExponent</span></a>]\n<span class=\"ntdfn\" id=\"DottedHexNumber\">DottedHexNumber</span> :=\n   <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+ <code>.</code> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>*\n   | <code>.</code> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n<span class=\"ntdfn\" id=\"HexExponent\">HexExponent</span> := <a href=\"#HexExponentIndicator\"><span class=\"ntref\">HexExponentIndicator</span></a> [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n<span class=\"ntdfn\" id=\"HexExponentIndicator\">HexExponentIndicator</span> := <code>p</code> | <code>P</code>\n<span class=\"ntdfn\" id=\"Sign\">Sign</span> := <code>+</code> | <code>-</code>\n<span class=\"ntdfn\" id=\"FloatingPointTypeSuffix\">FloatingPointTypeSuffix</span> := <a href=\"#DecimalTypeSuffix\"><span class=\"ntref\">DecimalTypeSuffix</span></a> | <a href=\"#FloatTypeSuffix\"><span class=\"ntref\">FloatTypeSuffix</span></a>\n<span class=\"ntdfn\" id=\"DecimalTypeSuffix\">DecimalTypeSuffix</span> := <code>d</code> | <code>D</code>\n<span class=\"ntdfn\" id=\"FloatTypeSuffix\">FloatTypeSuffix</span> :=  <code>f</code> | <code>F</code>\n</pre>\n\n<section>\n<h5 id=\"section_5.1.4.1\">5.1.4.1 Float</h5>\n\n<p>\nThe float type corresponds to IEEE 754-2008 64-bit binary (radix 2) floating\npoint numbers. A float value can be represented by either a\nDecimalFloatingPointNumber with an optional FloatTypeSuffix, or by a\nHexFloatingPointLiteral.\n</p>\n<p>\nThe multiple bit patterns that IEEE 754 treats as NaN are considered to be the\nsame value in Ballerina. Positive and negative zero of a floating point basic\ntype are distinct values, following IEEE 754, but are defined to have the same\nshape, so that they will usually be treated as being equal.\n</p>\n<p>\nIEEE-defined operations on float values must be performed using a\nrounding-direction attribute of roundTiesToEven (which is the default IEEE\nrounding direction, sometimes called <em>round to nearest</em>). All float\nvalues, including the intermediate results of expressions, must use the value\nspace defined for the float type; implementations must not use extended\nprecision for intermediate results. This ensures that all implementations will\nproduce identical results. (This is the same as what is required by strictfp in\nJava.)\n</p>\n</section>\n<section>\n<h5 id=\"section_5.1.4.2\">5.1.4.2 Decimal</h5>\n\n<p>\nThe decimal type corresponds to a subset of IEEE 754-2008 128-bit decimal (radix\n10) floating point numbers. Any decimal value can be represented by a\nDecimalFloatingPointNumber with an optional DecimalTypeSuffix.\n</p>\n<p>\nA decimal value is a triple (<var>s</var>, <var>c</var>, <var>e</var>) where\n</p>\n<ul>\n<li>\n<var>s</var> is sign, either 0 or -1</li>\n<li>\n<var>c</var> is the coefficient, an unsigned integer that can be exactly\nrepresented in 34 decimal digits</li>\n<li>\n<var>e</var> is the exponent, a signed integer</li>\n</ul>\n<p>\nrepresenting the mathematical value -1<sup><var>s</var></sup> Ã\n<var>c</var> Ã 10<sup><var>e</var></sup>. The range for the exponent\n<var>e</var> is implementation dependent, but must be at least the range\nsupported by the IEEE 754-2008 decimal128 format (which is -6176 to 6111\ninclusive).\n</p>\n<p>\nThe decimal type corresponds to the ANSI X3.X274 subset of IEEE 754-2008, which\nhas the following simplifications:\n</p>\n<ul>\n<li>+0 and -0 are not distinguished; if the coefficent is zero, then the sign is\nalso constrained to be zero;</li>\n<li>NaN, infinities and subnormals are not supported; operations that would\nresult in one of these values according to the normal rules of IEEE 754-2008\ninstead result in a panic.</li>\n</ul>\n<p>\nOperations on the decimal type use the roundTiesToEven rounding mode, like the\nfloat type.\n</p>\n<p>\nThe shape of a decimal value is its mathematical value. Thus two decimal values\nhave the same shape if they represent the same mathematical value, even if they\ndo so using different exponents.\n</p>\n</section>\n</section>\n</section>\n<section>\n<h3 id=\"section_5.2\">5.2 Sequence values</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"sequence-type-descriptor\">sequence-type-descriptor</span> :=\n   <a href=\"#string-type-descriptor\"><span class=\"ntref\">string-type-descriptor</span></a>\n   | <a href=\"#xml-type-descriptor\"><span class=\"ntref\">xml-type-descriptor</span></a>\n</pre>\n<p>\nA sequence value belongs to one of the following two basic types:\n</p>\n<ul>\n<li>string</li>\n<li>xml</li>\n</ul>\n<p>\nA sequence value consists of an ordered sequence of zero or more constituent\nitems, where the constituent items belong to the same basic type as the sequence\nvalue itself. The <em>length</em> of a sequence value is the number of its\nconstituent items. Each constituent of a sequence value has an integer index\nâ¥ 0 and &lt; length. A sequence value is a <em>singleton</em> if its\nlength is 1. For each sequence basic type, there is an <em>empty</em> value,\nwhich has length 0. As with other basic types, the sequence basic types are\ndisjoint with themselves and with other basic types. Thus the empty value for\nstring is distinct from the empty value for xml, and these are both distinct\nfrom nil.\n</p>\n<p>\nThe values belonging to a sequence basic type B can be defined in terms of its\nsingleton values and a concatenation operation, by the following rules:\n</p>\n<ul>\n<li>\nthe singleton values of B belong to B;\n</li>\n<li>\nthe empty value of B belongs to B;\n</li>\n<li>\nif v<sub>1</sub> and v<sub>2</sub> belong to B, then the concatenation of\nv<sub>1</sub> and v<sub>2</sub> belongs to B.\n</li>\n</ul>\n<p>\nThe concatenation of any value v belonging to B with the empty sequence of B in\neither order is v.\n</p>\n<p>\nNote that for a sequence consisting of a single item v is the same thing as v. A\nsingle item <em>is a</em> sequence. The type of the constituent items of a\nsequence of basic type B is thus a subtype of B. This is a fundamental\ndifference between sequences and lists.\n</p>\n<p>\nOnly singleton values of a sequence type can have storage identity. When a\nconstituent of a sequence value has storage identity, what is stored in the\nsequence value is a reference to the location where the constituent value is\nstored rather than the constituent value itself.\n</p>\n<p>\nA sequence value is iterable: the iteration sequence consists of the singleton\nitems of the sequence value in order and the iteration completion value is\nalways nil.\n</p>\n\n<section>\n<h4 id=\"section_5.2.1\">5.2.1 Strings</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"string-type-descriptor\">string-type-descriptor</span> := <code>string</code>\n<span class=\"ntdfn\" id=\"string-literal\">string-literal</span> := <a href=\"#DoubleQuotedStringLiteral\"><span class=\"ntref\">DoubleQuotedStringLiteral</span></a>\n<span class=\"ntdfn\" id=\"DoubleQuotedStringLiteral\">DoubleQuotedStringLiteral</span> := <code>\"</code> (<a href=\"#StringChar\"><span class=\"ntref\">StringChar</span></a> | <a href=\"#StringEscape\"><span class=\"ntref\">StringEscape</span></a>)* <code>\"</code>\n<span class=\"ntdfn\" id=\"StringChar\">StringChar</span> := ^ ( 0xA | 0xD | <code>\\</code> | <code>\"</code> )\n<span class=\"ntdfn\" id=\"StringEscape\">StringEscape</span> := <a href=\"#StringSingleEscape\"><span class=\"ntref\">StringSingleEscape</span></a> | <a href=\"#StringNumericEscape\"><span class=\"ntref\">StringNumericEscape</span></a>\n<span class=\"ntdfn\" id=\"StringSingleEscape\">StringSingleEscape</span> := <code>\\t</code> | <code>\\n</code> | <code>\\r</code> | <code>\\\\</code> | <code>\\\"</code>\n<span class=\"ntdfn\" id=\"StringNumericEscape\">StringNumericEscape</span> := <code>\\u{</code> <a href=\"#CodePoint\"><span class=\"ntref\">CodePoint</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"CodePoint\">CodePoint</span> := <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n</pre>\n<p>\nA string is an sequence of zero or more Unicode characters. More precisely, it\nis a sequence whose singleton values represent Unicode scalar values, where a\nUnicode scalar value is any code point in the Unicode range of 0x0 to 0x10FFFF\ninclusive, other than surrogate code points, which are 0xD800 to 0xDFFF\ninclusive. Note that a string may include Unicode noncharacters, such as 0xFFFE\nand 0xFFFF.\n</p>\n<p>\nIn a <code>StringNumericEscape</code>, <code>CodePoint</code> must valid Unicode\ncode point; more precisely, it must be a hexadecimal numeral denoting an\ninteger <em>n</em> where 0 â¤ <em>n</em> &lt; 0xD800 or 0xDFFF &lt; n â¤\n0x10FFFF.\n</p>\n<p>\nString values do not have storage identity and so are immutable.\n</p>\n<p>\nThere is a <a href=\"#built-in_subtypes\">built-in subtype</a>\n<code>string:Char</code> for single character strings.\n</p>\n</section>\n<section>\n<h4 id=\"XML\">5.2.2 XML</h4>\n\n<p>\nAn xml value is a sequence representing parsed XML, such as occurs in the\ncontent of an XML element. The singleton values are of the following types:\n</p>\n<ul>\n<li>element</li>\n<li>processing instruction</li>\n<li>comment</li>\n<li>text</li>\n</ul>\n<p>\nThe element, processing instruction and comment singletons correspond directly\nto information items in the XML Information Set. A text singleton corresponds to\none or more character information items. When an xml value is constructed,\nconsecutive text singletons are merged, so that an xml value never contains\nconsecutive text singletons. There are <a href=\"#built-in_subtypes\">built-in\nsubtypes</a> <code>xml:Element</code>, <code>xml:ProcessingInstruction</code>,\n<code>xml:Comment</code> and <code>xml:Text</code> corresponding to the above\nsingletons; <code>xml:Text</code> also allows the empty xml value.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-type-descriptor\">xml-type-descriptor</span> := <code>xml</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n<span class=\"ntdfn\" id=\"type-parameter\">type-parameter</span> := <code>&lt;</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>&gt;</code>\n</pre>\n<p>\nA shape belongs to type <code>xml</code> if its basic type is <code>xml</code>.\nA type parameter of an xml-type-descriptor must be a subtype of\n<code>xml</code>. A shape belongs to type <code>xml&lt;T&gt;</code> if all of\nits constituent items belong to <code>T</code>. So, for example,\n<code>xml&lt;xml:Element&gt;</code> is the type for xml values containing\nonly elements. Note that <code>xml&lt;xml&lt;<var>T</var>&gt;&gt;</code> is the\nsame as <code>xml&lt;<var>T</var>&gt;</code> and that\n<code>xml&lt;xml:Text&gt;</code> is the same as <code>xml:Text</code>.\n</p>\n<p>\nThe name of an element is represented by a string. The attributes of an element\nare represented by a value of type <code>map&lt;string&gt;</code>. The content\nof an element is represented by a value of type <code>xml</code>.\n</p>\n<p>\nSingleton element, processing instruction and comment values have storage\nidentity. Other xml values do not.\n</p>\n<p>\nAn xml value is immutable if and only if all its constituent singletons are\nimmutable. A text singleton is inherently immutable, since it does not have\nstorage identity. The other singleton types are usually mutable, but can be\nconstructed as immutable in two ways. First, an xml value constructed by a\ncompile-time constant expression is immutable. Second, an immutable, deep copy\ncan be made of a structure by using the <a href=\"#ImmutableClone\">ImmutableClone</a> abstract operation. Element\nimmutability is deep: the content of an immutable XML element is always\nimmutable.\n</p>\n<p>\nNote that although the mutable constituents of mutable xml value can be mutated,\nthe number and the storage identity of the constituents of a xml value are fixed\nwhen the value is constructed. The storage identity of the attributes map of an\nelement are also fixed when the element is constructed.\n</p>\n<section>\n<h5 id=\"section_5.2.2.1\">5.2.2.1 XML namespaces</h5>\n<p>\nThe name of an element or attribute, which in the XML Information Set is\nrepresented by a combination of the [namespace name] and [local name] properties\nof an element information item (EII) or attribute information item (AII), is\nrepresented by a single <em>expanded name</em> string. If the [namespace name]\nproperty has no value, then the expanded name consists of just the value of the\n[local name] property; otherwise, the expanded name is of the form:\n</p>\n<pre>\n   {<var>namespace-uri</var>}<var>local-name</var>\n</pre>\n<p>\nwhere <code><var>namespace-uri</var></code> and\n<code><var>local-name</var></code> are the values of the [namespace name] and\n[local name] properties respectively.\n</p>\n<p>\nThe attributes map for an element includes not only an entry for each AII in the\n[attributes] property of the EII, but also an entry for each attribute in the\n[namespace attributes] property. The key of the entry is the string representing\nthe name of the attribute, constructed from the AII item as described in the\nprevious paragraph. The name of every namespace attribute will thus start with\nthe string <code>{http://www.w3.org/2000/xmlns/}</code>.\n</p>\n<p>\nThe attributes map can also contain entries representing namespace attributes\nsynthesized from the [in-scope namespaces] property. There will be a synthesized\nnamespace attribute for every prefix other than <code>xml</code> that occurs as\na prefix of the EII or of an AII in the element's [attributes] property and for\nwhich there is no declaration in the [namespace attributes] property. No\nnamespace attribute will be synthesized for the default namespace. (The\nsynthesized namespace attributes ensure that namespace prefixes will not be lost\nif the element is extracted into a new context.)\n</p>\n<p>\nAn xml value can be converted to an XML information set for serialization. This\nis done in the context of a set of namespace declarations that are in-scope from\nthe xml value's parent element, if any. The process of converting an xml element\nsingleton into an EII has the following stages.\n</p>\n<ol>\n<li>The [namespace name] and [local name] properties of the EII are determined\nfrom the element's expanded name.</li>\n<li>An AII is constructed for each entry in the element's attribute map, with\nthe [namespace name] and [local name] properties of the AII determined from the\nentry's key, which is the attribute's expanded name. Each AII is added to either\nthe [attributes] or [namespace attributes] property of the EII depending on the\nAII's [namespace name] property. The [prefix] property of each AII in the\n[namespace attributes] property can also be set at this point.</li>\n<li>The [namespace attributes] property of the EII is pruned by removing an\nAII with [normalized value] N if the AII is not a default namespace declaration,\nand the in-scope namespace declarations include a declaration with namespace\nname N, and either the EII or one of the AIIs has a [namespace name] property\nequal to N. (In this case, the entry for the namespace attribute would get\nsynthesized when the information set is converted to an xml value.)</li>\n<li>For each AII in the EII's [attributes] property that has a [namespace name]\nproperty, a [prefix] property is assigned. If the namespace name is\n<code>http://www.w3.org/XML/1998/namespace</code>, then use a prefix of\n<code>xml</code>. If there is already a namespace declaration in the [namespace\nattributes] that declares a prefix with that namespace name, then that prefix is\nused. Otherwise if there is a namespace declaration in the in-scope namespaces\nthat declares a prefix with that namespace and it is not redeclared or\nundeclared by the [namespace attributes], then that prefix is used. Otherwise\ngenerate a prefix and add an AII to the [namespace attributes] to declare\nit.</li>\n<li>If the EII has no [namespace name] property, but a default namespace\ndeclaration is in scope, then an <code>xmlns=\"\"</code> AII is added to the\n[namespace attributes] property to undeclare the default namespace.</li>\n<li>If the EII has a [namespace name] property N, then we need\nto ensure that there is an applicable namespace declaration:\n<ol>\n<li>if one of the [namespace attributes] declares N as the default namespace,\nthen nothing needs to be done;</li>\n<li>similarly, if an in-scope namespace declaration declares N as the default\nnamespace, and the [namespace attributes] do not undeclare it, then nothing\nneeds to be done;</li>\n<li>otherwise, try to find, in the same way as for an AII, a prefix P which is\nalready declared as N; if there is one, set the [prefix] property of the EII to\nP;</li>\n<li>otherwise, if the [namespace attributes] property does not contain a default\nnamespace declaration or undeclaration, generate a default namespace declaration\nfor N and add it to the [namespace attributes] property;</li>\n<li>otherwise, generate a new prefix P, set the [prefix] property of the EII to\nP, and add an AII to the [namespace attributes] to declare it.</li>\n</ol>\n</li>\n<li>Generate the [in-scope namespaces] property for this EII, using the parent's\nin-scope namespaces and the [namespace attributes].</li>\n<li>Convert the children of the xml element, including the element children, to\na list of information items, in the context of this EII's in-scope\nnamespaces.</li>\n</ol>\n\n</section>\n\n</section>\n\n</section>\n<section>\n<h3 id=\"section_5.3\">5.3 Structured values</h3>\n<p>\nThere are four basic types of structured value. First, there are two container\nbasic types: list and mapping. Second, there are the table and error basic\ntypes, which are each special in different ways.\n</p>\n<p>\nA structured value is either mutable or immutable; whether it is mutable or\nimmutable is fixed when the value is constructed and cannot be changed\nthereafter. Immutability is deep: an immutable structured value cannot refer to\na mutable structured value. The error basic type is inherently immutable: a\nvalue of the error basic type is always immutable. Structured values of other\nbasic types are usually mutable, but can be constructed as immutable in two\nways. First, a structural value constructed by a compile-time constant\nexpression is always immutable. Second, an immutable, deep copy can be made of a\nstructure by using the <a href=\"#ImmutableClone\">ImmutableClone</a> abstract\noperation.\n</p>\n<p>\nValues of the container basic types are containers for other values, which are\ncalled their members. The shape of the members of a container value contribute\nto the shape of the container. Mutating a member of a container can thus cause\nthe shape of the container to change.\n</p>\n<p>\nA type descriptor for a container basic type describe the shape of the container\nin terms of the shapes of its members. A container has an inherent type, which\nis a type descriptor which is part of the container's runtime value. At runtime,\nthe container prevents any mutation that might lead to the container having a\nshape that is not a member of its inherent type. Thus a container value belongs\nto a type if and only if that its inherent type is a subtype of that type.\n</p>\n<p>\nThe inherent type of an immutable container is a singleton type with the\ncontainer's shape as its single member. Thus, an immutable container value\nbelongs to a type if and only if the type contains the shape of the value.\n</p>\n<p>\nEach member of a container has a key that uniquely identifies it within the\ncontainer. The <em>member type</em> for a key type K in a container type T\nconsists of all shapes v such that there is a shape in T with key in K and shape\nv. A type K is an <em>optional key type</em> for T if there is a shape v in T\nand a key k in K such that v does not have a member k; a type that is not an\noptional key type is a required key type.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"structured-type-descriptor\">structured-type-descriptor</span> :=\n   <a href=\"#list-type-descriptor\"><span class=\"ntref\">list-type-descriptor</span></a>\n   | <a href=\"#mapping-type-descriptor\"><span class=\"ntref\">mapping-type-descriptor</span></a>\n   | <a href=\"#table-type-descriptor\"><span class=\"ntref\">table-type-descriptor</span></a>\n   | <a href=\"#error-type-descriptor\"><span class=\"ntref\">error-type-descriptor</span></a>\n</pre>\n<p>\nThe following table summarizes the type descriptors for structured types.\n</p>\n<table>\n  <tr>\n   <td></td>\n   <td>Integer key</td>\n   <td>String key</td>\n  </tr>\n  <tr>\n   <td>Basic type</td>\n   <td>list</td>\n   <td>mapping</td>\n  </tr>\n  <tr>\n   <td>Type descriptor with uniform member type</td>\n   <td>array</td>\n   <td>map</td>\n  </tr>\n  <tr>\n   <td>Type descriptor with separate member types</td>\n   <td>tuple</td>\n   <td>record</td>\n  </tr>\n</table>\n<p>\nA value is defined to be <em>pure</em> if it either\n</p>\n<ul>\n<li>is a simple value, or</li>\n<li>is a structured value, all of whose members are also pure values.</li>\n</ul>\n<p>\nA shape is pure if it is the shape of a pure value. A type is pure if it\ncontains only pure shapes.\n</p>\n<section>\n<h4 id=\"section_5.3.1\">5.3.1 Lists</h4>\n<p>\nA list value is a container that keeps its members in an ordered list. The\nnumber of members of the list is called the <em>length </em>of the list. The key\nfor a member of a list is the integer index representing its position in the\nlist, with the index of the first member being 0. For a list of length\n<em>n</em>, the indices of the members of the list, from first to last, are\n0,1,...,<em>n</em> - 1. The shape of a list value is an ordered list of the\nshapes of its members.\n</p>\n<p>\nA list is iterable: the iteration sequence consists of the members of the\nlist in order and the iteration completion value is always nil.\n</p>\n<p>\nThe type of list values can be described by two kinds of type descriptors.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"list-type-descriptor\">list-type-descriptor</span> :=\n   <a href=\"#array-type-descriptor\"><span class=\"ntref\">array-type-descriptor</span></a> | <a href=\"#tuple-type-descriptor\"><span class=\"ntref\">tuple-type-descriptor</span></a>\n</pre>\n<p>\nThe inherent type of a list value must be a <code>list-type-descriptor</code>.\nThe inherent type of a list value determines a type T<sub><em>i</em></sub> for a\nmember with index <em>i</em>. The runtime system will enforce a constraint that\na value written to index <em>i</em> will belong to type T<sub><em>i</em></sub>.\nNote that the constraint is not merely that the value looks like\nT<sub><em>i</em></sub>.\n</p>\n<p>\nBoth kinds of type descriptor are covariant in the types of their members.\n</p>\n<section>\n<h5 id=\"section_5.3.1.1\">5.3.1.1 Array types</h5>\n<p>\nAn array type-descriptor describes a type of list value by specifying the type\nthat the value for all members must belong to, and optionally, a length.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"array-type-descriptor\">array-type-descriptor</span> := <a href=\"#member-type-descriptor\"><span class=\"ntref\">member-type-descriptor</span></a> <code>[</code> [ <a href=\"#array-length\"><span class=\"ntref\">array-length</span></a> ] <code>]</code>\n<span class=\"ntdfn\" id=\"member-type-descriptor\">member-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"array-length\">array-length</span> :=\n   <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a>\n   | <a href=\"#constant-reference-expr\"><span class=\"ntref\">constant-reference-expr</span></a>\n   | <a href=\"#inferred-array-length\"><span class=\"ntref\">inferred-array-length</span></a>\n<span class=\"ntdfn\" id=\"inferred-array-length\">inferred-array-length</span> := <code>*</code>\n</pre>\n<p>\nA type <code>T[]</code> contains a list shape if all members of the list shape\nare in <code>T</code>. A type <code>T[n]</code> contains a list shape if in\naddition the length of the list shape is n.\n</p>\n<p>\nA <code>constant-reference-expr</code> in an <code>array-length</code> must\nevaluate to a non-negative integer. An array length of <code>*</code> means that\nthe length of the array is to be inferred from the context; this is allowed only\nwithin a type descriptor occurring in a context that is specified to be\ninferable; its meaning is the same as if the length was specified explicitly.\n</p>\n<p>\nNote also that <code>T[n]</code> is a subtype of <code>T[]</code>, and that if\n<code>S</code> is a subtype of <code>T</code>, then <code>S[]</code> is a\nsubtype of <code>T[]</code>; this is a consequence of the definition of\nsubtyping in terms of subset inclusion of the corresponding sets of shapes.\n</p>\n<p>\nThe type of the values in the iteration sequence of a value belonging\n<code>T[]</code> is <code>T</code>.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.3.1.2\">5.3.1.2 Tuple types</h5>\n<p>\nA tuple type descriptor describes a type of list value by specifying a separate\ntype for each member of the list.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"tuple-type-descriptor\">tuple-type-descriptor</span> :=\n   <code>[</code> <a href=\"#tuple-member-type-descriptors\"><span class=\"ntref\">tuple-member-type-descriptors</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"tuple-member-type-descriptors\">tuple-member-type-descriptors</span> :=\n   <a href=\"#member-type-descriptor\"><span class=\"ntref\">member-type-descriptor</span></a> (<code>,</code> <a href=\"#member-type-descriptor\"><span class=\"ntref\">member-type-descriptor</span></a>)* [<code>,</code> <a href=\"#tuple-rest-descriptor\"><span class=\"ntref\">tuple-rest-descriptor</span></a>]\n   | [ <a href=\"#tuple-rest-descriptor\"><span class=\"ntref\">tuple-rest-descriptor</span></a> ]\n<span class=\"ntdfn\" id=\"tuple-rest-descriptor\">tuple-rest-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code>\n\n</pre>\n<p>\nA tuple type descriptor T with m member type descriptors contains a list shape L\nof length n if and only if:\n</p>\n<ul>\n<li>m is less than or equal to n</li>\n<li>the i-th member type descriptor of T contains the i-th member of L for each\ni from 1 to m;</li>\n<li>if n is greater than m, then T has a tuple-rest-descriptor\nR<code>...</code>, and R contains the j-th member of L for each j from m + 1 to\nn.</li>\n</ul>\n<p>\nNote that a tuple type where all the <code>member-type-descriptor</code>s are\nthe same and there is no tuple-rest-descriptor is equivalent to an\narray-type-descriptor with a length.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"section_5.3.2\">5.3.2 Mappings</h4>\n<p>\nA mapping value is a container where each member has a key, which is a string,\nthat uniquely identifies within the mapping. We use the term <em>field</em> to\nmean the member together its key; the name of the field is the key, and the\nvalue of the field is that value of the member; no two fields in a mapping value\ncan have the same name.\n</p>\n<p>\nThe shape of a mapping value is an unordered collection of field shapes one for\neach field. The field shape for a field f has a name, which is the same as the\nname of f, and a shape, which is the shape of the value of f.\n</p>\n<p>\nA mapping is iterable: the iteration sequence consists of the members of the\nmapping and the iteration completion value is always nil. The order of the iteration\nsequence is implementation-dependent, but implementations are encouraged to\npreserve and use the order in which the fields were added.\n</p>\n\n<p>\nThe type of mapping values can be described by two kinds of type descriptors.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"mapping-type-descriptor\">mapping-type-descriptor</span> :=\n   <a href=\"#map-type-descriptor\"><span class=\"ntref\">map-type-descriptor</span></a> | <a href=\"#record-type-descriptor\"><span class=\"ntref\">record-type-descriptor</span></a>\n</pre>\n<p>\nThe inherent type of a mapping value must be a\n<code>mapping-type-descriptor</code>. The inherent type of a mapping value\ndetermines a type T<sub><em>f</em></sub> for the value of the field with name\n<em>f</em>. The runtime system will enforce a constraint that a value written to\nfield <em>f</em> will belong to type T<sub><em>f</em></sub>. Note that the\nconstraint is not merely that the value looks like T<sub><em>f</em></sub>.\n</p>\n<p>\nBoth kinds of type descriptor are covariant in the types of their members.\n</p>\n<section>\n<h5 id=\"section_5.3.2.1\">5.3.2.1 Map types</h5>\n<p>\nA map type-descriptor describes a type of mapping value by specifying the type\nthat the value for all fields must belong to.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"map-type-descriptor\">map-type-descriptor</span> := <code>map</code> <a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>\n</pre>\n<p>\nA type <code>map&lt;T&gt;</code> contains a mapping shape <em>m</em> if every field\nshape in <em>m</em> has a value shape that is in <code>T</code>.\n</p>\n<p>\nThe type of the values in the iteration sequence of a value belonging\n<code>map&lt;T&gt;</code> is <code>T</code>.\n</p>\n<p>\nIf a type descriptor T has <a href=\"#lax_static_typing\">lax static typing</a>,\nthen the type <code>map&lt;T&gt;</code> also has lax static typing.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.3.2.2\">5.3.2.2 Record types</h5>\n<p>\nA record type descriptor describes a type of mapping value by specifying a type\nseparately for the value of each field.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"record-type-descriptor\">record-type-descriptor</span> :=\n   <a href=\"#inclusive-record-type-descriptor\"><span class=\"ntref\">inclusive-record-type-descriptor</span></a> | <a href=\"#exclusive-record-type-descriptor\"><span class=\"ntref\">exclusive-record-type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"inclusive-record-type-descriptor\">inclusive-record-type-descriptor</span> :=\n   <code>record</code> <code>{</code> <a href=\"#field-descriptor\"><span class=\"ntref\">field-descriptor</span></a>* <code>}</code>\n<span class=\"ntdfn\" id=\"exclusive-record-type-descriptor\">exclusive-record-type-descriptor</span> :=\n   <code>record</code> <code>{|</code> <a href=\"#field-descriptor\"><span class=\"ntref\">field-descriptor</span></a>* [<a href=\"#record-rest-descriptor\"><span class=\"ntref\">record-rest-descriptor</span></a>] <code>|}</code>\n<span class=\"ntdfn\" id=\"field-descriptor\">field-descriptor</span> :=\n   <a href=\"#individual-field-descriptor\"><span class=\"ntref\">individual-field-descriptor</span></a> | <a href=\"#record-type-reference\"><span class=\"ntref\">record-type-reference</span></a>\n<span class=\"ntdfn\" id=\"individual-field-descriptor\">individual-field-descriptor</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> [<code>?</code> | <a href=\"#default-value\"><span class=\"ntref\">default-value</span></a>] <code>;</code>\n<span class=\"ntdfn\" id=\"field-name\">field-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"default-value\">default-value</span> := <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"record-type-reference\">record-type-reference</span> := <code>*</code> <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"record-rest-descriptor\">record-rest-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code> <code>;</code>\n</pre>\n<p>\nEach <code>individual-field-descriptor</code> specifies an additional constraint\nthat a mapping value shape must satisfy for it to be a member of the described\ntype. The constraint depends on whether <code>?</code> is present:\n</p>\n<ul>\n<li>if <code>?</code> is not present, then the constraint is that the mapping\nvalue shape must have a field shape with the specified field-name and with a\nvalue shape that is a member of the specified type-descriptor; this is called a\nrequired field;</li>\n<li>if <code>?</code> is present, then the constraint is that if the mapping\nvalue shape has a field shape with the specified field-name, then its value\nshape must be a member of the specified type-descriptor; this is called an\noptional field.</li>\n</ul>\n<p>\nThe order of the <code>individual-field-descriptor</code>s within a\n<code>record-type-descriptor</code> is not significant. Note that the delimited\nidentifier syntax allows the field name to be any non-empty string.\n</p>\n<p>\nAn exclusive-record-type-descriptor, which uses the <code>{|</code> and\n<code>|}</code> delimiters, allows exclusively the fields described. More\nprecisely, for a mapping value shape and a record-type-descriptor, let the extra\nfield shapes be the field shapes of the mapping value shapes whose names are not\nthe same as field-name of any individual-field-descriptor; a mapping value shape\nis a member of the type described by an exclusive-record-type-descriptor only if\neither:\n</p>\n<ul>\n<li>there are no extra fields shapes, or</li>\n<li>there is a record-rest-descriptor <code>T...</code>, and the value shape of\nevery extra field shape is a member of <code>T</code>.</li>\n</ul>\n<p>\nAn inclusive-record-type-descriptor, which uses the <code>{</code> and\n<code>}</code> delimiters, allows any mapping value that includes the fields\ndescribed, provided that the other fields are pure and not errors. More\nprecisely, a type descriptor <code>record { F };</code> is equivalent to\n<code>record {| F; T...; |}</code>, where T is the type that contains all pure\nshapes other than errors, which can be written as <a href=\"#anydata\"><code>anydata</code></a>.\n</p>\n<p>\nA record type descriptor that either is an inclusive-record-type-descriptor or\nis an exclusive-record-type-descriptor with a record-rest-descriptor is called\n<em>open</em>; a record type descriptor that is not open is called\n<em>closed</em>.\n</p>\n<p>\nA <code>default-value</code> specifies a default value for the field, which is\nused when the record type descriptor is used to construct a mapping value but no\nvalue is specified explicitly for the field. The type descriptor contains a\n0-argument function closure for each default value. The closure is created from\nthe expression when the type descriptor is resolved. The closure is evaluated to\ncreate a field value each time the default is used in the construction of a\nmapping value. The default value does not affect the type described by the type\ndescriptor.\n</p>\n<p>\nA <code>record-type-reference</code> pulls in fields from a named record type.\nThe <code>type-reference</code> must reference a type described by a\n<code>record-type-descriptor</code>. The <code>field-descriptor</code>s and any\n<code>record-rest-descriptor</code> are copied into the type being defined; the\nmeaning is the same as if they had been specified explicitly. For default\nvalues, the closure rather than the expression is copied in. A\n<code>record-rest-descriptor</code> in the referencing type overrides any\n<code>record-rest-descriptor</code> in the referenced type. For the purposes of\nresolving a <code>record-type-reference</code>, a referenced or referencing type\nthat is an <code>inclusive-record-type-descriptor</code> is treated as if it\nwere the equivalent <code>exclusive-record-type-descriptor</code> with an\nexplicit <code>record-rest-descriptor</code>.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"section_5.3.3\">5.3.3 [Preview] Tables</h4>\n<p>\nA table is intended to be similar to the table of relational database table. A\ntable value contains an immutable set of column names and a mutable bag of rows.\nEach column name is a string; each row is a mapping that associates a value with\nevery column name; a bag of rows is a collection of rows that is unordered and\nallows duplicates.\n</p>\n<p>\nA table value also contains a boolean flag for each column name saying whether\nthat column is a primary key for the table; this flag is immutable. If no\ncolumns have this flag, then the table does not have a primary key. Otherwise\nthe value for all primary keys together must uniquely identify each row in the\ntable; in other words, a table cannot have two rows where for every column\nmarked as a primary key, that value of that column in both rows is the same.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"table-type-descriptor\">table-type-descriptor</span> := <a href=\"#direct-table-type-descriptor\"><span class=\"ntref\">direct-table-type-descriptor</span></a> | <a href=\"#indirect-table-type-descriptor\"><span class=\"ntref\">indirect-table-type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"direct-table-type-descriptor\">direct-table-type-descriptor</span> := <code>table</code> <code>{</code> <a href=\"#column-type-descriptor\"><span class=\"ntref\">column-type-descriptor</span></a>+ <code>}</code>\n<span class=\"ntdfn\" id=\"indirect-table-type-descriptor\">indirect-table-type-descriptor</span> := <code>table</code> <a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>\n\n<span class=\"ntdfn\" id=\"column-type-descriptor\">column-type-descriptor</span> :=\n   <a href=\"#individual-column-type-descriptor\"><span class=\"ntref\">individual-column-type-descriptor</span></a>\n   | <a href=\"#column-record-type-reference\"><span class=\"ntref\">column-record-type-reference</span></a>\n<span class=\"ntdfn\" id=\"individual-column-type-descriptor\">individual-column-type-descriptor</span> :=\n   [<code>key</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#column-name\"><span class=\"ntref\">column-name</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"column-record-type-reference\">column-record-type-reference</span> :=\n   <code>*</code> <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a> [<a href=\"#key-specifier\"><span class=\"ntref\">key-specifier</span></a> (<code>,</code> <a href=\"#key-specifier\"><span class=\"ntref\">key-specifier</span></a>)*] <code>;</code>\n<span class=\"ntdfn\" id=\"key-specifier\">key-specifier</span> := <code>key</code> <a href=\"#column-name\"><span class=\"ntref\">column-name</span></a>\n<span class=\"ntdfn\" id=\"column-name\">column-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA direct-table-type-descriptor has a descriptor for each column, which specifies the\nname of the column, whether that column is part of a primary key and the type\nthat values in that column must belong to. The type descriptor for the column\nmust be a pure type. If a column is part of a primary key, then the type\ndescriptor for the column must also allow only non-nil simple values.\n</p>\n<p>\nAn indirect-table-type-descriptor describes a table type in terms of the shape\nof the the rows of the table. A type <code>table&lt;T&gt;</code> contains a\ntable shape if <code>T</code> contains the mapping shape of every member of the\ntable shape. If <code>T</code> is a closed record type, then\n<code>table&lt;T&gt;</code> is equivalent to <code>table { *T; }</code>.\n</p>\n<p>\nNote that a table type T' will be a subtype of a table type T if and only if:\n</p>\n<ul>\n<li>T and T' have the same set of column names;</li>\n<li>T and T' have the same set of primary keys; and</li>\n<li>for each column, the type for that column in T' is a subtype of the type of\nthat column in T.</li>\n</ul>\n<p>\nA table is iterable: the iteration sequence consists of mapping values, one for\neach row and the iteration completion value is always nil. The inherent type of\na mapping value in the iteration sequence will be a closed record type.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.3.4\">5.3.4 Error</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"error-type-descriptor\">error-type-descriptor</span> := <code>error</code> [<a href=\"#error-type-params\"><span class=\"ntref\">error-type-params</span></a>]\n<span class=\"ntdfn\" id=\"error-type-params\">error-type-params</span> := <code>&lt;</code> (<a href=\"#explicit-error-type-params\"><span class=\"ntref\">explicit-error-type-params</span></a> | <a href=\"#inferred-error-type-param\"><span class=\"ntref\">inferred-error-type-param</span></a>) <code>&gt;</code>\n<span class=\"ntdfn\" id=\"explicit-error-type-params\">explicit-error-type-params</span> := <a href=\"#reason-type-descriptor\"><span class=\"ntref\">reason-type-descriptor</span></a> [<code>,</code> <a href=\"#detail-type-descriptor\"><span class=\"ntref\">detail-type-descriptor</span></a>]\n<span class=\"ntdfn\" id=\"reason-type-descriptor\">reason-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"detail-type-descriptor\">detail-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"inferred-error-type-param\">inferred-error-type-param</span> := <code>*</code>\n</pre>\n<p>\nAn error value belongs to the error basic type, which is a basic type which is\ndistinct from other structured types and is used only for representing errors.\nThe error type is inherently immutable. An error value contains the following\ninformation:\n</p>\n<ul>\n<li>a reason, which is a string identifier for the category of error</li>\n<li>a detail, which is an immutable mapping providing additional information about\nthe error</li>\n<li>a stack trace, which is an immutable snapshot of the state of the execution\nstack</li>\n</ul>\n<p>\nA <em>module-qualified reason</em> string is a string that has the form\n</p>\n<pre>\n   {<var>org-name</var>/<var>module-name</var>}<var>identifier</var>\n</pre>\n<p>\nwhere <code><var>org-name</var></code>, <code><var>module-name</var></code> and\n<code><var>identifier</var></code> are as defined by the grammar in this\nspecification, but with no whitespace allowed between tokens. Any reason string\nthat starts with a <code>{</code> should be a module-qualified reason string.\nAny error value that is constructed as the associated value of a panic will use\na module-qualified reason with an org-name of <code>ballerina</code> and a\nmodule-name that starts with <code>lang.</code>, as will any error value\nconstructed by a function in the lang library.\n</p>\n<p>\nThe detail mapping must belong to the following type, which is provided as type\n<code>Detail</code> in the <code>lang.error</code> module of the lang library:\n</p>\n<pre>record {|\n   string message?;\n   error cause?;\n   (anydata|error)...;\n|};\n</pre>\n<p>\nThe shape of an error value consists of the shape of the reason and the shape of\nthe detail; the stack trace is not part of the shape. A type descriptor\nerror&lt;<var>r</var>, <var>d</var>&gt; contains an error shape if <var>r</var>\ncontains the shape's reason, and <var>d</var>, if present, contains the shape's\ndetail. The bare type error contains all error shapes. The\nreason-type-descriptor must be a subtype of string. The detail-type-descriptor\nmust be a subtype of the <code>Detail</code> type, and defaults to the\n<code>Detail</code> type if omitted.\n</p>\n<p>\nA type of <code>error&lt;*&gt;</code> means that the type is a subtype of error,\nwhere the precise subtype is to be inferred from the context. This is allowed\nonly within type descriptors occurring in a context that is specified to be\ninferable.\n</p>\n<p>\nError is the only structured basic type that is not iterable.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_5.4\">5.4 Behavioral values</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"behavioral-type-descriptor\">behavioral-type-descriptor</span> :=\n   <a href=\"#function-type-descriptor\"><span class=\"ntref\">function-type-descriptor</span></a>\n   | <a href=\"#object-type-descriptor\"><span class=\"ntref\">object-type-descriptor</span></a>\n   | <a href=\"#future-type-descriptor\"><span class=\"ntref\">future-type-descriptor</span></a>\n   | <a href=\"#service-type-descriptor\"><span class=\"ntref\">service-type-descriptor</span></a>\n   | <a href=\"#typedesc-type-descriptor\"><span class=\"ntref\">typedesc-type-descriptor</span></a>\n   | <a href=\"#handle-type-descriptor\"><span class=\"ntref\">handle-type-descriptor</span></a>\n   | <a href=\"#stream-type-descriptor\"><span class=\"ntref\">stream-type-descriptor</span></a>\n</pre>\n\n\n<section>\n<h4 id=\"functions\">5.4.1 Functions</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"function-type-descriptor\">function-type-descriptor</span> := <code>function</code> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a>\n<span class=\"ntdfn\" id=\"function-signature\">function-signature</span> := <code>(</code> <a href=\"#param-list\"><span class=\"ntref\">param-list</span></a> <code>)</code> <a href=\"#return-type-descriptor\"><span class=\"ntref\">return-type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"return-type-descriptor\">return-type-descriptor</span> := [ <code>returns</code> [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> ]\n</pre>\n<p>\nA function is a part of a program that can be explicitly executed. In Ballerina,\na function is also a value, implying that it can be stored in variables, and\npassed to or returned from functions. When a function is executed, it is passed\nan argument list as input and returns a value as output.\n</p>\n<p>\nWhen the execution of a function returns to its caller, it returns exactly one\nvalue. A function that would in other programming languages not return a value\nis represented in Ballerina by a function returning <code>()</code>. Note that\nthe function definition does not have to explicitly return <code>()</code>; a\nreturn statement or falling off the end of the function body will implicitly\nreturn <code>()</code>.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"param-list\">param-list</span> :=\n   <a href=\"#required-params\"><span class=\"ntref\">required-params</span></a> [<code>,</code> <a href=\"#defaultable-params\"><span class=\"ntref\">defaultable-params</span></a>] [<code>,</code> <a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n   | <a href=\"#defaultable-params\"><span class=\"ntref\">defaultable-params</span></a> [<code>,</code> <a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n   | [<a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n<span class=\"ntdfn\" id=\"required-params\">required-params</span> := <a href=\"#required-param\"><span class=\"ntref\">required-param</span></a> (<code>,</code> <a href=\"#required-param\"><span class=\"ntref\">required-param</span></a>)*\n<span class=\"ntdfn\" id=\"required-param\">required-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<code>public</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>]\n<span class=\"ntdfn\" id=\"defaultable-params\">defaultable-params</span> := <a href=\"#defaultable-param\"><span class=\"ntref\">defaultable-param</span></a> (<code>,</code> <a href=\"#defaultable-param\"><span class=\"ntref\">defaultable-param</span></a>)*\n<span class=\"ntdfn\" id=\"defaultable-param\">defaultable-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<code>public</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>] <a href=\"#default-value\"><span class=\"ntref\">default-value</span></a>\n<span class=\"ntdfn\" id=\"rest-param\">rest-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>]\n<span class=\"ntdfn\" id=\"param-name\">param-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA param-name can be omitted from a required-param, defaultable-param or\nrest-param only when occuring in the function-signature of a\nfunction-type-descriptor.\n</p>\n<p>\nThe argument list passed to a function consists of zero or more arguments in order;\neach argument is a value, but the argument list itself is not passed as a value.\nThe argument list must conform to the param-list as described in this section.\nUsually, the compiler's type checking will ensure that this is the case; if not,\nthe function will panic.\n</p>\n<p>\nIt is convenient to consider the complete param-list as having a type. This type\nis described by a tuple-type-descriptor that has a member-type-descriptor for\neach required-param and defaultable-param, and has a tuple-rest-descriptor if\nand only if there is a rest-param. The i-th member-type-descriptor of the tuple\ntype descriptor is the same as the type-descriptor of the i-th member of the\nparam-list; the type-descriptor of the tuple-rest-descriptor, if present, is the\nsame as the type-descriptor of the rest-param.\n</p>\n<p>\nAn argument list consisting of values v<sub>1</sub>,..., v<sub>n</sub> conforms\nto a param-list that has type P, if and only if for each i with 1 â¤ i â¤\nn, v<sub>i</sub> belongs to T<sub>i</sub>, where T<sub>i</sub> is defined to be the type\nthat contains a shape s if and only if P contains a list shape whose i-th member\nis s.\n</p>\n<p>\nWhen an argument list is passed to a function, the non-rest parameters are\ninitialized from the arguments in the argument list in order. The conformance of\nthe argument list to the param-list declared for the function ensures that each\nparameter will be initialized to a value that belongs to the declared type of\nthe parameter. If there is a rest-param, then that is a initialized to a newly\ncreated lists containing the remaining arguments in the argument-list; the\ninherent type of this list will be T[] where T is the type of the rest-param.\nThe conformance of the argument list ensures that the members of this list will\nbelong to type T.\n</p>\n<p>\nA defaultable-param is a parameter for which a default value is specified. The\nexpression specifying the default value may refer to previous parameters by\nname. For each defaultable parameter, the function's type descriptor includes a\nclosure that computes the default value for the parameter using the values of\nprevious parameters. The caller of the function uses the closures in the\nfunction's type descriptor to compute default values for any defaultable\narguments that were not specified explicitly. These default values are included\nin the argument list passed to the function. Whether a parameter is defaultable,\nand what its default is, do not affect the shape of the function and thus do not\naffect typing. The closures computing the defaultable parameters are created\nwhen the type descriptor is resolved; the default value is computed by calling\nthe closure each time the function is called and the corresponding parameter is\nnot specified. Whether a parameter is defaultable is used at compile time, but\nthe closure that computes the default value is only used at runtime.\n</p>\n<p>\nThe name of each parameter is included in the function's type descriptor. A\ncaller of the function may specify the name of the parameter that an argument is\nsupplying. In this case, the caller uses the parameter name at compile time in\nconjunction with the type descriptor to create the argument list. For each\nparameter name, the function's type descriptor also includes the region of code\nwithin which the name of the parameter is visible; as usual, if\n<code>public</code> is specified, the region is the entire program, otherwise it\nis the module in which the function type descriptor occurs. The name of a\nparameter can only be used to specify an argument in a function call that occurs\nwithin the region of code within which the parameter name is visible. The\nparameter names do not affect the shape of the function and thus do not affect\ntyping.\n</p>\n<p>\nThe process by which the function caller creates an argument list, which may\nmake use of arguments specified both by position and by name, is described in\nmore detail in the <a href=\"#function_call\">section on function calls</a>.\n</p>\n<p>\nFunction types are covariant in their return types and contravariant in the type\nof their parameter lists. More precisely, a function type with return type R and\nparameter list type P is a subtype of a function type with return type R' and\nparameter list type P' if and only if R is a subtype of R' and P' is a subtype\nof P. A function value f belongs to a function type T if the declared type of f\nis a subtype of T.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.4.2\">5.4.2 Objects</h4>\n<p>\nObjects are a combination of fields along with a set of associated functions,\ncalled methods, which can be used to manipulate them. An object's methods are\nassociated with the object when the object is constructed and cannot be changed\nthereafter. The fields and methods of an object are in separate symbol spaces, so\nit is possible for an object to have a field and a method with the same name.\n</p>\n<p>\nAn object type descriptor, in addition to describing the object type, also\ndefines a way to construct an object of this type, in particular it provides the\nmethod definitions that are associated with the object when it is constructed.\n</p>\n<p>\nIt is also possible to have an object type descriptor that only describes an\nobject type and cannot be used to construct an object; this is called an\nabstract object type descriptor.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-type-descriptor\">object-type-descriptor</span> :=\n   <a href=\"#object-type-quals\"><span class=\"ntref\">object-type-quals</span></a> <code>object</code> <code>{</code>\n      <a href=\"#object-member-descriptor\"><span class=\"ntref\">object-member-descriptor</span></a>*\n   <code>}</code>\n<span class=\"ntdfn\" id=\"object-type-quals\">object-type-quals</span> :=\n   [<code>abstract</code>] [<code>client</code>] | [<code>client</code>] <code>abstract</code>\n<span class=\"ntdfn\" id=\"object-member-descriptor\">object-member-descriptor</span> :=\n   <a href=\"#object-field-descriptor\"><span class=\"ntref\">object-field-descriptor</span></a>\n   | <a href=\"#object-method\"><span class=\"ntref\">object-method</span></a>\n   | <a href=\"#object-type-reference\"><span class=\"ntref\">object-type-reference</span></a>\n</pre>\n<p>\nIf <code>object-type-quals</code> contains the keyword <code>abstract</code>,\nthen the object type descriptor is an abstract object type descriptor.\n</p>\n<p>\nIf <code>object-type-quals</code> contains the keyword <code>client</code>, then\nthe object type is a client object type. A client object type may have remote\nmethods; other objects types must not.\n</p>\n<section>\n<h5 id=\"section_5.4.2.1\">5.4.2.1 Fields</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-field-descriptor\">object-field-descriptor</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#object-visibility-qual\"><span class=\"ntref\">object-visibility-qual</span></a> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> [<a href=\"#default-value\"><span class=\"ntref\">default-value</span></a>]<code>;</code>\n</pre>\n<p>\nAn <code>object-field-descriptor</code> specifies a field of the object. The\nnames of all the fields of an object must be distinct.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.4.2.2\">5.4.2.2 Methods</h5>\n<p>\nMethods are functions that are associated to the object and are called via a\nvalue of that type using a <code>method-call-expr</code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-method\">object-method</span> := <a href=\"#method-decl\"><span class=\"ntref\">method-decl</span></a> | <a href=\"#method-defn\"><span class=\"ntref\">method-defn</span></a>\n<span class=\"ntdfn\" id=\"method-decl\">method-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   <a href=\"#method-defn-quals\"><span class=\"ntref\">method-defn-quals</span></a>\n   <code>function</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"method-defn\">method-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   <a href=\"#method-defn-quals\"><span class=\"ntref\">method-defn-quals</span></a>\n   <code>function</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#method-defn-body\"><span class=\"ntref\">method-defn-body</span></a>\n<span class=\"ntdfn\" id=\"method-defn-quals\">method-defn-quals</span> := <a href=\"#object-visibility-qual\"><span class=\"ntref\">object-visibility-qual</span></a> [<code>remote</code>]\n<span class=\"ntdfn\" id=\"method-name\">method-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"method-defn-body\">method-defn-body</span> := <a href=\"#function-defn-body\"><span class=\"ntref\">function-defn-body</span></a>\n</pre>\n<p>\nThe names of all the methods of an object must be distinct: there is no method\noverloading. Method names beginning with two underscores are reserved for use\nwith semantics defined by this specification, either as the <code>__init</code>\nmethod or as a method declared by a <a href=\"#built-in_abstract_object_types\">built-in abstract object types</a>.\n</p>\n<p>\nWithin a <code>method-defn-body</code>, the fields and methods of the object are not\nimplicitly in-scope; instead the keyword <code>self</code> is bound to the\nobject and can be used to access fields and methods of the object.\n</p>\n<p>\nIf an object type is abstract, every method must be specified using a\n<code>method-decl</code>. Otherwise every method must be specified using a\n<code>method-defn</code>.\n</p>\n<p>\nA method that is declared or defined with the remote qualifier is a remote\nmethod. A remote method is allowed only in a client object. A remote method is\ninvoked using a different syntax from a non-remote method.\n</p>\n\n</section>\n<section>\n<h5 id=\"section_5.4.2.3\">5.4.2.3 Visibility</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-visibility-qual\">object-visibility-qual</span> := [<a href=\"#explicit-visibility-qual\"><span class=\"ntref\">explicit-visibility-qual</span></a>]\n<span class=\"ntdfn\" id=\"explicit-visibility-qual\">explicit-visibility-qual</span> := <code>public</code> | <code>private</code>\n</pre>\n<p>\nEach field and method of an object type is visible within and can be accessed\nfrom a specific region of code, which is specified by its object-visibility-qual\nas follows:\n</p>\n<ul>\n<li>if the object-visibility qual is <code>private</code>, then the visibility\nregion consists of the methods defined by this object type descriptor;</li>\n<li>if the object-visibility-qual is empty, then the visibility region is the\nentire module containing this object type descriptor; this is called\nmodule-level visibility;</li>\n<li>if the object-visibility-qual is <code>public</code>, then the visibility region\ncontains all modules.</li>\n</ul>\n<p>\nThe visibility of a method or field of an abstract object type cannot be\n<code>private</code>.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.4.2.4\">5.4.2.4 Typing</h5>\n\n<p>\nThe shape of an object consists of an unordered collection of object field\nshapes and an unordered collection of object method shapes. An object field\nshape or object method shape is a triple consisting of the name of the field or\nmethod, the visibility region, and a shape for the value of the field or for the\nmethod's function.\n</p>\n<p>\nAn object type is inclusive, in a similar way to an\ninclusive-record-type-descriptor: an object shape belongs to an object type if\nit has at least the fields and methods described in the object-type-descriptor.\nThus all object values belong to the type <code>object { }</code>.\n</p>\n<p>\nAn object-type-descriptor that has a field with name f, visibility region R and\ntype T contains an object shape only if the object shape contains an object\nfield shape that has name f, visibility region R and a value shape that is\ncontained in T. An object-type-descriptor that has a method with name m,\nvisibility region R and function type T contains an object shape only if the\nobject shape contains an object method shape that has name m, visibility region\nR and a function value that belongs to type T.\n</p>\n<p>\nThus an object type T' is a subtype of an object type T only if for each field\nor method f of T there is a corresponding field or method f' of T such that the\ntype of f' in T' is a subtype of the type of f in T and the visibility region of\nf' in T' is the same as the visibility region of f in T.\n</p>\n<p>\nThis implies that:\n</p>\n<ul>\n<li>if an object type descriptor T has private fields or methods, then it is not\npossible to define another object type descriptor that is a subtype of T,\nand</li>\n<li>if an object type descriptor T has fields or methods with module-level\nvisibility, then it is possible to define another object type descriptor that is\na subtype of T only within the same module as T.</li>\n</ul>\n \n</section>\n<section>\n<h5 id=\"section_5.4.2.5\">5.4.2.5 Initialization</h5>\n<p>\nA non-abstract object type provides a way to initialize an object of the type.\nAn object is initialized by:\n</p>\n<ol>\n<li>allocating storage for the object</li>\n<li>initializing each field with its default value, if it has one</li>\n<li>initializing the methods of the object using the type's method definitions</li>\n<li>calling the object's <code>__init</code> method, if there is one</li>\n</ol>\n<p>\nThe return type of the <code>__init</code> method must be a subtype of the union\nof error and nil, and must contain nil; if <code>__init</code> returns an error,\nit means that initialization of the object failed. The <code>__init</code>\nmethod can declare parameters in the same way as any other method.\n</p>\n<p>\nAt any point in the body of a <code>__init</code> method, the compiler\ndetermines which fields are potentially uninitialized. A field is potentially\nuninitialized at some point if that field does not have a default value and it\nis not definitely assigned at that point. It is a compile error if a\n<code>__init</code> method:\n</p>\n<ul>\n<li>accesses a field at a point where it is potentially initialized, or</li>\n<li>at a point where there is any potentially uninitialized field\n<ul>\n<li>returns nil, or</li>\n<li>uses the <code>self</code> variable other than to access or modify the value of a field.</li>\n</ul>\n</li>\n</ul>\n<p>\nAn object must have an <code>__init</code> method unless all its fields have a\ndefault value. An object without an <code>__init</code> method behaves as it had\nan <code>__init</code> method with no parameters and an empty body (which will\nalways return nil).\n</p>\n<p>\nThe visibility of the <code>__init</code> method cannot be <code>private</code>.\n</p>\n<p>\nAny <code>__init</code> method is not part of the shape of an object, and so\ndoes not affect when an object value belongs to a type. An abstract object type\nmust not declare an <code>__init</code> object. The <code>__init</code> method\ncan be called in a <code>method-call-expr</code> only when the expression\npreceding the <code>.</code> is <code>self</code>.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.4.2.6\">5.4.2.6 Object type references</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-type-reference\">object-type-reference</span> :=\n   <code>*</code> <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a> <code>;</code>\n</pre>\n<p>\nThe <code>type-reference</code> in an\n<code>object-type-reference</code> must reference an abstract object type. The\nobject-member-descriptors from the referenced type are copied into the type\nbeing defined; the meaning is the same as if they had been specified explicitly.\n</p>\n<p>\nIf a non-abstract object type T<sub>o</sub> has a type reference to an abstract\nobject type T<sub>a</sub>, then each method declared in T<sub>a</sub> must be\ndefined in T<sub>o</sub> using a <code>method-defn</code> with the same\nvisibility. If T<sub>a</sub> has a method or field with module-level visibility,\nthe T<sub>o</sub> must be in the same module.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"section_5.4.3\">5.4.3 Futures</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"future-type-descriptor\">future-type-descriptor</span> := <code>future</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n</pre>\n<p>\nA future value refers to a named worker, which will return a value. A future\nvalue belongs to a type <code>future&lt;T&gt;</code> if the return type of the\nnamed worker is a subtype of T.\n</p>\n<p>\nA value belongs to a type <code>future</code> (without the type-parameter)\nif it has basic type future.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.4.4\">5.4.4 [Preview] Services</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"service-type-descriptor\">service-type-descriptor</span> := <code>service</code>\n</pre>\n<p>\nA service is like an object, but differs in the following respects:\n</p>\n<ul>\n<li>a method of a service can be declared as a resource method, but cannot be\ndeclared as a remote method</li>\n<li>a service is stateless and does not have fields</li>\n</ul>\n<p>\nA resource method is a special kind of method, with associated configuration\ndata, that is invoked in response to network messages received by a Listener. A\nservice can be thought of as the dual of a client object.\n</p>\n<p>\nAll service values belong to the type <code>service</code>.\n</p>\n<p>\nIt is planned that a future version of Ballerina will provide a mechanism that\nallows more precise typing of services. In the meantime, implementations can use\nannotations on type definitions to support this.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.4.5\">5.4.5 Type descriptors</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"typedesc-type-descriptor\">typedesc-type-descriptor</span> := <code>typedesc</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n</pre>\n<p>\nA type descriptor value is an immutable value representing a resolved type\ndescriptor. The type typedesc contains all values with basic type typedesc. A\ntypedesc value <var>t</var> belongs to a type typedesc&lt;<var>T</var>&gt; if\nand only if the type described by <code>t</code> is a subtype of <var>T</var>.\nThe typedesc type is thus covariant with its type parameter.\n</p>\n<p>\nReferencing an identifier defined by a type definition in an expression context\nwill result in a type descriptor value.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.4.6\">5.4.6 Handles</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"handle-type-descriptor\">handle-type-descriptor</span> := <code>handle</code>\n</pre>\n<p>\nA handle value is a reference to storage managed externally to a Ballerina\nprogram. Handle values are useful only in conjunction with functions that have\nexternal function bodies; in particular, a new handle value can be created only\nby a function with an external function body.\n</p>\n<p>\nA value belongs to a type <code>handle</code> if it has a basic type of handle.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_5.4.7\">5.4.7 [Preview] Streams</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"stream-type-descriptor\">stream-type-descriptor</span> := <code>stream</code> [<a href=\"#stream-type-parameters\"><span class=\"ntref\">stream-type-parameters</span></a>]\n<span class=\"ntdfn\" id=\"stream-type-parameters\">stream-type-parameters</span> := <code>&lt;</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> [<code>,</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>]<code>&gt;</code>\n</pre>\n<p>\nA stream is an object-like value that can generate a sequence of values. There\nis also a value associated with the completion of the generation of the\nsequence, which is either nil, indicating the generation of the sequence completed\nsuccessfully, or an error. A stream belongs to type\n<code>stream&lt;T,C&gt;</code> if the values in the generated sequence all\nbelong to T and if the completion value belongs to C. The type\n<code>stream&lt;T&gt;</code> is equivalent to <code>stream&lt;T,()&gt;</code>. A\nvalue belongs to a type <code>stream</code> (without the type-parameter) if it\nhas basic type stream. A type <code>stream&lt;T,C&gt;</code> where C does not\ninclude nil represents an unbounded stream.\n</p>\n<p>\nA stream supports two primitive operations: a next operation and a close\noperation. The next operation has the same semantics as the next method on the\nIterator abstract object type. The close operation informs the stream that there\nwill be no more next operations and thus allows the stream to release resources\nused by the stream; the close operation on a <code>stream&lt;T,C&gt;</code> has\na result of type <code>C?</code>, where nil means that the close operation was\nsuccessful.\n</p>\n<p>\nThe normal implementation of a <code>stream&lt;T,C&gt;</code> is a wrapper\naround an object belonging to <a href=\"#StreamImplementor\">abstract object type\n<code>StreamImplementor&lt;T,C&gt;</code></a>. The next and close operations on\nthe stream delegate to the next and close methods on the StreamImplementor.\n</p>\n<p>\nThe stream module of the <a href=\"#lang_library\">lang library</a> provides\nadditional operations on stream that can be implemented in terms of the\nprimitive next and close operations.\n</p>\n<p>\nA stream is iterable. A stream of type <code>stream&lt;T,C&gt;</code> has value\ntype <code>T</code> and completion type <code>C</code>. Calling the next method\non the iterator created for an iteration has the same effect as performing the\nnext operation on the stream. The stream does not keep a copy of the sequence of\nvalues returned by the next operation. Any subsequent iteration operation on the\nsame stream will not generate further values, so the iteration sequence for\niterations other than the first will be the empty sequence.\n</p>\n<p>\nNote that in this version of Ballerina the stream type is not an object type\nbecause Ballerina does not yet support parameterized object types.\n</p>\n</section>\n\n</section>\n<section>\n<h3 id=\"section_5.5\">5.5 Other type descriptors</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"other-type-descriptor\">other-type-descriptor</span> :=\n   <a href=\"#singleton-type-descriptor\"><span class=\"ntref\">singleton-type-descriptor</span></a>\n   | <a href=\"#union-type-descriptor\"><span class=\"ntref\">union-type-descriptor</span></a>\n   | <a href=\"#optional-type-descriptor\"><span class=\"ntref\">optional-type-descriptor</span></a>\n   | <a href=\"#any-type-descriptor\"><span class=\"ntref\">any-type-descriptor</span></a>\n   | <a href=\"#anydata-type-descriptor\"><span class=\"ntref\">anydata-type-descriptor</span></a>\n   | <a href=\"#never-type-descriptor\"><span class=\"ntref\">never-type-descriptor</span></a>\n   | <a href=\"#byte-type-descriptor\"><span class=\"ntref\">byte-type-descriptor</span></a>\n   | <a href=\"#json-type-descriptor\"><span class=\"ntref\">json-type-descriptor</span></a>\n   | <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a>\n   | <code>(</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>)</code>\n</pre>\n<p>\nIt is important to understand that the type descriptors specified in this\nsection do not add to the universe of values. They are just adding new ways to\ndescribe subsets of this universe.\n</p>\n<section>\n<h4 id=\"section_5.5.1\">5.5.1 Singleton types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"singleton-type-descriptor\">singleton-type-descriptor</span> := <a href=\"#simple-const-expr\"><span class=\"ntref\">simple-const-expr</span></a>\n\n</pre>\n<p>\nA singleton type is a type containing a single shape. A singleton type is\ndescribed using an compile-time constant expression for a single value: the type\ncontains the shape of that value. Note that it is possible for the\nvariable-reference within the simple-const-expr to reference a structured value.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.5.2\">5.5.2 Union types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"union-type-descriptor\">union-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>|</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n</pre>\n<p>\nThe value space of a union type <code>T1|T2</code> is the union of\n<code>T1</code> and <code>T2</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.5.3\">5.5.3 Optional types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"optional-type-descriptor\">optional-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>?</code>\n</pre>\n<p>\nA type <code>T?</code> means T optionally, and is exactly equivalent to\n<code>T|()</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.5.4\">5.5.4 Any type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"any-type-descriptor\">any-type-descriptor</span> := <code>any</code>\n</pre>\n<p>\nThe type descriptor <code>any</code> describes the type consisting of all values\nother than errors. A value belongs to the any type if and only if its basic type\nis not error. Thus all values belong to the type <code>any|error</code>. Note\nthat a structure with members that are errors belongs to the <code>any</code>\ntype.\n</p>\n</section>\n<section>\n<h4 id=\"anydata\">5.5.5 Anydata type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"anydata-type-descriptor\">anydata-type-descriptor</span> := <code>anydata</code>\n</pre>\n<p>\nThe type descriptor <code>anydata</code> describes the type of all pure values\nother than errors. The type <code>anydata</code> contains a shape if and only if\nthe shape is pure and is not the shape of an error value.\n</p>\n<p>\nNote that <code>anydata</code> allows structures whose members are errors. Thus\nthe type <code>anydata|error</code> is the supertype of all pure types. The type\n<code>anydata</code> is equivalent to the union\n</p>\n\n<pre>  () | boolean | int | float | decimal | string\n    | (anydata|error)[] | map&lt;anydata|error&gt;\n    | xml | table\n</pre>\n</section>\n<section>\n<h4 id=\"section_5.5.6\">5.5.6 Never type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"never-type-descriptor\">never-type-descriptor</span> := <code>never</code>\n</pre>\n<p>\nThe type descriptor <code>any</code> describes the type that does not contain\nany shapes. No value ever belongs to the <code>never</code>.\n</p>\n<p>\nThis can be useful to describe for the return type of a function, if the\nfunction never returns. It can also be useful as a type parameter. For example,\n<code>xml&lt;never&gt;</code> describes the an xml type that has no\nconstituents, i.e. the empty xml value.\n</p>\n<p>\nNote that for anytype <code>T</code>, the type <code>T|never</code> is the same\nas <code>T</code>.\n</p>\n</section>\n<section>\n<h4 id=\"byte_type\">5.5.7 Byte type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"byte-type-descriptor\">byte-type-descriptor</span> := <code>byte</code>\n</pre>\n<p>\nThe byte type is a predefined name for a union of the int values in the range 0\nto 255 inclusive. It is equivalent to the <a href=\"#built-in_subtypes\">built-in\nsubtype</a> <code>int:Unsigned8</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.5.8\">5.5.8 JSON types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"json-type-descriptor\">json-type-descriptor</span> := <code>json</code>\n</pre>\n<p>\nThe <code>json</code> type is designed for processing data expression in JSON\nformat. It is a built-in name for a union defined as follows:\n</p>\n<pre>type json = () | boolean | int | float | decimal | string | json[] | map&lt;json&gt;;\n</pre>\n<p>\nIn addition, the <code>json</code> type is defined to have <a href=\"#lax_static_typing\">lax static typing</a>.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.5.9\">5.5.9 Type reference</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"type-reference\">type-reference</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a>\n</pre>\n\n<p>\nA type descriptor can use a type-reference to refer to a type definition in the\nsame module or another module.\n</p>\n\n</section>\n</section>\n<section>\n<h3 id=\"built-in_abstract_object_types\">5.6 Built-in abstract object types</h3>\n<p>\nThere are several abstract object types that are built-in in the sense that the\nlanguage treats objects with these types specially. Note that it is only the\ntypes that are built-in; the names of these types are not built-in.\n</p>\n\n<section>\n<h4 id=\"section_5.6.1\">5.6.1 Iterator</h4>\n<p>\nA value of iterable type with iteration value type T and iteration completion\ntype C provides a way of creating an iterator object that belongs to the object\ntype\n</p>\n\n<pre>    abstract object {\n       public next() returns record {| T value; |}|C;\n    }\n</pre>\n<p>\nIn this specification, we refer to this type as Iterator&lt;T,C&gt;.\n</p>\n<p>\nConceptually an iterator is at a position between members of the iteration sequence. \nPossible positions are at the beginning (immediately before the first member if\nany), between members and at the end (immediately after the last member if any).\nA newly created iterator is at the beginning position. For an empty sequence,\nthere is only one possible position which is both at the beginning and at the\nend.\n</p>\n<p>\nThe <code>next()</code> method behaves as follows:\n</p>\n<ul>\n<li>if the iteration has encountered an error, return an error value</li>\n<li>otherwise, if the iterator has completed successfully by reaching the end\nposition without an error, return nil</li>\n<li>otherwise\n<ul>\n<li>move the iterator to next position, and</li>\n<li>return a record <code>{ value: v }</code> where v is the member of the\nsequence between the previous position and the new position</li>\n</ul>\n</li>\n</ul>\n<p>\nMutation of the container during iteration is handled as follows. At any point\nduring the execution of a program, a container has a set of valid keys; these\nare keys for which the container has a member; a key has type int for lists and\ntype string for maps. A call to <code>next()</code> must panic if the set of\nvalid keys is not the same as the set of valid keys when the iterator was\ncreated, with the following exception: it is allowed to remove a key if the\nmember for that key has already been returned by <code>next()</code>. The value\nthat a container associates with a particular key may change during the\niteration; <code>next()</code> must return the value associated with the key at\nthe point when <code>next()</code> is called.\n</p>\n<p>\nNote that it is not possible for the <code>next()</code> method simply to return\nthe values in the iteration sequence, since there would be no way to distinguish\na nil or error value that is part of the iteration sequence from a nil or error\nvalue that represents the result of the iteration.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.6.2\">5.6.2 Iterable</h4>\n<p>\nAn object belongs to the abstract object type Iterable&lt;T,C&gt; if it has a\nmethod named <code>__iterator</code> with no arguments and a return type that is\nsubtype of Iterator&lt;T,C&gt;. An object that belongs to Iterable&lt;T,C&gt; is\niterable: the object returned by the <code>__iterator</code> method determines\nthe iteration sequence and iteration completion value.\n</p>\n</section>\n<section>\n<h4 id=\"StreamImplementor\">5.6.3 StreamImplementor</h4>\n<p>\nAn object belongs to the abstract object type StreamImplementor&lt;T,C&gt; if it\nbelongs to Iterator&lt;T,C&gt; and also optionally has a method\n<code>close()</code> with return value <code>C?</code>. This is equivalent to\nbelonging to the following type.\n</p>\n\n<pre>    abstract object {\n       public next() returns record {| T value; |}|C;\n    }\n    | abstract object {\n       public next() returns record {| T value; |}|C;\n       public close() returns C?;\n    }\n</pre>\n\n<p>\nThe close method says that there will be no more calls to the next method. Any\ncall to a next method after the close method has been called must result in a\npanic. A missing close method behaves like a close method that puts the object\ninto a closed state, in which calls to next will result in a panic, and then\nimmediately returns <code>()</code>.\n</p>\n\n</section>\n<!--\n<section>\n<h4>Collection</h4>\n<p>\nAn object can declare itself to be a collection of values of type V indexed by\nkeys of type K, but defining a <code>__get(K k)</code> method returning a value\nof type V, that returns the value associated with key k. If the collection is\nmutable, then the object can also declare a <code>__put(K k, V v)</code> method\nthat changes the value associated with key k to to value v. In this\nspecification, we refer to these types as ImmutableCollection&lt;T&gt; and\nMutableCollection&lt;T&gt;.\n</p>\n</section>\n-->\n<section>\n<h4 id=\"section_5.6.4\">5.6.4 Listener</h4>\n<p>\nThe Listener type is defined as follows.\n</p>\n\n<pre>abstract object {\n   public function __attach(service s, string? name = ()) returns error?;\n   public function __detach(service s) returns error?;\n   public function __start() returns error?;\n   public function __gracefulStop() returns error?;\n   public function __immediateStop() returns error?;\n}\n</pre>\n<p>\nNote that if an implementation does precise service typing using annotations on\ntype definitions, it will need to treat Listener as being parameterized in the\nprecise service type that is used to the first argument to\n<code>__attach</code>.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_5.7\">5.7 Abstract operations</h3>\n<p>\nThese section specifies a number of operations that can be performed on values.\nThese operations are for internal use by the specification. These operations are\nnamed in CamelCase with an initial upper-case letter to distinguish them from\nfunctions in the lang library.\n</p>\n<section>\n<h4 id=\"FillMember\">5.7.1 FillMember</h4>\n<p>\nThe FillMember(c, k) operation is defined for a container value c and a key\nvalue k. It can be performed when c does not have a member with key k; if it\nsucceeds, it will result in a member with key k being added to c. It will\nsucceed if the inherent type of c allows the addition of a member with key k\nand there is a way to construct a filler value for the type descriptor that the\ninherent type of c requires for member k. The following table specifies when and\nhow a filler value can be constructed for a type descriptor.\n</p>\n<table>\n<tr>\n<th>Type descriptor</th>\n<th>Filler value</th>\n<th>When available</th>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>+0.0f</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>decimal</code></td>\n<td><code>+0.0d</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>\"\"</code></td>\n<td></td>\n</tr>\n<tr>\n<td>array or tuple type descriptor</td>\n<td><code>[]</code></td>\n<td>if that is a valid constructor for the type</td>\n</tr>\n<tr>\n<td>map or record type descriptor</td>\n<td><code>{ }</code></td>\n<td>if that is a valid constructor for the type</td>\n</tr>\n<tr>\n<td>table</td>\n<td>empty table (with no rows)</td>\n<td></td>\n</tr>\n<tr>\n<td>object</td>\n<td><code>new T()</code></td>\n<td>if this is valid and its static type does not include error, where\n<code>T</code> is the object type descriptor (an abstract object type will not\nhave a filler value)</td>\n</tr>\n<tr>\n<td>stream</td>\n<td>empty stream</td>\n<td></td>\n</tr>\n<tr>\n<td><code>xml</code></td>\n<td><code>xml``</code></td>\n<td></td>\n</tr>\n<tr>\n<td>singleton</td>\n<td>the single value used to specify the type</td>\n<td></td>\n</tr>\n<tr>\n<td rowspan=\"2\">union</td>\n<td><code>()</code></td>\n<td>if <code>()</code> is a member of the union</td>\n</tr>\n<tr>\n<td>the filler value for basic type B</td>\n<td>if all members of the union belong to a single basic type B,\nand the filler value for B also belongs to the union</td>\n</tr>\n<tr>\n<td><code>T?</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>any</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>anydata</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>byte</code></td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>json</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n</table>\n\n</section>\n<section>\n<h4 id=\"Clone\">5.7.2 Clone</h4>\n<p>\nClone(v) is defined for any pure value v. It performs a deep copy, recursively\ncopying all structural values and their members and recursively copy all\nsequence values and their constituents. Clone(v) for an immutable value v returns\nv. If v is a container, Clone(v) has the same inherent type as v. The graph of\nreferences of Clone(v) must have the same structure as that of v. This implies\nthat the number of distinct references reachable from Clone(v) must be the same\nas the number of distinct references reachable from v. Clone(v) must terminate\nfor any pure value v, even if v has cycles.\n</p>\n<p>\nClone(v) cannot be implemented simply by recursively calling Clone on all\nmembers of v. Rather Clone must maintain a map that records the result of\ncloning each reference value. When a Clone operation starts, this map as empty.\nWhen cloning a reference value, it must use the result recorded in the map if\nthere is one.\n</p>\n<p>\nThe Clone operation is exposed by the <code>clone</code> function in the\nlang.value module of the lang library.\n</p>\n</section>\n<section>\n<h4 id=\"ImmutableClone\">5.7.3 ImmutableClone</h4>\n<p>\nImmutableClone(v) is defined for any pure value v. It performs a deep copy of v\nsimilar to Clone(v), except that newly constructed values are constructed as\nimmutable. Any immutable value is not copied. \n</p>\n<p>\nLike Clone, ImmutableClone must preserve graph structure, including cycles.\nConceptually the whole graph is constructed before being made immutable.\n</p>\n<p>\nThe ImmutableClone operation is exposed by the <code>cloneReadOnly</code>\nfunction in the lang.value module of the lang library.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.7.4\">5.7.4 SameShape</h4>\n<p>\nSameShape(v1, v2) is defined for any pure values v1, v2. It returns true or\nfalse depending of whether v1 and v2 have the same shape. SameShape(v1, v2) must\nterminate for any pure values v1 and v2, even if v1 or v2 have cycles.\nSameShape(v1, v2) returns true if v1 and v2 have the same shape, even if the\ngraphs of references of v1 and v2 have different structures.  If two values v1\nand v2 have different basic types, then SameShape(v1, v2) will be false.\n</p>\n<p>\nThe possibility of cycles means that SameShape cannot be implemented simply by\ncalling SameShape recursively on members. Rather SameShape must maintain a\nmapping that records for each pair of references whether it is already in\nprocess of comparing those references. When a SameShape operation starts, this\nmap is empty. Whenever it starts to compare two references, it should see\nwhether it has already recorded that pair (in either order), and, if it has,\nproceed on the assumption that they compare equal.\n</p>\n<p>\nSameShape(Clone(x), x) is guaranteed to be true for any pure value.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.7.5\">5.7.5 NumericConvert</h4>\n<p>\nNumericConvert(t, v) is defined if t is the typedesc for float, decimal or int,\nand v is a numeric value. It converts v to a value in t, or returns an error,\naccording to the following table.\n</p>\n<table>\n  <tr>\n   <td>from \\ to</td>\n   <td>float</td>\n   <td>decimal</td>\n   <td>int</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>unchanged</td>\n   <td>closest math value</td>\n   <td rowspan=\"2\">round, error for NaN or out of int range</td>\n  </tr>\n  <tr>\n   <td>decimal</td>\n   <td>closest math value</td>\n   <td>unchanged</td>\n  </tr>\n  <tr>\n   <td>int</td>\n   <td>same math value</td>\n   <td>same math value</td>\n   <td>unchanged</td>\n  </tr>\n</table>\n</section>\n</section>\n<section>\n<h3 id=\"section_5.8\">5.8 Binding patterns and variables</h3>\n<section>\n<h4 id=\"section_5.8.1\">5.8.1 Binding patterns</h4>\n<p>\nBinding patterns are used to support destructuring, which allows different parts\nof a single structured value each to be assigned to separate variables at the\nsame time.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"binding-pattern\">binding-pattern</span> :=\n   <a href=\"#capture-binding-pattern\"><span class=\"ntref\">capture-binding-pattern</span></a>\n   | <a href=\"#wildcard-binding-pattern\"><span class=\"ntref\">wildcard-binding-pattern</span></a>\n   | <a href=\"#list-binding-pattern\"><span class=\"ntref\">list-binding-pattern</span></a>\n   | <a href=\"#mapping-binding-pattern\"><span class=\"ntref\">mapping-binding-pattern</span></a>\n   | <a href=\"#error-binding-pattern\"><span class=\"ntref\">error-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"capture-binding-pattern\">capture-binding-pattern</span> := <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"variable-name\">variable-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"wildcard-binding-pattern\">wildcard-binding-pattern</span> := <code>_</code>\n<span class=\"ntdfn\" id=\"list-binding-pattern\">list-binding-pattern</span> := <code>[</code> <a href=\"#list-member-binding-patterns\"><span class=\"ntref\">list-member-binding-patterns</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"list-member-binding-patterns\">list-member-binding-patterns</span> :=\n   <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a> (<code>,</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>)* [<code>,</code> <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>]\n   | [ <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a> ]\n<span class=\"ntdfn\" id=\"mapping-binding-pattern\">mapping-binding-pattern</span> := <code>{</code> <a href=\"#field-binding-patterns\"><span class=\"ntref\">field-binding-patterns</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"field-binding-patterns\">field-binding-patterns</span> :=\n   <a href=\"#field-binding-pattern\"><span class=\"ntref\">field-binding-pattern</span></a> (<code>,</code> <a href=\"#field-binding-pattern\"><span class=\"ntref\">field-binding-pattern</span></a>)* [<code>,</code> <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>]\n   | [ <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a> ] \n<span class=\"ntdfn\" id=\"field-binding-pattern\">field-binding-pattern</span> :=\n   <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n   | <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"rest-binding-pattern\">rest-binding-pattern</span> := <code>...</code> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"error-binding-pattern\">error-binding-pattern</span> := <a href=\"#direct-error-binding-pattern\"><span class=\"ntref\">direct-error-binding-pattern</span></a> | <a href=\"#indirect-error-binding-pattern\"><span class=\"ntref\">indirect-error-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"direct-error-binding-pattern\">direct-error-binding-pattern</span> := <code>error</code> <code>(</code> <a href=\"#direct-error-arg-list-binding-pattern\"><span class=\"ntref\">direct-error-arg-list-binding-pattern</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"indirect-error-binding-pattern\">indirect-error-binding-pattern</span> := <a href=\"#error-type-reference\"><span class=\"ntref\">error-type-reference</span></a> <code>(</code> <a href=\"#indirect-error-arg-list-binding-pattern\"><span class=\"ntref\">indirect-error-arg-list-binding-pattern</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"error-type-reference\">error-type-reference</span> := <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a>\n<span class=\"ntdfn\" id=\"direct-error-arg-list-binding-pattern\">direct-error-arg-list-binding-pattern</span> :=\n   <a href=\"#simple-binding-pattern\"><span class=\"ntref\">simple-binding-pattern</span></a> [<code>,</code> <a href=\"#error-field-binding-patterns\"><span class=\"ntref\">error-field-binding-patterns</span></a>]\n   | [<a href=\"#error-field-binding-patterns\"><span class=\"ntref\">error-field-binding-patterns</span></a>]\n<span class=\"ntdfn\" id=\"indirect-error-arg-list-binding-pattern\">indirect-error-arg-list-binding-pattern</span> := [<a href=\"#error-field-binding-patterns\"><span class=\"ntref\">error-field-binding-patterns</span></a>]\n<span class=\"ntdfn\" id=\"error-field-binding-patterns\">error-field-binding-patterns</span> :=\n   <a href=\"#named-arg-binding-pattern\"><span class=\"ntref\">named-arg-binding-pattern</span></a> (<code>,</code> <a href=\"#named-arg-binding-pattern\"><span class=\"ntref\">named-arg-binding-pattern</span></a>)* [<code>,</code> <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>]\n   | <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"simple-binding-pattern\">simple-binding-pattern</span> :=\n   <a href=\"#capture-binding-pattern\"><span class=\"ntref\">capture-binding-pattern</span></a>\n   | <a href=\"#wildcard-binding-pattern\"><span class=\"ntref\">wildcard-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"named-arg-binding-pattern\">named-arg-binding-pattern</span> := <a href=\"#arg-name\"><span class=\"ntref\">arg-name</span></a> <code>=</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n</pre>\n<p>\nA binding pattern may succeed or fail in matching a value. A successful match\ncauses values to be assigned to all the variables occurring the binding-pattern.\n</p>\n<p>\nA binding pattern matches a value in any of the following cases.\n</p>\n<ul>\n<li>a capture-binding-pattern always matches a value and causes the matched\nvalue to be assigned to named variable;</li>\n<li>a wildcard-binding-pattern matches a value if the value belongs to type any,\nin other words if the basic type of the value is not error; it does not cause\nany assignments to be made;</li>\n<li>a list-binding-pattern with m binding patterns matches a list with n\nmembers if m is less than or equal to n, and the i-th binding pattern matches\nthe i-th member of the list for each i in 1 to m, and either m is equal to n or\nthe list-binding-pattern includes a rest-binding-pattern; if there is a\nrest-binding-pattern <code>...v</code>, then a successful match causes a new\nlist value consisting of all members of the matched list except for the the\nfirst m values to be assigned to <code>v</code>;</li>\n<li>a mapping-binding-pattern { f<sub>1</sub>: p<sub>1</sub>, f<sub>2</sub>:\np<sub>2</sub>, ..., f<sub>n</sub>: p<sub>n</sub>, r } matches a mapping value m\nthat includes fields f<sub>1</sub>, f<sub>2</sub>, ... , f<sub>n</sub> if\np<sub>i</sub> matches the value of field f<sub>i</sub> for each i in 1 to n; if\nr is <code>...v</code> then a successful match causes a new mapping value\nconsisting of all the other fields to be assigned to <code>v</code>; a\nfield-binding-pattern consisting of just a variable-name <code>x</code> is\nequivalent to a field-binding-pattern <code>x: x</code>;\n</li>\n<li>a direct-error-binding-pattern error(p<sub>r</sub>, f<sub>1</sub> = p<sub>1</sub>,\nf<sub>2</sub> = p<sub>2</sub>, ..., f<sub>n</sub> = p<sub>n</sub>, r) matches an\nerror value if it has an error reason string that matches p<sub>r</sub> and a\ndetail record that has fields f<sub>1</sub>, f<sub>2</sub>, ... , f<sub>n</sub> such\nthat p<sub>i</sub> matches the value of field f<sub>i</sub> for each i in 1 to\nn; if r is <code>...v</code> then a successful match causes a new mapping value\nconsisting of all fields other than f<sub>1</sub>, f<sub>2</sub>, ... ,\nf<sub>n</sub> to be assigned to <code>v</code>;</li>\n<li>an indirect-error-binding-pattern ET(f<sub>1</sub> = p<sub>1</sub>,\nf<sub>2</sub> = p<sub>2</sub>, ..., f<sub>n</sub> = p<sub>n</sub>, r) matches an\nerror value e if the direct-error-binding-pattern error(f<sub>1</sub> =\np<sub>1</sub>, f<sub>2</sub> = p<sub>2</sub>, ..., f<sub>n</sub> =\np<sub>n</sub>, r) matches e and the shape of e is in ET.</li>\n</ul>\n<p>\nAll the variables in a binding-pattern must be distinct e.g. [x, x] is not\nallowed.\n</p>\n<p>\nGiven a type descriptor for every variable in a binding-pattern, there is a type\ndescriptor for the binding-pattern that will contain a value just in case that\nthe binding pattern successfully matches the value causing each variable to be\nassigned a value belonging to the type descriptor for that variable.\n</p>\n<ul>\n<li>for a capture-binding-pattern, the type descriptor is the type descriptor\nfor that variable;</li>\n<li>for a wildcard-binding-pattern, the type descriptor is any</li>\n<li>for a list-binding-pattern, the type descriptor is a tuple type descriptor;</li>\n<li>for a mapping-binding-pattern, the type descriptor is a record type\ndescriptor;</li>\n<li>for an error-binding-pattern, the type descriptor is an error type\ndescriptor.</li>\n</ul>\n\n</section>\n<section>\n<h4 id=\"section_5.8.2\">5.8.2 Typed binding patterns</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"typed-binding-pattern\">typed-binding-pattern</span> := <a href=\"#inferable-type-descriptor\"><span class=\"ntref\">inferable-type-descriptor</span></a> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"inferable-type-descriptor\">inferable-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> | <code>var</code>\n</pre>\n<p>\nA typed-binding-pattern combines a type-descriptor and a binding-pattern, and is\nused to create the variables occurring in the binding-pattern. If var is used\ninstead of a type-descriptor, it means the type is inferred. How the type is\ninferred depends on the context of the typed-binding-pattern. An\ninferable-type-descriptor is an inferable context for a type descriptor, which\nmeans that <code>*</code> can be used with the type descriptor to infer certain\nparts of it.\n</p>\n<p>\nThe simplest and most common form of a typed-binding-pattern is for the binding\npattern to consist of just a variable name. In this case, the variable is\nconstrained to contain only values matching the type descriptor.\n</p>\n<p>\nWhen the binding pattern is more complicated, the binding pattern must be\nconsistent with the type-descriptor, so that the type-descriptor unambiguously\ndetermines a type for each variable occurring in the binding pattern. A binding\npattern occurring in a typed-binding-pattern must also be irrefutable with\nrespect to the type of value against which it is to be matched. In other words,\nthe compiler will ensure that matching such a binding pattern against a value\nwill never fail at runtime.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.8.3\">5.8.3 Variable and identifier scoping</h4>\n<p>\nFor every variable, there is place in the program that declares it. Variables\nare lexically scoped: every variable declaration has a scope which determines\nthe region of the program within which the variable can be referenced.\n</p>\n<p>\nThere are two kinds of scope: module-scope and block-scope. A variable with\nmodule-scope can be referenced anywhere within a module; if declared\n<code>public</code>, it can also be referenced from outside the module.\n</p>\n<p>\nIdentifiers with module-scope are used to identify not only variables but other\nmodule-level entities such as functions. Within module-scope, identifiers are\nseparated into three symbol spaces:\n</p>\n<ul>\n<li>the <em>main</em> symbol space includes identifiers for variables,\nconstants, types, functions and other identifiers that do not belong to any of\nthe other two symbol spaces;</li>\n<li>the <em>prefix</em> symbol space contains prefixes declared by import\ndeclarations and XML namespace declaration statements;</li>\n<li>the <em>annotation tag</em> symbol space contains annotation tags declared\nby annotation declarations.</li>\n</ul>\n<p>\nThe prefix symbol space is special in that it is associated with a source part\nrather than a module.\n</p>\n<p>\nBlock-scope is divided into symbol spaces in the same way as module-scope,\nexcept that block-scope does not have a symbol space for annotation tags, since\nannotation tags cannot be declared with block-scope.\n</p>\n<p>\nAn identifier declared with block-scope can be referenced only within a\nparticular block (always delimited with curly braces). Block-scope variables are\ncreated by a variety of different constructs, many of which use a\ntyped-binding-pattern. Parameters are treated as read-only variables with\nblock-scope.\n</p>\n<p>\nIt is not an error if an identifier is declared with block-scope and there is\nalready a declaration of the same identifier in the same symbol space with\nmodule-scope. In this case, the block-scope declaration will hide the\nmodule-scope declaration for the region where the block-scope declaration is in\nscope. However, it is a compile error if an identifier is declared with\nblock-scope and its scope overlaps with the scope of another declaration of the\nsame identifier in the same symbol space also with block-scope.\n</p>\n</section>\n</section>\n</section>\n<section>\n<h2 id=\"expressions\">6. Expressions</h2>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"expression\">expression</span> := \n   <a href=\"#literal\"><span class=\"ntref\">literal</span></a>\n   | <a href=\"#list-constructor-expr\"><span class=\"ntref\">list-constructor-expr</span></a>\n   | <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>\n   | <a href=\"#table-constructor-expr\"><span class=\"ntref\">table-constructor-expr</span></a>\n   | <a href=\"#service-constructor-expr\"><span class=\"ntref\">service-constructor-expr</span></a>\n   | <a href=\"#string-template-expr\"><span class=\"ntref\">string-template-expr</span></a>\n   | <a href=\"#xml-template-expr\"><span class=\"ntref\">xml-template-expr</span></a>\n   | <a href=\"#new-expr\"><span class=\"ntref\">new-expr</span></a>\n   | <a href=\"#variable-reference-expr\"><span class=\"ntref\">variable-reference-expr</span></a>\n   | <a href=\"#field-access-expr\"><span class=\"ntref\">field-access-expr</span></a>\n   | <a href=\"#optional-field-access-expr\"><span class=\"ntref\">optional-field-access-expr</span></a>\n   | <a href=\"#xml-attribute-access-expr\"><span class=\"ntref\">xml-attribute-access-expr</span></a>\n   | <a href=\"#annot-access-expr\"><span class=\"ntref\">annot-access-expr</span></a>\n   | <a href=\"#member-access-expr\"><span class=\"ntref\">member-access-expr</span></a>\n   | <a href=\"#function-call-expr\"><span class=\"ntref\">function-call-expr</span></a>\n   | <a href=\"#method-call-expr\"><span class=\"ntref\">method-call-expr</span></a>\n   | <a href=\"#error-constructor-expr\"><span class=\"ntref\">error-constructor-expr</span></a>\n   | <a href=\"#anonymous-function-expr\"><span class=\"ntref\">anonymous-function-expr</span></a>\n   | <a href=\"#let-expr\"><span class=\"ntref\">let-expr</span></a>\n   | <a href=\"#type-cast-expr\"><span class=\"ntref\">type-cast-expr</span></a>\n   | <a href=\"#typeof-expr\"><span class=\"ntref\">typeof-expr</span></a>\n   | <a href=\"#unary-expr\"><span class=\"ntref\">unary-expr</span></a>\n   | <a href=\"#multiplicative-expr\"><span class=\"ntref\">multiplicative-expr</span></a>\n   | <a href=\"#additive-expr\"><span class=\"ntref\">additive-expr</span></a>\n   | <a href=\"#shift-expr\"><span class=\"ntref\">shift-expr</span></a>\n   | <a href=\"#range-expr\"><span class=\"ntref\">range-expr</span></a>\n   | <a href=\"#numerical-comparison-expr\"><span class=\"ntref\">numerical-comparison-expr</span></a>\n   | <a href=\"#is-expr\"><span class=\"ntref\">is-expr</span></a>\n   | <a href=\"#equality-expr\"><span class=\"ntref\">equality-expr</span></a>\n   | <a href=\"#binary-bitwise-expr\"><span class=\"ntref\">binary-bitwise-expr</span></a>\n   | <a href=\"#logical-expr\"><span class=\"ntref\">logical-expr</span></a>\n   | <a href=\"#conditional-expr\"><span class=\"ntref\">conditional-expr</span></a>\n   | <a href=\"#checking-expr\"><span class=\"ntref\">checking-expr</span></a>\n   | <a href=\"#trap-expr\"><span class=\"ntref\">trap-expr</span></a>\n   | <a href=\"#query-expr\"><span class=\"ntref\">query-expr</span></a>\n   | <a href=\"#xml-navigate-expr\"><span class=\"ntref\">xml-navigate-expr</span></a>\n   | <code>(</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>)</code>\n</pre>\n<p>\nFor simplicity, the expression grammar is ambiguous. The following table shows\nthe various types of expression in decreasing order of precedence, together with\nassociativity.\n</p>\n<table>\n  <tr>\n   <td><strong>Operator</strong></td>\n   <td><strong>Associativity</strong></td>\n  </tr>\n  <tr>\n   <td>\n<code>x.k</code>\n<br>\n<code>x.@a</code>\n<br>\n<code>f(x)</code>\n<br>\n<code>x.f(y)</code>\n<br>\n<code>x[y]</code>\n<br>\n<code>new T(x)</code>\n   </td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>+x</code>\n<br>\n<code>-x</code>\n<br>\n<code>~x</code>\n<br>\n<code>!x</code>\n<br>\n<code>&lt;T&gt; x</code>\n<br>\n<code>typeof x</code>\n   </td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>x * y</code>\n<br>\n<code>x / y</code>\n<br>\n<code>x % y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x + y</code>\n<br>\n<code>x - y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x &lt;&lt; y</code>\n<br>\n<code>x &gt;&gt; y</code>\n<br>\n<code>x &gt;&gt;&gt; y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x ... y</code>\n<br>\n<code>x ..&lt; y</code>\n   </td>\n   <td>non</td>\n  </tr>\n  <tr>\n   <td>\n<code>x &lt; y</code>\n<br>\n<code>x &gt; y</code>\n<br>\n<code>x &lt;= y</code>\n<br>\n<code>x &gt;= y</code>\n<br>\n<code>x is y</code>\n   </td>\n   <td>non</td>\n  </tr>\n  <tr>\n   <td>\n<code>x == y</code>\n<br>\n<code>x != y</code>\n<br>\n<code>x === y</code>\n<br>\n<code>x !== y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x &amp; y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x ^ y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x | y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x &amp;&amp; y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x || y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x ?: y</code></td>\n   <td>right</td>\n  </tr>\n  <tr>\n   <td><code>x ? y : z</code></td>\n   <td>right</td>\n  </tr>\n  <tr>\n   <td>\n<code>(x) =&gt; y</code>\n<br>\n<code>let x = y in z</code>\n   </td>\n   <td>right</td>\n  </tr>\n\n</table>\n<section>\n<h3 id=\"section_6.1\">6.1 Expression evaluation</h3>\n<p>\nWhen the evaluation of an expression completes normally, it produces a result,\nwhich is a value. The evaluation of an expression may also complete abruptly.\nThere are two kinds of abrupt completion: check-fail and panic. With both kinds\nof abrupt completion there is an associated value, which always has basic type\nerror.\n</p>\n<p>\nThe following sections describes how each kind expression is evaluated, assuming\nthat evaluation of subexpressions complete normally. Except where explicitly\nstated to the contrary, expressions handle abrupt completion of subexpressions\nas follows. If in the course of evaluating an expression E, the evaluation of\nsome subexpression E1 completes abruptly, then then evaluation of E also\ncompletes abruptly in the same way as E1.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.2\">6.2 Static typing of expressions</h3>\n<p>\nA type is computed for every expression at compile type; this is called the\nstatic type of the expression. The compiler and runtime together guarantee that\nif the evaluation of an expression at runtime completes normally, then the\nresulting value will belong to the static type. A type is also computed for\ncheck-fail abrupt completion, which will be a (possibly empty) subtype of error;\nhowever, for panic abrupt completion, no type is computed.\n</p>\n<p>\nThe detailed rules for the static typing of expressions are quite elaborate and\nare not yet specified completely in this document.\n</p>\n\n<section>\n<h4 id=\"lax_static_typing\">6.2.1 Lax static typing</h4>\n<p>\nIn some situations it is convenient for static typing to be less strict than\nnormal. One such situation is when processing data in Ballerina using a static\ntype that is less precisse than the type that the data is in fact expected to\nbelong to. For example, when the Ballerina <code>json</code> type is used for\nthe processing of data in JSON format, the Ballerina static type will not\ncapture the constraints of the particular JSON format that is been processed.\n</p>\n<p>\nBallerina supports this situation through the concept of lax static typing,\nwhich has two parts: the first part is that a type descriptor can be classified\nas lax; the second part is that particular kinds of expression can have less\nstrict static typing rules when the static type of a subexpression is described\nby a lax type descriptor. With these less strict rules, a potential type error\nthat would have been a compile-time error according to the normal strict static\ntyping rules would instead be allowed at compile-time and result in an error\nvalue at runtime; the effect is thus that some static type-checking is instead\ndone dynamically.\n</p>\n<p>\nIn this version of Ballerina, only the first step has been taken towards\nsupporting this concept. There is a fixed set of type descriptors that are\nclassified as lax: specifically <code>json</code> is lax, and\n<code>map&lt;T&gt;</code> is lax if T is lax. The only kinds of expression for\nwhich lax typing rules are specified are field-access-expr and\noptional-field-access-expr.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_6.2.2\">6.2.2 Contextually expected type</h4>\n<p>\nFor a context in which an expression occurs, there may be a type descriptor that\ndescribes the static type that the expression is expected to have. This is\ncalled the <em>contextually expected type</em>. For example, if a variable is\ndeclared by a type descriptor TD, then TD will be the contextually expected type\nfor the expression initializing the variable. A type descriptor must be\nresolved before it can be used to provide a contextually expected type.</p>\n<p>\nMany kinds of expression that construct values use the contextually expected\ntype to determine the type of value constructed, rather than requiring the type\nto be specified explicitly. For each such kind of expression, there is a set of\nbasic types (most often consisting of a single basic type) that the value\nconstructed by that kind of expression will always belong to. In this case, the\ncontextually expected type is narrowed by intersecting it with this set of basic\ntypes; this narrowed type is called the <em>applicable</em> contextually\nexpected type. The narrowing is performed on the type descriptor by first\nnormalizing the type descriptor into a union, where each member of the union is\nnot a union and describes shapes from a single basic type, and then eliminating\nany members of the union with the wrong basic type; if this leaves no members,\nthen it is a compile-time error; if it leaves a single member of the union, then\nthe the applicable contextually expected type is this single member, otherwise\nit is a union of the remaining members.\n</p>\n<p>\nNote the language provides a way to say that the type of a variable is to be\ninferred from the static type of the expression used to initialize the variable.\nIn this case, there is no contextually expected type for the evaluation of the\nexpression. Not having a contextually expected type is different from having a\ncontextually expected type that allows all values.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.2.3\">6.2.3 Precise and broad types</h4>\n<p>\nThere is an additional complexity relating to inferring types. Expressions in\nfact have two static types, a precise type and a broad type. Usually, the\nprecise type is used. However, in a few situations, using the precise type would\nbe inconvenient, and so Ballerina uses the broad type. In particular, the broad\ntype is used for inferring the type of an implicitly typed non-final variable.\nSimilarly, the broad type is used when it is necessary to infer the member type\nof the inherent type of a container.\n</p>\n<p>\nIn most cases, the precise type and the broad type of an expression are the\nsame. For a compound expression, the broad type of an expression is computed\nfrom the broad type of the sub-expressions in the same way as the precise type\nof the expression is computed from the precise type of sub-expressions.\nTherefore in most cases, there is no need to mention the distinction between\nprecise and broad types.\n</p>\n<p>\nThe most important case where the precise type and the broad type are different\nis literals. The precise type is a singleton type containing just the shape of\nthe value that the literal represents, whereas the broad type is the precise\ntype widened to contain the entire basic type of which it is a subtype. For\nexample, the precise type of the string literal <code>\"X\"</code> is the\nsingleton type <code>\"X\"</code>, but the broad type is <code>string</code>.\n</p>\n<p>\nFor a type-cast-expr, the precise type and the broad type are the type\nspecified in the cast.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_6.3\">6.3 Casting and conversion</h3>\n<p>\nBallerina makes a sharp distinction between type conversion and type casting.\n</p>\n<p>\nCasting a value does not change the value. Any value always belongs to multiple\ntypes. Casting means taking a value that is statically known to be of one type,\nand using it in a context that requires another type; casting checks that the\nvalue is of that other type, but does not change the value.\n</p>\n<p>\nConversion is a process that takes as input a value of one type and produces as\noutput a possibly distinct value of another type. Note that conversion does not\nmutate the input value.\n</p>\n<p>\nBallerina always requires programmers to make conversions explicit, even between\ndifferent types of number; there are no implicit conversions.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.4\">6.4 Constant expressions</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"const-expr\">const-expr</span> := \n   <a href=\"#literal\"><span class=\"ntref\">literal</span></a>\n   | <a href=\"#list-constructor-expr\"><span class=\"ntref\">list-constructor-expr</span></a>\n   | <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>\n   | <a href=\"#table-constructor-expr\"><span class=\"ntref\">table-constructor-expr</span></a>\n   | <a href=\"#string-template-expr\"><span class=\"ntref\">string-template-expr</span></a>\n   | <a href=\"#xml-template-expr\"><span class=\"ntref\">xml-template-expr</span></a>\n   | <a href=\"#constant-reference-expr\"><span class=\"ntref\">constant-reference-expr</span></a>\n   | <a href=\"#type-cast-expr\"><span class=\"ntref\">type-cast-expr</span></a>\n   | <a href=\"#unary-expr\"><span class=\"ntref\">unary-expr</span></a>\n   | <a href=\"#multiplicative-expr\"><span class=\"ntref\">multiplicative-expr</span></a>\n   | <a href=\"#additive-expr\"><span class=\"ntref\">additive-expr</span></a>\n   | <a href=\"#shift-expr\"><span class=\"ntref\">shift-expr</span></a>\n   | <a href=\"#range-expr\"><span class=\"ntref\">range-expr</span></a>\n   | <a href=\"#numerical-comparison-expr\"><span class=\"ntref\">numerical-comparison-expr</span></a>\n   | <a href=\"#is-expr\"><span class=\"ntref\">is-expr</span></a>\n   | <a href=\"#equality-expr\"><span class=\"ntref\">equality-expr</span></a>\n   | <a href=\"#binary-bitwise-expr\"><span class=\"ntref\">binary-bitwise-expr</span></a>\n   | <a href=\"#logical-expr\"><span class=\"ntref\">logical-expr</span></a>\n   | <a href=\"#conditional-expr\"><span class=\"ntref\">conditional-expr</span></a>\n   | <code>(</code> <a href=\"#const-expr\"><span class=\"ntref\">const-expr</span></a> <code>)</code>\n</pre>\n<p>\nWithin a <code>const-expr</code>, any nested expression must also be a\nconst-expr.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"constant-reference-expr\">constant-reference-expr</span> := <a href=\"#variable-reference-expr\"><span class=\"ntref\">variable-reference-expr</span></a>\n</pre>\n<p>\nA <code>constant-reference-expr</code> must reference a constant defined with\n<code>module-const-decl</code>.\n</p>\n<p>\nA <code>const-expr</code> is evaluated at compile-time. Constructors called\nwithin a <code>const-expr</code> construct their values as immutable. Note that\nthe syntax of const-expr does not allow for the construction of error values.\nThe result of a <code>const-expr</code> is always immutable.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"simple-const-expr\">simple-const-expr</span> :=\n  <a href=\"#nil-literal\"><span class=\"ntref\">nil-literal</span></a>\n  | <a href=\"#boolean-literal\"><span class=\"ntref\">boolean-literal</span></a>\n  | [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a>\n  | [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#floating-point-literal\"><span class=\"ntref\">floating-point-literal</span></a>\n  | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>\n  | <a href=\"#constant-reference-expr\"><span class=\"ntref\">constant-reference-expr</span></a>\n</pre>\n<p>\nA simple-const-expr is a restricted form of const-expr used in contexts where\nvarious forms of constructor expression would not make sense. Its semantics are\nthe same as a const-expr.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.5\">6.5 Literals</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"literal\">literal</span> :=\n   <a href=\"#nil-literal\"><span class=\"ntref\">nil-literal</span></a>\n   | <a href=\"#boolean-literal\"><span class=\"ntref\">boolean-literal</span></a>\n   | <a href=\"#numeric-literal\"><span class=\"ntref\">numeric-literal</span></a>\n   | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>\n   | <a href=\"#byte-array-literal\"><span class=\"ntref\">byte-array-literal</span></a>\n<span class=\"ntdfn\" id=\"numeric-literal\">numeric-literal</span> := <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a> | <a href=\"#floating-point-literal\"><span class=\"ntref\">floating-point-literal</span></a>\n</pre>\n<p>\nA numeric-literal represents a value belonging to one of the basic types\nint, float or decimal. The basic type to which the value belongs is determined\nas follows:\n</p>\n<ul>\n<li>if the numeric-literal includes a <code>FloatTypeSuffix</code>, then the\nbasic type is float;</li>\n<li>if the numeric-literal includes a <code>DecimalTypeSuffix</code>, then the\nbasic type is decimal;</li>\n<li>if the numeric-literal is a <code>HexFloatingPointLiteral</code>, then the\nbasic type is float;</li>\n<li>otherwise, the basic type depends on the applicable expected numeric type\n(where the possible basic types are int, float and decimal):\n<ul>\n<li>if the applicable contextually expected type is a subtype of decimal, then\nthe basic type is decimal;</li>\n<li>if the applicable contextually expected type is a subtype of float, then the\nbasic type is float;</li>\n<li>otherwise, if the numeric literal is an int-literal, then the basic type is\nint;</li>\n<li>otherwise, the basic type is float.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe precise type of a numeric-literal is the singleton type containing just the\nshape of the value that the numeric-literal represents. The broad type is\nthe basic type of which the precise type is a subset.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"byte-array-literal\">byte-array-literal</span> := <a href=\"#Base16Literal\"><span class=\"ntref\">Base16Literal</span></a> | <a href=\"#Base64Literal\"><span class=\"ntref\">Base64Literal</span></a>\n<span class=\"ntdfn\" id=\"Base16Literal\">Base16Literal</span> := <code>base16</code> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code> <a href=\"#HexGroup\"><span class=\"ntref\">HexGroup</span></a>* <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code>\n<span class=\"ntdfn\" id=\"HexGroup\">HexGroup</span> := <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>\n<span class=\"ntdfn\" id=\"Base64Literal\">Base64Literal</span> := <code>base64</code> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code> <a href=\"#Base64Group\"><span class=\"ntref\">Base64Group</span></a>* [<a href=\"#PaddedBase64Group\"><span class=\"ntref\">PaddedBase64Group</span></a>] <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code>\n<span class=\"ntdfn\" id=\"Base64Group\">Base64Group</span> :=\n   <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a>\n<span class=\"ntdfn\" id=\"PaddedBase64Group\">PaddedBase64Group</span> :=\n   <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#PaddingChar\"><span class=\"ntref\">PaddingChar</span></a>\n   | <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#PaddingChar\"><span class=\"ntref\">PaddingChar</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#PaddingChar\"><span class=\"ntref\">PaddingChar</span></a>\n<span class=\"ntdfn\" id=\"Base64Char\">Base64Char</span> := <code>A</code> .. <code>Z</code> | <code>a</code> .. <code>z</code> | <code>0</code> .. <code>9</code> | <code>+</code> | <code>/</code>\n<span class=\"ntdfn\" id=\"PaddingChar\">PaddingChar</span> := <code>=</code>\n<span class=\"ntdfn\" id=\"WS\">WS</span> := <a href=\"#WhiteSpaceChar\"><span class=\"ntref\">WhiteSpaceChar</span></a>*\n</pre>\n<p>\nThe static type of byte-array-literal is <code>byte[N]</code>, where N is the\nnumber of bytes encoded by the Base16Literal or Base64Literal. The inherent type\nof the array value created is also <code>byte[N]</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.6\">6.6 List constructor</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"list-constructor-expr\">list-constructor-expr</span> := <code>[</code> [ <a href=\"#expr-list\"><span class=\"ntref\">expr-list</span></a> ] <code>]</code>\n<span class=\"ntdfn\" id=\"expr-list\">expr-list</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> (<code>,</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>)*\n</pre>\n<p>\nCreates a new list value. The members of the list come from evaluating each\nexpression in the expr-list in order.\n</p>\n<p>\nIf there is a contextually expected type, then the inherent type of the newly\ncreated list is derived from the applicable contextually expected type. If the\napplicable contextually expected type is a list type descriptor, then that used\nas the inherent type. If the applicable contextually expected type is a union\ntype descriptor, then any members of the union that do not contain list shapes\nof length N will be ignored, where N is the number of expressions in the\n<code>expr-list</code>; it is a compile-time error if this does not leave a\nsingle list type descriptor, which is then used as the inherent type. The static\ntype of the list-constructor-expr will be the same as the inherent type.\n</p>\n<p>\nIf there is no contextually expected type, then the inherent type will be a\ntuple-type-descriptor with a member-type-descriptor for each expression in the\nexpr-list; the type of each member-type-descriptor will be the broad type of the\ncorresponding expression in the expr-list.\n</p>\n<p>\nIf there is a contextually expected type, then the type that the inherent type\nrequires for each list member provides the contextually expected type for the\nexpression for the member; otherwise there is no contextually expected type for\nthe expressions for members.\n</p>\n<p>\nA member of a list can be filled in automatically if the <a href=\"#FillMember\">FillMember</a> abstract operation would succeed on it. The\ninherent type of a list establishes either a fixed length for the list or just a\nminimum length for the list, which may be zero. In either case, a list\nconstructor may specify only the first <var>k</var> members, provided that for\neach <var>i</var> from <var>k</var> + 1 up to the fixed length of the list, the\n<var>i</var>-th member can be filled in automatically.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.7\">6.7 Mapping constructor</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"mapping-constructor-expr\">mapping-constructor-expr</span> := <code>{</code> [<a href=\"#field\"><span class=\"ntref\">field</span></a> (<code>,</code> <a href=\"#field\"><span class=\"ntref\">field</span></a>)*] <code>}</code>\n<span class=\"ntdfn\" id=\"field\">field</span> := \n  <a href=\"#specific-field\"><span class=\"ntref\">specific-field</span></a>\n  | <a href=\"#computed-name-field\"><span class=\"ntref\">computed-name-field</span></a>\n  | <a href=\"#spread-field\"><span class=\"ntref\">spread-field</span></a>\n<span class=\"ntdfn\" id=\"specific-field\">specific-field</span> :=\n   (<a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>) <code>:</code> <a href=\"#value-expr\"><span class=\"ntref\">value-expr</span></a>\n   | <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"value-expr\">value-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"computed-name-field\">computed-name-field</span> := <code>[</code> <a href=\"#field-name-expr\"><span class=\"ntref\">field-name-expr</span></a> <code>]</code> <code>:</code> <a href=\"#value-expr\"><span class=\"ntref\">value-expr</span></a>\n<span class=\"ntdfn\" id=\"field-name-expr\">field-name-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"spread-field\">spread-field</span> := <code>...</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA mapping-constructor-expr creates a new mapping value. \n</p>\n<p>\nA specific-field specifies a single field, where the field name is known at\ncompile-time. A specific-field that consists of just a variable name\n<code><var>x</var></code> is equivalent to a field <code><var>x</var>:\n<var>x</var></code>.\n</p>\n<p>\nThe static type of the expression in a spread-field must allow only mapping\nvalues, i.e. must be a subtype of <code>map&lt;any|error&gt;</code>. All the\nfields of the mapping value that results from evaluating that expression are\nincluded in the mapping value being constructed. It is a compile-time error if\nthe static type of the expression in a spread-field allows a field that\nduplicates a specific-field or that could also occur in another spread-field.\nNote that a spread-field with an inclusive record type of <code>record { never\nx?; }</code> cannot duplicate a specific field for <code>x</code>.\n</p>\n<p>\nIf there is a contextually expected type, then the inherent type of the newly\ncreated mapping is derived from the applicable contextually expected type. If\nthe applicable contextually expected type is a mapping type descriptor, then\nthat used as the inherent type. If the applicable contextually expected type is\na union type descriptor, then any members of the union that are inconsistent\nwith the field names specified in a specific-field in the\nmapping-constructor-expr will be ignored; it is a compile-time error if this\ndoes not leave a single mapping type descriptor, which is then used as the\ninherent type. The static type of the mapping-constructor-expr will be the same\nas the inherent type.\n</p>\n<p>\nIf there is no contextually expected type, then the inherent type will be an\nexclusive-record-type-descriptor with an individual-field-descriptor for each\nspecific-field; the type of each field-descriptor will be the broad type of the\nvalue-expr in the field. The static type of the expression in every spread-field\nwill also be added to the inherent type. If there are fields specified as a\ncomputed-name-field, then there will also be a record-rest-descriptor\n<code>T...</code>, where <code>T</code> is the union of the broad types of the\nvalue-expr in all such fields.\n</p>\n<p>\nIf a specific-field does not use a string-literal for the name of the field and\nthe inherent type descriptor is a record type descriptor, then the record type\ndescriptor must include an individual-type-descriptor for that field.\n</p>\n<p>\nIf the inherent type descriptor is a record type descriptor, a field will be\nadded to the constructed value using the default value from the type descriptor\nfor any field that is not specified explicitly in the mapping constructor and\nthat has a default value.\n</p>\n<p>\nIf there is a contextually expected type, then the type that the inherent type\nrequires for each field provides the contextually expected type for the\nvalue-expr in a field; otherwise there is no contextually expected type for the\nvalue-expr for fields. If there is a contextually expected type, the\ncontextually expected type for the expression in a spread-field is map&lt;T&gt;,\nwhere the T is the smallest type such that the inherent type is a subtype of\nmap&lt;T&gt;. The contextually expected type for a field-name-expr is string.\n</p>\n<p>\nA computed-name-field specifies a single field, where the name of the field is\nspecified by an expression enclosed in square brackets. A\nmapping-constructor-expr first constructs a mapping value without considering\nany computed-name-field. The effect of a computed-name-field is to modify the\nmember of the mapping with the specified name after the mapping has been\nconstructed. If the modification is incompatible with the inherent type, then\nthe mapping-constructor-expr will panic. The modifications are performed in the\norder in which the computed-name-fields occur in the mapping-constructor-expr.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.8\">6.8 [Preview] Table constructor</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"table-constructor-expr\">table-constructor-expr</span> :=\n   <code>table</code> <code>{</code> [<a href=\"#column-descriptors\"><span class=\"ntref\">column-descriptors</span></a> [<code>,</code> <a href=\"#table-rows\"><span class=\"ntref\">table-rows</span></a>]] <code>}</code>\n<span class=\"ntdfn\" id=\"column-descriptors\">column-descriptors</span> := <code>{</code> <a href=\"#column-descriptor\"><span class=\"ntref\">column-descriptor</span></a> (<code>,</code> <a href=\"#column-descriptor\"><span class=\"ntref\">column-descriptor</span></a>)* <code>}</code>\n<span class=\"ntdfn\" id=\"column-descriptor\">column-descriptor</span> := <a href=\"#column-constraint\"><span class=\"ntref\">column-constraint</span></a>* <a href=\"#column-name\"><span class=\"ntref\">column-name</span></a>\n<span class=\"ntdfn\" id=\"column-constraint\">column-constraint</span> :=\n   <code>key</code>\n   | <code>unique</code>\n   | <code>auto</code> <a href=\"#auto-kind\"><span class=\"ntref\">auto-kind</span></a> \n<span class=\"ntdfn\" id=\"auto-kind\">auto-kind</span> := <a href=\"#auto-kind-increment\"><span class=\"ntref\">auto-kind-increment</span></a>\n<span class=\"ntdfn\" id=\"auto-kind-increment\">auto-kind-increment</span> := <code>increment</code> [<code>(</code><a href=\"#seed\"><span class=\"ntref\">seed</span></a><code>,</code> <a href=\"#increment\"><span class=\"ntref\">increment</span></a><code>)</code>]\n<span class=\"ntdfn\" id=\"seed\">seed</span> := <a href=\"#int-const-expr\"><span class=\"ntref\">int-const-expr</span></a>\n<span class=\"ntdfn\" id=\"increment\">increment</span> := <a href=\"#int-const-expr\"><span class=\"ntref\">int-const-expr</span></a>\n<span class=\"ntdfn\" id=\"int-const-expr\">int-const-expr</span> := [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a>\n<span class=\"ntdfn\" id=\"table-rows\">table-rows</span> :=  <code>[</code> <a href=\"#table-row\"><span class=\"ntref\">table-row</span></a> (<code>,</code> <a href=\"#table-row\"><span class=\"ntref\">table-row</span></a>)* <code>]</code>\n<span class=\"ntdfn\" id=\"table-row\">table-row</span> := <code>{</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> (<code>,</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>)* <code>}</code>\n</pre>\n<p>\nThe contextually expected type of the table-constructor-expr determines the\ninherent type of the constructed value.\n</p>\n<p>\nFor example,\n</p>\n\n<pre>table {\n  { key firstName, key lastName, position },\n  [ \n    {\"Sanjiva\", \"Weerawarana\", \"lead\" },\n    {\"James\", \"Clark\", \"design co-lead\" }\n  ]\n}\n</pre>\n</section>\n<section>\n<h3 id=\"section_6.9\">6.9 Service constructor</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"service-constructor-expr\">service-constructor-expr</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>service</code> <a href=\"#service-body-block\"><span class=\"ntref\">service-body-block</span></a>\n<span class=\"ntdfn\" id=\"service-body-block\">service-body-block</span> := <code>{</code> <a href=\"#service-method-defn\"><span class=\"ntref\">service-method-defn</span></a>* <code>}</code>\n<span class=\"ntdfn\" id=\"service-method-defn\">service-method-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>resource</code>]\n   <code>function</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#method-defn-body\"><span class=\"ntref\">method-defn-body</span></a>\n</pre>\n<p>\nA <code>service-constructor-expr</code> constructs a service value. The result\nof evaluating a service-constructor-expr is a value of type service. If a\nservice-method-defn contains a <code>resource</code> qualifier, then it defines\na resource method. The self variable can be used in a method-defn-body of a\nservice-method-defn in the same way as for objects.\n</p>\n<p>\nEach service value has a distinct type descriptor. (Evaluating a service\nconstructor thus has an effect analogous to defining an anonymous object type\nand then creating a value of that type.)\n</p>\n<p>\nThe return type of a resource method must be a subtype of <code>error?</code> and must contain\nnil.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.10\">6.10 String template expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"string-template-expr\">string-template-expr</span> := <code>string</code> <a href=\"#BacktickString\"><span class=\"ntref\">BacktickString</span></a>\n<span class=\"ntdfn\" id=\"BacktickString\">BacktickString</span> :=\n  <code>`</code> <a href=\"#BacktickItem\"><span class=\"ntref\">BacktickItem</span></a>* <a href=\"#Dollar\"><span class=\"ntref\">Dollar</span></a>* <code>`</code>\n<span class=\"ntdfn\" id=\"BacktickItem\">BacktickItem</span> :=\n   <a href=\"#BacktickSafeChar\"><span class=\"ntref\">BacktickSafeChar</span></a>\n   | <a href=\"#BacktickDollarsSafeChar\"><span class=\"ntref\">BacktickDollarsSafeChar</span></a>\n   | <a href=\"#Dollar\"><span class=\"ntref\">Dollar</span></a>* <a href=\"#interpolation\"><span class=\"ntref\">interpolation</span></a>\n<span class=\"ntdfn\" id=\"interpolation\">interpolation</span> := <code>${</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"BacktickSafeChar\">BacktickSafeChar</span> := ^ ( <code>`</code> | <code>$</code> )\n<span class=\"ntdfn\" id=\"BacktickDollarsSafeChar\">BacktickDollarsSafeChar</span> :=  <code>$</code>+ ^ ( <code>{</code> | <code>`</code> | <code>$</code>)\n<span class=\"ntdfn\" id=\"Dollar\">Dollar</span> := <code>$</code>\n</pre>\n<p>\nA <code>string-template-expr</code> interpolates the results of evaluating\nexpressions into a literal string. The static type of the expression in each\ninterpolation must be a simple type and must not be nil. Within a\n<code>BacktickString</code>, every character that is not part of an\n<code>interpolation</code> is interpreted as a literal character. A\nstring-template-expr is evaluated by evaluating the expression in each\ninterpolation in the order in which they occur, and converting the result of the\neach evaluation to a string as if using by <code>toString</code> function of the\n<code>lang.value</code> module of the lang library. The result\nof evaluating the <code>string-template-expr</code> is a string comprising the\nliteral characters and the results of evaluating and converting the\ninterpolations, in the order in which they occur in the\n<code>BacktickString</code>.\n</p>\n<p>\nA literal <code>`</code> can be included in string template by using an\ninterpolation <code>${\"`\"}</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.11\">6.11 XML template expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-template-expr\">xml-template-expr</span> := <code>xml</code> <a href=\"#BacktickString\"><span class=\"ntref\">BacktickString</span></a>\n</pre>\n<p>\nAn XML template expression creates an xml value as follows:\n</p>\n<ol>\n<li>The backtick string is parsed to produce a string of literal characters with\ninterpolated expressions</li>\n<li>The result of the previous step is parsed as XML content. More precisely, it\nis parsed using the production <code>content</code> in the W3C XML\nRecommendation. For the purposes of parsing as XML, each interpolated expression\nis interpreted as if it were an additional character allowed by the CharData and\nAttValue productions but no other. The result of this step is an XML Infoset\nconsisting of an ordered list of information items such as could occur as the\n[children] property of an element information item, except that interpolated\nexpressions may occur as Character Information Item or in the [normalized value]\nof an Attribute Information Item. Interpolated expressions are not allowed in\nthe value of a namespace attribute.</li>\n<li>This infoset is then converted to an xml value, as described in the <a href=\"#XML\">XML type</a> section, together with an ordered list of interpolated\nexpressions, and for each interpolated expression a position within the XML\nvalue at which the value of the expression is to be inserted.</li>\n<li>The static type of an expression occurring in an attribute value must be a\nsimple type and must not be nil. The static type type of an expression occurring\nin content can either be xml or a non-nil simple type.</li>\n<li>When the xml-template-expr is evaluated, the interpolated expressions are evaluated\nin the order in which they occur in the <code>BacktickString</code>, and\nconverted to strings if necessary. A new copy is made of the xml value and the\nresult of the expression evaluations are inserted into the corresponding\nposition in the newly created xml value. This xml value is the result of the\nevaluation.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_6.12\">6.12 New expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"new-expr\">new-expr</span> := <a href=\"#explicit-new-expr\"><span class=\"ntref\">explicit-new-expr</span></a> | <a href=\"#implicit-new-expr\"><span class=\"ntref\">implicit-new-expr</span></a>\n<span class=\"ntdfn\" id=\"explicit-new-expr\">explicit-new-expr</span> := <code>new</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nA new-expr constructs a new object or stream. The type-descriptor in an\nexplicit-new-expr must specify an object type or a stream type.\n</p>\n<p>\nWhen the type-descriptor is an object type, the explicit-new-expr allocates\nstorage for the object and initializes it, passing the supplied arg-list to the\nobject's <code>__init</code> method. It is a compile error if the\ntype-descriptor if the arg-list does not match the signature of the object\ntype's <code>__init</code> method. If the result of calling the\n<code>__init</code> method is an error value e, then the result of evaluating\nthe explicit-new-expr is e; otherwise the result is the newly initialized\nobject.\n</p>\n<p>\nWhen the type-descriptor is a stream type <code>stream&lt;T,E&gt;</code>, the\narg-list must either be empty or be a single argument belonging to abstract\nobject type StreamImplementor&lt;T,E?&gt;. When the arg-list is empty, the\nresult will be an empty stream (i.e. a stream whose next method returns nil).\nWhen the arg-list evaluates to a StreamImplementor object, the result will be a\nstream that wraps that object.\n</p>\n<p>\nAn explicit-type-expr specifying a type descriptor T has static type T, except\nthat if T is an object type and the type of the <code>__init</code> method is\nE?, where E is a subtype of error, then it has static type T|E.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"implicit-new-expr\">implicit-new-expr</span> := <code>new</code> [<code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>]\n</pre>\n<p>\nAn implicit-new-expr is equivalent to an explicit-new-expr that specifies the\napplicable contextually expected type as the type descriptor. An\nimplicit-new-expr consisting of just <code>new</code> is equivalent to\n<code>new()</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.13\">6.13 Variable reference expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"variable-reference-expr\">variable-reference-expr</span> := <a href=\"#variable-reference\"><span class=\"ntref\">variable-reference</span></a>\n<span class=\"ntdfn\" id=\"variable-reference\">variable-reference</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#xml-qualified-name\"><span class=\"ntref\">xml-qualified-name</span></a>\n<span class=\"ntdfn\" id=\"xml-qualified-name\">xml-qualified-name</span> := <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> <code>:</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA variable-reference can refer to a variable, a parameter, a constant (defined\nwith a module constant declaration), a function or a type (defined with a type\ndefinition).\n</p>\n<p>\nWhen the variable reference has a prefix and the prefix has been declared using\nan xmlns-decl rather than an import-decl, then the result of evaluating the\nvariable-reference-expr is a string of the form:\n</p>\n<pre>\n   {<var>namespace-uri</var>}<var>local-name</var>\n</pre>\n<p>\nwhere the namespace-uri comes from xml-namespace-uri specified in the\nxmlns-decl, and the local-name comes from the identifier following the colon.\n</p>\n<p>\nIf the variable-reference references a type defined with a type definition, then\nthe result of evaluating the variable-reference-expr is a typedesc value for\nthat type.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.14\">6.14 Field access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"field-access-expr\">field-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>\n</pre>\n<p>\nA field-access-expr accesses a field of an object or a member of a mapping. The\nsemantics depends on the static type T of expression. A field-access-expr where\nT is a subtype of xml is interpreted as an xml-required-attribute-access-expr.\n</p>\n<p>\nIf T is a subtype of the object basic type, then T must have a field field-name\nand the static type of the field-access-expr is the type of that field. In this\ncase, the field-access-expr is evaluated by first evaluating the expression to\nget a value <var>obj</var>; the result of the field-access-expr is the value of\nthat field of <var>obj</var>. The rest of this subsection applies when T is not\na subtype of the object basic type.\n</p>\n<p>\nLet T' be the intersection of T and basic type list, let K be the singleton type\ncontaining just the string field-name, and let M be the member type for K in T'.\nThe compile-time requirements on the field-access-expr depend on whether the\ntype descriptor describing T is lax:\n</p>\n<ul>\n<li>if it is lax, then the only compile-time requirement is M is non-empty;</li>\n<li>if it is not lax, then T must be a subtype of the mapping basic type and K\nmust be a required key type for T.</li>\n</ul>\n<p>\nThe static type of field-access-expr is M|E, where E is empty if K is a required\nkey type and T' is a subtype of T, and error otherwise (E can only be error in\nthe lax case.) In the lax case, if M is lax, then the static type of the\nfield-access-expr is lax even if E is an error.\n</p>\n<p>\nA field-access-expr is evaluated as follows:\n</p>\n<ol>\n<li>expression is evaluated resulting in a value <var>v</var>\n</li>\n<li>if <var>v</var> has basic type error, the result is <var>v</var> (this can\nonly happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have basic type mapping, the result is a\nnew error value (this can only happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have a member whose key is field-name,\nthe result is a new error value (this can only happen in the lax case)</li>\n<li>otherwise, the result is the member of <var>v</var> whose key is\nfield-name.</li>\n</ol>\n\n</section>\n<section>\n<h3 id=\"section_6.15\">6.15 Optional field access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"optional-field-access-expr\">optional-field-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?.</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>\n</pre>\n<p>\nAn optional-field-access-expr accesses a possibly undefined mapping member,\nreturning <code>()</code> if the member does not exist.\n</p>\n<p>\nAn optional-field-access-expr where the static type of <code>expression</code> is\na subtype of xml is interpreted as an xml-optional-attribute-access-expr.\n</p>\n<p>\nLet T be the static type of expression, let T' be the intersection of T and\nbasic type list, let K be the singleton type containing just the string\nfield-name and let M be the member type of K in T'. The compile-time\nrequirements on the optional-field-access-expr depend on whether the type\ndescriptor describing T is lax:\n</p>\n<ul>\n<li>if it is lax, then the only compile-time requirement is that M is\nnon-empty;</li>\n<li>if it is not lax, then, in addition, T must be a subtype of the union of\n<code>()</code> and the mapping basic type, and the type descriptor for T must\ninclude <code>field-name</code> as an individual-type-descriptor (if the type\ndescriptor is a union, then this requirement must be satisfied by at least one\nmember of the union).</li>\n</ul>\n<p>\nThe static type of the optional-field-access-expr is M|N|E where\n</p>\n<ul>\n<li>N is <code>()</code> if <code>()</code> is a subtype of T or K is not a\nrequired key type for T', and empty otherwise;</li>\n<li>E is <code>error</code> if T' is not a subtype of T?, and empty otherwise (E\ncan only be error in the lax case).</li>\n</ul>\n\n<p>\nAn optional-field-access-expr is evaluated as follows:\n</p>\n<ol>\n<li>expression is evaluated resulting in a value <var>v</var>\n</li>\n<li>if <var>v</var> is <code>()</code>, the result is <code>()</code>\n</li>\n<li>otherwise, if <var>v</var> has basic type error, the result is <var>v</var>\n(this can only happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have basic type mapping, the result is a\nnew error value (this can only happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have a member whose key is field-name,\nthe result is <code>()</code>\n</li>\n<li>otherwise, the result is the member of <var>v</var> whose key is\nfield-name.</li>\n</ol>\n\n</section>\n\n<section>\n<h3 id=\"section_6.16\">6.16 XML attribute access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-attribute-access-expr\">xml-attribute-access-expr</span> := <a href=\"#xml-required-attribute-access-expr\"><span class=\"ntref\">xml-required-attribute-access-expr</span></a> | <a href=\"#xml-optional-attribute-access-expr\"><span class=\"ntref\">xml-optional-attribute-access-expr</span></a>\n<span class=\"ntdfn\" id=\"xml-required-attribute-access-expr\">xml-required-attribute-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.</code> <a href=\"#xml-attribute-name\"><span class=\"ntref\">xml-attribute-name</span></a>\n<span class=\"ntdfn\" id=\"xml-optional-attribute-access-expr\">xml-optional-attribute-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?.</code> <a href=\"#xml-attribute-name\"><span class=\"ntref\">xml-attribute-name</span></a>\n<span class=\"ntdfn\" id=\"xml-attribute-name\">xml-attribute-name</span> := <a href=\"#xml-qualified-name\"><span class=\"ntref\">xml-qualified-name</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n\n<p>\nAn XML attribute access expression provides convenient access to an attribute of\nan XML element. It is a compile-time requirement that the static type of the\nexpression is a subtype of xml.\n</p>\n<p>\nA string representing the name of the attribute is computed at compile-time from\nthe xml-attribute-name. When the xml-attribute-name is an identifier without a\nprefix, the attribute name string is the identifier. When the xml-attribute-name\nhas a prefix, normally the xml-attribute-name is an xml-qualified-name, in which\nthe prefix is an xml-namespace-prefix declared using an xmlns-decl. In this\ncase, the xml-qualified-name is expanded at compile-time into an attribute name\nstring of the form\n</p>\n<pre>\n   {<var>namespace-uri</var>}<var>local-name</var>\n</pre>\n<p>\nwhere the namespace-uri comes from xml-namespace-uri specified in the\nxmlns-decl, and the local-name comes from the identifier following the colon.\n</p>\n<p>\nIt is also allowed for the xml-attribute-name to be specified as a\nqualified-identifier, in which the prefix is a module-prefix declared using an\nimport-decl. In this case the qualified-identifier must refer to a\nmodule-const-decl of type string, and the attribute name string is the value of\nthe referenced constant. This allows e.g. <code>xml:lang</code> to work.\n</p>\n<p>\nAn xml-optional-attribute-access-expr is evaluated as follows. The expression is\nevaluated resulting in an xml value <var>v</var>. If <var>v</var> is an empty\nxml value, the result is <code>()</code>. Otherwise, if <var>v</var> is not a\nsingleton element, the result is an error. Otherwise, let <var>m</var> be that\nelement's attribute map and let <var>k</var> be the attribute name string\ncomputed at compile-time from the xml-attribute-name. If <var>m</var> has a\nmember <var>s</var> with key <var>k</var>, the the result is <var>s</var>.\nOtherwise, the result is <code>()</code>.\n</p>\n<p>\nAn xml-required-attribute-access-expr is evaluated the same as an\nxml-optional-attribute-expr, except that for cases where the result of the\nxml-optional-attribute-expr would be <code>()</code>, the result of the\nxml-required-attribute-access-expr is an error.\n</p>\n<p>\nThe static type of an xml-required-attribute-access-expr is\n<code>string|error</code> The static type of an\nxml-optional-attribute-access-expr is <code>string|error|()</code>.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.17\">6.17 Annotation access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annot-access-expr\">annot-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.@</code> <a href=\"#annot-tag-reference\"><span class=\"ntref\">annot-tag-reference</span></a>\n</pre>\n<p>\nThe annot-tag-reference must refer to an annotation tag declared with an\nannotation declaration. The static type of expression must be a subtype of\n<code>typedesc</code>.\n</p>\n<p>\nAn <code>annot-access-expr</code> is evaluated by first evaluating\n<code>expression</code> resulting in a typedesc value <em>t</em>. If <em>t</em>\nhas an annotation with the tag referenced by <code>annot-tag-reference</code>,\nthen the result of the <code>annot-access-expr</code> is the value of that\nannotation; otherwise, the result is nil.\n</p>\n<p>\nThe static type of the <code>annot-access-expr</code> is T? where T is the type\nof the annotation tag.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.18\">6.18 Member access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"member-access-expr\">member-access-expr</span> := <a href=\"#container-expression\"><span class=\"ntref\">container-expression</span></a> <code>[</code> <a href=\"#key-expression\"><span class=\"ntref\">key-expression</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"container-expression\">container-expression</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"key-expression\">key-expression</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA member-access-expr accesses a member of a container value using its key,\nor a constituent of a sequence value using its index.\n</p>\n<p>\nThe requirements on the static type of container-expr and key-expression are as\nfollows:\n</p>\n<ul>\n<li>if container-expr is a subtype of string or of xml or of basic\ntype list, then the contextually expected type for key-expression is int and\nthe static type of key-expression must be a subtype of int;</li>\n<li>otherwise container-expr must be a subtype of the union of nil and basic\ntype list; in this case the contextually expected type for key-expression is\nstring and the static type of key-expression must be a subtype of string.</li>\n</ul>\n<p>\nA member-access-expr is evaluated as follows:\n</p>\n<ol>\n<li>the container-expression is evaluated to get a value <var>c</var>;</li>\n<li>the key-expression is evaluated to get a value <var>k</var>;</li>\n<li>depending on the basic type of <var>c</var>\n<ul>\n<li>if it is string, and <var>k</var> is &lt; 0 or â¥ the length of\n<var>c</var>, then the evaluation completes abruptly with a panic; otherwise,\nthe result is a string of length 1 containing the character with index\n<var>k</var> in <var>c</var>;</li>\n<li>if it is xml, and <var>k</var> is &lt; 0, then the evaluation completes\nabruptly with a panic; if <var>k</var> is â¥ the length of <var>c</var>, then\nthe result is an empty xml value; otherwise, the result is a singleton xml\nvalue containing the item with index <var>k</var> in <var>c</var>;</li>\n<li>if it is list, and <var>k</var> is &lt; 0 or â¥ the length of\n<var>c</var>, then the evaluation completes abruptly with a panic; otherwise,\nthe result is the member of <var>c</var> with index <var>k</var>;</li>\n<li>if it is mapping, then if <var>c</var> is <code>()</code> or <var>c</var>\ndoes not contain a member with key <var>k</var>, then the result is\n<code>()</code>; otherwise, the result is the member of <var>c</var> with key\n<var>k</var>.</li>\n</ul>\n</li>\n</ol>\n<p>\nLet T the static type of container-expression. If T is a subtype of string, then\nthe static type of the member-access-expr is <a href=\"#built-in_subtypes\"><code>string:Char</code></a>, that is the subtype of\nstrings containing strings of length 1. If T is a subtype of xml&lt;M&gt;, then\nthe static type of the member-access-expr is M|E, where E is the type of the\nempty xml value. Otherwise, let K be the static type of key-expression and\nlet M be the member type of K in T; if T contains nil, or T is a subtype of\nmapping and K is an optional key type for T, then the static type of the\nmember-access-expr is M?, otherwise the static type is M.\n</p>\n\n</section>\n<section>\n<h3 id=\"function_call\">6.19 Function call expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"function-call-expr\">function-call-expr</span> := <a href=\"#function-reference\"><span class=\"ntref\">function-reference</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"function-reference\">function-reference</span> := <a href=\"#variable-reference\"><span class=\"ntref\">variable-reference</span></a>\n<span class=\"ntdfn\" id=\"arg-list\">arg-list</span> :=\n   <a href=\"#positional-args\"><span class=\"ntref\">positional-args</span></a> [<code>,</code> <a href=\"#other-args\"><span class=\"ntref\">other-args</span></a>]\n   | [<a href=\"#other-args\"><span class=\"ntref\">other-args</span></a>]\n<span class=\"ntdfn\" id=\"positional-args\">positional-args</span> := <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a> (<code>,</code> <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a>)*\n<span class=\"ntdfn\" id=\"positional-arg\">positional-arg</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"other-args\">other-args</span> := <a href=\"#named-args\"><span class=\"ntref\">named-args</span></a> | <a href=\"#rest-arg\"><span class=\"ntref\">rest-arg</span></a>\n<span class=\"ntdfn\" id=\"named-args\">named-args</span> := <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a> (<code>,</code> <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a>)*\n<span class=\"ntdfn\" id=\"named-arg\">named-arg</span> := <a href=\"#arg-name\"><span class=\"ntref\">arg-name</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"arg-name\">arg-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"rest-arg\">rest-arg</span> := <code>...</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA function-call-expr is evaluated by constructing an argument list and passing\nthe argument list to the function referred to by the variable-name. If the\nfunction terminates normally, then the result of the function-call-expr is the\nreturn value of the function; otherwise the function-call-expr completes\nabruptly with a panic. The static type of the function-call-expr is the return\ntype of the function type.\n</p>\n<p>\nThe variable-reference must refer to a variable with function type. The type\ndescriptor of that function type is used to construct an argument list from the\nspecified arg-list. Note that it is the type descriptor of the declared type of\nthe variable that is used for this purpose, rather than the runtime type\ndescriptor of the referenced function value.\n</p>\n<p>\nThe expressions occurring in the arg-list are evaluated in the order in which\nthey occur in the arg-list. The result of evaluating each positional-arg is\nadded to the argument list in order. The contextually expected type for the\nexpression in the i-th positional-arg is the type of the i-th parameter.\n</p>\n<p>\nIf there is a rest-arg, then it is evaluated. The result must be a list value.\nEach member of the list value is added to the argument in the order that it\noccurs. The static type of the list value must be such as to guarantee that the\nresulting argument list will conform to the function's declared param-list. The\nrest-arg is not restricted to supplying the part of the argument list that will\nbe bound to a rest-param, and its static type is not restricted to being an\narray type. If there is rest-arg, then no parameter defaults are added.\n</p>\n<p>\nIf there is no rest-arg, then each non-rest parameter that was not supplied by\npositional argument is added in order from a named argument, if there is one,\nand otherwise using the parameter default. An arg-list can only use a named\nargument to specify a parameter if the name of the parameter is visible at the\npoint where the arg-list occurs. The contextually expected type for\nthe expression specifying a named argument is the type declared for the\ncorresponding parameter. A default parameter is computed by calling the closure\nin the type descriptor, passing it the previous arguments in the argument list.\nIt is a compile-time error if there is a non-rest parameter for which there was\nno positional argument and no named argument and which is not defaultable. It is\nalso an error if there is a named argument for a parameter that was supplied by\na positional argument.\n</p>\n<p>\nWhen a function to be called results from the evaluation of an expression that\nis not merely a variable reference, the function can be called by first storing\nthe value of the expression in a variable.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.20\">6.20 Method call expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"method-call-expr\">method-call-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nA <code>method-call-expr</code> either calls a method or calls a function in the\nlang library. The evaluation of the method-call-expr starts by evaluating\n<code>expression</code> resulting in some value <var>v</var>. There is no\ncontextually expected type for <code>expression</code>.\n</p>\n<p>\nIf the static type of <code>expression</code> is a subtype of object, and the\nobject type includes a method named <code>method-name</code>, then the\n<code>method-call-expr</code> is executed by calling that method on\n<var>v</var>. A <code>method-call-expr</code> can be used within a method of a\nservice to call another method of that service other than a resource method; in\nthis case, <code>expression</code> must be <code>self</code>. The\n<code>arg-list</code> is used to construct an argument list that is passed to\nthe method in the same way as with a <code>function-call-expr</code>. A\n<code>method-call-expr</code> cannot be used to call a remote method; it can\nonly be called by a <code>remote-method-call-action</code>. A\n<code>method-call-expr</code> cannot be used to call a resource method.\n</p>\n<p>\nOtherwise, the <code>method-call-expr</code> will be turned into a call to a\nfunction in the lang library <code>m:method-name(expression, arg-list)</code>,\nwhere m is an automatically created module prefix for a module lang.M of the lang\nlibrary, where M is selected as follows.\n</p>\n<ul>\n<li>If the static type of <code>expression</code> is a subtype of some basic\ntype with identifier B, and the module lang.B contains a function\n<code>method-name</code> then M is B. The identifier for a basic type is the\nreserved identifier used in type descriptors for subtypes of that basic type, as\nlisted in the <a href=\"#lang_library\">Lang library</a> section.</li>\n<li>Otherwise, M is <code>value</code>.</li>\n</ul>\n<p>\nIt is a compile-time error if the resulting function call does not satisfy all\nthe constraints that would apply if it has been written explicitly as a\n<code>function-call-expr</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.21\">6.21 Error constructor</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"error-constructor-expr\">error-constructor-expr</span> := <a href=\"#direct-error-constructor-expr\"><span class=\"ntref\">direct-error-constructor-expr</span></a> | <a href=\"#indirect-error-constructor-expr\"><span class=\"ntref\">indirect-error-constructor-expr</span></a>\n<span class=\"ntdfn\" id=\"direct-error-constructor-expr\">direct-error-constructor-expr</span> := <code>error</code> <code>(</code> <a href=\"#direct-error-arg-list\"><span class=\"ntref\">direct-error-arg-list</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"indirect-error-constructor-expr\">indirect-error-constructor-expr</span> := <a href=\"#error-type-reference\"><span class=\"ntref\">error-type-reference</span></a> <code>(</code> <a href=\"#indirect-error-arg-list\"><span class=\"ntref\">indirect-error-arg-list</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"direct-error-arg-list\">direct-error-arg-list</span> := <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a> (<code>,</code> <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a>)*\n<span class=\"ntdfn\" id=\"indirect-error-arg-list\">indirect-error-arg-list</span> := [<a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a> (<code>,</code> <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a>)*]\n</pre>\n<p>\nAn error constructor constructs a new error value. There are two kinds of error\nconstructor: direct and indirect. A direct error constructor specifies the error\nreason string as the first argument to the constructor. An indirect error\nconstructor references an error type that determines the reason string.\n</p>\n<p>\nThe contextually expected type for the positional-arg in a\ndirect-error-constructor-expr is string.\n</p>\n<p>\nThe error-type-reference in an indirect-error-constructor must refer to an\nidentifier named by a type definition whose type descriptor is an error type\ndescriptor, whose reason-type-descriptor is a singleton string. An\nindirect-error-constructor-expr\n<code><var>ET</var>(<var>named-args</var>)</code> where\n<code><var>ET</var></code> refers to a type\n<code>error&lt;<var>S</var>,<var>D</var>&gt;</code>, where\n<code><var>S</var></code> is a singleton string, is equivalent to a\ndirect-error-constructor-expr <code>&lt;<var>ET</var>&gt;error(<var>S</var>,\n<var>named-args</var>)</code>.\n</p>\n<p>\nEvaluating the error-constructor-expr creates a new detail mapping. Each\nnamed-arg specifies a field of the error detail mapping; the static type of each\nnamed-arg must be a pure type. If there is a contextually-expected-type for a\ndirect-error-constructor-expr and the applicable contextually expected type is\nan error type descriptor (rather than a union) with detail type <var>D</var>,\nthen the error detail mapping will also have a field for any defaultable fields\nof <var>D</var> for which no named-arg was specified. The contextually expected\ntype for each named-arg is determined by the applicable contextually type in the\nsame way as for a mapping-constructor-expr. The detail mapping for an\nindirect-error-constructor-expr is constructed as if by the equivalent\ndirect-error-constructor-expr, and so in this case there will always be an\napplicable contextually expected type that is an error type descriptor. The\ndetail mapping is constructed as immutable, with its members being the result of\nappplying the ImmutableClone abstract operation to the result of evaluating each\nnamed-arg and every defaultable arg.\n</p>\n<p>\nThe stack trace in the constructed error value describes the execution stack at\nthe point where the error constructor was evaluated.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.22\">6.22 Anonymous function expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"anonymous-function-expr\">anonymous-function-expr</span> := <a href=\"#explicit-anonymous-function-expr\"><span class=\"ntref\">explicit-anonymous-function-expr</span></a> | <a href=\"#infer-anonymous-function-expr\"><span class=\"ntref\">infer-anonymous-function-expr</span></a>\n<span class=\"ntdfn\" id=\"explicit-anonymous-function-expr\">explicit-anonymous-function-expr</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>function</code> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> (<a href=\"#block-function-body\"><span class=\"ntref\">block-function-body</span></a>|<a href=\"#expr-function-body\"><span class=\"ntref\">expr-function-body</span></a>)\n</pre>\n<p>\nEvaluating an anonymous-function-expr creates a closure, whose basic type is\nfunction. With an explicit-anonymous-function-expr, the type of the function is\nspecified explicitly as usual with a function-signature. With an\ninfer-anonymous-function-expr, the type of the function is inferred.\n</p>\n<p>\nIf block-function-body refers to a block-scope variable defined\noutside of the block-function-body, the closure will capture a reference to that\nvariable; the captured reference will refer to the same storage as the original\nreference not a copy.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"expr-function-body\">expr-function-body</span> := <code>=&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nAn expr-function-body is used for an expression-bodied function, that is a\nfunction whose body is specified by an expression. An expr-function-body of the\nform <code>=&gt; <var>E</var></code> is short for a block-function-body <code>{\nreturn <var>E</var>}</code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"infer-anonymous-function-expr\">infer-anonymous-function-expr</span> := <a href=\"#infer-param-list\"><span class=\"ntref\">infer-param-list</span></a> <a href=\"#expr-function-body\"><span class=\"ntref\">expr-function-body</span></a>\n<span class=\"ntdfn\" id=\"infer-param-list\">infer-param-list</span> :=\n   <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n   | <code>(</code>[<a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> (<code>,</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>)*]<code>)</code>\n</pre>\n<p>\nAn infer-anonymous-function-expr can only be used in a context where a function\ntype is expected. The types of the parameters are inferred from the expected\nfunction type. The scope of the parameters is <code>expr-function-body</code>.\nThe static type of the infer-anonymous-function-expr will be a function type\nwhose return type is the static type of the <code>expression</code> in\n<code>expr-function-body</code>. If the contextually expected type for the\n<code>anonymous-function-expr</code> is a function type with return type T, then\nthe contextually expected type for <code>expression</code> in\n<code>expr-function-body</code> is T.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_6.23\">6.23 Let expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"let-expr\">let-expr</span> := <code>let</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a> [<code>,</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a>]* <code>in</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"let-var-decl\">let-var-decl</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n\n<p>\nA let-expr binds variables and then evaluates an expression with those variables in scope.\n</p>\n<p>\nA let-expr <code>let T B = E<sub>1</sub> in E<sub>2</sub></code> is evaluated as\nfollows. E<sub>1</sub> is evaluated resulting in a value v. The typed binding\npattern T B is matched to v, causing assignments to the variables occuring in B.\nThen E<sub>2</sub> is evaluated with those variables in scope; the resulting\nvalue is the result of the let-expr.\n</p>\n<p>\nA let-expr <code>let D<sub>1</sub>, D<sub>2</sub>,...,D<sub>n</sub> in E</code>\nis transformed into <code>let D<sub>1</sub> in let D<sub>2</sub> in ... let\nD<sub>n</sub> in E</code>.\n</p>\n<p>\nThe typed-binding-pattern is used unconditionally, meaning that it is a compile\nerror if the static types do not guarantee the success of the match. If the\ntyped-binding-pattern uses <code>var</code>, then the type of the variable is\ninferred from the precise static type of the expression following\n<code>=</code>.\n</p>\n<p>\nSince expressions cannot modify variables, the variables bound in a let-var-decl\nare implicitly final.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_6.24\">6.24 Type cast expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"type-cast-expr\">type-cast-expr</span> := <code>&lt;</code> <a href=\"#type-cast-param\"><span class=\"ntref\">type-cast-param</span></a> <code>&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"type-cast-param\">type-cast-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> | <a href=\"#annots\"><span class=\"ntref\">annots</span></a>\n</pre>\n<p>\nNormally, the parameter for a type-cast-expr includes a type-descriptor.\nHowever, it is also allowed for the parameter to consist only of annotations; in\nthis case, the only effect of the type cast is for the contextually expected\ntype for expression to be augmented with the specified annotations. The rest of\nthis subsection describes the normal case, where the type-cast-expr includes a\ntype-descriptor.\n</p>\n<p>\nA <code>type-cast-expr</code> casts the value resulting from evaluating\n<code>expression</code> to the type described by the type-descriptor, performing\na numeric conversion if required.\n</p>\n<p>\nA type-cast-expr is evaluated by first evaluating <code>expression</code>\nresulting in a value v. Let T be the type described by\n<code>type-descriptor</code>. If v belongs T, then the result of the\ntype-cast-expr is v. Otherwise, if T includes shapes from exactly one basic\nnumeric type N and v is belongs to another basic numeric type, then let n be\nNumericConvert(N, v); if n is not an error and n belongs to T, then the result\nof the type-cast-expr is n. Otherwise, the evaluation of the type-cast-expr\ncompletes abruptly with a panic.\n</p>\n<p>\nLet T be the static type described by <code>type-descriptor</code>, and let TE\nbe the static type of <code>expression</code>. Then the static type of the\n<code>type-cast-expr</code> is the intersection of T and TE', where TE' is TE\nwith its numeric shapes transformed to take account to the possibility of the\nnumeric conversion specified in the previous paragraph.\n</p>\n<p>\nThe <code>type-descriptor</code> provides the contextually expected type for\n<code>expression</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.25\">6.25 Typeof expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"typeof-expr\">typeof-expr</span> := <code>typeof</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe result of a <code>typeof-expr</code> is a typedesc value for the runtime\ntype of v, where v is the result of evaluating <code>expression</code>.\n</p>\n<p>\nThe runtime type of v is the narrowest type to which v belongs.\n</p>\n<ul>\n<li>When v is a simple value, the resulting typedesc will describe a type\nconsisting of a single shape, which is the shape of the value. The typedesc will\nnot have any annotations. Each evaluation of <code>typeof</code> with a simple\nvalue produces a new typedesc value.</li>\n<li>When v is a reference value, each evaluation of <code>typeof</code> with an\nidentical reference value produces an identical typedesc value. The type\ndescriptor resulting from <code>typeof</code> will be the same as the type\ndescriptor used to construct the value. For containers, this is the same as the\ninherent type; when the container is immutable, it will be a singleton type. For\nan object, this is the same as the type descriptor used with new. Any\nannotations that were attached to the type descriptor used to construct the\nvalue will this be available on the constructed value.</li>\n</ul>\n<p>\nThe static type of <code>typeof-expr</code> is typedesc&lt;T&gt;, where T is the\nstatic type of <code>expression</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.26\">6.26 Unary expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"unary-expr\">unary-expr</span> :=\n   <code>+</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <code>-</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <code>~</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <code>!</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n\n</pre>\n<p>\nThe unary <code>-</code> operator performs negation. The static type of the\noperand must be a number; the static type of the result is the same basic type\nas the static type of the operand. The semantics for each basic type are as\nfollows:\n</p>\n<ul>\n<li>int: negation for int is the same as subtraction from zero; a panic will\noccur on overflow, which happens when the operand is -2<sup>63</sup>)</li>\n<li>float, decimal: negation for floating point types corresponds to the negate\noperation as defined by IEEE 754-2008 (this is not the same as subtraction from\nzero);</li>\n</ul>\n<p>\nIf the contextually expected type for a <code>-</code> expression is T, then the\ncontextualy expected type for the operand expressions is T', where a value v is\nin T' if it belongs to int, decimal or float, and T contains a value with the\nsame basic type as v.\n</p>\n<p>\nThe unary + operator returns the value of its operand expression. The static\ntype of the operand must be a number, and the static type of the result is the\nsame as the static type of the operand expression.\n</p>\n<p>\nThe ~ operator inverts the bits of its operand expression. The static type of\nthe operand must be int, and the static type of the result is an int.\n</p>\n<p>\nThe <code>!</code> operator performs logical negation. The static type of the\noperand expression must be boolean. The <code>!</code> operator returns true if\nits operand is false and false if its operand is true.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.27\">6.27 Multiplicative expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"multiplicative-expr\">multiplicative-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>*</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>/</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>%</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe <code>*</code> operator performs multiplication; the <code>/</code> operator\nperforms division; the <code>%</code> operator performs remainder.\n</p>\n<p>\nThe static type of both operand expressions is required to be a subtype of the\nsame basic type; this basic type will be the static type of the result. The\nfollowing basic types are allowed:\n</p>\n<ul>\n<li>int\n<ul>\n<li>\n<code>*</code> performs integer multiplication; a panic will occur on overflow</li>\n<li>\n<code>/</code> performs integer division, with any fractional part discarded\nie with truncation towards zero; a panic will occur on division by zero or\noverflow, which happens if the first operand is -2<sup>63</sup> and the second\noperand is -1</li>\n<li>\n<code>%</code> performs integer remainder consistent with integer division,\nso that if <code><var>x</var>/<var>y</var></code> does not result in a panic,\nthen <code>(<var>x</var>/<var>y</var>)*<var>y</var> +\n(<var>x</var>%<var>y</var>)</code> is equal to <code><var>x</var></code>; a\npanic will occur if the second operand is zero; if the first operand is\n-2<sup>63</sup> and the second operand is -1, then the result is 0</li>\n</ul>\n</li>\n<li>float, decimal\n<ul>\n<li>\n<code>*</code> performs the multiplication operation with the destination\nformat being the same as the source format, as defined by IEEE 754-2008; this\nnever causes a panic to occur</li>\n<li>\n<code>/</code> performs the division operation with the destination format\nbeing the same as the source format, as defined by IEEE 754-2008; this never\ncauses a panic to occur</li>\n<li>\n<code>%</code> performs a remainder operation; the remainder is not the\nIEEE-defined remainder operation but is instead a remainder operation analogous\nto integer remainder; more precisely,\n<ul>\n<li>if <code><var>x</var></code> is NaN or <code><var>y</var></code> is NaN or\n<code><var>x</var></code> is an infinity or <code><var>y</var></code> is a zero,\nthen <code><var>x</var> % <var>y</var></code> is NaN</li>\n<li>for finite <code>x</code>, and infinite <code>y</code>, <code><var>x</var> %\n<var>y</var></code> is <code><var>x</var></code>\n</li>\n<li>for finite <code><var>x</var></code> and finite non-zero\n<code><var>y</var></code>, <code><var>x</var> % <var>y</var></code> is equal to\nthe result of rounding <code><var>x</var> - (<var>y</var> Ã <var>n</var>)</code>\nto the nearest representable value using the roundTiesToEven rounding mode,\nwhere <code><var>n</var></code> is the integer that is nearest to the\nmathematical quotient of <code><var>x</var></code> and <code><var>y</var></code>\nwithout exceeding it in magnitude; if the result is zero, then its sign is that\nof <code><var>x</var></code>\n</li>\n<li>no exceptions are thrown</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the contextually expected type for a multiplicative-expr is T, then the\ncontextualy expected type for both operand expressions is T', where a value v is\nin T' if it belongs to int, decimal or float, and T contains a value with the\nsame basic type as v.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.28\">6.28 Additive expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"additive-expr\">additive-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>+</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe <code>+</code> operator is used for both addition and concatenation; the\n<code>-</code> operator is used for subtraction.\n</p>\n<p>\nIt is required that either\n</p>\n<ul>\n<li>the static type of both operand expressions is a subtype of the same basic\ntype, in which case this basic type will be the static type of the result,\nor</li>\n<li>the static type of one operand expression must be a subtype of xml and of\nthe other operand expression must be a subtype of string, in which case the\nstatic type of the result is xml</li>\n</ul>\n<p>\nThe semantics for each basic type is as follows:\n</p>\n<ul>\n<li>int\n<ul>\n<li>\n<code>+</code> performs integer addition; a panic will occur on\noverflow</li>\n<li>\n<code>-</code> performs integer subtraction; a panic will occur on\noverflow</li>\n</ul>\n</li>\n<li>float, decimal\n<ul>\n<li>\n<code>+</code> performs the addition operation with the destination format\nbeing the same as the source format, as defined by IEEE 754-2008; this never\ncauses a panic to occur</li>\n<li>\n<code>-</code> performs the subtraction operation with the destination\nformat being the same as the source format, as defined by IEEE 754-2008; this\nnever causes a panic to occur</li>\n</ul>\n</li>\n<li>string, xml\n<ul>\n<li>if both operands are a string, then the result is a string that is the\nconcatenation of the operands</li>\n<li>if both operands are xml, then the result is a new xml value that is the\nconcatenation of the operands; this does not perform a copy on\nthe constituents of the operand values</li>\n<li>if one operand is an empty string and one is xml, then\nthe result is the xml value operand</li>\n<li>if one operand is a non-empty string and one is xml, then the string is\ntreated as if it were an xml singleton text value whose characters are the same\nas the characters of the string;</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the contextually expected type for a multiplicative-expr is T, then the\ncontextualy expected type for both operand expressions is T', where a value v is\nin T' if it belongs to int, decimal, float, string or xml and T contains a value\nwith the same basic type as v.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.29\">6.29 Shift expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"shift-expr\">shift-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&lt;&lt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;&gt;&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA shift-expr performs a bitwise shift. Both operand expressions must have static\ntype that is a subtype of int. The left hand operand is the value to be shifted;\nthe right hand value is the shift amount; all except the bottom 6 bits of the\nshift amount are masked out (as if by x &amp; 0x3F). Then a bitwise shift is\nperformed depending on the operator:\n</p>\n<ul>\n<li>\n<code>&lt;&lt;</code> performs a left shift, the bits shifted in on the\nright are zero</li>\n<li>\n<code>&gt;&gt;</code> performs a signed right shift; the bits shifted in on the\nleft are the same as the most significant bit</li>\n<li>\n<code>&gt;&gt;&gt;</code> performs a unsigned right shift, the bits shifted in on the\nleft are zero</li>\n</ul>\n<p>\nIf the operator is &gt;&gt; or &gt;&gt;&gt; and the left hand operand is a\nsubtype of <code>int:Unsigned<var>K</var></code> when <code><var>K</var></code>\nis 8, 16 or 32, then the static type of the result is\n<code>int:Unsigned<var>N</var></code> where <code><var>N</var></code> is the\nsmallest such <code><var>K</var></code>; otherwise, the static type of the\nresult is <code>int</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.30\">6.30 Range expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"range-expr\">range-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>...</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>..&lt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe result of a range-expr is a new object belonging to the abstract object type\nIterable&lt;int,()&gt; that will iterate over a sequence of integers in increasing\norder, where the sequence includes all integers n such that\n</p>\n<ul>\n<li>the value of the first expression is less than or equal to n, and</li>\n<li>n is\n<ul>\n<li>if the operator is <code>...</code>, less than or equal to the value of the\nsecond expression</li>\n<li>if the operator is <code>..&lt;</code>, less than the value of the second\nexpression</li>\n</ul>\n</li>\n</ul>\n<p>\nIt is a compile error if the static type of either expression is not a subtype\nof int.\n</p>\n<p>\nA range-expr is designed to be used in a foreach statement, but it can be used\nelsewhere.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.31\">6.31 Numerical comparison expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"numerical-comparison-expr\">numerical-comparison-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&lt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&lt;=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA numerical-comparison-expr compares two numbers.\n</p>\n<p>\nThe static type of both operands must be of the same basic type, which must be\nint, float or decimal. The static type of the result is boolean.\n</p>\n<p>\nFloating point comparisons follow IEEE, 754-2008, so\n</p>\n<ul>\n<li>if either operand is NaN, the result is false</li>\n<li>positive and negative zero compare equal</li>\n</ul>\n</section>\n<section>\n<h3 id=\"section_6.32\">6.32 Type test expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"is-expr\">is-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>is</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n</pre>\n<p>\nAn is-expr tests where a value belongs to a type.\n</p>\n<p>\nAn is-expr is evaluated by evaluating the expression yielding a result v. If v\nbelongs to the type denoted by type-descriptor, then the result of the is-expr\nis true; otherwise the result of the is-expr is false.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.33\">6.33 Equality expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"equality-expr\">equality-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>==</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>!=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>===</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>!==</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nAn equality-expr tests whether two values are equal. For all four operators, it\nis a compile time error if the intersection of the static types of the operands\nis empty.\n</p>\n<p>\nThe === operator tests for exact equality. The !== operator results in the\nnegation of the result of the === operator. Two values v<sub>1</sub> and\nv<sub>2</sub> are exactly equal if they have the same basic type T and\n</p>\n<ul>\n<li>T is simple type, and  v<sub>1</sub> and v<sub>2</sub> are identical values\nwithin the possible of values allowed for T;</li>\n<li>T is a sequence type, and the length of v<sub>1</sub> is the same as the length of v<sub>2</sub> and\n<ul>\n<li>the length is 1, and either\n<ul>\n<li>v<sub>1</sub> and v<sub>2</sub> both have storage identity and that storage\nidentity is the same, or</li>\n<li>v<sub>1</sub> and v<sub>2</sub> both do not have storage identity and the\nshape of v<sub>1</sub> is the same as the shape of v<sub>2</sub>\n</li>\n</ul>\n</li>\n<li>the length is not 1, and every constituent of v<sub>1</sub> is exactly equal\nas the corresponding constituent of v<sub>2</sub>;</li>\n</ul>\n</li>\n<li>T is a structural or behavioural type, and the storage identity of\nv<sub>1</sub> is the same as the storage identity of v<sub>2</sub>.</li>\n</ul>\n<p>\nThe == operator tests for deep equality. The != operator results in the negation\nof the result of the == operator. For both == and !=, both operands must have a\nstatic type that is pure. Two values v1, v2 are deeply equal if SameShape(v1,\nv2) is true.\n</p>\n<p>\nNote that === and == are the same for simple values except for floating point types.\n</p>\n<p>\nFor the float type, the operators differ as regards floating point zero: ==\ntreats positive and negative zero from the same basic type as equal whereas ===\ntreats them as unequal. Both == and === treat two NaN values from the same basic\ntype as equal. This means that neither of these operators correspond to\noperations defined by IEEE 754-2008, because they do not treat NaN in the\nspecial way defined for those operations.\n</p>\n<p>\nFor the decimal type, the operators differ in whether they consider the\nprecision of the value. For example, <code>1.0 == 1.00</code> is true but\n<code>1.0 === 1.00</code> is false.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.34\">6.34 Binary bitwise expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"binary-bitwise-expr\">binary-bitwise-expr</span> :=\n   <a href=\"#bitwise-and-expr\"><span class=\"ntref\">bitwise-and-expr</span></a>\n   | <a href=\"#bitwise-xor-expr\"><span class=\"ntref\">bitwise-xor-expr</span></a>\n   | <a href=\"#bitwise-or-expr\"><span class=\"ntref\">bitwise-or-expr</span></a>\n<span class=\"ntdfn\" id=\"bitwise-and-expr\">bitwise-and-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&amp;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"bitwise-xor-expr\">bitwise-xor-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>^</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"bitwise-or-expr\">bitwise-or-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>|</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA binary-bitwise-expr does a bitwise AND, XOR, or OR operation on its operands.\n</p>\n<p>\nThe static type of both operands must be a subtype of int. The static type of\nthe result is as follows:\n</p>\n<ul>\n<li>for AND, if the type of either operand is a subtype of\n<code>int:Unsigned<var>K</var></code> when <code><var>K</var></code> is 8, 16 or\n32, then the static type of the result is <code>int:Unsigned<var>N</var></code>\nwhere <code><var>N</var></code> is the smallest such <code><var>K</var></code>;\notherwise, the static type of the result is <code>int</code>;</li>\n<li>for XOR or OR, if the type of both operands is a\nsubtype of <code>int:Unsigned<var>K</var></code> when <code><var>K</var></code>\nis 8, 16 or 32, then the static type of the result is\n<code>int:Unsigned<var>N</var></code> where <code><var>N</var></code> is the\nsmallest such <code><var>K</var></code>; otherwise, the static type of the result\nis <code>int</code>.</li>\n</ul>\n</section>\n\n<section>\n<h3 id=\"section_6.35\">6.35 Logical expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"logical-expr\">logical-expr</span> := <a href=\"#logical-and-expr\"><span class=\"ntref\">logical-and-expr</span></a> | <a href=\"#logical-or-expr\"><span class=\"ntref\">logical-or-expr</span></a>\n<span class=\"ntdfn\" id=\"logical-and-expr\">logical-and-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&amp;&amp;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"logical-or-expr\">logical-or-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>||</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n\n<p>\nThe static type of each expression in a logical-expr must be a subtype of\nboolean.\n</p>\n<p>\nA logical-and-expr is evaluated as follows:\n</p>\n<ol>\n<li>the left-hand expression is evaluated, resulting in a value <var>x</var>;</li>\n<li>if <var>x</var> is <code>false</code>, then the result of the\nlogical-and-expr is <var>x</var>, and the right-hand expression is not\nevaluated;</li>\n<li>otherwise, the result of the logical-and-expr is the result of evaluating\nthe right-hand expression.</li>\n</ol>\n<p>\nA logical-or-expr is evaluated as follows:\n</p>\n<ol>\n<li>the left-hand expression is evaluated, resulting in a value <var>x</var>;</li>\n<li>if <var>x</var> is <code>true</code>, then the result of the\nlogical-or-expr is <var>x</var>, and the right-hand expression is not\nevaluated;</li>\n<li>otherwise, the result of the logical-or-expr is the result of evaluating\nthe right-hand expression.</li>\n</ol>\n</section>\n\n<section>\n<h3 id=\"section_6.36\">6.36 Conditional expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"conditional-expr\">conditional-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>:</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?:</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nL <code>?:</code> R is evaluated as follows:\n</p>\n<ol>\n<li>Evaluate L to get a value x</li>\n<li>If x is not nil, then return x.</li>\n<li>Otherwise, return the result of evaluating R.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_6.37\">6.37 Checking expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"checking-expr\">checking-expr</span> := <a href=\"#checking-keyword\"><span class=\"ntref\">checking-keyword</span></a> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"checking-keyword\">checking-keyword</span> := <code>check</code> | <code>checkpanic</code>\n</pre>\n<p>\nEvaluates expression resulting in value v. If v has basic type error, then\n</p>\n<ul>\n<li>if the checking-keyword is <code>check</code>, then the check-expression\ncompletes abruptly with a check-fail with associated value v;</li>\n<li>if the checking-keyword is <code>checkpanic</code>, then the check-expression\ncompletes abruptly with a panic with associated value v.</li>\n</ul>\n<p>\nIf the static type of expression e is T|E, where E is a subtype of error, then\nthe static type of check e is T.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.38\">6.38 Trap expression</h3>\n<p>\nThe trap expression stops a panic and gives access to the error value associated\nwith the panic.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"trap-expr\">trap-expr</span> := <code>trap</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>  \n<p>\nSemantics are:\n</p>\n<ul>\n<li>Evaluate <code>expression</code> resulting in value v\n<ul>\n<li>If evaluation completes abruptly with panic with associated value e, then\nresult of trap-exp is e</li>\n<li>Otherwise result of trap-expr is v</li>\n</ul>\n</li>\n<li>If type of <code>expr</code> is T, then type of <code>trap expr</code> is\nT|error.</li>\n</ul>\n</section>\n\n<section>\n<h3 id=\"section_6.39\">6.39 Query expression</h3>\n<p>\nA query expression provides a language-integrated query feature using SQL-like\nsyntax. In this version of Ballerina, the functionality is similar to a list\ncomprehensions; future versions will provided richer functionality.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"query-expr\">query-expr</span> := <a href=\"#query-pipeline\"><span class=\"ntref\">query-pipeline</span></a> <a href=\"#select-clause\"><span class=\"ntref\">select-clause</span></a>\n<span class=\"ntdfn\" id=\"query-pipeline\">query-pipeline</span> := <a href=\"#from-clause\"><span class=\"ntref\">from-clause</span></a> <a href=\"#intermediate-clause\"><span class=\"ntref\">intermediate-clause</span></a>*\n<span class=\"ntdfn\" id=\"intermediate-clause\">intermediate-clause</span> :=\n   <a href=\"#from-clause\"><span class=\"ntref\">from-clause</span></a>\n   | <a href=\"#where-clause\"><span class=\"ntref\">where-clause</span></a>\n   | <a href=\"#let-clause\"><span class=\"ntref\">let-clause</span></a>\n</pre>\n<p>\nA query expression consists of a sequence of clauses. The semantics of clauses\nis specified in terms of transforming a sequence of frames, where a frame is a\nbinding of variables to values. The input to each clause is a sequence of\nframes. As each clause is executed, it iterates over its input frames and emits\noutput: the final clause, which is a <code>select</code> clause, emits output\n<em>values</em>; the other clauses emit output <em>frames</em>. When a\nquery-expr is evaluated, its clauses are executed in a pipeline by making the\nsequence of frames emitted by one clause be the input to the next clause. Each\nclause in the pipeline is executed lazily, pulling input from its preceding\nclause. The input to the first clause is a single empty frame.\n</p>\n<p>\nThe execution of a clause may complete early with an error value, in which case\nthis error value is the result of the query. Otherwise, the result of evaluating\na query expression is a single value, which is constructed from the sequence of\nvalues emitted by the last clause. The result must be one of the following basic\ntypes:\n</p>\n<ul>\n<li>list - the constructed list has a member for each emitted value; every\nemitted value must beloing to type T, where T[] is the type of the constructed\nvalue</li>\n<li>table - the constructed table has a row for each emitted value;\nevery emitted value must belong to type T, where the constructed value belongs\nto type table&lt;T&gt;</li>\n<li>string - the constructed string is the concatenation of the emitted values;\nevery emitted value must be of type string</li>\n<li>xml - the constructed xml value is the concatenation of the emitted values;\nevery emitted value must be of type xml</li>\n</ul>\n<p>\nThe applicable contextually expected type determines which basic type is\nconstructed. If there is no contextually expected type, then it is determined\nfrom the static type of the expression in the initial <code>from</code> clause;\nit is a compile-time error if this static type is not a subtype of one of the\nbasic types that a query expression can construct.\n</p>\n<p>\nVariables bound by the clauses of a query-pipeline are implicitly final, and\ncannot be modified.\n</p>\n\n<section>\n<h4 id=\"section_6.39.1\">6.39.1 From clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"from-clause\">from-clause</span> := <code>from</code> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>in</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>from</code> clause is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var>\n<ul>\n<li>evaluate the <code>in</code> expression with <var>f</var> in scope resulting\nin an iterable value <var>c</var>;</li>\n<li>create an Iterator object <var>i</var> from <var>c</var>\n</li>\n<li>do the following in a loop <var>L</var>\n<ul>\n<li>call <code><var>i</var>.next()</code> resulting in a value <var>r</var>;</li>\n<li>if <var>r</var> is an error, then complete execution of the from-clause\nearly with error <var>r</var>;</li>\n<li>if <var>r</var> is <code>()</code>, stop loop <var>L</var>;</li>\n<li>let <var>v</var> be <code><var>r</var>.value</code>;</li>\n<li>emit a frame consisting of <var>f</var> augmented with the variables\nresulting from binding typed-binding-pattern to <var>v</var>.</li>\n</ul>\n</li>  \n</ul>\n</li>  \n</ul>\n</section>\n\n<section>\n<h4 id=\"section_6.39.2\">6.39.2 Where clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"where-clause\">where-clause</span> := <code>where</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>where</code> clause is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var> \n<ul>\n<li>execute the <code>expression</code> with <var>f</var> in scope resulting in\nvalue <var>b</var>;</li>\n<li>if <var>b</var> is true, emit <var>f</var>.</li>\n</ul>\n</li> \n</ul>\n</section>\n\n<section>\n<h4 id=\"section_6.39.3\">6.39.3 Let clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"let-clause\">let-clause</span> := <code>let</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a> [<code>,</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a>]* \n</pre>\n<p>\nA <code>let</code> clause consisting of a single let-var-decl is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var> \n<ul>\n<li>evaluate the expression with <var>f</var> in scope resulting in a value <var>v</var>;</li>\n<li>emit a frame consisting of <var>f</var> augmented with the result of binding\ntype-binding-pattern to <var>v</var>.</li>\n</ul>\n</li> \n</ul>\n<p>\nA <code>let</code> clause with more than one <code>let-var-decl</code> is\ntransformed into multiple <code>let</code> clauses: <code>let x<sub>1</sub> =\nE<sub>1</sub>, x<sub>2</sub> = E<sub>2</sub></code> is transformed into\n<code>let x<sub>1</sub> = E<sub>1</sub> let x<sub>2</sub> =\nE<sub>2</sub></code>.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_6.39.4\">6.39.4 Select clause</h4>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"select-clause\">select-clause</span> := <code>select</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>select</code> clause is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var> \n<ul>\n<li>evaluate the expression with <var>f</var> in scope resulting in value <var>v</var>\n</li>\n<li>emit <var>v</var>\n</li> \n</ul>\n</li> \n</ul>\n</section>\n</section>\n<section>\n<h3 id=\"section_6.40\">6.40 XML navigation expression</h3>\n<p>\nXML navigation expressions allow for convenient navigation of XML element structure,\nin a similar way to XPath.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-navigate-expr\">xml-navigate-expr</span> := <a href=\"#xml-filter-expr\"><span class=\"ntref\">xml-filter-expr</span></a> | <a href=\"#xml-step-expr\"><span class=\"ntref\">xml-step-expr</span></a>\n</pre>\n<section>\n<h4 id=\"section_6.40.1\">6.40.1 XML name pattern</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-name-pattern\">xml-name-pattern</span> := <a href=\"#xml-atomic-name-pattern\"><span class=\"ntref\">xml-atomic-name-pattern</span></a> [<code>|</code> <a href=\"#xml-atomic-name-pattern\"><span class=\"ntref\">xml-atomic-name-pattern</span></a>]*\n\n<span class=\"ntdfn\" id=\"xml-atomic-name-pattern\">xml-atomic-name-pattern</span> :=\n  <code>*</code>\n  | <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n  | <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> <code>:</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n  | <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> <code>:</code> <code>*</code>\n</pre>\n\n<p>\nAn XML name pattern matches a string specifying the name of an XML element.\n</p>\n<p>\nAn xml-atomic-name-pattern that is <code>*</code> matches any name.\n</p>\n<p>\nAn xml-namespace-prefix in an xml-atomic-name-pattern must be declared by an\nxmlns-decl. If there is an in-scope default namespace (declared by an\nxmlns-decl), an xml-atomic-pattern that is just an identifier specifies a\nname in that default namespace.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.40.2\">6.40.2 XML filter expression</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-filter-expr\">xml-filter-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n</pre>\n<p>\nAn xml-filter-expr selects constituents of a sequence that are elements with a\nname matching a specified name pattern. The static type of the expression must\nbe a subtype of xml. The static type of the xml-filter-expr is\n<code>xml&lt;xml:Element&gt;</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.40.3\">6.40.3 XML step expression</h4>\n<p>\nAn xml-step-expr provides access to the children or descendants of an element,\nsimilar to a location path in XPath.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-step-expr\">xml-step-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#xml-step-start\"><span class=\"ntref\">xml-step-start</span></a> <a href=\"#xml-step-extend\"><span class=\"ntref\">xml-step-extend</span></a>*\n\n<span class=\"ntdfn\" id=\"xml-step-start\">xml-step-start</span> :=\n   <a href=\"#xml-all-children-step\"><span class=\"ntref\">xml-all-children-step</span></a>\n   | <a href=\"#xml-element-children-step\"><span class=\"ntref\">xml-element-children-step</span></a>\n   | <a href=\"#xml-element-descendants-step\"><span class=\"ntref\">xml-element-descendants-step</span></a>\n<span class=\"ntdfn\" id=\"xml-all-children-step\">xml-all-children-step</span> := <code>/*</code>\n<span class=\"ntdfn\" id=\"xml-element-children-step\">xml-element-children-step</span> := <code>/&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n<span class=\"ntdfn\" id=\"xml-element-descendants-step\">xml-element-descendants-step</span> := <code>/**/&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n\n<span class=\"ntdfn\" id=\"xml-step-extend\">xml-step-extend</span> :=\n   <code>.&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n   | <code>[</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>]</code>\n   | <code>.</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nThe static type of the expression must be a subtype of xml.\n</p>\n<p>\nAn xml-step-expr that starts with an xml-all-children-step\n</p>\n<pre>\n   <var>E</var> /* <var>X</var>\n</pre>\n<p>\nis equivalent to\n</p>\n<pre>\n   xml:map(xml:elements(<var>E</var>), v =&gt; xml:getChildren(v) <var>X</var>)\n</pre>\n<p>\nwhere <code>v</code> is a variable name not used in <code><var>X</var></code>.\n</p>\n<p>\nAn xml-step-expr that starts with an xml-element-children-step\n</p>\n<pre>\n   <var>E</var> /&lt; <var>NP</var> &gt; <var>X</var>\n</pre>\n<p>\nis equivalent to\n</p>\n<pre>\n   xml:map(xml:elements(<var>E</var>), v =&gt; xml:getChildren(v) .&lt;<var>NP</var>&gt; <var>X</var>)\n</pre>\n<p>\nwhere <code>v</code> is a variable name not used in <code><var>X</var></code>.\n</p>\n<p>\nAn xml-step-expr that starts with an xml-element-descendants-step\n</p>\n<pre>\n   <var>E</var> /**/&lt; <var>NP</var> &gt; <var>X</var>\n</pre>\n<p>\nis equivalent to\n</p>\n<pre>\n   xml:map(xml:elements(<var>E</var>), v =&gt; xml:getDescendants(v) .&lt;<var>NP</var>&gt; <var>X</var>)\n</pre>\n<p>\nwhere <code>v</code> is a variable name not used in <code><var>X</var></code>.\n</p>\n</section>\n</section>\n</section>\n<section>\n<h2 id=\"actions_statements\">7. Actions and statements</h2>\n<section>\n<h3 id=\"section_7.1\">7.1 Actions</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"action\">action</span> :=\n   <a href=\"#start-action\"><span class=\"ntref\">start-action</span></a>\n   | <a href=\"#wait-action\"><span class=\"ntref\">wait-action</span></a>\n   | <a href=\"#send-action\"><span class=\"ntref\">send-action</span></a>\n   | <a href=\"#receive-action\"><span class=\"ntref\">receive-action</span></a> \n   | <a href=\"#flush-action\"><span class=\"ntref\">flush-action</span></a>\n   | <a href=\"#remote-method-call-action\"><span class=\"ntref\">remote-method-call-action</span></a>\n   | <a href=\"#query-action\"><span class=\"ntref\">query-action</span></a>\n   | <a href=\"#checking-action\"><span class=\"ntref\">checking-action</span></a>\n   | <a href=\"#trap-action\"><span class=\"ntref\">trap-action</span></a>\n   | <code>(</code> <a href=\"#action\"><span class=\"ntref\">action</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"action-or-expr\">action-or-expr</span> := <a href=\"#action\"><span class=\"ntref\">action</span></a> | <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"checking-action\">checking-action</span> := <a href=\"#checking-keyword\"><span class=\"ntref\">checking-keyword</span></a> <a href=\"#action\"><span class=\"ntref\">action</span></a>\n<span class=\"ntdfn\" id=\"trap-action\">trap-action</span> := <code>trap</code> <a href=\"#action\"><span class=\"ntref\">action</span></a>\n</pre>\n<p>\nActions are an intermediate syntactic category between expressions and\nstatements. Actions are similar to expressions, in that they yield a value.\nHowever, an action cannot be nested inside an expression; it can only occur as\npart of a statement or nested inside other actions. This is because actions are\nshown in the sequence diagram in the graphical syntax.\n</p>\n<p>\nAn action is evaluated in the same way as an expression. Static typing for\nactions is the same as for expressions.\n</p>\n<p>\nA <code>checking-action</code> and <code>trap-action</code> is evaluated in the\nsame way as a <code>checking-expr</code> and <code>trap-expr</code> respectively.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_7.2\">7.2 Threads and strands</h3>\n\n<p>\nBallerina's concurrency model supports both threads and coroutines. A Ballerina\nprogram is executed on one or more threads. A thread may run on a separate core\nsimultaneously with other threads, or may be pre-emptively multitasked with\nother threads onto a single core.\n</p>\n<p>\nEach thread is divided into one or more <em>strands</em>. No two strands\nbelonging to the same thread can run simultaneously. Instead, all the strands\nbelonging to a particular thread are cooperatively multitasked. Strands within\nthe same thread thus behave as coroutines relative to each other. A strand\nenables cooperative multitasking by <em>yielding</em>. When a strand yields,\nthe runtime scheduler may suspend execution of the strand, and switch its thread\nto executing another strand. The following actions cause a strand to yield:\n</p>\n<ul>\n<li>worker-receive-action</li>\n<li>wait-action</li>\n<li>flush-action</li>\n<li>sync-send-action</li>\n</ul>\n<p>\nIn addition, any function with an external-function-body can potentially yield;\nit should only do so if it performs a system call that would block. or calls a\nBallerina function that itself yields. Functions in the lang library do not\nthemselves yield, although if they call a function passed as an argument, that\nfunction may result in yielding.\n</p>\n<p>\nThere are two language constructs whose execution causes the creation of new\nstrands: named-worker-decl and start-action. These constructs may use\nannotations to indicate that the newly created strand should be in a separate\nthread from the current strand. In the absence of such annotations, the new\nstrand must be part of the same thread as the current strand.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_7.3\">7.3 Function and worker execution</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"block-function-body\">block-function-body</span> :=\n   <code>{</code> [<a href=\"#default-worker-init\"><span class=\"ntref\">default-worker-init</span></a> <a href=\"#named-worker-decl\"><span class=\"ntref\">named-worker-decl</span></a>+] <a href=\"#default-worker\"><span class=\"ntref\">default-worker</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"default-worker-init\">default-worker-init</span> := <a href=\"#sequence-stmt\"><span class=\"ntref\">sequence-stmt</span></a>\n<span class=\"ntdfn\" id=\"default-worker\">default-worker</span> := <a href=\"#sequence-stmt\"><span class=\"ntref\">sequence-stmt</span></a>\n<span class=\"ntdfn\" id=\"named-worker-decl\">named-worker-decl</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>worker</code> <a href=\"#worker-name\"><span class=\"ntref\">worker-name</span></a> <a href=\"#return-type-descriptor\"><span class=\"ntref\">return-type-descriptor</span></a> <code>{</code> <a href=\"#sequence-stmt\"><span class=\"ntref\">sequence-stmt</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"worker-name\">worker-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA worker represents a single strand of a function invocation. A statement\nis always executed in the context of a current worker. A worker is in one of\nthree states: active, inactive or terminated. When a worker is in the\nterminated state, it has a termination value. A worker terminates either\nnormally or abnormally. An abnormal termination results from a panic, and in\nthis case the termination value is always an error. If the termination value of\na normal termination is an error, then the worker is said to have terminated\nwith failure; otherwise the worker is said to have terminated with success. Note\nthat an error termination value resulting from a normal termination is\ndistinguished from an error termination value resulting from an abnormal\ntermination.\n</p>\n<p>\nA function always has a single default worker, which is unnamed. The strand for the\ndefault worker is the same as the strand of the worker on which function was called.\nWhen a function is called, the current worker becomes inactive, and a default worker\nfor the called function is started. When the default worker terminates, the function\nreturns to its caller, and the caller's worker is reactivated. Thus only one worker\nin each strand is active at any given time. If the default worker terminates\nnormally, then its termination value provides the return value of the function.\nIf the default worker terminates abnormally, then the evaluation of the function\ncall expression completes abruptly with a panic and the default worker's\ntermination value provides the associated value for the abrupt completion of the\nfunction call. The function's return type is the same as the return type of the\nfunction's default worker.\n</p>\n<p>\nA function also has zero or more named workers. Each named worker runs on its\nown new strand. The termination of a function is independent of the termination\nof its named workers. The termination of a named worker does not automatically\nresult in the termination of its function. When a default worker terminates\ncausing the function to terminate, the function does not automatically wait for\nthe termination of its named workers.\n</p>\n<p>\nA named worker has a return type. If the worker terminates normally, the\ntermination value will belong to the return type. If the return type of a worker\nis not specified, it defaults to nil as for functions. A return-type-descriptor\nin a named-worker-decl is an inferable context for a type descriptor, which\nmeans that <code>*</code> can be used to infer parts of the type descriptor; in\nparticular, it is convenient to use <code>error&lt;*&gt;</code> to specify the\nerror type.\n</p>\n<p>\nWhen a function has named workers, the default worker executes in three stages,\nas follows:\n</p>\n<ol>\n<li>The statements in default-worker-init are executed.</li>\n<li>All the named workers are started. Each named worker executes its\nsequence-stmt on its strand.</li>\n<li>The statements in default-worker are executed. This happens without waiting\nfor the termination of the named workers started in stage 2.</li>\n</ol>\n<p>\nVariables declared in default-worker-init are in scope within named workers,\nwhereas variables declared in default-worker are not.\n</p>\n<p>\nThe execution of a worker's sequence-stmt may result in the execution of a\nstatement that causes the worker to terminate. For example, a return statement\ncauses the worker to terminate. If this does not happen, then the worker\nterminates as soon as it has finished executing its sequence-stmt. In this case,\nthe worker terminates normally, and the termination value is nil. In other\nwords, falling off the end of a worker is equivalent to <code>return;</code>,\nwhich is in turn equivalent to <code>return ();</code>.\n</p>\n<p>\nThe parameters declared for a function are in scope in the block-function-body.\nThey are implicitly final: they can be read but not modified. They are in scope\nfor named workers as well as for the default worker.\n</p>\n<p>\nThe scope of a worker-name in a named-worker-decl that is part of a\nblock-function-body is the entire block-function-body with the exception of the\ndefault-worker-init. When a worker-name is in scope, it can be used in a\nvariable-reference-expr. The result of evaluating such a variable reference is a\nfuture value that refers to the value to be returned by that named worker. The\nstatic type of the result is future&lt;T&gt;, where T is the return type of the\nworker.\n</p>\n<p>\nA strand can initiate a wait on another strand by using a wait-action with a\nvalue of type future. Only one wait on a strand can succeed; this wait receives\nthe value returned by the strand. Any other waits on that strand fail. It is a\ncompile-time error if for any named worker it is possible for the name of that\nworker to be evaluated as a variable-reference more than once for any execution\nof that worker. This ensures that wait operations that use just a worker-name to\nidentify the strand to wait on cannot fail at runtime.\n</p>\n<p>\nIn the above, function includes method, and function call includes method call.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.4\">7.4 Statement execution</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"statement\">statement</span> := \n   <a href=\"#action-stmt\"><span class=\"ntref\">action-stmt</span></a>\n   | <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a>\n   | <a href=\"#local-var-decl-stmt\"><span class=\"ntref\">local-var-decl-stmt</span></a>\n   | <a href=\"#local-type-defn-stmt\"><span class=\"ntref\">local-type-defn-stmt</span></a>\n   | <a href=\"#xmlns-decl-stmt\"><span class=\"ntref\">xmlns-decl-stmt</span></a>\n   | <a href=\"#assignment-stmt\"><span class=\"ntref\">assignment-stmt</span></a>\n   | <a href=\"#compound-assignment-stmt\"><span class=\"ntref\">compound-assignment-stmt</span></a>\n   | <a href=\"#destructuring-assignment-stmt\"><span class=\"ntref\">destructuring-assignment-stmt</span></a>\n   | <a href=\"#call-stmt\"><span class=\"ntref\">call-stmt</span></a>\n   | <a href=\"#if-else-stmt\"><span class=\"ntref\">if-else-stmt</span></a>\n   | <a href=\"#match-stmt\"><span class=\"ntref\">match-stmt</span></a>\n   | <a href=\"#foreach-stmt\"><span class=\"ntref\">foreach-stmt</span></a>\n   | <a href=\"#while-stmt\"><span class=\"ntref\">while-stmt</span></a>\n   | <a href=\"#break-stmt\"><span class=\"ntref\">break-stmt</span></a>\n   | <a href=\"#continue-stmt\"><span class=\"ntref\">continue-stmt</span></a>\n   | <a href=\"#fork-stmt\"><span class=\"ntref\">fork-stmt</span></a>\n   | <a href=\"#panic-stmt\"><span class=\"ntref\">panic-stmt</span></a>\n   | <a href=\"#return-stmt\"><span class=\"ntref\">return-stmt</span></a>\n   | <a href=\"#lock-stmt\"><span class=\"ntref\">lock-stmt</span></a>\n</pre>\n<p>\nThe execution of any statement may involve the evaluation of actions and\nexpressions, and the execution of substatements. The following sections\ndescribes how each kind of statement is evaluated, assuming that the evaluation\nof those expressions and actions completes normally, and assuming that the\nexecution of any substatements does not cause termination of the current worker.\n Except where explicitly stated to the contrary, statements handle abrupt\ncompletion of the evaluation of expressions and actions as follows. If in the\ncourse of executing a statement, the evaluation of some expression or action\ncompletes abruptly with associated value e, then the current worker is\nterminated with termination value e; if the abrupt termination is a check-fail,\nthen the termination is normal, otherwise the termination is abnormal. If the\nexecution of a substatement causes termination of the current worker, then the\nexecution of the statement terminates at that point.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"sequence-stmt\">sequence-stmt</span> := <a href=\"#statement\"><span class=\"ntref\">statement</span></a>*\n<span class=\"ntdfn\" id=\"block-stmt\">block-stmt</span> := <code>{</code> <a href=\"#sequence-stmt\"><span class=\"ntref\">sequence-stmt</span></a> <code>}</code>\n</pre>\n<p>\nA <code>sequence-stmt</code> executes its statements sequentially. A\n<code>block-stmt</code> is executed by executing its <code>sequence-stmt</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.5\">7.5 Fork statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"fork-stmt\">fork-stmt</span> := <code>fork</code> <code>{</code> <a href=\"#named-worker-decl\"><span class=\"ntref\">named-worker-decl</span></a>+ <code>}</code>\n</pre>\n<p>\nThe fork statement starts one or more named workers, which run in parallel with\neach other, each in its own new strand.\n</p>\n<p>\nVariables and parameters in scope for the fork-stmt remain in scope within the\nworkers (similar to the situation with parameters and workers in a function\nbody).\n</p>\n<p>\nThe scope of the worker-name in a named-worker-decl that is part of a fork-stmt\nconsists of both other workers in the same fork-stmt and the block containing\nthe fork-stmt starting from the point immediately after the fork-stmt. Within\nits scope, the worker-name can be used in a variable-reference-expr in the same\nway as the worker-name of a named-worker-decl that is part of a\nblock-function-body.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.6\">7.6 Start action</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"start-action\">start-action</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>start</code> (<a href=\"#function-call-expr\"><span class=\"ntref\">function-call-expr</span></a>|<a href=\"#method-call-expr\"><span class=\"ntref\">method-call-expr</span></a>|<a href=\"#remote-method-call-action\"><span class=\"ntref\">remote-method-call-action</span></a>)\n</pre>\n\n<p>\nThe keyword <code>start</code> causes the following function or method\ninvocation to be executed on a new strand. The arguments for the function or\nmethod call are evaluation on the current strand. A start-action returns a value\nof basic type future immediately. If the static type of the call expression or\naction <code><var>C</var></code> is T, then the static type of <code>start\n<var>C</var></code> is future&lt;T&gt;.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_7.7\">7.7 Wait action</h3>\n<p>\nA wait-action waits for one or more strands to terminate, and gives access to\ntheir termination values.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"wait-action\">wait-action</span> :=\n   <a href=\"#single-wait-action\"><span class=\"ntref\">single-wait-action</span></a>\n   | <a href=\"#multiple-wait-action\"><span class=\"ntref\">multiple-wait-action</span></a>\n   | <a href=\"#alternate-wait-action\"><span class=\"ntref\">alternate-wait-action</span></a>\n\n<span class=\"ntdfn\" id=\"wait-future-expr\">wait-future-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <em>but not</em> <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>\n</pre>\n<p>\nA wait-future-expr is used by a wait-action to refer to the worker to be waited\nfor. Its static type must be future&lt;T&gt; for some T. As elsewhere, a\nwait-future-expr can use an in-scope worker-name in a variable-reference-expr to\nrefer to named worker.\n</p>\n<p>\nEvaluation of a wait-action performs a wait operation on the future value that\nresults from evaluating a wait-future-expr. This wait operation may complete\nnormally or abruptly. The wait operation initiates a wait for the strand that\nthe future refers to. If the wait fails, then the wait operation completes\nnormally and the result is an error. If the wait succeeds, and the strand\ncompleted normally, then the wait operation completes normally, and the result\nis the termination value of the strand. If the wait succeeds, but the strand\ncompleted abnormally, then the wait operation completes abruptly with a panic\nand the associated value is the termination value of the strand.\n</p>\n<p>\nIn addition to a static type, a wait-future-expr has a compile-time <em>eventual\ntype</em>. If a wait-future-expr is a variable-reference-expr referring to the\nworker-name of a named worker with return type T, then the eventual type of the\nwait-future-expr is T. Otherwise, the eventual of a wait-future-expr with static\ntype future&lt;T&gt; is T|error. The result of a wait operation that completes\nnormally will belong to the eventual type of the wait-future-expr, since the\ncompiler ensures that a wait for a wait-future-expr that is a variable reference\nto a named worker cannot fail.\n</p>\n<p>\nNote that it is only possible to wait for a named worker, which will start its\nown strand. It is not possible to wait for a default worker, which runs on an\nexisting strand.\n</p>\n<p>\nA mapping-constructor-expr is not recognized as a wait-future-expr (it would not\ntype-check in any case).\n</p>\n<section>\n<h4 id=\"section_7.7.1\">7.7.1 Single wait action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"single-wait-action\">single-wait-action</span> := <code>wait</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a>\n</pre>\n<p>\nA single-wait-action waits for a single future.\n</p>\n<p>\nA single-wait-action is evaluated by first evaluating wait-future-expr resulting\nin a value f of basic type future; the single-wait-action then performs a wait\noperation on f.\n</p>\n<p>\nThe static type of the single-wait-action is the eventual type of the\nwait-future-expr.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.7.2\">7.7.2 Multiple wait action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"multiple-wait-action\">multiple-wait-action</span> := <code>wait</code> <code>{</code> <a href=\"#wait-field\"><span class=\"ntref\">wait-field</span></a> (<code>,</code> <a href=\"#wait-field\"><span class=\"ntref\">wait-field</span></a>)* <code>}</code>\n<span class=\"ntdfn\" id=\"wait-field\">wait-field</span> :=\n  <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n  | <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a>\n</pre>\n<p>\nA multiple-wait-action waits for multiple futures, returning the result as a\nrecord.\n</p>\n<p>\nA wait-field that is a variable-name <code>v</code> is equivalent to a\nwait-field <code>v: v</code>, where <code>v</code> must be the name of an\nin-scope named worker.\n</p>\n<p>\nA multiple-wait-action is evaluated by evaluating each wait-future-expr\nresulting in a value of type future for each wait-field. The\nmultiple-wait-action then performs a wait operation on all of these futures. If\nall the wait operations complete normally, then it constructs a record with a\nfield for each wait-field, whose name is the field-name and whose value is the\nresult of the wait operation. If any of the wait operations complete abruptly,\nthen the multiple-wait-action completes abruptly.\n</p>\n<p>\nThe static type of the multiple-wait-action is a record where the static type of\neach field is the eventual type of the corresponding wait-future-expr.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.7.3\">7.7.3 Alternate wait action </h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"alternate-wait-action\">alternate-wait-action</span> := <code>wait</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a> (<code>|</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a>)+\n</pre>\n<p>\nAn alternate-wait-action waits for one of multiple futures to terminate.\n</p>\n<p>\nAn alternate-wait-action is evaluated by first evaluating each wait-future-expr,\nresulting in a set of future values. The alternate-wait-action then performs a\nwait operation on all of these members of this set. As soon as one of the wait\noperations completes normally with a non-error value v, the\nalternate-wait-action completes normally with result v. If all of the wait\noperations complete normally with an error, then it completes normally with\nresult e, where e is the result of the last wait operation to complete. If any\nof the wait operations completely abruptly before the alternate-wait-action\ncompletes, then the alternate-wait-action completes abruptly.\n</p>\n<p>\nThe static type of the alternate-wait-action is the union of the eventual type\nof all of its wait-future-exprs.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_7.8\">7.8 Worker message passing</h3>\n<p>\nMessages can be sent between workers.\n</p>\n<p>\nSends and receives are matched up at compile-time. This allows the connection\nbetween the send and the receive to be shown in the sequence diagram. It is also\nguarantees that any sent message will be received, provided that neither the\nsending nor the receiving worker terminate abnormally or with an error.\n</p>\n<p>\nMessages can only be sent between workers that are peers of each other. The\ndefault worker and the named workers in a function are peers of each other. The\nworkers created in a fork-stmt are also peers of each other. The workers created\nin a fork-stmt are not peers of the default worker and named workers created by\na function.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"peer-worker\">peer-worker</span> := <a href=\"#worker-name\"><span class=\"ntref\">worker-name</span></a> | <code>default</code>\n</pre>\n<p>\nA worker-name refers to a worker named in a named-worker-decl, which must be in\nscope; default refers to the default worker. The referenced worker must be a\npeer worker.\n</p>\n<p>\nEach worker maintains a separate logical queue for each peer worker to which it\nsends messages; a sending worker sends a message by adding it to the queue; a\nreceiving worker receives a message by removing it from the sending worker's\nqueue for that worker; messages are removed in the order in which they were\nadded to the queue.\n</p>\n<section>\n<h4 id=\"section_7.8.1\">7.8.1 Send action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"send-action\">send-action</span> := <a href=\"#sync-send-action\"><span class=\"ntref\">sync-send-action</span></a> | <a href=\"#async-send-action\"><span class=\"ntref\">async-send-action</span></a>\n<span class=\"ntdfn\" id=\"sync-send-action\">sync-send-action</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-&gt;&gt;</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n<span class=\"ntdfn\" id=\"async-send-action\">async-send-action</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-&gt;</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a> <code>;</code>\n</pre>\n<p>\nA send-action sends a message to the worker that is identified by peer-worker. A\nsend-action starts by evaluating the expression, resulting in a value\n<code><var>v</var></code>; the Clone abstract operation to\n<code><var>v</var></code> resulting in value <code><var>c</var></code>. This\nvalue <code><var>c</var></code> is added to the message queue maintained by the\nsending worker for messages to be sent to the sending worker;this queue\ncontinues to exist even if the receiving worker has already terminated.\n</p>\n<p>\nFor each send-action S, the compiler determines a unique corresponding\nreceive-action R, such that a message sent by S will be received by R, unless\nR's worker has terminated abnormally or with failure. It is a compile-time error\nif this cannot be done. The compiler determines a <em>failure type</em> for the\ncorresponding receive-action. If the receive-action was not executed and its\nworker terminated normally, then the termination value of the worker will belong\nto the failure type. The failure type will be a (possibly empty) subtype of\nerror.\n</p>\n<p>\nThe difference between async-send-action and sync-send-action is in what happens\nafter the message is added to the queue. The evaluation of async-send-action\ncompletes immediately after this, and the result is always <code>()</code>. A\nsubsequent flush action can be used to check whether the message was received.\nWith sync-send-action, evaluation waits until the receiving worker either\nexecutes a receive action that receives the queued message or terminates. The\nevaluation of sync-send-action completes as follows:\n</p>\n<ul>\n<li>if the queued message was received, then normally with result nil;</li>\n<li>otherwise\n<ul>\n<li>if the receiving worker terminated with failure, then normally with the\nresult being the the termination value of the receiving worker, which will be an\nerror;</li>\n<li>if the receiving worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the receiving worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the sync-send-action is F|() where F is the failure type of\nthe corresponding receive action. If F is empty, then this static type will be\nequivalent to ().\n</p>\n<p>\nThe contextually expected type used to interpret <code>expression</code> is the\ncontextually expected type from the corresponding receive-action.\n</p>\n<p>\nIf the receive-action corresponding to an async-send-action has a non-empty\nfailure type, then it is a compile-time error unless it can be determined that a\nsync-send-action or a flush-action will be executed before the sending worker\nterminates with success.\n</p>\n<p>\nIf a worker W is about to terminate normally and there are messages still to be\nsent in a queue (which must be the result of executing an async-send-action), then\nthe worker waits until the messages have been received or some receiving worker\nterminates. If a receiving worker R terminates without the message being\nreceived, R must have terminated abnormally, because the rule in the preceding\nparagraph. In this case, W terminates abnormally and W will use R's termination\nvalue as its termination value.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.8.2\">7.8.2 Receive action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"receive-action\">receive-action</span> := <a href=\"#single-receive-action\"><span class=\"ntref\">single-receive-action</span></a> | <a href=\"#multiple-receive-action\"><span class=\"ntref\">multiple-receive-action</span></a>\n</pre>\n<section>\n<h5 id=\"section_7.8.2.1\">7.8.2.1 Single receive action</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"single-receive-action\">single-receive-action</span> := <code>&lt;-</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n</pre>\n<p>\nA single-receive-action receives a message from a single worker.\n</p>\n<p>\nFor each single-receive-action R receiving from worker W, the compiler\ndetermines a <em>corresponding send set</em>. The corresponding send set S is a\nset of send actions in W, such that\n</p>\n<ul>\n<li>in any execution of W that terminates successfully, exactly one member of S\nis executed and is executed once only</li>\n<li>if R is evaluated, it will receive the single message sent by a member of S,\nunless W has terminated abnormally or with failure.</li>\n</ul>\n<p>\nThe compiler terminates a failure type for the corresponding send set. If no\nmember of the corresponding send set was evaluated and the sending worker\nterminated normally, then the termination value of the sending worker will\nbelong to the failure type. The failure type will be a (possibly empty) subtype\nof error.\n</p>\n<p>\nA single-receive-action is evaluated by waiting until there is a message\navailable in the queue or the sending worker terminates.  The evaluation of\nsingle-receive-action completes as follows:\n</p>\n<ul>\n<li>if a message becomes available in the queue, then the first available\nmessage is removed and the evaluation completes normally with the result being\nthat message;</li>\n<li>otherwise\n<ul>\n<li>if the sending worker terminated with failure, then normally with the result\nbeing the the termination value of the sending worker, which will be an error;</li>\n<li>if the sending worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the sending worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the single-receive-action is T|F where T is the union of the\nstatic type of the expressions in the corresponding send set and F is the\nfailure type of the corresponding send set.\n</p>\n</section>\n<section>\n<h5 id=\"section_7.8.2.2\">7.8.2.2 Multiple receive action</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"multiple-receive-action\">multiple-receive-action</span> :=\n   <code>&lt;-</code>  <code>{</code> <a href=\"#receive-field\"><span class=\"ntref\">receive-field</span></a> (<code>,</code> <a href=\"#receive-field\"><span class=\"ntref\">receive-field</span></a>)* <code>}</code>\n<span class=\"ntdfn\" id=\"receive-field\">receive-field</span> :=\n   <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n   | <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n</pre>\n<p>\nA multiple-receive-action receives a message from multiple workers.\n</p>\n<p>\nA peer-worker can occur at most once in a multiple-receive-action.\n</p>\n<p>\nA receive-field consisting of a peer-worker <code>W</code> is equivalent to a\nfield <code>W:W</code>.\n</p>\n<p>\nThe compiler determines a corresponding send set for each receive field, in the\nsame way as for a single-receive-action. A multiple-receive-action is evaluated\nby waiting until there is a message available in the queue for every\npeer-worker.  If any of the peer workers W terminate before a message becomes\navailable, then the evaluation of the multiple-receive-action completes as\nfollows\n</p>\n<ul>\n<li>if the sending worker terminated with failure, then normally with the result\nbeing the the termination value of the sending worker, which will be an error;</li>\n<li>if the sending worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the sending worker.</li>\n</ul>\n<p>\nOtherwise, the result of the evaluation of multiple-receive-action completes by\nremoving the first message from each queue and constructing a record with one\nfield for each receive-field, where the value of the record is the message\nreceived.\n</p>\n<p>\nThe contextually expected typed for the multiple-receive-action determines a\ncontextually expected type for each receive-field, in the same way as for a\nmapping constructor. The contextually expected type for each receive-field\nprovides the contextually expected type for the expression in each member of the\ncorresponding send set.\n</p>\n<p>\nThe static type of multiple-receive-action is R|F where\n</p>\n<ul>\n<li>R is a record type, where R is determined in the same way as for a mapping\nconstructor, where the static type of each field comes from the union of the\nstatic types of the expressions in each member of the corresponding send set and\nthe contextually expected type is the contextually expected type of the\nmultiple-receive-action</li>\n<li>F is the union of the failure types for the corresponding send set for each\nreceive-field</li>\n</ul>\n</section>\n</section>\n<section>\n<h4 id=\"section_7.8.3\">7.8.3 Flush action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"flush-action\">flush-action</span> := <code>flush</code> [<a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>]\n</pre>\n<p>\nIf peer-worker is specified, then flush waits until the queue of messages to be\nreceived by peer-worker is empty or until the peer-worker terminates.\n</p>\n<p>\nSend-receive correspondence for async-send-action implies that the queue will\neventually become empty, unless the peer-worker terminates abnormally or with\nfailure. The evaluation of flush-action completes as follows:\n</p>\n<ul>\n<li>if the queue of messages is empty, then normally with result nil;</li>\n<li>otherwise\n<ul>\n<li>if the peer-worker terminated with failure, then normally with the result\nbeing the the termination value of the peer-worker, which will be an error;</li>\n<li>if the peer-worker terminated abnormally, then abruptly with a panic, with\nthe associated value being the termination value of the peer-worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the flush-action has a preceding async-send-action without any intervening\nsync-send-action or other flush-action, then the static type of the flush-action\nis F|(), where F is the failure type of the receive-action corresponding to that\nasync-send-action. Otherwise, the static type of the flush-action is nil.\n</p>\n<p>\nIf peer-worker is omitted, then the flush-action flushes the queues to all other\nworkers. In this case, the static type will be the union of the static type of\nflush on each worker separately.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.8.4\">7.8.4 Send-receive correspondence</h4>\n<p>\nThis section provides further details about how compile-time correspondence is\nestablished between sends and receive. This is based on the concept of the index\nof a message in its queue: a message has index n in its queue if it is the nth\nmessage added to the queue during the current execution of the worker.\n</p>\n<ul>\n<li>A send action/statement has index i in its queue if the message that it adds\nto the queue is always the i-th message added to the queue during the execution\nof its worker. It is a compile time error if a send statement or action does not\nhave an index in its queue.</li>\n<li>A receive action has index i in a queue if any message that it removes from\nthe queue is always the i-th message removed from the queue during the execution\nof its worker. It is a compile time error if a receive action does not have an\nindex in each of its queues.</li>\n<li>A send action/statement and a receive action correspond if they have the\nsame index in a queue.</li>\n<li>It is a compile time error if two or more receive actions have the same\nindex in a queue.</li>\n<li>A send action/statement is in the same send set as another send\naction/statement if they have the same index in a queue. It is allowed for a\nsend set to have more than one member.</li>\n<li>The maximum index that a receive action has in a queue must be the same as\nthe maximum index that a send action or statement has in that queue.</li>\n<li>It is a compile time error if it is possible for a worker to terminate with\nsuccess before it has executed all its receive actions.</li>\n<li>It is a compile time error if it is possible for a worker to terminate with\nsuccess before it has executed one member from every send set.</li>\n</ul>\n</section>\n</section>\n\n<section>\n<h3 id=\"section_7.9\">7.9 Remote interaction</h3>\n\n<p>\nA client object is a stub that allows a worker to send network messages to a\nremote process according to some protocol. A local variable declared with client\nobject type will be depicted as a lifeline in the function's sequence diagram.\nThe remote methods of the client object correspond to distinct network messages\ndefined by the protocol for the role played by the client object. The return\nvalue of a remote method represents the protocol's response. A\nremote-method-call-action is depicted as a horizontal arrow from the worker\nlifeline to the client object lifeline.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"remote-method-call-action\">remote-method-call-action</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-&gt;</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nCalls a remote method. This works the same as a method call expression, except\nthat it is used only for a method with the <code>remote</code> modifier.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_7.10\">7.10 Query action</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"query-action\">query-action</span> := <a href=\"#query-pipeline\"><span class=\"ntref\">query-pipeline</span></a> <a href=\"#do-clause\"><span class=\"ntref\">do-clause</span></a>\n<span class=\"ntdfn\" id=\"do-clause\">do-clause</span> := <code>do</code> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a>\n</pre>\n<p>\nThe clauses in the query-pipeline of query-action are executed in the same way\nas the clauses in the query-pipeline of a query-expr.\n</p>\n<p>\nThe query-action is executed as follows. For each input frame <var>f</var>\nemitted by the query-pipeline, execute the block-stmt with <var>f</var> in\nscope. If a clause in the query-pipeline completes early with error\n<var>e</var>, the result of the query-action is <var>e</var>. Otherwise, the\nresult of the query-action is nil.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_7.11\">7.11 Local variable declaration statements</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"local-var-decl-stmt\">local-var-decl-stmt</span> :=\n   <a href=\"#local-init-var-decl-stmt\"><span class=\"ntref\">local-init-var-decl-stmt</span></a>\n   | <a href=\"#local-no-init-var-decl-stmt\"><span class=\"ntref\">local-no-init-var-decl-stmt</span></a>\n<span class=\"ntdfn\" id=\"local-init-var-decl-stmt\">local-init-var-decl-stmt</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<code>final</code>] <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>=</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n</pre>\n<p>\nA <code>local-var-decl-stmt</code> is used to declare variables with a scope\nthat is local to the block in which they occur.\n</p>\n<p>\nThe scope of variables declared in a <code>local-var-decl-stmt</code> starts\nimmediately after the statement and continues to the end of the block statement\nin which it occurs.\n</p>\n<p>\nA local-init-var-decl-stmt is executed by evaluating the action-or-expr\nresulting in a value, and then matching the typed-binding-pattern to the value,\ncausing assignments to the variables occurring in the typed-binding-pattern. The\ntyped-binding-pattern is used unconditionally, meaning that it is a compile\nerror if the static types do not guarantee the success of the match. If the\ntyped-binding-pattern uses <code>var</code>, then the type of the variable is\ninferred from the static type of the action-or-expr; if the\nlocal-init-var-decl-stmt includes final, the precise type is used, and otherwise\nthe broad type is used. If the typed-binding-pattern specifies a\ntype-descriptor, then that type-descriptor provides the contextually expected\ntype for action-or-expr.\n</p>\n<p>\nIf <code>final</code> is specified, then the variables declared must not be\nassigned to outside the local-init-var-decl-stmt.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"local-no-init-var-decl-stmt\">local-no-init-var-decl-stmt</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<code>final</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a> <code>;</code>\n</pre>\n<p>\nA local variable declared <code>local-no-init-var-decl-stmt</code> must be\ndefinitely assigned at each point that the variable is referenced. This means\nthat the compiler must be able to verify that the local variable will have been\nassigned before that point. If <code>final</code> is specified, then the\nvariable must not be assigned more than once.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.12\">7.12 Implicit variable type narrowing</h3>\n<p>\nUsually the type of a reference to a variable is determined by the variable's\ndeclaration, either explicitly specified by a type descriptor or inferred from\nthe static type of the initializer.\n</p>\n<p>\nIn addition, this section defines cases where a variable is used in certain\nkinds of boolean expression in a conditional context, and it can be proved at\ncompile time that the value stored in local variable or parameter will, within a\nparticular region of code, always belong to a type that is narrower that the\nstatic type of the variable. In these cases, references to the variable within\nparticular regions of code will have a static type that is narrower that the\nvariable type.\n</p>\n<p>\nGiven an expression E with static type boolean, and a variable x with static\ntype Tx, we define how to determine\n</p>\n<ul>\n<li>a narrowed type for x implied by truth of E and</li>\n<li>a narrowed type for x implied by falsity of E</li>\n</ul>\n<p>\nbased on the syntactic form of E as follows.\n</p>\n<ul>\n<li>If E has the form x is T, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of Tx and\nT</li>\n<li>the narrowed type for x implied by falsity of E is Tx with T removed</li>\n</ul>\n</li>\n<li>If E has the form x == E1 or E1 == x where the static type of E1 is an\nexpression whose static type is a singleton simple type T1, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of Tx and\nT1</li>\n<li>the narrowed type for x implied by falsity of E is Tx with T1 removed</li>\n</ul>\n</li>\n<li>If E has the form x != E1 or E1 != x where the static type of E1 is an\nexpression whose static type is a singleton simple type T1, then\n<ul>\n<li>the narrowed type for x implied by truth of E is Tx with T1 removed</li>\n<li>the narrowed type for x implied by falsity of E is the intersection of Tx\nand T1</li>\n</ul>\n</li>\n<li>If E has the form !E1, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the narrowed type for x\nimplied by falsity of E1</li>\n<li>the narrowed type for x implied by falsity of E is the narrowed type for x\nimplied by truth of E1</li>\n</ul>\n</li>\n<li>If E has the form E1 &amp;&amp; E2\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of T1 and\nT2, where T1 is the narrowed type for x implied by the truth of T1 and T2 is the\nnarrowed type for x implied by the truth of T2</li>\n<li>the narrowed type for x implied by falsity of E is T1|T2, where T1 is the\nnarrowed type for x implied by the falsity of E1, and T2 is the intersection of\nT3 and T4, where T3 is the narrowed type for x implied by the truth of E1 and T4\nis the narrowed type for x implied by the falsity of E2</li>\n</ul>\n</li>\n<li>If E has the form E1 || E2, then\n<ul>\n<li> the narrowed type for x implied by truth of E is T1|T2, where T1 is the\nnarrowed type for x implied by the truth of E1, and T2 is the intersection of T3\nand T4, where T3 is the narrowed type for x implied by the falsity of E1 and T4\nis the narrowed type for x implied by the truth of E2</li>\n<li>the narrowed type for x implied by falsity of E is the intersection of T1\nand T2, where T1 is narrowed type for x implied by the falsity of E1 and T2 is\nthe narrowed type for x implied by the falsity of E2</li>\n</ul>\n</li>\n<li>If E has any other form, then\n<ul>\n<li>the narrowed type for x implied by the truth of E is Tx</li>\n<li>the narrowed type for x implied by the falsity of E is Tx</li>\n</ul>\n</li>\n</ul>\n<p>\nNarrowed types apply to regions of code as follows:\n</p>\n<ul>\n<li>in an expression E1 || E2, the narrowed types implied by the falsity of E1\napply within E2</li>\n<li>in an expression E1 &amp;&amp; E2, the narrowed types implied by the truth of E1\napply within E2</li>\n<li>in an expression E1 ? E2 : E3, the narrowed types implied by the truth of E1\napply within E2 and the narrowed types implied by the falsity of E1 apply within\nE3</li>\n<li>in a statement if E1 { B1 } else { B2 }, the narrowed types implied by the\ntruth of E1 apply within B1 and the narrowed types implied by the falsity of E1\napply within E2</li>\n<li>in a match-clause P if E =&gt; { B }, the narrowed types implied by the truth\nof E apply within B</li>\n<li>the narrowed type for a variable x no longer applies as soon as there is a\npossibility of x being assigned to</li>\n</ul>\n</section>\n<section>\n<h3 id=\"section_7.13\">7.13 Local type definition statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"local-type-defn-stmt\">local-type-defn-stmt</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>type</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>;</code>\n</pre>\n<p>\nA local-type-defn-stmt binds the identifier to a type descriptor within the\nscope of the current block. The type-descriptor is resolved when the statement\nis executed.\n</p>\n</section>\n<section>\n<h3 id=\"XML_namespace_declaration_statement\">7.14 XML namespace declaration statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xmlns-decl-stmt\">xmlns-decl-stmt</span> := <a href=\"#xmlns-decl\"><span class=\"ntref\">xmlns-decl</span></a>\n<span class=\"ntdfn\" id=\"xmlns-decl\">xmlns-decl</span> := <code>xmlns</code> <a href=\"#xml-namespace-uri\"><span class=\"ntref\">xml-namespace-uri</span></a> [ <code>as</code> <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> ] <code>;</code>\n<span class=\"ntdfn\" id=\"xml-namespace-uri\">xml-namespace-uri</span> := <a href=\"#simple-const-expr\"><span class=\"ntref\">simple-const-expr</span></a>\n<span class=\"ntdfn\" id=\"xml-namespace-prefix\">xml-namespace-prefix</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nAn <code>xmlns-decl</code> is used to declare a XML namespace. If there is\nan <code>xml-namespace-prefix</code>, then the in-scope namespaces that are used\nto perform namespace processing on an <code>xml-template-expr</code> will include a\nbinding of that prefix to the specified <code>xml-namespace-uri</code>;\notherwise the in-scope namespaces will include a default namespace with the\nspecified <code>xml-namespace-uri</code>.\n</p>\n<p>\nAn <code>xml-namespace-prefix</code> declared by an <code>xmlns-decl</code>\nis in the same symbol space as a <code>module-prefix</code> declared by an\n<code>import-decl</code>. This symbol space is distinct from a module's main\nsymbol space used by other declarations. An <code>xmlns-decl</code> in a\n<code>xmlns-decl-stmt</code> declares the prefix within the scope of the current\nblock.\n</p>\n<p>\nThe prefix <code>xmlns</code> is predeclared as\n<code>http://www.w3.org/2000/xmlns/</code> and cannot be redeclared.\n</p>\n<p>\nThe static type of the <code>simple-const-expr</code> must be a subtype of\nstring.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.15\">7.15 Assignment</h3>\n\n<p>\nThere are three kinds of assignment statement:\n</p>\n<ul>\n<li>an ordinary assignment statement, which is usually called simply an\nassignment statement,</li>\n<li>a compound assignment statement, and</li>\n<li>a destructuring assignment statement.</li>\n</ul>\n<p>\nThe first two of these build on the concept of an <em>lvalue</em>, whereas the\nlast one builds on the concept of a binding pattern.\n</p>\n\n<section>\n<h4 id=\"section_7.15.1\">7.15.1 Lvalues</h4>\n\n<p>\nAn lvalue is what the left hand side of an assignment evaluates to. An lvalue\nrefers to a storage location which is one of the following:\n</p>\n<ul>\n<li>a variable;</li>\n<li>a specific named field of an object;</li>\n<li>the member of a container having a specific key, which will be either an\ninteger or a string according as the container is a list or a mapping.</li>\n</ul>\n\n<p>\nAn lvalue that is both defined and initialized refers to a storage location that\nholds a value:\n</p>\n<ul>\n<li>an lvalue referring to a variable is always defined but may be\nuninitialized;</li>\n<li>an lvalue referring to a specific named field of an object is always defined\nbut may not be initialized until the <code>__init</code> method returns</li>\n<li>an lvalue referring to member of a container having a specific key is\nundefined if the container does not have a member with that key; if such an\nlvalue is defined, it is also initialized; note that an lvalue always refers to\na container that is already constructed.</li>\n</ul>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"lvexpr\">lvexpr</span> :=\n   <a href=\"#variable-reference-lvexpr\"><span class=\"ntref\">variable-reference-lvexpr</span></a>\n   | <a href=\"#field-access-lvexpr\"><span class=\"ntref\">field-access-lvexpr</span></a>\n   | <a href=\"#member-access-lvexpr\"><span class=\"ntref\">member-access-lvexpr</span></a>\n</pre>\n\n<p>\nThe left hand side of an assignment is syntactically a restricted type of\nexpression, called an lvexpr. When the evaluation of an lvexpr completes\nnormally, its result is an lvalue. The evaluation of an lvexpr can also complete\nabruptly, with a panic or check-fail, just as with the evaluation of an\nexpression.\n</p>\n<p>\nThe compiler determines a static type for each lvexpr just as it does for\nexpressions, but the meaning is slightly different. For an lvexpr L to have\nstatic type T means that if the runtime evaluation of L completes normally\nresulting in an lvalue x, then if x is defined and initialized, it refers to a\nstorage location that holds a value belonging to type T. In addition to a type,\nthe compiler determines for each lvexpr whether it is potentially undefined and\nwhether it is potentially uninitialized.\n</p>\n<p>\nAn lvalue supports three operations: store, read and filling-read.\n</p>\n<p>\nThe fundamental operation on an lvalue is to store a value in the storage\nlocation it refers to. This operation does not required the lvalue to be defined\nor initialized; a successful store operation on an undefined lvalue will result\nin the addition of a member to the container; a store on an uninitialized lvalue\nwill initialize it. When an lvalue refers to a variable, it is possible to\ndetermine at compile-time whether the store of a value is permissible based on\nthe declaration of the variable and the static type of the value to be stored.\nHowever, when the lvalue refers to a member of a container, this is not in\ngeneral possible for three reasons.\n</p>\n<ol>\n<li>The guarantee provided by an lvalue having a static type T is not that the\nreferenced storage location can hold every value that belongs to type T; rather\nthe guarantee is that every value that the referenced storage location can hold\nbelongs to type T. This is because of container types are covariant in their\nmember types. The values that the storage location can actually hold are\ndetermined by the inherent type of the container.</li>\n<li>The member may not be defined and the inherent type of the container may not\nallow a member with that specific key. The permissible keys of a container can\nbe constrained by closed record types, fixed-length array types, and tuple types\n(with any rest descriptor).</li>\n<li>The container may be immutable. The static type of an lvalue referring to a\nmember of a container makes no guaranteees that the container is not immutable.</li>\n</ol>\n<p>\nThe first of these reasons also applies to lvalues that refer to fields of\nobjects. Accordingly, stores to lvalues other than lvalues that refer to\nvariables must be verified at runtime to ensure that they are not impermissible\nfor any of the above three reasons. An attempt to perform an impermissible store\nresults in a panic at runtime.\n</p>\n<p>\nList values maintain the invariant that there is a unique integer n, the length\nof the list, such that a member k of the list is defined if and only if k is a\nnon-negative integer less than n. When a store is performed on an lvalue\nreferring to a member k of a list value and the length of the list is n and k is\n&gt; n, then each member with index i for each â¤ i &lt; k is filled in, by\nusing the FillMember abstract operation. The FillMember abstract operation may\nfail; in particular it will fail if the list is a fixed-length array. If the\nFillMember operation fails, then the attempt to store will panic.\n</p>\n<p>\nAn lvalue also allows a read operation, which is used by the compound assignment\nstatement. Unlike a store operation, a read operation cannot result in a runtime\npanic. A read operation cannot be performed on an lvalue that is undefined or\nuninitialized.\n</p>\n<p>\nFinally, a lvalue supports a filling-read operation, which is used to support\nchained assignment. A filling-read is performed only an lvalue with a static\ntype that is a container type. It differs from a read operation only when it is\nperformed on a potentially undefined lvalue. If the lvalue is undefined at\nruntime, then the filling-read will use the FillMember abstract operation on the\nmember that the lvalue refers to. If the FillMember operation fails, then the\nfilling-read panics. Unlike the read operation, the filling-read operation can\nbe performed on an undefined lvalue; it cannot, however, be performed on an\nuninitialized lvalue.\n</p>\n<p>\nThe evaluation of an lvexpr is specified in terms of the evaluation of its\nsubexpressions, the evaluation of its sub-lvexprs, and store and\nfilling-read operations on lvalues. If any of these result in a panic, then\nthe evaluation of the lvexpr completes abruptly with a panic.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"variable-reference-lvexpr\">variable-reference-lvexpr</span> := <a href=\"#variable-reference\"><span class=\"ntref\">variable-reference</span></a>\n</pre>\n<p>\nThe result of evaluating variable-reference-lvexpr is an lvalue referring to a\nvariable. Its static type is the declared or inferred type of the variable. The\nlvexpr is potentially uninitialized if it is possible for execution to have\nreached this point without initializing the referenced variable.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"field-access-lvexpr\">field-access-lvexpr</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <code>.</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>\n</pre>\n\n<p>\nThe static type of lvexpr must be either a subtype of the mapping basic type\nor a subtype of the object basic type.\n</p>\n<p>\nIn the case where the static type of lvexpr is a subtype of the object basic\ntype, the object type must have a field with the specified name, and the\nresulting lvalue refers to that object field.\n</p>\n<p>\nIn the case where the static type of lvexpr is a subtype of the mapping basic\ntype, the semantics are as follows.\n</p>\n<ul>\n<li>The following requirements apply at compile time: the type of lvexpr must\ninclude mapping shapes that have the specified field-name; type descriptor for\nlvexpr must include <code>field-name</code> as an individual-type-descriptor (if\nlvexpr is a union, then this requirement applies to every member of the union);\nlvexpr must not be potentially uninitialized, but may be potentially\nundefined.</li>\n<li>\nIt is evaluated as follows:\n<ol>\n<li>evaluate lvexpr to get lvalue <var>lv</var>;</li>\n<li>perform a filling-read operation on <var>lv</var> to get mapping value\n<var>m</var>;</li>\n<li>the result is an lvalue referring to the member of <var>m</var> with the\nspecified field-name.</li>\n</ol>\n</li>\n<li>The static type of the field-access-expr is the member type for the key type\nK in T, where T is the static type of the lvexpr and K is the singleton string\ntype containing the field-name; the field-access-expr is potentially undefined\nif K is an optional key type for T.</li>\n</ul>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"member-access-lvexpr\">member-access-lvexpr</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <code>[</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>]</code>\n</pre>\n<p>\nThe static type of lvexpr must be either a subtype of the mapping basic type or\na subtype of the list basic type. In the former case, the contextually expected\ntype of expression must be string and it is an error if the static type of\nexpression is not string; in the latter case, the contextually expected type of\nexpression must be int and it is an error if the static type of expression is\nnot int.\n</p>\n<p>\nIt is evaluated as follows:\n</p>\n<ol>\n<li>evaluate expression to get a string or int <var>k</var>;</li>\n<li>evaluate lvexpr to get lvalue <var>lv</var>;</li>\n<li>perform a filling-read operation on <var>lv</var> to get a list or mapping value\n<var>v</var>;</li>\n<li>the result is an lvalue referring to the member of <var>c</var> with key\n<var>k</var>.</li>\n</ol>\n<p>\nThe static type of the member-access-expr is the member type for the key type K\nin T, where T is the static type of the lvexpr and K is the static type type of\nexpression; the member-access-expr is potentially undefined if K is an optional\nkey type for T.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_7.15.2\">7.15.2 Assignment statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"assignment-stmt\">assignment-stmt</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <code>=</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n</pre>\n<p>\nThe static type of action-or-expr must be a subtype of the static type of\nlvexpr. The static type of lvexpr provides the contextually expected type for\naction-or-expr. It is not an error for lvexpr to be potentially undefined or\npotentially uninitialized.\n</p>\n<p>\nIt is executed at as follows:\n</p>\n<ol>\n<li>execute action-or-expr to get a value <var>v</var>;</li>\n<li>evaluate lvexpr to get an lvalue <var>lv</var>;</li>\n<li>perform the store operation of <var>lv</var> with value <var>v</var>.</li>\n</ol>\n\n</section>\n<section>\n<h4 id=\"section_7.15.3\">7.15.3 Compound assignment statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"compound-assignment-stmt\">compound-assignment-stmt</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <a href=\"#CompoundAssignmentOperator\"><span class=\"ntref\">CompoundAssignmentOperator</span></a> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"CompoundAssignmentOperator\">CompoundAssignmentOperator</span> := <a href=\"#BinaryOperator\"><span class=\"ntref\">BinaryOperator</span></a> <code>=</code>\n<span class=\"ntdfn\" id=\"BinaryOperator\">BinaryOperator</span> := <code>+</code> | <code>-</code> | <code>*</code> | <code>/</code> | <code>&amp;</code> | <code>|</code> | <code>^</code> | <code>&lt;&lt;</code> | <code>&gt;&gt;</code> | <code>&gt;&gt;&gt;</code>\n</pre>\n<p>\nIt is a compile error if lvexpr is potentially undefined unless the static type\nof lvexpr is a subtype of the list basic type. It is a compile error if lvexpr\nis potentially uninitialized.\n</p>\n<p>\nLet T1 be the static type of lvexpr, and let T2 be the static type of\naction-expr. Then let T3 be the static type of an expression E1 BinaryOp E2\nwhere E1 has type T1 and E2 has type T2. It is a compile error if T3 is not a\nsubtype of T1.\n</p>\n<p>\nIt is executed as follows:\n</p>\n<ol>\n<li>execute action-or-expr to get a value <var>v2</var>;</li>\n<li>evaluate lvexpr to get an lvalue <var>lv</var>;</li>\n<li>if <var>lv</var> is undefined, panic (<var>lv</var> must refer to an\nundefined member of a list)</li>\n<li>perform the read operation on <var>lv</var> to get a value\n<var>v1</var>\n</li>\n<li>perform the operation specified by BinaryOperator on operands <var>v1</var>\nand <var>v2</var>, resulting in a value <var>v3</var>\n</li>\n<li>perform the store operation on <var>lv</var> with value <var>v3</var>.</li>\n</ol>\n\n</section>\n<section>\n<h4 id=\"section_7.15.4\">7.15.4 Destructuring assignment statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"destructuring-assignment-stmt\">destructuring-assignment-stmt</span> :=\n   <a href=\"#binding-pattern-not-variable-reference\"><span class=\"ntref\">binding-pattern-not-variable-reference</span></a> <code>=</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"binding-pattern-not-variable-reference\">binding-pattern-not-variable-reference</span> :=\n   <a href=\"#wildcard-binding-pattern\"><span class=\"ntref\">wildcard-binding-pattern</span></a>\n   | <a href=\"#list-binding-pattern\"><span class=\"ntref\">list-binding-pattern</span></a>\n   | <a href=\"#mapping-binding-pattern\"><span class=\"ntref\">mapping-binding-pattern</span></a>\n   | <a href=\"#error-binding-pattern\"><span class=\"ntref\">error-binding-pattern</span></a>\n</pre>\n<p>\nA destructuring assignment is executed by evaluating the action-or-expr\nresulting in a value v, and then matching the binding pattern to v, causing\nassignments to the variables occurring in the binding pattern.\n</p>\n<p>\nThe binding-pattern has a static type implied by the static type of the\nvariables occurring in it. The static type of action-or-expr must be a subtype\nof this type.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_7.16\">7.16 Action statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"action-stmt\">action-stmt</span> := <a href=\"#action\"><span class=\"ntref\">action</span></a> <code>;</code>\n</pre>\n<p>\nAn action-stmt is a statement that is executed by evaluating an action and\ndiscarding the resulting value, which must be nil. It is a compile-time error if\nthe static type of an action in an action-stmt is not nil.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.17\">7.17 Call statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"call-stmt\">call-stmt</span> := <a href=\"#call-expr\"><span class=\"ntref\">call-expr</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"call-expr\">call-expr</span> :=\n   <a href=\"#function-call-expr\"><span class=\"ntref\">function-call-expr</span></a>\n   | <a href=\"#method-call-expr\"><span class=\"ntref\">method-call-expr</span></a>\n   | <a href=\"#checking-keyword\"><span class=\"ntref\">checking-keyword</span></a> <a href=\"#call-expr\"><span class=\"ntref\">call-expr</span></a>\n</pre>\n<p>\nA call-stmt is executed by evaluating call-expr as an expression and discarding\nthe resulting value, which must be nil.  It is a compile-time error if the\nstatic type of the call-expr in an call-stmt is not nil.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.18\">7.18 Conditional statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"if-else-stmt\">if-else-stmt</span> :=\n   <code>if</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a> \n   [ <code>else</code> <code>if</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a> ]* \n   [ <code>else</code> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a> ]\n</pre>\n<p>\nThe if-else statement is used for conditional execution.\n</p>\n<p>\nThe static type of the expression following <code>if</code> must be boolean.\nWhen an expression is true then the corresponding block statement is executed\nand the if statement completes. If no expression is true then, if the else block\nis present, the corresponding block statement is executed.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.19\">7.19 Match statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-stmt\">match-stmt</span> := <code>match</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>{</code> <a href=\"#match-clause\"><span class=\"ntref\">match-clause</span></a>+ <code>}</code>\n<span class=\"ntdfn\" id=\"match-clause\">match-clause</span> :=\n  <a href=\"#match-pattern-list\"><span class=\"ntref\">match-pattern-list</span></a> [<a href=\"#match-guard\"><span class=\"ntref\">match-guard</span></a>] <code>=&gt;</code> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a>\n<span class=\"ntdfn\" id=\"match-guard\">match-guard</span> := <code>if</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA match statement selects a block statement to execute based on which patterns a\nvalue matches.\n</p>\n<p>\nA match-stmt is executed as follows:\n</p>\n<ol>\n<li>the expression is evaluated resulting in some value v;</li>\n<li>for each match-clause in order:\n<ol>\n<li>a match of match-pattern against v is attempted</li>\n<li>if the attempted match fails, the execution of the match-stmt continues to\nthe next match-clause</li>\n<li>if the attempted match succeeds, then the variables in match-pattern are\ncreated</li>\n<li>if there is a match-guard, then the expression in match-guard is executed\nresulting in a value b</li>\n<li>if b is false, then the execution of the match-stmt continues to the next\nmatch-clause</li>\n<li>otherwise, the block-stmt in the match-clause is executed</li>\n<li>execution of the match-stmt completes</li>\n</ol>\n</li>\n</ol>\n<p>\nThe scope of any variables created in a match-pattern-list of a match-clause is\nboth the match-guard, if any, and the block-stmt in that match-clause. The\nstatic type of the expression in match-guard must be a subtype of boolean.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-pattern-list\">match-pattern-list</span> := \n  <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a> (<code>|</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>)*\n</pre>\n<p>\nA match-pattern-list can be matched against a value. An attempted match can\nsucceed or fail. A match-pattern-list is matched against a value by attempting\nto match each match-pattern until a match succeeds.\n</p>\n<p>\nAll the match-patterns in a given match-pattern-list must bind the same set of\nvariables.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-pattern\">match-pattern</span> :=\n  <code>var</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n   | <a href=\"#wildcard-match-pattern\"><span class=\"ntref\">wildcard-match-pattern</span></a>\n   | <a href=\"#const-pattern\"><span class=\"ntref\">const-pattern</span></a>\n   | <a href=\"#list-match-pattern\"><span class=\"ntref\">list-match-pattern</span></a>\n   | <a href=\"#mapping-match-pattern\"><span class=\"ntref\">mapping-match-pattern</span></a>\n   | <a href=\"#error-match-pattern\"><span class=\"ntref\">error-match-pattern</span></a>\n</pre>\n<p>\nA match-pattern combines the destructuring done by a binding-pattern with the\nability to match a constant value.\n</p>\n<p>\nNote that an identifier can be interpreted in two different ways within a\nmatch-pattern:\n</p>\n<ul>\n<li>in the scope of a <code>var</code>, an identifier names a variable which is\nto be bound to a part of the matched value when a pattern match succeeds;</li>\n<li>outside the scope of a var, an identifier references a constant that a value\nmust match for the pattern match to succeed.</li>\n</ul>\n<p>\nA match-pattern must be linear: a variable that is to be bound cannot occur more\nthan once in a match-pattern.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"const-pattern\">const-pattern</span> := <a href=\"#simple-const-expr\"><span class=\"ntref\">simple-const-expr</span></a>\n</pre>\n<p>\nA const-pattern denotes a single value. Matching a const-pattern against a value\nsucceeds if the value has the same shape as the value denoted by the\nconst-pattern. A variable-reference in a const-pattern must refer to a constant.\nSuccessfully matching a const-pattern does not cause any variables to be\ncreated.\n</p>\n<p>\nMatching a wildcard-match-pattern against a value succeeds if the value belongs to\ntype any, in other words if the basic type of the value is not error.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"wildcard-match-pattern\">wildcard-match-pattern</span> := <code>_</code>\n<span class=\"ntdfn\" id=\"list-match-pattern\">list-match-pattern</span> := <code>[</code> <a href=\"#list-member-match-patterns\"><span class=\"ntref\">list-member-match-patterns</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"list-member-match-patterns\">list-member-match-patterns</span> :=\n   <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a> (<code>,</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>)* [<code>,</code> <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>]\n   | [ <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a> ]\n<span class=\"ntdfn\" id=\"mapping-match-pattern\">mapping-match-pattern</span> := <code>{</code> <a href=\"#field-match-patterns\"><span class=\"ntref\">field-match-patterns</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"field-match-patterns\">field-match-patterns</span> :=\n   <a href=\"#field-match-pattern\"><span class=\"ntref\">field-match-pattern</span></a> (<code>,</code> <a href=\"#field-match-pattern\"><span class=\"ntref\">field-match-pattern</span></a>)* [<code>,</code> <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>]\n   | [ <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a> ] \n<span class=\"ntdfn\" id=\"field-match-pattern\">field-match-pattern</span> := <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>\n<span class=\"ntdfn\" id=\"rest-match-pattern\">rest-match-pattern</span> := <code>...</code> <code>var</code> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"error-match-pattern\">error-match-pattern</span> := <a href=\"#direct-error-match-pattern\"><span class=\"ntref\">direct-error-match-pattern</span></a> | <a href=\"#indirect-error-match-pattern\"><span class=\"ntref\">indirect-error-match-pattern</span></a>\n<span class=\"ntdfn\" id=\"direct-error-match-pattern\">direct-error-match-pattern</span> := <code>error</code> <code>(</code> <a href=\"#direct-error-arg-list-match-pattern\"><span class=\"ntref\">direct-error-arg-list-match-pattern</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"indirect-error-match-pattern\">indirect-error-match-pattern</span> := <a href=\"#error-type-reference\"><span class=\"ntref\">error-type-reference</span></a> <code>(</code> <a href=\"#indirect-error-arg-list-match-pattern\"><span class=\"ntref\">indirect-error-arg-list-match-pattern</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"direct-error-arg-list-match-pattern\">direct-error-arg-list-match-pattern</span> :=\n   <a href=\"#simple-match-pattern\"><span class=\"ntref\">simple-match-pattern</span></a> [<code>,</code> <a href=\"#error-field-match-patterns\"><span class=\"ntref\">error-field-match-patterns</span></a>]\n   | [<a href=\"#error-field-match-patterns\"><span class=\"ntref\">error-field-match-patterns</span></a>]\n<span class=\"ntdfn\" id=\"indirect-error-arg-list-match-pattern\">indirect-error-arg-list-match-pattern</span> := [<a href=\"#error-field-match-patterns\"><span class=\"ntref\">error-field-match-patterns</span></a>]\n<span class=\"ntdfn\" id=\"error-field-match-patterns\">error-field-match-patterns</span> :=\n   <a href=\"#named-arg-match-pattern\"><span class=\"ntref\">named-arg-match-pattern</span></a> (<code>,</code> <a href=\"#named-arg-match-pattern\"><span class=\"ntref\">named-arg-match-pattern</span></a>)* [<code>,</code> <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>]\n   | <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>\n<span class=\"ntdfn\" id=\"simple-match-pattern\">simple-match-pattern</span> :=\n   <a href=\"#wildcard-match-pattern\"><span class=\"ntref\">wildcard-match-pattern</span></a>\n   | <a href=\"#const-pattern\"><span class=\"ntref\">const-pattern</span></a>\n   | <code>var</code> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"named-arg-match-pattern\">named-arg-match-pattern</span> := <a href=\"#arg-name\"><span class=\"ntref\">arg-name</span></a> <code>=</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>\n</pre>\n\n<p>\nMatching a <code>mapping-match-pattern</code> against a mapping value succeeds\nif and only every <code>field-match-pattern</code> matches against a field of\nthe value. The variable in the <code>rest-match-pattern</code>, if specified, is\nbound to a new mapping that contains just the fields for which that did not\nmatch a <code>field-match-pattern</code>.\n</p>\n<p>\nFor a match of an <code>indirect-error-match-pattern</code> against an error\nvalue to succeed, the error type referenced by the error-type-reference must\ncontain the shape of the error value; since errors are immutable, this\nrequirement is equivalent to requiring that the error value belong to the\nreferenced error type.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_7.20\">7.20 Foreach statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"foreach-stmt\">foreach-stmt</span> :=\n   <code>foreach</code> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>in</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a>\n</pre>\n<p>\nA foreach statement iterates over an iterable value, executing a block statement\nonce for each value in the iterable value's iteration sequence. The static type\nof action-or-expr must be an iterable type with an iteration completion type of\nnil.\n</p>\n<p>\nThe scope of any variables created in typed-binding-pattern is block-stmt. These\nvariables are implicitly final.\n</p>\n<p>\nIn more detail, a foreach statement executes as follows:\n</p>\n<ol>\n<li>evaluate the action-or-expr resulting in a value c</li>\n<li>create an iterator object i from c as follows\n<ol>\n<li>if c is a basic type that is iterable, then i is the result of calling\nc.iterator()</li>\n<li>if c is an object and c belongs to Iterable&lt;T,()&gt; for some T, then i is the\nresult of calling c.__iterator()</li>\n</ol>\n</li>\n<li>call i.next() resulting in a value n</li>\n<li>if n is nil, then terminate execution of the foreach statement</li>\n<li>match typed-binding-pattern to n.value causing assignments to any variables\nthat were created in typed-binding-pattern</li>\n<li>execute block-stmt with the variable bindings from step 5 in scope; in the\ncourse of so doing\n<ol>\n<li>the execution of a break-stmt terminates execution of the foreach statement</li>\n<li>the execution of a continue-stmt causes execution to proceed immediately to\nstep 3</li>\n</ol>\n</li>\n<li>go back to step 3</li>\n</ol>\n<p>\nIn step 2, the compiler will give an error if the static type of expression is\nnot suitable for 2a or 2b.\n</p>\n<p>\nIn step 5, the typed-binding-pattern is used unconditionally, and the compiler\nwill check that the static types guarantee that the match will succeed. If the\ntyped-binding-pattern uses var, then the type will be inferred from the type of\n<code>action-or-expr</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.21\">7.21 While statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"while-stmt\">while-stmt</span> := <code>while</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a>\n</pre>\n<p>\nA while statement repeatedly executes a block statement so long as a\nboolean-valued expression evaluates to true.\n</p>\n<p>\nIn more detail, a while statement executes as follows:\n</p>\n<ol>\n<li>evaluate expression;</li>\n<li>if expression evaluates to false, terminate execution of the while\nstatement;</li>\n<li>execute block-stmt; in the course of so doing\n<ol>\n<li>the execution of a break-stmt results in termination of execution of the\nwhile statement</li>\n<li>the execution of a continue-stmt causes execution to proceed immediately to\nstep 1</li>\n</ol>\n</li>\n<li>go back to step 1.</li>\n</ol>\n<p>\nThe static type of <code>expression</code> must be a subtype of boolean.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.22\">7.22 Continue statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"continue-stmt\">continue-stmt</span> := <code>continue</code> <code>;</code>\n</pre>\n<p>\nA continue statement is only allowed if it is lexically enclosed within a\nwhile-stmt or a foreach-stmt. Executing a continue statement causes execution of\nthe nearest enclosing while-stmt or foreach-stmt to jump to the end of the\noutermost block-stmt in the while-stmt or foreach-stmt.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.23\">7.23 Break statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"break-stmt\">break-stmt</span> := <code>break</code> <code>;</code>\n</pre>\n<p>\nA break statement is only allowed if it is lexically enclosed within a\nwhile-stmt or a foreach-stmt. Executing a break statement causes the nearest\nenclosing while-stmt or foreach-stmt to terminate.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.24\">7.24 Panic statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"panic-stmt\">panic-stmt</span> := <code>panic</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>;</code>\n</pre>\n<p>\nA panic statement terminates the current worker abnormally. The result of\nevaluating <code>expression</code> provides the termination value of the worker.\n</p>\n<p>\nThe static type of <code>expression</code> must be a subtype of error.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.25\">7.25 Return statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"return-stmt\">return-stmt</span> := <code>return</code> [ <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> ] <code>;</code>\n</pre>\n<p>\nA return statement terminates the current worker normally.The result of\nevaluating the action-or-expr provides the termination value of the worker. If\naction-or-expr is omitted, then the termination value is nil.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_7.26\">7.26 Lock statement</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"lock-stmt\">lock-stmt</span> := <code>lock</code> <a href=\"#block-stmt\"><span class=\"ntref\">block-stmt</span></a>\n</pre>\n\n<p>\nA lock-stmt executing in the context of some strand must execute its block-stmt\nin such a way that the effect on the state of the program is consistent with the\nexecution of the block-stmt not being interleaved with the execution of a\nlock-stmt on any other strand.\n</p>\n<p>\nA naive implementation can simply acquire a single, program-wide, recursive mutex\nbefore executing a lock statement, and release the mutex after completing the\nexecution of the lock statement. A more sophisticated implementation can perform\ncompile-time analysis to infer a more fine-grained locking strategy that will\nhave the same effects as the naive implementation.\n</p>\n<p>\nIt is not allowed to start a new strand within a lock. More precisely, when a\nstrand has started but not yet completed the execution of a lock-stmt, the\nexecution of a named-worker-decl or a start-action on that strand will result in\na panic. It is a compile-time error for a named-worker-decl or start-action to\noccur lexically within a lock-stmt. The compiler may also give a compile-time\nerror if a function definition contains a named-worker-decl or start-action, and\nthere is a function call lexically within the lock-stmt that might result\ndirectly or indirectly in a call to that defined function.\n</p>\n\n</section>\n\n</section>\n<section>\n<h2 id=\"module_level\">8. Module-level declarations</h2>\n<p>\nEach source part in a Ballerina module must match the production\n<code>module-part</code>.\n</p>\n<p>\nThe import declarations must come before other declarations; apart from this,\nthe order of the definitions and declarations at the top-level of a module is\nnot constrained.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-part\">module-part</span> := <a href=\"#import-decl\"><span class=\"ntref\">import-decl</span></a>* <a href=\"#other-decl\"><span class=\"ntref\">other-decl</span></a>*\n<span class=\"ntdfn\" id=\"other-decl\">other-decl</span> :=\n   <a href=\"#listener-decl\"><span class=\"ntref\">listener-decl</span></a>\n   | <a href=\"#service-decl\"><span class=\"ntref\">service-decl</span></a>\n   | <a href=\"#function-defn\"><span class=\"ntref\">function-defn</span></a>\n   | <a href=\"#module-type-defn\"><span class=\"ntref\">module-type-defn</span></a>\n   | <a href=\"#module-const-decl\"><span class=\"ntref\">module-const-decl</span></a>\n   | <a href=\"#module-var-decl\"><span class=\"ntref\">module-var-decl</span></a>\n   | <a href=\"#module-xmlns-decl\"><span class=\"ntref\">module-xmlns-decl</span></a>\n   | <a href=\"#annotation-decl\"><span class=\"ntref\">annotation-decl</span></a>\n</pre>\n<section>\n<h3 id=\"section_8.1\">8.1 Import declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"import-decl\">import-decl</span> := \n   <code>import</code> [<a href=\"#org-name\"><span class=\"ntref\">org-name</span></a> <code>/</code>] <a href=\"#module-name\"><span class=\"ntref\">module-name</span></a> [<code>version</code> <a href=\"#sem-ver\"><span class=\"ntref\">sem-ver</span></a>] \n   [<code>as</code> <a href=\"#import-prefix\"><span class=\"ntref\">import-prefix</span></a>] <code>;</code>\n<span class=\"ntdfn\" id=\"import-prefix\">import-prefix</span> := <a href=\"#module-prefix\"><span class=\"ntref\">module-prefix</span></a> | <code>_</code>\n<span class=\"ntdfn\" id=\"module-prefix\">module-prefix</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"org-name\">org-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"module-name\">module-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> (<code>.</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>)*\n<span class=\"ntdfn\" id=\"sem-ver\">sem-ver</span> := <a href=\"#major-num\"><span class=\"ntref\">major-num</span></a> [<code>.</code> <a href=\"#minor-num\"><span class=\"ntref\">minor-num</span></a> [<code>.</code> <a href=\"#patch-num\"><span class=\"ntref\">patch-num</span></a>]]\n<span class=\"ntdfn\" id=\"major-num\">major-num</span> := <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a>\n<span class=\"ntdfn\" id=\"minor-num\">minor-num</span> := <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a>\n<span class=\"ntdfn\" id=\"patch-num\">patch-num</span> := <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a>\n\n<span class=\"ntdfn\" id=\"qualified-identifier\">qualified-identifier</span> := <a href=\"#module-prefix\"><span class=\"ntref\">module-prefix</span></a> <code>:</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA <code>module-prefix</code> is a name that is used locally within the source of\na module to refer to another module. A <code>module-prefix</code> in a\nqualified-identifier must refer to a <code>module-prefix</code> specified in an\nimport-declaration in the same source part.\n</p>\n<p>\nAn import-prefix of <code>_</code> causes the module to be imported without\nmaking its symbols available via a module-prefix. In this case, the effect of\nimporting the module will be just to cause the module to be included in the\nprogram and initialized. It is an error for a source-part to import a module\nusing a module-prefix and then not to use that module-prefix.\n</p>\n<p>\nA <code>module-prefix</code> declared by an <code>import-decl</code> is in the\nsame symbol space as a <code>xmlns-namespace-prefix</code> declared by an\n<code>xmlns-decl</code>. This symbol space is distinct from a module's main\nsymbol space used by other declarations.\n</p>\n<p>\nA module prefix of <code>xml</code> is predeclared as referring to the\n<code>lang.xml</code> lang library module, but this can be overridden by an\nimport-decl.\n</p>\n<p>\nIt is an error for a module to directly or indirectly import itself. In other\nwords, the directed graph of module imports must be acyclic.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_8.2\">8.2 Module and program execution</h3>\n<p>\nA Ballerina program consists of one or more modules; one of these modules is\ndistinguished as the <em>root</em> module. The source code for a module uses\nimport declarations to identify the modules on which it depends directly. At\ncompile-time, a root module is specified, and the modules comprising the program\nare inferred to be those that the root module imports directly or indirectly.\nThe directed graph of module imports must be acyclic.\n</p>\n<p>\nProgram execution may terminate successfully or unsuccessfully. Unsuccessful\nprogram termination returns an error value. Program execution consists of two\nconsecutive phases: an initialization phase and a listening phase.\n</p>\n<p>\nModule initialization is performed by calling an initialization function, which\nis synthesized by the compiler for each module. Module initialization can fail,\nin which case the initialization function returns an error value. The\ninitialization phase of program execution consists of initializing each of the\nprogram's modules. If the initialization of a module is unsuccessful, then\nprogram execution immediately terminates unsuccessfully, returning the error\nvalue returned by the initialization function.\n</p>\n<p>\nThe initialization of a program's modules is ordered so that a module will not\nbe initialized until all of the modules on which it depends have been\ninitialized. (Such an ordering will always be possible, since the graph of\nmodule imports is required to be acyclic.) The order in which modules are\ninitialized follows the order in which modules are imported so far as is\nconsistent with the previous constraint.\n</p>\n<p>\nA module's initialization function performs expression evaluation so as to\ninitialize the identifiers declared in the module's declarations; if evaluation\nof an expression completes abruptly, then the module initialization function\nimmediately returns the error value associated with the abrupt completion. If a\nmodule defines a function named <code>__init</code>, then a module's\ninitialization function will end by calling this function; if it terminates\nabruptly or returns an error, then the module's initialization function will\nreturn an error value. Note that the <code>__init</code> function of the root\nmodule will be the last function called during a program's initialization phase.\n</p>\n<p>\nThis specification does not define any mechanism for processing the program\ncommand-line arguments typically provided by an operating system. The Ballerina\nstandard library provides a function to retrieve these command-line arguments.\nIn addition, the Ballerina platform provides a convenient mechanism for\nprocessing these arguments. This works by generating a new command-line\nprocessing module from the specified root module. The <code>__init</code>\nfunction of the generated module retrieves the command-line arguments, parses\nthem, and calls a public function of the specified root module (typically the\n<code>main</code> function). The parsing of the command-line arguments is\ncontrolled by the declared parameter types, annotations and names of the public\nfunctions. The generated module, which imports the specified root module,\nbecomes the new root module.\n</p>\n<p>\nIf the initialization phase of program execution completes successfully, then\nexecution proceeds to the listening phase, which is described in the next\nsection. The termination of the listening phase, which may be successful or\nunsuccessful, terminates the program execution.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_8.3\">8.3 Listeners and services</h3>\n\n<p>\nServices have resource methods, which are the network entry points of a\nBallerina program. Listeners provide the interface between the network and\nservices. A listener object receives network messages from a remote process\naccording to some protocol and translates the received messages into calls on\nthe resource methods of service values that have been attached to the listener\nobject. It is up to the listener object to determine how this translation\nhappens; the type of the listener object thus constrains the type of a service\nthat can be attached to the listener. (This constraint is not yet enforced by\nBallerina's type system.)\n</p>\n<p>\nThe return type of a resource method represents whether the method successfully\nhandled the protocol message. The listener typically calls a resource method\nwith a client object as a parameter. The remote methods on the client object\ncorrespond to the distinct network messages defined by the protocol as possible\nresponses to the message that the resource method is handling. A resource method\ncalled by a listener as a result of a network message received from a remote\nprocess can then use the client object to send a response message back to that\nremote process.\n</p>\n<p>\nThe methods defined by the Listener abstract object type allow for the\nmanagement of the lifecycle of a listener object and its attached services. A\nlistener declaration registers a listener object with a module, so that it can\nbe managed by the module. The runtime state of each module includes a list of\nlistener objects that have been registered with the module. A listener object\nthat has been registered with a module is called a <em>module listener</em>\n</p>\n<p>\nIf at the start of the listening phase of program execution there are no module\nlisteners, then the listening phase immediately terminates successfully.\nOtherwise, the <code>__start</code> method of each module listener is called; if\nany of these calls returns an error value, then the listening phase terminates\nunsuccessfully with this error value as its return value.\n</p>\n<p>\nThe listening phase of program execution continues until either the program\nexplicitly exits, by calling a standard library function, or the user explicitly\nrequests the termination of the program using an implementation-dependent\noperating system facility (such as a signal on a POSIX system). In the latter\ncase, the <code>__gracefulStop</code> or <code>__immediateStop</code> method of\neach registered listener will be called before termination.\n</p>\n\n<section>\n<h4 id=\"section_8.3.1\">8.3.1 Listener declaration</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"listener-decl\">listener-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>listener</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>;</code>\n</pre>\n<p>\nA <code>listener-decl</code> declares a module listener. A module listener\ndeclares a variable in a similar way to a final variable declaration, but the\ntype of the variable is always a subtype of the Listener abstract object type,\nand it has the additional semantic of registering the variable's value with the\nmodule as a listener. As with a variable declared in a final variable\ndeclaration, the variable can be referenced by a variable-reference, but cannot\nbe assigned to. A module may have multiple multiple listeners.\n</p>\n<p>\nIf the type-descriptor is present it specifies the static type of the variable;\nif it is not present, the the static type is the static type of\n<code>expression</code>. In both cases, the static type is constrained to be a\nsubtype of the Listener abstract object type.\n</p>\n<p>\nWhen a listener-decl is initialized as part of module initialization, its\nexpression is evaluated. If expression evaluation completes abruptly, then\nmodule initialization fails. Otherwise the variable is initialized with the\nresult of the evaluation.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_8.3.2\">8.3.2 Service declaration</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"service-decl\">service-decl</span> :=\n  <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n  <code>service</code> [<a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>] <code>on</code> <a href=\"#expression-list\"><span class=\"ntref\">expression-list</span></a> <a href=\"#service-body-block\"><span class=\"ntref\">service-body-block</span></a>\n<span class=\"ntdfn\" id=\"expression-list\">expression-list</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> (<code>,</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>)*\n</pre>\n<p>\nA <code>service-decl</code> creates a service and attaches it to one or more\nlisteners. If a variable-name is specified, it also declares a variable; as with\na variable declared in a final variable declaration, the variable can be\nreferenced by a variable-reference, but cannot be assigned to.\n</p>\n<p>\nThe service-body-block has the same semantics as in a service-constructor-expr.\nThe static type of each expression in the expression list must be a subtype of\nthe union of error with the Listener abstract object type. If an implementation\nis using annotations to provide more precise typing of services, then any\nannotations on the service type that is the first parameter of the\n<code>__attach</code> method in the object type of each expression in expression\nlist will constrain the type of the service value constructed by the\nservice-body-block.\n</p>\n<p>\nA service-decl is initialized as part of module initialization as follows. The\nservice-body-block is evaluated as in a service-constructor resulting in a\nservice value <code><var>s</var></code>. If variable-name is specified, then the\nvariable is initialized to <code><var>s</var></code>. Then for each expression\nin expression-list:\n</p>\n<ol>\n<li>the expression is evaluated resulting in a value which is either an error or\nan object <code><var>obj</var></code> that is a subtype of Listener;</li>\n<li>if it is an error, module initialization fails;</li>\n<li>otherwise, <code><var>obj</var></code> is registered as a module listener\n(registering the same object multiple times is the same as registering it\nonce);</li>\n<li>\n<code><var>s</var></code> is then attached to <code><var>obj</var></code>\nusing <code><var>obj</var></code>'s <code>__attach</code> method;</li>\n<li>if the call to <code>__attach</code> fails, then module initialization\nfails.</li>\n</ol>\n</section>\n</section>\n\n<section>\n<h3 id=\"section_8.4\">8.4 Function definition</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"function-defn\">function-defn</span> := \n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>]\n   <code>function</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#function-defn-body\"><span class=\"ntref\">function-defn-body</span></a>\n<span class=\"ntdfn\" id=\"function-defn-body\">function-defn-body</span> :=\n   <a href=\"#block-function-body\"><span class=\"ntref\">block-function-body</span></a>\n   | <a href=\"#expr-function-body\"><span class=\"ntref\">expr-function-body</span></a> <code>;</code>\n   | <a href=\"#external-function-body\"><span class=\"ntref\">external-function-body</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"external-function-body\">external-function-body</span> := <code>=</code> [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>external</code> \n</pre>\n<p>\nAn <code>external-function-body</code> means that the implementation of the\nfunction is not provided in the Ballerina source module.\n</p>\n<p>\nIf a module has a function-defn with an identifier of <code>__init</code>, it is\ncalled called automatically by the system at the end of the initialization of\nthat module; if this call returns an error, then initialization of the module\nfails. The following special requirements apply to the <code>__init</code>\nfunction of a module: it must not be declared <code>public</code>; its return\ntype must both be a subtype of <code>error?</code> and contain <code>()</code>;\nit must have no parameters.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_8.5\">8.5 Module type definition</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-type-defn\">module-type-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>type</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>;</code>\n</pre>\n</section>\n<section>\n<h3 id=\"section_8.6\">8.6 Module variable declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-var-decl\">module-var-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>final</code>]\n   <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>;</code>\n</pre>\n<p>\nThe scope of variables declared in a module-var-decl is the entire module. Note\nthat module variables are not allowed to be public. If final is specified, then\nit is not allowed to assign to the variable. If the typed-binding-pattern uses\n<code>var</code>, then the type of the variable is inferred from the static type\nof <code>expression</code>; if the module-var-decl includes <code>final</code>,\nthe precise type is used, and otherwise the broad type is used. If the\ntyped-binding-pattern specifies a type-descriptor, then that type-descriptor\nprovides the contextually expected type for action-or-expr.\n</p>\n</section>\n<section>\n<h3 id=\"section_8.7\">8.7 Module constant declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-const-decl\">module-const-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>const</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <code>=</code> <a href=\"#const-expr\"><span class=\"ntref\">const-expr</span></a> <code>;</code>\n</pre>\n<p>\nA module-const-decl declares a compile-time constant. A compile-time constant is\nan named immutable value, known at compile-time. A compile-time constant can be\nused like a variable, and can also be referenced in contexts that require a\nvalue that is known at compile-time, such as in a type-descriptor or in a\nmatch-pattern.\n</p>\n<p>\nThe type of the constant is the singleton type containing just the shape of the\nvalue named by the constant. The type of the constant determines the static type\nof a variable-reference-expr that references this constant.\n</p>\n<p>\nIf type-descriptor is present, then it provides the contextually expected type\nfor the interpretation of const-expr. It is a compile-time error if the static\ntype of const-expr is not a subtype of that type. The type-descriptor must\nspecify a type that is a subtype of anydata. Note that the type-descriptor does\nnot specify the type of the constant, although the type of the constant will all\nbe a subtype of the type specified by the type-descriptor.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_8.8\">8.8 Module XML namespace declaration</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-xmlns-decl\">module-xmlns-decl</span> := <a href=\"#xmlns-decl\"><span class=\"ntref\">xmlns-decl</span></a>\n</pre>\n\n<p>\nA <code>module-xmlns-decl</code> declares an XML namespace prefix with module\nscope. It applies only to the source part in which it occurs, as with an\nimport-decl.\n</p>\n<p>\nThe semantics of xmlns-decl are described in the <a href=\"#XML_namespace_declaration_statement\">XML namespace declaration\nstatement</a> section.\n</p>\n\n</section>\n\n</section>\n<section>\n<h2 id=\"metadata\">9. Metadata</h2>\n<p>\nBallerina allows metadata to be attached to a construct by specifying the\nmetadata before the construct.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"metadata\">metadata</span> := [<a href=\"#DocumentationString\"><span class=\"ntref\">DocumentationString</span></a>] [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>]\n</pre>\n<p>\nThere are two forms of metadata: documentation and annotations.\n</p>\n<section>\n<h3 id=\"section_9.1\">9.1 Annotations</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annots\">annots</span> := <a href=\"#annotation\"><span class=\"ntref\">annotation</span></a>+\n<span class=\"ntdfn\" id=\"annotation\">annotation</span> := <code>@</code> <a href=\"#annot-tag-reference\"><span class=\"ntref\">annot-tag-reference</span></a> <a href=\"#annot-value\"><span class=\"ntref\">annot-value</span></a>\n</pre>\n<p>\nAnnotations provide structured metadata about a particular construct. Multiple\nannotations can be applied to a single construct. An annotation consists of a\ntag and a value.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annotation-decl\">annotation-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] [<code>const</code>] <code>annotation</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] <a href=\"#annot-tag\"><span class=\"ntref\">annot-tag</span></a> \n   [<code>on</code> <a href=\"#annot-attach-points\"><span class=\"ntref\">annot-attach-points</span></a>] <code>;</code>\n<span class=\"ntdfn\" id=\"annot-tag\">annot-tag</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nAn annotation-decl declares an annotation tag. Annotations tags are in a\nseparate symbol space and cannot conflict with other module level declarations\nand definitions. The annotation tag symbol space is also distinct from the\nsymbol space used by module prefixes and XML namespace prefixes.\n</p>\n<p>\nThe type-descriptor specifies the type of the annotation tag. The type must be a\nsubtype of one of the following three types: <code>true</code>,\n<code>map&lt;anydata&gt;</code>, <code>map&lt;anydata&gt;[]</code>. If the\ntype-descriptor is omitted, then the type is <code>true</code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annot-tag-reference\">annot-tag-reference</span> := <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"annot-value\">annot-value</span> := [<a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>]\n</pre>\n<p>\nAn annot-tag-reference in an annotation must refer to an annot-tag declared in\nan annotation declaration. When an annot-tag-reference is a\nqualified-identifier, then the module-prefix of the qualified-identifier is\nresolved using import declarations into a reference to a module, and that module\nmust contain an annotation-decl with the same identifier. An annot-tag-reference\nthat is an identifier rather than a qualified-identifier does <em>not</em> refer\nto an annotation defined within the same module. Rather the compilation\nenvironment determines which identifiers can occur as an\nannotation-tag-reference, and for each such identifier which module defines that\nannotation tag.\n</p>\n<p>\nIf the annotation includes a mapping-constructor-expr, then the value of the\nannotation is the mapping value resulting from evaluating the\nmapping-constructor-expr; otherwise the value is the boolean value\n<code>true</code>. For every construct that has an annotation with a particular\ntag, there is an <em>effective value</em> for that annotation tag, which is\nconstructed from the values of all annotations with that tag that were attached\nto that construct. The effective value must belong to the type of the annotation\ntag.\n</p>\n<p>\nThe type of the annotation tag constrains both the annotation value and the\noccurrence of multiple annotations with the same tag on a single construct as\nfollows.\n</p>\n<ul>\n<li>If the type of the annotation tag is T[] for some T, then the\nmapping-constructor-expr must be specified and its static type must be a subtype\nof T; multiple annotations are allowed; the effective value is a list containing\nthe value for each annotation with the tag in the order specified.</li>\n<li>Otherwise, multiple annotations with this tag are not allowed and the\neffective value for the tag is the value of the single annotation with the tag.\n<ul>\n<li>If the type of the annotation tag is true, then the mapping-constructor-expr\nmust not be specified.</li>\n<li>Otherwise, the mapping-constructor-expr must be specified and its static\ntype must be a subtype of the type of the annotation tag.</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the annotation-decl for a tag specifies <code>const</code>, then a\nmapping-constructor-expr in annotations with that tag must be a const-expr and\nis evaluated at compile-time with the semantics of a const-expr. Otherwise, the\nmapping-constructor-expr is evaluated when the annotation is evaluated and the\nImmutableClone abstract operation is applied to the result.\n</p>\n<p>\nAn annotation applied to a module-level declaration is evaluated when the module\nis initialized. An annotation applied to a service constructor is evaluated when\nthe service constructor is evaluated. An annotation occurring within a type\ndescriptor is evaluated when the type descriptor is resolved.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annot-attach-points\">annot-attach-points</span> := <a href=\"#annot-attach-point\"><span class=\"ntref\">annot-attach-point</span></a> (<code>,</code> <a href=\"#annot-attach-point\"><span class=\"ntref\">annot-attach-point</span></a>)*\n<span class=\"ntdfn\" id=\"annot-attach-point\">annot-attach-point</span> :=\n   <a href=\"#dual-attach-point\"><span class=\"ntref\">dual-attach-point</span></a>\n   | <a href=\"#source-only-attach-point\"><span class=\"ntref\">source-only-attach-point</span></a>\n<span class=\"ntdfn\" id=\"dual-attach-point\">dual-attach-point</span> := [<code>source</code>] <a href=\"#dual-attach-point-ident\"><span class=\"ntref\">dual-attach-point-ident</span></a>\n<span class=\"ntdfn\" id=\"dual-attach-point-ident\">dual-attach-point-ident</span> :=\n   [<code>object</code>] <code>type</code>\n   | [<code>object</code>|<code>resource</code>] <code>function</code>\n   | <code>parameter</code>\n   | <code>return</code>\n   | <code>service</code>\n   | [<code>object</code>|<code>record</code>] <code>field</code>\n<span class=\"ntdfn\" id=\"source-only-attach-point\">source-only-attach-point</span> := <code>source</code> <a href=\"#source-only-attach-point-ident\"><span class=\"ntref\">source-only-attach-point-ident</span></a>\n<span class=\"ntdfn\" id=\"source-only-attach-point-ident\">source-only-attach-point-ident</span> :=\n   <code>annotation</code>\n   | <code>external</code>\n   | <code>var</code>\n   | <code>const</code>\n   | <code>listener</code>\n   | <code>worker</code>\n</pre>\n<p>\nThe <code>annot-attach-points</code> specify the constructs to which an\nannotation can be attached.\n</p>\n<p>\nWhen an attachment point is prefixed with <code>source</code>, then the\nannotation is attached to a fragment of the source rather than to any runtime\nvalue, and thus is not available at runtime. If any of the attachment points\nspecify <code>source</code>, the annotation-decl must specify\n<code>const</code>.\n</p>\n<p>\nWhen an attachment point is not prefixed with source, then the annotation is\naccessible at runtime by applying the annotation access operator to a typedesc\nvalue.\n</p>\n<p>\nThe available attachment points are described in the following table.\n</p>\n<table>\n  <tr>\n   <td><strong>Attachment point name</strong></td>\n   <td><strong>Syntactic attachment point(s)</strong></td>\n   <td><strong>Attached to which type descriptor at runtime</strong></td>\n  </tr>\n  <tr>\n   <td>type</td>\n   <td>module-type-defn, local-type-defn-stmt, type-cast-expr</td>\n   <td>defined type</td>\n  </tr>\n  <tr>\n   <td>object type</td>\n   <td>module-type-defn or local-type-defn-stmt, whose type descriptor is a non-abstract object type\ndescriptor</td>\n   <td>defined type (which will be type of objects constructed using this type)</td>\n  </tr>\n  <tr>\n   <td>function</td>\n   <td>function-defn, method-decl, method-defn, anonymous-function-expr, service-method-defn</td>\n   <td>type of function</td>\n  </tr>\n  <tr>\n   <td>object function</td>\n   <td>method-decl, method-defn</td>\n   <td>type of function</td>\n  </tr>\n  <tr>\n   <td>resource function</td>\n   <td>service-method-defn with resource modifier</td>\n   <td>type of function, on service value</td>\n  </tr>\n  <tr>\n   <td>return</td>\n   <td>returns-type-descriptor</td>\n   <td>indirectly to type of function</td>\n  </tr>\n  <tr>\n   <td>parameter</td>\n   <td>individual-param, rest-param</td>\n   <td>indirectly to type of function</td>\n  </tr>\n  <tr>\n   <td>service</td>\n   <td>service-decl, service-constructor-expr</td>\n   <td>type of service</td>\n  </tr>\n  <tr>\n   <td>field</td>\n   <td>individual-field-descriptor, object-field-descriptor</td>\n   <td>type of mapping or object</td>\n  </tr>\n  <tr>\n   <td>object field</td>\n   <td>object-field-descriptor</td>\n   <td>type of object</td>\n  </tr>\n  <tr>\n   <td>record field</td>\n   <td>individual-field-descriptor</td>\n   <td>type of mapping</td>\n  </tr>\n  <tr>\n   <td>listener</td>\n   <td>listener-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>var</td>\n   <td>module-var-decl, local-var-decl-stmt, let-var-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>const</td>\n   <td>module-const-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>annotation</td>\n   <td>annotation-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>external</td>\n   <td>external-function-body</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>worker</td>\n   <td>named-worker-decl, start-action</td>\n   <td>none</td>\n  </tr>\n</table>\n</section>\n<section>\n<h3 id=\"section_9.2\">9.2 Documentation</h3>\n<p>\nA documentation string is an item of metadata that can be associated with\nmodule-level Ballerina constructs and with method declarations. The purpose of\nthe documentation strings for a module is to enable a programmer to use the\nmodule. Information not useful for this purpose should be provided in in\ncomments.\n</p>\n<p>\nA documentation string has the format of one or more lines each of which has a\n<code>#</code> optionally preceded by blank space.\n</p>\n<p>\nThe documentation statement is used to document various Ballerina constructs.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"DocumentationString\">DocumentationString</span> := <a href=\"#DocumentationLine\"><span class=\"ntref\">DocumentationLine</span></a> +\n<span class=\"ntdfn\" id=\"DocumentationLine\">DocumentationLine</span> := <a href=\"#BlankSpace\"><span class=\"ntref\">BlankSpace</span></a>* <code>#</code> [<a href=\"#Space\"><span class=\"ntref\">Space</span></a>] <a href=\"#DocumentationContent\"><span class=\"ntref\">DocumentationContent</span></a>\n<span class=\"ntdfn\" id=\"DocumentationContent\">DocumentationContent</span> := (^ 0xA)* 0xA\n<span class=\"ntdfn\" id=\"BlankSpace\">BlankSpace</span> := <a href=\"#Tab\"><span class=\"ntref\">Tab</span></a> | <a href=\"#Space\"><span class=\"ntref\">Space</span></a>\n<span class=\"ntdfn\" id=\"Space\">Space</span> := 0x20\n<span class=\"ntdfn\" id=\"Tab\">Tab</span> := 0x9\n</pre>\n<p>\nA <code>DocumentationString</code> is recognized only at the beginning of a\nline. The content of a documentation string is the concatenation of the\n<code>DocumentationContent</code> of each <code>DocumentationLine</code> in the\n<code>DocumentationString</code>. Note that a single space following the # is\nnot treated as part of the DocumentationContent.\n</p>\n<p>\nThe content of a <code>DocumentationString</code> is parsed as Ballerina\nFlavored Markdown (BFM). BFM is also used for a separate per-module\ndocumentation file, conventionally called <code>Module.md</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_9.3\">9.3 Ballerina Flavored Markdown</h3>\n<p>\nBallerina Flavored Markdown is GitHub Flavored Markdown, with some additional\nconventions.\n</p>\n<p>\nIn the documentation string attached to a function or method, there must be\ndocumentation for each parameter, and for the return value if the return value\nis not nil. The documentation for the parameters and a return value must consist\nof a Markdown list, where each list item must have the form <code>ident -\ndoc</code>, where ident is either the parameter name or return, and doc is the\ndocumentation of that parameter or of the return value.\n</p>\n<p>\nThe documentation for an object must contain a list of fields rather than\nparameters. Private fields should not be included in the list.\n</p>\n<p>\nBFM also provides conventions for referring to Ballerina-defined names from\nwithin documentation strings in a source file. An identifier in backticks\n<code>`X`</code>, when preceded by one of the following words:\n</p>\n<ul>\n<li><code>type</code></li>\n<li><code>service</code></li>\n<li><code>variable</code></li>\n<li><code>var</code></li>\n<li><code>annotation</code></li>\n<li><code>module</code></li>\n<li><code>function</code></li>\n<li><code>parameter</code></li>\n</ul>\n<p>\nis assumed to be a reference to a Ballerina-defined name of the type indicated\nby the word. In the case of <code>parameter</code>, the name must be unqualified\nand be the name of a parameter of the function to which the documentation string\nis attached. For other cases, if the name is unqualified it must refer to a\npublic name of the appropriate type in the source file's module; if it is a\nqualified name M:X, then the source file must have imported M, and X must refer\nto a public name of an appropriate type in M. BFM also recognizes\n<code>`f()`</code> as an alternative to <code>function `f`</code>. In both\ncases, f can have any of the following forms (where `m` is a module import, `x` is a\nfunction name, `T` is an object type name, and `y` is a method name):\n</p>\n\n<pre>    x()\n    m:x()\n    T.y()\n    m:T.y()\n</pre>\n<p>\nExample\n</p>\n\n<pre>    # Adds parameter `x` and parameter `y`\n    # + x - one thing to be added\n    # + y - another thing to be added\n    # + return - the sum of them\n    function add (int x, int y) returns int { return x + y; }\n</pre>\n\n<p>\nThe Ballerina platform may define additional conventions, in particular relating\nto headings with particular content. For example, a heading with a content of\n<code>Deprecated</code> can be used to provide information about the deprecation\nof the name to which the documentation string is attached.\n</p>\n\n</section>\n</section>\n<section>\n<h2 id=\"lang_library\">10. Lang library</h2>\n\n<p>\nModules in the <code>ballerina</code> organization with a module name starting\nwith <code>lang.</code> are reserved for use by this specification. These\nmodules are called the <em>lang library</em>.\n</p>\n<p>\nThe lang library comprises the following modules. With the exception of the\n<code>lang.value</code> module, each corresponds to a basic type.\n</p>\n<ul>\n<li><code><a href=\"./lib/value.bal\" type=\"text/plain\">lang.value</a></code></li>\n<li>\n<code><a href=\"./lib/array.bal\" type=\"text/plain\">lang.array</a></code> for\nbasic type list</li>\n<li>\n<code><a href=\"./lib/boolean.bal\" type=\"text/plain\">lang.boolean</a></code> for\nbasic type boolean</li>\n<li>\n<code><a href=\"./lib/decimal.bal\" type=\"text/plain\">lang.decimal</a></code>\nfor basic type decimal</li>\n<li>\n<code><a href=\"./lib/error.bal\" type=\"text/plain\">lang.error</a></code> for\nbasic type error</li>\n<li>\n<code><a href=\"./lib/float.bal\" type=\"text/plain\">lang.float</a></code> for\nbasic type float</li>\n<li>\n<code><a href=\"./lib/future.bal\" type=\"text/plain\">lang.future</a></code>\nfor basic type future</li>\n<li>\n<code><a href=\"./lib/int.bal\" type=\"text/plain\">lang.int</a></code> for\nbasic type int</li>\n<li>\n<code><a href=\"./lib/map.bal\" type=\"text/plain\">lang.map</a></code> for\nbasic type mapping</li>\n<li>\n<code><a href=\"./lib/object.bal\" type=\"text/plain\">lang.object</a></code>\nfor basic type object</li>\n<li>\n<code><a href=\"./lib/string.bal\" type=\"text/plain\">lang.string</a></code>\nfor basic type string</li>\n<li>\n<code><a href=\"./lib/stream.bal\" type=\"text/plain\">lang.stream</a></code>\nfor basic type stream</li>\n<li>\n<code><a href=\"./lib/table.bal\" type=\"text/plain\">lang.table</a></code> for\nbasic type table</li>\n<li>\n<code><a href=\"./lib/typedesc.bal\" type=\"text/plain\">lang.typedesc</a></code> for\nbasic type typedesc</li>\n<li>\n<code><a href=\"./lib/xml.bal\" type=\"text/plain\">lang.xml</a></code> for\nbasic type xml</li>\n</ul>\n<p>\nFor each version of the specification, there is a separate version number for\neach module in its lang library. The module version numbers for this version of\nthe specification are <a href=\"./lib/versions.json\" type=\"text/plain\">specified</a> in JSON format.\n</p>\n<p>\nModules in the lang library can make use generic typing. Since generic typing\nhas not yet been added to Ballerina, the source code for the modules use an\nannotation to describe generic typing as follows. When a module type definition\nhas a <code>@typeParam</code> annotation, it means that this type serves as a\ntype parameter when it is used in a function definition: all uses of the type\nparameter in a function definition refer to the same type; the definition of the\ntype is an upper bound on the type parameter.\n</p>\n<p>\n<strong>Note</strong> We plan to provide full support for generic types in\na future version of this specification.\n</p>\n\n<section>\n<h3 id=\"built-in_subtypes\">10.1 Built-in subtypes</h3>\n<p>\nA module in the lang library can provide types that are <em>built-in</em> in the\nsense that their meaning is defined by this specification. Each such built-in\ntype is a subtype of a single basic type; a built-in type that is a subtype of a\nbasic type <code><var>B</var></code> is provided by the module\n<code>lang.<var>B</var></code>.\n</p>\n<p>\nThe built-types provided by lang library modules are described in the following\ntable.\n</p>\n\n<table>\n<tr>\n<th>Basic type</th>\n<th>Type name</th>\n<th>Criteria for <em>v</em> to belong to type</th>\n</tr>\n<tr>\n<td rowspan=\"6\">int</td>\n<td>Unsigned8</td>\n<td>0 â¤ <em>v</em> â¤ 255</td>\n</tr>\n<tr>\n<td>Signed8</td>\n<td>-128 â¤ <em>v</em> â¤ 127</td>\n</tr>\n<tr>\n<td>Unsigned16</td>\n<td>0 â¤ <em>v</em> â¤ 65,535</td>\n</tr>\n<tr>\n<td>Signed16</td>\n<td>-32,768 â¤ <em>v</em> â¤ 32,767</td>\n</tr>\n<tr>\n<td>Unsigned32</td>\n<td>0 â¤ <em>v</em> â¤ 4,294,967,295</td>\n</tr>\n<tr>\n<td>Signed32</td>\n<td>-2,147,483,648â¬ â¤ <em>v</em> â¤ 2,147,483,6487</td>\n</tr>\n<tr>\n<td>string</td>\n<td>Char</td>\n<td>\n<em>v</em> has length 1</td>\n</tr>\n<tr>\n<td rowspan=\"4\">xml</td>\n<td>Element</td>\n<td>\n<em>v</em> is an element singleton</td>\n</tr>\n<tr>\n<td>ProcessingInstruction</td>\n<td>\n<em>v</em> is a processing instruction singleton</td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>\n<em>v</em> is a comment singleton</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>\n<em>v</em> is either the empty xml value or a text singleton</td>\n</tr>\n</table>\n<p>\nEach built-in type has a type definition in the module that provides it. The\ntype descriptor of the type definition is the corresponding basic type. The type\ndefinition has a <code>@builtinSubtype</code> annotation, which indicates that\nthe meaning of the type name is built-in, as specified in the above table,\nrather than coming from its type descriptor. It is an error to use the\n<code>@builtinSubtype</code> annotation except in a lang library module.\n</p>\n<p>\nSo, for example, the <code>lang.int</code> module would include the definition:\n</p>\n<pre>\n@builtinSubtype\ntype Signed32 int;\n</pre>\n<p>\nSemantically, these types behave like a predefined type that can be referenced\nby an unqualified name, such as <code>byte</code>. Syntactically, these types\nare referenced by a <code>type-reference</code> in the same way as if their\ndefinitions were not built-in. A built-in type <code>T</code> which is a subtype\nof basic type <code>B</code> can be referenced by a type-reference\n<code>M:T</code>, where <code>M</code> is a module-prefix referring to module\n<code>ballerina/lang.B</code>.\n</p>\n<p>\nFor convenience, this specification refers to the built-in subtype T provided by\nthe module for basic type B as B:T. For example, in this specification\n<code>int:Signed32</code> refers to the <code>Signed32</code> built-in subtype\nof <code>int</code>, which is provided by the <code>lang.int</code> module.\n</p>\n<p>\nThe <code>int:Unsigned8</code> type is equivalent to the predefined\n<code>byte</code> type.\n</p>\n</section>\n\n</section>\n<section class=\"appendix\">\n<h2 id=\"references\">A. References</h2>\n<ul>\n<li>Unicode</li>\n<li>XML</li>\n<li>JSON</li>\n<li>RFC 3629 UTF-8</li>\n<li>IEEE 754-2008</li>\n<li>GitHub Markdown</li>\n</ul>\n</section>\n<section class=\"appendix\">\n<h2 id=\"changes\">B. Changes since previous versions</h2>\n<section>\n<h3 id=\"section_B.1\">B.1 Summary of changes from 2019R3 to 2020R1</h3>\n<ol>\n<li>Query expressions and query actions have been added. This is the first stage\nof language-integrated query.</li>\n<li>The stream basic type has been added.</li>\n<li>Let expressions have been added.</li>\n<li>The XML design has been refined and no longer has Preview status.\n<ul>\n<li>The various kinds of xml item (e.g. element and text) are subtypes of the\n<code>xml</code> type.</li>\n<li>The <code>xml</code> type can have a type parameter specifying the item\ntypes.</li>\n<li>Iteration over xml values exposes characters as text items rather than strings</li>\n<li>Adjacent characters in XML content are chunked into a single text item.</li>\n<li>The meaning of <code>===</code> for xml has changed.</li>\n<li>The item of an xml sequence value x with index i can be accessed using an\nexpression x[i].</li>\n<li>The syntax <code>x@</code> for accessing the attributes of an XML element has\nbeen removed.</li>\n</ul>\n</li>\n<li>The <code>lock</code> statement has been added.</li>\n<li>When a list constructor or mapping constructor is used without a\ncontextually expected type, we now infer a tuple or record type rather than an\narray or map type.</li>\n<li>The syntax for Unicode escapes in strings has changed from\n<code>\\u[<em>CodePoint</em>]</code> to <code>\\u{<em>CodePoint</em>}</code> so as\nto align with ECMAScript. Although this is an incompatible change, the previous\nsyntax was not implemented.</li>\n<li>The <code>never</code> type has been added.</li>\n<li>Lang library modules can now provide built-in subtypes of existing basic\ntypes.</li>\n<li>There is a lang.boolean lang lib module.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.2\">B.2 Summary of changes from 2019R2 to 2019R3</h3>\n<ol>\n<li>An import declaration can use <code>as _</code> to include a module in the\nprogram without using its symbols.</li>\n<li>The specification of experimental features has been moved to a separate\ndocument.</li>\n<li>A wait-action can result in an error value when applied to a future that is\nnot a named worker.</li>\n</ol>\n</section>\n\n<section>\n<h3 id=\"section_B.3\">B.3 Summary of changes from 2019R1 to 2019R2</h3>\n<ol>\n<li>The concept of a built-in method has been replaced by the concept of a lang\nlibrary. A method call on a value of non-object type is now treated as a\nconvenient syntax for a call to a function in a module of the lang library. The\ndesign of the many of the existing built-in methods has been changed to fit in\nwith this. There are many functions in the lang library that were not previously\navailable as built-in methods.</li>\n<li>A mapping value is now iterable as a sequence of its members (like list),\nrather than as a sequence of key-value pairs. The <code>entries</code> lang library\nfunction allows it to be iterated as a sequence of key-value pairs.</li>\n<li>The basic type <code>handle</code> has been added.</li>\n<li>The <code>table&lt;T&gt;</code> type descriptor shorthand has been brought\nback.</li>\n<li>There is now a variation on <code>check</code> called\n<code>checkpanic</code>, which panics rather than returns on error.</li>\n<li>A range-expr now returns an object belonging to the Iterable abstract object\ntype, rather than a list.</li>\n<li>The decimal type now uses a simplified subset of IEEE 754-2008 decimal\nfloating point.</li>\n<li>The status of XML-related features has been changed to preview.</li>\n<li>The ability to define a method outside the object type has been\nremoved.</li>\n<li>The UnfrozenClone operation has been removed.</li>\n<li>The Freeze operation has been replaced by the ImmutableClone operation.</li>\n<li>The semantics of field access, member access and assignment are now\nfully specified.</li>\n<li>A <code>?.</code> operator has been added for access to optional fields.</li>\n<li>A type-cast-expr can include annotations.</li>\n<li>The error detail record must belong to type Detail defined in the lang\nlibrary.</li>\n<li>The compile-time requirement that the inherent type of a variable-length\nlist must allow members to be filled-in has been removed; this is instead caught\nat run-time.</li>\n<li>Parameter names now have public or module-level visibility, which determines\nwhen a function call can use the parameter name to specify an argument.</li>\n<li>A type descriptor <code>record { }</code> is open to <code>anydata</code>\nrather than <code>anydata|error</code>.</li>\n<li>Calls using <code>start</code> are treated as actions, and so are not\nallowed within expressions.</li>\n<li>There is a new syntax for allowing arbitrary strings as identifiers to\nreplace the old delimited identifier syntax <code>^\"<var>s</var>\"</code>.</li>\n</ol>\n\n</section>\n<section>\n<h3 id=\"section_B.4\">B.4 Summary of changes from 0.990 to 2019R1</h3>\n<p>\nThe specification has switched to a new versioning scheme. The <var>n</var>-th\nversion of the specification released in year 20<var>xy</var> will be labelled\n20<var>xy</var>R<var>n</var>.\n</p>\n<ol>\n<li>Tuples types now use square brackets, rather than parentheses, as do tuple\nbinding patterns and tuple match patterns. Array constructors and tuple\nconstructors are now unified into list constructors, which use square brackets.\nTuple types can have zero members or one member, and can use <code>T...</code>\nsyntax allow trailing members of a specified type.</li>\n<li>The way that record type descriptors express openness has changed. Instead\nof the <code>!...</code> syntax, there are two flavours of record type\ndescriptor, which use different delimiters: <code>record {| |}</code> allows any\nmapping that has exclusively the specified fields, whereas <code>record {\n}</code> allows any mapping that includes the specified fields; the former can\nuse the <code>T...</code> syntax, whereas the latter cannot. The\n<code>!...</code> is no longer allowed for record binding patterns and record\nmatch patterns.</li>\n<li>The syntax for an array with an array length that is inferred has changed\nfrom <code>T[!...]</code> to <code>T[*]</code>.</li>\n<li>A type descriptor of <code>error&lt;*&gt;</code> can be used to specify an\nerror type whose subtype is inferred.</li>\n<li>A new expression can no longer be used to create values of structural types;\nit is only allowed for objects.</li>\n<li>Symbolic string literals <code>'ident</code> have been removed (compile time\nconstants provide a more convenient approach).</li>\n<li>\n<code>untaint</code> expression has been removed (this will be handled by\nannotations instead).</li>\n<li>The syntax for named arguments in a function call has reverted to\n<code>arg=</code> from <code>arg:</code>, since the latter caused syntactic\nambiguities.</li>\n<li>The syntax for error constructors specifies fields of the error detail\nseparately as named arguments, rather than specifying the error detail as a\nsingle argument; the syntax for binding patterns and match patterns for error\nvalues has also changed accordingly.</li>\n<li>The error reason argument can be omitted from an error constructor if it\ncan be determined from the contextually expected type.</li>\n<li>The syntax for annotation declarations has been revised; the places where\nannotations are allowed has been revised to match the possible attachment\npoints.</li>\n<li>An <code>.@</code> binary operator has been added for accessing annotations\nat runtime.</li>\n<li>A unary <code>typeof</code> operator has been added.</li>\n<li>The <code>typedesc</code> type now takes an optional type parameter.</li>\n<li>The type parameters for <code>future</code> and <code>stream</code> are now\noptional.</li>\n<li>The syntax for a function with an external implementation has changed to use\n<code>=external</code> in place of the curly braces.</li>\n<li>A numeric literal can use a suffix of <code>d</code> or <code>f</code> to\nindicate that it represents a value belonging to the decimal or float type\nrespectively.</li>\n<li>Record type descriptors may now specify a default value for fields.</li>\n<li>Providing a default value for a parameter no longer affects whether a function\ncall must supply the argument for that parameter positionally or by name. Instead\nthe argument for any parameter can be supplied either positionally or by name.\nTo avoid ambiguity, all arguments specified positionally must be specified before\narguments specified by name.</li>\n<li>Expressions specifying the default value for function parameters are not\ncompile time constants, and are evaluated each time they are used to supply a\nmissing argument.</li>\n<li>In the argument list of a function or method call, positional arguments are\nnow required to be specified before named arguments.</li>\n<li>Types may now be defined within a block.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.5\">B.5 Summary of changes from 0.980 to 0.990</h3>\n<p>\n<strong>Structural types and values</strong>\n</p>\n<ol>\n<li>Concepts relating to typing of mutable structural values have been changed\nin order to make type system sound.</li>\n<li>The <code>match</code> statement has been redesigned.</li>\n<li>The <code>but</code> expression has been removed.</li>\n<li>The <code>is</code> expression for dynamic type testing has been added.</li>\n<li>The type-cast-expr &lt;T&gt;E now performs unsafe type casts.The only\nconversions it performs are numeric conversions.</li>\n<li>The <code>anydata</code> type has been added, which is a union of simple and\nstructural types.</li>\n<li>Records are now by default open to <code>anydata|error</code>, rather than\n<code>any</code>.</li>\n<li>Type parameters for built-in types (map, stream, future), which previously\ndefaulted to any, are now required.</li>\n<li>The type parameter for json (e.g. json&lt;T&gt;) is not allowed any more.</li>\n<li>Type for table columns are restricted to subtype of anydata|error.</li>\n<li>There are now two flavors of equality operator: == and != for deep equality\n(which is allowed only for <code>anydata</code>), and ===  and !== for exact\nequality.</li>\n<li>There is a built-in clone operation for performing a deep copy on values of\ntype anydata.</li>\n<li>There is a built-in freeze operation for making structural values deeply\nimmutable.</li>\n<li>Compile-time constants (which are always a subtype of anydata and frozen)\nhave been added.</li>\n<li>Singleton types have been generalized: any compile-time constant can be made\ninto a singleton value.</li>\n<li>Variables can be declared final, with a similar semantic to Java.</li>\n<li>Errors are now immutable.</li>\n<li>Module variables are not allowed to be public: only compile-time constants\ncan be public.</li>\n</ol>\n<p>\n<strong>Error handling</strong>\n</p>\n<ol>\n<li>The <code>any</code> type no longer includes <code>error</code>.</li>\n<li>\n<code>check</code> is now an expression.</li>\n<li>Exceptions have been replaced by panics\n<ol>\n<li>the <code>throw</code> statement has been replaced by the <code>panic</code>\nstatement</li>\n<li>the<code> try</code> statement has been replaced by the <code>trap</code>\nexpression</li>\n</ol>\n</li>\n<li>Object constructors (which could not return errors) have been replaced by\n<code>__init</code> methods (which can return errors).</li>\n</ol>\n<p>\n<strong>Concurrency</strong>\n</p>\n<ol>\n<li>Workers in functions have been redesigned. In particular, workers now have a\nreturn value.</li>\n<li>The <code>done</code> statement has been removed.</li>\n<li>The fork/join statement has been redesigned.</li>\n<li>A syntactic category between expression and statement, called action, has\nbeen added.</li>\n<li>A synchronous message send action has been added.</li>\n<li>A flush action has been added to flush asynchronously sent messages.</li>\n<li>A wait action has been added to wait for a worker and get its return value.</li>\n<li>Futures have been unified with workers. A future&lt;T&gt; represents a value to\nbe returned by a named worker.</li>\n<li>Error handling of message send/receive has been redesigned.</li>\n</ol>\n<p>\n<strong>Endpoints and services</strong>\n</p>\n<ol>\n<li>Client endpoints have been replaced by client objects, and actions on client\nendpoints have been replaced by remote methods on client objects. Remote methods\nare called using a remote method call action, which replaces the action\ninvocation statement.</li>\n<li>Module endpoint declaration has been replaced by module listener\ndeclaration, which uses the Listener built-in object type.</li>\n<li>The service type has been added as a new basic type of behavioral value,\ntogether with service constructor expressions for creating service values.</li>\n<li>Module service definitions have been redesigned.</li>\n</ol>\n<p>\n<strong>Miscellaneous changes</strong>\n</p>\n<ol>\n<li>Public/private visibility qualifiers must be repeated on an outside method\ndefinition.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.6\">B.6 Summary of changes from 0.970 to 0.980</h3>\n<ol>\n<li>The decimal type has been added.</li>\n<li>There are no longer any implicit numeric conversions.</li>\n<li>The type of a numeric literal can be inferred from the context.</li>\n<li>The error type is now a distinct basic type.</li>\n<li>The byte type has been added as a predefined subtype of int; blobs have been\nreplaced by arrays of bytes.</li>\n<li>The syntax of string templates and xml literals has been revised and\nharmonized.</li>\n<li>The syntax of anonymous functions has been revised to provide two\nalternative syntaxes: a full syntax similar to normal function definitions and a\nmore convenient arrow syntax for when the function body is an expression.</li>\n<li>The cases of a match statement are required to be exhaustive.</li>\n<li>The + operator is specified to do string and xml concatenation as well as\naddition.</li>\n<li>Bitwise operators have been added (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>,\n<code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>,\n<code>~</code>) rather than = after the argument name.</li>\n<li>In a function call or method call, named arguments have changed to use\n<code>:</code>\n</li>\n<li>A statement with <code>check</code> always handles an error by returning it,\nnot by throwing it.</li>\n<li>\n<code>check</code> is allowed in compound assignment statements.</li>\n<li>Method names are now looked up differently from field names; values of types\nother than objects can now have built-in methods.</li>\n<li>The <code>lengthof</code> unary expression has been removed; the length\nbuilt-in method can be used instead.</li>\n<li>The semantics of &lt;T&gt;expr have been specified.</li>\n<li>The value space for tuples and arrays is now unified, in the same way as the\nvalue space for records and maps was unified. This means that tuples are now\nmutable. Array types can now have a length.</li>\n<li>The <code>next</code> keyword has been changed to <code>continue</code>.</li>\n<li>The syntax and semantics of destructuring is now done in a consistent way\nfor the but expression, the match statement, the foreach statement,\ndestructuring assignment statements and variable declarations.</li>\n<li>The implied initial value is not used as a default initializer in variable\ndeclarations. A local variable whose declaration omits the initializer must be\ninitialized by an assignment before it is used. A global variable declaration\nmust always have an initializer. A new expression can be used with any reference\ntype that has an implicit initial value.</li>\n<li>Postfix increment and decrement statements have been removed.</li>\n<li>The <code>...</code> and <code>..&lt;</code> operators have been added for\ncreating integer ranges; this replaces the foreach statement's special treatment\nof integer ranges.</li>\n<li>An object type can be declared to be abstract, meaning it cannot be used\nwith <code>new</code>.</li>\n<li>By default,  a record type now allows extra fields other than those\nexplicitly mentioned; <code>T...</code> requires extra fields to be of type T\nand <code>!...</code> disallows extra fields.</li>\n<li>In a mapping constructor, an expression can be used for the field name by\nenclosing the expression in square brackets (as in ECMAScript).</li>\n<li>Integer arithmetic operations are specified to throw an exception on\noverflow.</li>\n<li>The syntax for documentation strings has changed.</li>\n<li>The deprecated construct has been removed (data related to deprecation will\nbe provided by an annotation; documentation related to deprecation will be part\nof the documentation string).</li>\n<li>The order of fields, methods and constructors in object types is no longer\nconstrained.</li>\n<li>A function or method can be defined as <code>extern</code>. The\n<code>native</code> keyword has been removed.</li>\n</ol>\n</section>\n</section>\n<section class=\"appendix\">\n<h2 id=\"planned_future_functionality\">C. Planned future functionality</h2>\n\n<p>\nThe vision for the Ballerina language includes a large range of functionality\nthat is not yet included in this specification.\n</p>\n\n<ul>\n<li>\n<em>Transactions</em> will provide language support both local and\ndistributed transactions.</li>\n<li>\n<em>Security</em> will combine language and platform features to make\nprograms secure by default.</li>\n<li>\n<em>Date/time basic types</em> will provide one or more basic types related\nto date and time.</li>\n<li>\n<em>Event stream processing</em> will build on the <code>stream</code> type\nto allow queries over timestamped sequences of events</li>\n<li>\n<em>Service typing</em> will allow for proper typing of service values,\nincluding typing of the response of resource functions.</li>\n<li>\n<em>Generic types</em> will provide types that can be instantiated with one\nor more type parameters.</li>\n<li>\n<em>Flexible message passing</em> will support patterns of communication\nbetween workers/strands, where the number of messages is not fixed and/or\nworkers are not peers.</li>\n<li>\n<em>Long-running processes</em> will allow the execution of a program to be\nautomatically suspended and then later resumed upon the occurrence of particular\nexternal events.</li>\n<li>\n<em>Reliable messaging</em> will allow for sending messages across the\nnetwork with some guarantees about reliability.</li>\n<li>\n<em>Concurrency safety</em> will be able automatically to make safe use of\nmultiple threads</li>\n</ul>\n\n<p>\n<a href=\"https://github.com/ballerina-platform/ballerina-spec/blob/master/lang/proposals/README.md\">Proposals</a>\nfor new language features relating to this and other functionality are\nmaintained in the specification's GitHub repository.\n</p>\n\n</section>\n\n<section class=\"appendix\">\n<h2 id=\"contributors\">D. Other contributors</h2>\n<p>\nThe following contributed to establishing the design principles of the language:\n</p>\n<ul>\n<li>Frank Leymann, <a href=\"mailto:frank.leymann@iaas.uni-stuttgart.de\">frank.leymann@iaas.uni-stuttgart.de</a>\n</li>\n<li>Srinath Perera, <a href=\"mailto:srinath@wso2.com\">srinath@wso2.com</a>\n</li>\n<li>Kasun Indrasiri, <a href=\"mailto:kasun@wso2.com\">kasun@wso2.com</a>\n</li>\n</ul>\n<p>\nThe following also contributed to the language in a variety of ways (in\nalphabetical order):\n</p>\n<ul>\n<li>Shafreen Anfar, <a href=\"mailto:shafreen@wso2.com\">shafreen@wso2.com</a>\n</li>\n<li>Afkham Azeez, <a href=\"mailto:azeez@wso2.com\">azeez@wso2.com</a>\n</li>\n<li>Anjana Fernando, <a href=\"mailto:anjana@wso2.com\">anjana@wso2.com</a>\n</li>\n<li>Chanaka Fernando, <a href=\"mailto:chanakaf@wso2.com\">chanakaf@wso2.com</a>\n</li>\n<li>Joseph Fonseka, <a href=\"mailto:joseph@wso2.com\">joseph@wso2.com</a>\n</li>\n<li>Paul Fremantle, <a href=\"mailto:paul@wso2.com\">paul@wso2.com</a>\n</li>\n<li>Antony Hosking, <a href=\"mailto:antony.hosking@anu.edu.au\">antony.hosking@anu.edu.au</a>\n</li>\n<li>Tyler Jewell, <a href=\"mailto:tylerjewell@gmail.com\">tylerjewell@gmail.com</a>\n</li>\n<li>Anupama Pathirage, <a href=\"mailto:anupama@wso2.com\">anupama@wso2.com</a>\n</li>\n<li>Manuranga Perera, <a href=\"mailto:manu@wso2.com\">manu@wso2.com</a>\n</li>\n<li>Supun Thilina Sethunga, <a href=\"mailto:supuns@wso2.com\">supuns@wso2.com</a>\n</li>\n<li>Sriskandarajah Suhothayan, <a href=\"mailto:suho@wso2.com\">suho@wso2.com</a>\n</li>\n<li>Isuru Udana, <a href=\"mailto:isuruu@wso2.com\">isuruu@wso2.com</a>\n</li>\n<li>Rajith Lanka Vitharana, <a href=\"mailto:rajithv@wso2.com\">rajithv@wso2.com</a>\n</li>\n<li>Mohanadarshan Vivekanandalingam, <a href=\"mailto:mohan@wso2.com\">mohan@wso2.com</a>\n</li>\n<li>Lakmal Warusawithana, <a href=\"mailto:lakmal@wso2.com\">lakmal@wso2.com</a>\n</li>\n<li>Ayoma Wijethunga, <a href=\"mailto:ayoma@wso2.com\">ayoma@wso2.com</a>\n</li>\n</ul>\n</section>\n</body>\n</html>\n"},"__N_SSG":true}