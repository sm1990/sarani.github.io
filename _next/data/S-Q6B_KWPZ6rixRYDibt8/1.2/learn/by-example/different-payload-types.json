{"pageProps":{"frontmatter":{},"content":"\n\n<!DOCTYPE html>\n<html class=\"no-js\">\n<head>\n    <meta charset=\"utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n<meta\n  name=\"description\"\n  content=\"Documentation for the Ballerina Programming Language\"\n/>\n\n<meta name=\"author\" content=\"WSO2, Inc.\" />\n\n<meta\n  name=\"keywords\"\n  content=\"ballerinalang, integration, microservices, programming language, cloud native, ballerina language\"\n/>\n\n<link rel=\"shortcut icon\" href=\"/img/favicon.ico\" />\n<title>Handling Different Payload Types</title>\n<!-- Global site tag (gtag.js) - Google Analytics -->\n<script\n  async\n  src=\"https://www.googletagmanager.com/gtag/js?id=UA-92163714-2\"\n></script>\n<!--FB-->\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"og:title\" content=\"Ballerina - Handling Different Payload Types\" />\n<meta property=\"og:description\" content=\"\" />\n<meta\n  property=\"og:image\"\n  content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\"/>\n<!--TWITTER-->\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta name=\"twitter:site\" content=\"@ballerinalang\" />\n<meta name=\"twitter:creator\" content=\"@ballerinalang\" />\n<meta name=\"twitter:title\" content=\"Ballerina\" />\n<meta name=\"twitter:description\" content=\"\" />\n<meta\n  name=\"twitter:image\"\n  content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\"/>\n<meta name=\"twitter:text:description\" content=\"\" />\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:image:width\" content=\"610\" />\n<!--LINKED IN  -->\n<meta property=\"og:title\" content=\"Ballerina\" />\n<meta\n  property=\"og:image\"\n  content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\"/>\n<meta property=\"og:description\" content=\"\" />\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag() {\n    dataLayer.push(arguments);\n  }\n  gtag(\"js\", new Date());\n  gtag(\"config\", \"UA-92163714-2\");\n</script>\n<!-- Google Tag Manager -->\n<script>\n  (function (w, d, s, l, i) {\n    w[l] = w[l] || [];\n    w[l].push({\n      \"gtm.start\": new Date().getTime(),\n      event: \"gtm.js\",\n    });\n    var f = d.getElementsByTagName(s)[0],\n      j = d.createElement(s),\n      dl = l != \"dataLayer\" ? \"&l=\" + l : \"\";\n    j.async = true;\n    j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl;\n    f.parentNode.insertBefore(j, f);\n  })(window, document, \"script\", \"dataLayer\", \"GTM-PSL2TX4\");\n</script>\n<!-- End Google Tag Manager -->\n\n<!--copy to clipboard lib-->\n<script src=\"/js/clipboard.js-2.0.0/clipboard.min.js\"></script>\n\n<script src=\"/js/latest-jquery.js\"></script>\n<script>\n  var base_url = \"\";\n</script>\n<link\n  rel=\"stylesheet\"\n  href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\"\n  integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\"\n  crossorigin=\"anonymous\"\n/>\n<!-- Optional theme -->\n<link\n  rel=\"stylesheet\"\n  href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css\"\n  integrity=\"sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ\"\n  crossorigin=\"anonymous\"\n/>\n<!-- Latest compiled and minified JavaScript -->\n<script\n  src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"\n  integrity=\"sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd\"\n  crossorigin=\"anonymous\"\n></script>\n<!-- <link rel=\"stylesheet\" href=\"https://use.typekit.net/son4ymv.css\"> -->\n\n<!-- <script type=\"text/javascript\" src=\"/js/highlight.pack.js\"></script> -->\n\n<link rel=\"stylesheet\" href=\"/css/prism.css\">\n\n<script src=\"/js/ballerina-common.js\"></script>\n<link rel=\"stylesheet\" href=\"/css/ballerina-io.css\" />\n<link rel=\"stylesheet\" href=\"/css/ballerina-io-bbe.css\" />\n<link rel=\"stylesheet\" href=\"/css/bbe-page.css\" />\n<script>\n  // Current page data\n  var mkdocs_page_name = '\"Home\"'.replace(/^\"|\"$/g, \"\");\n  var mkdocs_page_input_path = '\"index.md\"'.replace(/^\"|\"$/g, \"\");\n  var mkdocs_page_url = '\"/\"'.replace(/^\"|\"$/g, \"\");\n\n  var releaseNoteFilename = \"RELEASE_NOTE.html\";\n\n  var nightly_download_url = \"https://product-dist.ballerina.io/nightly\";\n  var dev_download_url = \"https://product-dist.ballerina.io/dev\";\n  var base_download_url = \"https://dist.ballerina.io/downloads\";\n\n  $(document).ready(function () {\n    $(\"table\").removeClass(\"table-striped\");\n    $(\".ballerina\").addClass(\"language-ballerina\");\n    $(\"pre\").addClass(\"language-ballerina\");\n  });\n</script>\n\n</head>\n<body class=\"cBallerina-io\">\n    <header data-plugin-header=\"line-numbers\"></header>\n<style>\n    .cVersionChangeBanner{\n    color: #000000;\n    background-color: #fcdf4a !important;\n    width: 100%;\n    display: inline-block;\n    padding: 10px 0px;\n    text-align: center;\n    font-weight: 500;\n    font-size: 20px;\n    transition : all 0.3s;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    height: 50px;\n    z-index: 9;\n    }\n    .cInfoBannerLink{\n        color: #000000;\n        text-decoration: underline;\n    }\n    .cInfoBannerLink:hover{\n        color: #545454 !important;\n        text-decoration: underline !important;\n    }\n    .cBallerina-io-Gray-row {\n       padding-top: 70px !important;\n    }\n    @media only screen and (max-width: 992px) {\n        .cBallerina-io-Gray-row {\n       padding-top: 140px !important;\n    }\n\n    #noscript-warning{\n        position: relative;\n    text-align: center;\n    padding: 7px 15px;\n    background-color: #57595d;\n    color: #fff;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    }\n</style>\n<noscript>\n    <div id=\"noscript-warning\">Ballerina works best with JavaScript enabled.</div>\n</noscript>\n     <div class=\"cVersionChangeBanner\">\n        This documentation is for Ballerina 1.2.0. <a href=\"https://ballerina.io/learn/\" class=\"cInfoBannerLink\">View documentation for the latest release</a>.\n    </div>\n<div class=\"row cBallerina-io-Nav\" id=\"iMainNavigation\" style=\"top:50px\">\n\n    <div class=\"container\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n            <nav class=\"navbar\">\n                <div>\n                    <div class=\"navbar-header\">\n                        <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\"\n                            data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                            <span class=\"sr-only\">&#9776</span>\n                            <span class=\"icon-bar\"></span>\n                            <span class=\"icon-bar\"></span>\n                            <span class=\"icon-bar\"></span>\n                        </button>\n                        <a class=\"cMobileLogo\" href=\"/\"><img src=\"/img/ballerina-logo.svg\" alt=\"Ballerina\" /></a>\n                    </div>\n                    <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                        <ul class=\"nav navbar-nav cTopNav\">\n                            <li class=\"toctree-l1\" id=\"playli\"><a class=\"cBioTopLink\" href=\"/downloads/\">Download</a>\n                            </li>\n                            <li class=\"toctree-l1\" id=\"playli\"><a class=\"cBioTopLink\" href=\"https://play.ballerina.io/\"\n                                    target=\"_blank\">Playground</a>\n                            </li>\n                            <li class=\"active toctree-l1\" id=\"learnli\"><a class=\"cBioTopLink\" href=\"/learn\">Learn</a>\n                            </li>\n                            <!--<li class=\"active toctree-l1\" id=\"eventsli\"><a class=\"cBioTopLink\" href=\"/learn/events\">Events</a>\n                            </li>-->\n                            <li class=\"toctree-l1\"><a class=\"cBioTopLink\" href=\"https://central.ballerina.io/\"\n                                    target=\"_blank\">Central</a></li>\n                            <li class=\"toctree-l1\" id=\"openli\"><a class=\"cBioTopLink\" href=\"/community\">Community</a>\n                            </li>\n                            <li class=\"toctree-l1\" id=\"helpli\"><a class=\"cBioTopLink\"\n                                    href=\"https://blog.ballerina.io\">Blog</a>\n                            </li>\n                            <li class=\"cVersionItem\">\n                                <div class=\"cVersionContainer\">\n                                    <!-- <lable class=\"cVlable\">Version</lable> -->\n                                    <select name=\"versions\" id=\"versions\" class=\"select-css\">\n                                        <option value=\"swan-lake\" data-value=\"latest\">Swan Lake</option>\n                                        <option value=\"1.2\">v1.2</option>\n                                        <option value=\"1.1\">v1.1</option>\n                                        <option value=\"1.0\">v1.0</option>\n\n                                    </select>\n                                </div>\n                            </li>\n                            <li class=\"cSearchMenu\">\n                               \n                                <!-- at the end of the HEAD -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css\"\n/>\n<style>\n  .algolia-search-cont {\n    margin-top: -10px;\n  }\n  .algolia-search-wrap {\n    display: flex;\n    align-items: center;\n  }\n  .algolia-search-cont .search-icon {\n    margin-right: 10px;\n  }\n  .algolia-search-cont .algolia-search-box {\n    border: none;\n    background-image: none;\n    background-color: transparent;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n    outline: none;\n  }\n</style>\n<div class=\"algolia-search-cont\">\n  <div class=\"algolia-search-wrap form-control\">\n    <span\n      class=\"glyphicon glyphicon-search search-icon\"\n      aria-hidden=\"true\"\n    ></span>\n    <input\n      autocapitalize=\"off\"\n      autocomplete=\"off\"\n      autocorrect=\"off\"\n      placeholder=\"Search...\"\n      role=\"textbox\"\n      spellcheck=\"false\"\n      type=\"text\"\n      value=\"\"\n      class=\"algolia-search-box\"\n      id=\"algolia-search-box\"\n    />\n  </div>\n</div>\n\n<!-- at the end of the BODY -->\n<script\n  type=\"text/javascript\"\n  src=\"https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js\"\n></script>\n<script type=\"text/javascript\">\n  docsearch({\n    apiKey: \"6a63d4bcf6378ddf3f8724185ddcf626\",\n    indexName: \"ballerina\",\n    inputSelector: \"#algolia-search-box\",\n    debug: false, // Set debug to true if you want to inspect the dropdown\n  });\n</script>\n\n                                <!-- <form class=\"cSearch-form-inline\"><input id=\"searchTxt\" class=\"form-control-field\"\n                                        type=\"search\" placeholder=\"Search\" aria-label=\"Search\"><a id=\"searchBtn\"\n                                        href=\"#\" class=\"cSearchButton\"><img src=\"/img/search.svg\" /></a></form> -->\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    </div>\n</div>\n\n<div class=\"row cBallerina-io-Gray-row\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 cBallerina-io-Home-Middle-col\">\n                <div class=\"col-xs-12 col-sm-12\" style=\"padding: 0;\">\n                    <div class=\"col-md-12 col-lg-10 cBallerina-io-breadcrumbs\">\n                        <nav class=\"breadcrumbs bootstrap hidden-sm-down\"\n  >\n  <ul id=\"breadcrumb-list\" class=\" cBalleinaBreadcrumbs list-unstyled  wy-breadcrumbs\" vocab=\"http://schema.org/\"\n    typeof=\"BreadcrumbList\">\n\n\n    \n    <li><a href=\"/\">Home</a></li>\n    \n    \n    <li>/</li>\n    <li><a\n        href=\"/1.2/\">1.2</a>\n    </li>\n    \n    \n    \n    <li>/</li>\n    <li><a\n        href=\"/1.2/learn/\">Learn</a>\n    </li>\n    \n    \n    \n    <li>/</li>\n    <li><a\n        href=\"/1.2/learn/by-example/\">By example</a>\n    </li>\n    \n    \n    \n    <li>/</li> Handling Different Payload Types\n    \n    \n\n  </ul>\n</nav>\n<style type=\"text/css\">\n  .cBalleinaBreadcrumbs li {\n    margin-right: 10px;\n  }\n</style>\n                        <div class=\"cVersionContainer\"></div>\n                    </div>\n                    <div class=\"col-md-12 col-lg-2 cBallerina-io-breadcrumbs\">\n                        <ul class=\"wy-breadcrumbs\">\n                            <!-- <li class=\"wy-breadcrumbs-aside\">\n                                <a class=\"icon icon-github\" target=\"_blank\" href=\"https://www.github.com/ballerina-platform/ballerina-dev-website/blob/master/1.2/learn/by-example/different-payload-types.html\">Edit on GitHub</a>\n                            </li> -->\n                        </ul>\n                    </div>\n                </div>\n                <div class=\"cBlallerina-io-docs-content-container\">\n                    <div class=\"wy-nav-content\">\n                        <div class=\"rst-content\">\n                            <div role=\"main\">\n                                <div class=\"section\">\n                                    <div class=\"row cBallerina-io-Gray-row\">\n        <div class=\"container cBallerinaBySampleContainer\">\n            <div class=\"FullCode\">\n                <div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nx\">ballerina</span><span class=\"o\">/</span><span class=\"nx\">http</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"nx\">ballerina</span><span class=\"o\">/</span><span class=\"nx\">io</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"nx\">ballerina</span><span class=\"o\">/</span><span class=\"nx\">log</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"nx\">ballerina</span><span class=\"o\">/</span><span class=\"nx\">mime</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//Client endpoint.</span>\n<span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Client</span> <span class=\"nx\">clientEP</span> <span class=\"p\">=</span> <span class=\"nx\">new</span> <span class=\"p\">(</span><span class=\"s\">&quot;http://localhost:9091/backEndService&quot;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">//Service to test HTTP client remote functions with different payload types.</span>\n<span class=\"kd\">service</span> <span class=\"nx\">actionService</span> <span class=\"nx\">on</span> <span class=\"nx\">new</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Listener</span><span class=\"p\">(</span><span class=\"mi\">9090</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">resource</span> <span class=\"kd\">function</span> <span class=\"nx\">messageUsage</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Caller</span> <span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Request</span> <span class=\"nx\">req</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">//GET remote function without any payload.</span>\n        <span class=\"k\">var</span> <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;/greeting&quot;</span><span class=\"p\">);</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//GET remote function with request as message.</span>\n        <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Request</span> <span class=\"nx\">request</span> <span class=\"p\">=</span> <span class=\"nx\">new</span><span class=\"p\">;</span>\n        <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;/greeting&quot;</span><span class=\"p\">,</span> <span class=\"kt\">message</span> <span class=\"p\">=</span> <span class=\"nx\">request</span><span class=\"p\">);</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//POST remote function without any payload.</span>\n        <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/echo&quot;</span><span class=\"p\">,</span> <span class=\"p\">());</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//POST remote function with text as payload.</span>\n        <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/echo&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Sample Text&quot;</span><span class=\"p\">);</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//POST remote function with `xml` as payload.</span>\n        <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/echo&quot;</span><span class=\"p\">,</span> <span class=\"kt\">xml</span> <span class=\"s\">`&lt;yy&gt;Sample Xml&lt;/yy&gt;`</span><span class=\"p\">);</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//POST remote function with `json` as payload.</span>\n        <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/echo&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"s\">&quot;apple&quot;</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"p\">:</span> <span class=\"s\">&quot;red&quot;</span><span class=\"p\">});</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//POST remote function with `byte[]` as payload.</span>\n        <span class=\"kt\">string</span> <span class=\"nx\">textVal</span> <span class=\"p\">=</span> <span class=\"s\">&quot;Sample Text&quot;</span><span class=\"p\">;</span>\n        <span class=\"nx\">byte</span><span class=\"p\">[]</span> <span class=\"nx\">binaryValue</span> <span class=\"p\">=</span> <span class=\"nx\">textVal</span><span class=\"p\">.</span><span class=\"nx\">toBytes</span><span class=\"p\">();</span>\n        <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/echo&quot;</span><span class=\"p\">,</span> <span class=\"nx\">binaryValue</span><span class=\"p\">);</span>\n        <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">//Get a byte channel to a given file.</span>\n        <span class=\"k\">var</span> <span class=\"nx\">bChannel</span> <span class=\"p\">=</span> <span class=\"nx\">io</span><span class=\"p\">:</span><span class=\"nx\">openReadableFile</span><span class=\"p\">(</span><span class=\"s\">&quot;./files/logo.png&quot;</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">bChannel</span> <span class=\"nx\">is</span> <span class=\"nx\">io</span><span class=\"p\">:</span><span class=\"nx\">ReadableByteChannel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">//POST remote function with byte channel as payload. Since the file path is static</span>\n            <span class=\"c1\">//`untaint` is used to denote that the byte channel is trusted .</span>\n            <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/image&quot;</span><span class=\"p\">,</span> <span class=\"p\">&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">bChannel</span><span class=\"p\">);</span>\n            <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">//Create a JSON body part.</span>\n            <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">Entity</span> <span class=\"nx\">part1</span> <span class=\"p\">=</span> <span class=\"nx\">new</span><span class=\"p\">;</span>\n            <span class=\"nx\">part1</span><span class=\"p\">.</span><span class=\"nx\">setJson</span><span class=\"p\">({</span><span class=\"s\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;Jane&quot;</span><span class=\"p\">});</span>\n\n            <span class=\"c1\">//Create a text body part.</span>\n            <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">Entity</span> <span class=\"nx\">part2</span> <span class=\"p\">=</span> <span class=\"nx\">new</span><span class=\"p\">;</span>\n            <span class=\"nx\">part2</span><span class=\"p\">.</span><span class=\"nx\">setText</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">//POST remote function with body parts as payload.</span>\n            <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">Entity</span><span class=\"p\">[]</span> <span class=\"nx\">bodyParts</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"nx\">part1</span><span class=\"p\">,</span> <span class=\"nx\">part2</span><span class=\"p\">];</span>\n            <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">clientEP</span><span class=\"o\">-&gt;</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s\">&quot;/echo&quot;</span><span class=\"p\">,</span> <span class=\"nx\">bodyParts</span><span class=\"p\">);</span>\n            <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n\n            <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"s\">&quot;Client actions successfully executed!&quot;</span><span class=\"p\">);</span>\n            <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Response</span> <span class=\"nx\">res</span> <span class=\"p\">=</span> <span class=\"nx\">new</span><span class=\"p\">;</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"p\">=</span> <span class=\"mi\">500</span><span class=\"p\">;</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">setPayload</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span> <span class=\"kt\">string</span><span class=\"p\">&gt;</span><span class=\"nx\">bChannel</span><span class=\"p\">.</span><span class=\"nx\">detail</span><span class=\"p\">()</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"kt\">message</span><span class=\"p\">);</span>\n            <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n            <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Back end service that send out different payload types as response.</span>\n<span class=\"kd\">service</span> <span class=\"nx\">backEndService</span> <span class=\"nx\">on</span> <span class=\"nx\">new</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Listener</span><span class=\"p\">(</span><span class=\"mi\">9091</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nd\">@http:ResourceConfig {</span>\n        <span class=\"nx\">methods</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;GET&quot;</span><span class=\"p\">],</span>\n        <span class=\"nx\">path</span><span class=\"p\">:</span> <span class=\"s\">&quot;/greeting&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">resource</span> <span class=\"kd\">function</span> <span class=\"nx\">replyText</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Caller</span> <span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Request</span> <span class=\"nx\">req</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">error</span><span class=\"err\">?</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"nx\">is</span> <span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"s\">&quot;Error in responding to caller&quot;</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@http:ResourceConfig {</span>\n        <span class=\"nx\">methods</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;POST&quot;</span><span class=\"p\">],</span>\n        <span class=\"nx\">path</span><span class=\"p\">:</span> <span class=\"s\">&quot;/echo&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">resource</span> <span class=\"kd\">function</span> <span class=\"nx\">directResponse</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Caller</span> <span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Request</span> <span class=\"nx\">req</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">hasHeader</span><span class=\"p\">(</span><span class=\"s\">&quot;content-type&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kt\">string</span> <span class=\"nx\">baseType</span> <span class=\"p\">=</span> <span class=\"nx\">getBaseType</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getContentType</span><span class=\"p\">());</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">TEXT_PLAIN</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">returnValue</span> <span class=\"p\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getTextPayload</span><span class=\"p\">();</span>\n                <span class=\"kt\">string</span> <span class=\"nx\">textValue</span> <span class=\"p\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">returnValue</span> <span class=\"nx\">is</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">textValue</span> <span class=\"p\">=</span> <span class=\"nx\">returnValue</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">textValue</span> <span class=\"p\">=</span> <span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span><span class=\"nx\">returnValue</span><span class=\"p\">.</span><span class=\"nx\">detail</span><span class=\"p\">()</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"kt\">message</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">textValue</span><span class=\"p\">);</span>\n                <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_XML</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">xmlValue</span> <span class=\"p\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getXmlPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">xmlValue</span> <span class=\"nx\">is</span> <span class=\"kt\">xml</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">xmlValue</span><span class=\"p\">);</span>\n                    <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">sendErrorMsg</span><span class=\"p\">(</span><span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">xmlValue</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_JSON</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">jsonValue</span> <span class=\"p\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getJsonPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">jsonValue</span> <span class=\"nx\">is</span> <span class=\"kt\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">jsonValue</span><span class=\"p\">);</span>\n                    <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">sendErrorMsg</span><span class=\"p\">(</span><span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">jsonValue</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_OCTET_STREAM</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">blobValue</span> <span class=\"p\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getBinaryPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blobValue</span> <span class=\"nx\">is</span> <span class=\"nx\">byte</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n                    <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">blobValue</span><span class=\"p\">);</span>\n                    <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">sendErrorMsg</span><span class=\"p\">(</span><span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">blobValue</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">MULTIPART_FORM_DATA</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">bodyParts</span> <span class=\"p\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getBodyParts</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">bodyParts</span> <span class=\"nx\">is</span> <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">Entity</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n                    <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">bodyParts</span><span class=\"p\">);</span>\n                    <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">sendErrorMsg</span><span class=\"p\">(</span><span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">bodyParts</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(());</span>\n            <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@http:ResourceConfig {</span>\n        <span class=\"nx\">methods</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">&quot;POST&quot;</span><span class=\"p\">],</span>\n        <span class=\"nx\">path</span><span class=\"p\">:</span> <span class=\"s\">&quot;/image&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">resource</span> <span class=\"kd\">function</span> <span class=\"nx\">sendByteChannel</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Caller</span> <span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Request</span> <span class=\"nx\">req</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">var</span> <span class=\"nx\">bytes</span> <span class=\"p\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">getBinaryPayload</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">bytes</span> <span class=\"nx\">is</span> <span class=\"nx\">byte</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n            <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Response</span> <span class=\"nx\">response</span> <span class=\"p\">=</span> <span class=\"nx\">new</span><span class=\"p\">;</span>\n            <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">setBinaryPayload</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span><span class=\"p\">&gt;</span><span class=\"nx\">bytes</span><span class=\"p\">,</span>\n                                        <span class=\"nx\">contentType</span> <span class=\"p\">=</span> <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">IMAGE_PNG</span><span class=\"p\">);</span>\n            <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n            <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">sendErrorMsg</span><span class=\"p\">(</span><span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">bytes</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Handle response data received from HTTP client remote functions.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">handleResponse</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Response</span><span class=\"p\">|</span><span class=\"nx\">error</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span> <span class=\"nx\">is</span> <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//Print the content type of the received data.</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">hasHeader</span><span class=\"p\">(</span><span class=\"s\">&quot;content-type&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kt\">string</span> <span class=\"nx\">baseType</span> <span class=\"p\">=</span> <span class=\"nx\">getBaseType</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">getContentType</span><span class=\"p\">());</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">TEXT_PLAIN</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">getTextPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Text data: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"s\">&quot;Error in parsing text data&quot;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_XML</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">getXmlPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"kt\">xml</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">string</span> <span class=\"nx\">strValue</span> <span class=\"p\">=</span> <span class=\"nx\">io</span><span class=\"p\">:</span><span class=\"nx\">sprintf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s&quot;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Xml data: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">strValue</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"s\">&quot;Error in parsing xml data&quot;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_JSON</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">getJsonPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"kt\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Json data: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">toJsonString</span><span class=\"p\">());</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"s\">&quot;Error in parsing json data&quot;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_OCTET_STREAM</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">getTextPayload</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Response contains binary data: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"s\">&quot;Error in parsing binary data&quot;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">MULTIPART_FORM_DATA</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Response contains body parts: &quot;</span><span class=\"p\">);</span>\n                <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">getBodyParts</span><span class=\"p\">();</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">Entity</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">handleBodyParts</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"s\">&quot;Error in parsing multipart data&quot;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">IMAGE_PNG</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Response contains an image&quot;</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Entity body is not available&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"p\">(),</span> <span class=\"nx\">response</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">sendErrorMsg</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Caller</span> <span class=\"nx\">caller</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"nx\">Response</span> <span class=\"nx\">res</span> <span class=\"p\">=</span> <span class=\"nx\">new</span><span class=\"p\">;</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"p\">=</span> <span class=\"mi\">500</span><span class=\"p\">;</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">setPayload</span><span class=\"p\">(&lt;</span><span class=\"err\">@</span><span class=\"nx\">untainted</span> <span class=\"kt\">string</span><span class=\"p\">&gt;</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">detail</span><span class=\"p\">()</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"kt\">message</span><span class=\"p\">);</span>\n    <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">caller</span><span class=\"o\">-&gt;</span><span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n    <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"err\">?</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"nx\">is</span> <span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"p\">(),</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Get the base type from a given content type.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">getBaseType</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nx\">contentType</span><span class=\"p\">)</span> <span class=\"nx\">returns</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nx\">result</span> <span class=\"p\">=</span> <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">getMediaType</span><span class=\"p\">(</span><span class=\"nx\">contentType</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"nx\">is</span> <span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">MediaType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">getBaseType</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">panic</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Loop through body parts and print its content.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">handleBodyParts</span><span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">Entity</span><span class=\"p\">[]</span> <span class=\"nx\">bodyParts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">foreach</span> <span class=\"k\">var</span> <span class=\"nx\">bodyPart</span> <span class=\"nx\">in</span> <span class=\"nx\">bodyParts</span> <span class=\"p\">{</span>\n        <span class=\"kt\">string</span> <span class=\"nx\">baseType</span> <span class=\"p\">=</span> <span class=\"nx\">getBaseType</span><span class=\"p\">(</span><span class=\"nx\">bodyPart</span><span class=\"p\">.</span><span class=\"nx\">getContentType</span><span class=\"p\">());</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">APPLICATION_JSON</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">bodyPart</span><span class=\"p\">.</span><span class=\"nx\">getJson</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"kt\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Json Part: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">toJsonString</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"p\">(),</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mime</span><span class=\"p\">:</span><span class=\"nx\">TEXT_PLAIN</span> <span class=\"o\">==</span> <span class=\"nx\">baseType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">var</span> <span class=\"nx\">payload</span> <span class=\"p\">=</span> <span class=\"nx\">bodyPart</span><span class=\"p\">.</span><span class=\"nx\">getText</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">payload</span> <span class=\"nx\">is</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;Text Part: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">log</span><span class=\"p\">:</span><span class=\"nx\">printError</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"p\">(),</span> <span class=\"nx\">payload</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n            </div>\n\n            <div class=\"col-xs-12 col-sm-12 col-md-12\">\n                <table class=\"cTopInfoContainer cTopControlsContainer\">\n                    <tr>\n                        <td class=\"cLeftTD\">\n                            <h2>Handling Different Payload Types</h2>\n                            <p><p>Ballerina supports different payload types to be used directly with HTTP client actions\n(eg: POST, PUT, DELETE etc..) and service respond calls.</p>\n</p>\n\n                        </td>\n                        <td class=\"cRightTD\">\n                            <div class=\"cTopButtonContainer\">\n                                \n                                <div class=\"cButtonInfoContainer\">\n                                    <a class=\"prev\" href=\"http-100-continue.html\">\n                                        <span>< PREVIOUS</span>\n                                        <p>100 Continue</p>\n                                    </a>\n                                </div>\n                                 \n                                <div class=\"cButtonInfoContainer\">\n                                    <a class=\"next\" href=\"http-streaming.html\">\n                                        <span>NEXT ></span>\n                                        <p>HTTP Streaming</p>\n                                    </a>\n                                </div>\n                                \n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <div class=\"example\" id=\"different-payload-types\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 cBBETable-container cCodeLeft\">\n                    <div class=\"cTopControlsContainer\">\n                        <div class=\"cTopControlsRow\">\n                            <div class=\"cLeftTD\">\n                                <div class=\"cBBE-links\">\n                                    <ul>\n                                        <li>\n                                            <a class=\"copy\"><img src=\"/img/copy-icon.svg\" /></a>\n                                        </li>\n                                        <li>\n                                            <a target=\"_blank\" href=\"https://github.com/ballerina-platform/ballerina-lang/tree/ballerina-1.2.x/examples/different-payload-types/\"><img src=\"/img/github-logo-green.svg\" /></a>\n                                        </li>\n                                        \n                                    </ul>\n                                </div>\n                            </div> \n                        </div>\n                    </div>\n              \n                    \n                    <div class=\"codeSnippeset\">\n\n                        <div class=\"cBBE-body\">\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>import ballerina/http;\nimport ballerina/io;\nimport ballerina/log;\nimport ballerina/mime;\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>http:Client clientEP = new (&quot;http://localhost:9091/backEndService&quot;);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Client endpoint.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>service actionService on new http:Listener(9090) {\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Service to test HTTP client remote functions with different payload types.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>    resource function messageUsage(http:Caller caller, http:Request req) {\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        var response = clientEP-&gt;get(&quot;/greeting&quot;);\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>GET remote function without any payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        http:Request request = new;\n        response = clientEP-&gt;get(&quot;/greeting&quot;, message = request);\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>GET remote function with request as message.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        response = clientEP-&gt;post(&quot;/echo&quot;, ());\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function without any payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        response = clientEP-&gt;post(&quot;/echo&quot;, &quot;Sample Text&quot;);\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function with text as payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        response = clientEP-&gt;post(&quot;/echo&quot;, xml `&lt;yy&gt;Sample Xml&lt;/yy&gt;`);\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function with <code>xml</code> as payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        response = clientEP-&gt;post(&quot;/echo&quot;, {name: &quot;apple&quot;, color: &quot;red&quot;});\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function with <code>json</code> as payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        string textVal = &quot;Sample Text&quot;;\n        byte[] binaryValue = textVal.toBytes();\n        response = clientEP-&gt;post(&quot;/echo&quot;, binaryValue);\n        handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function with <code>byte[]</code> as payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        var bChannel = io:openReadableFile(&quot;./files/logo.png&quot;);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Get a byte channel to a given file.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        if (bChannel is io:ReadableByteChannel) {\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>            response = clientEP-&gt;post(&quot;/image&quot;, &lt;@untainted&gt;bChannel);\n            handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function with byte channel as payload. Since the file path is static\n<code>untaint</code> is used to denote that the byte channel is trusted .</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>            mime:Entity part1 = new;\n            part1.setJson({&quot;name&quot;: &quot;Jane&quot;});\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Create a JSON body part.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>            mime:Entity part2 = new;\n            part2.setText(&quot;Hello&quot;);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Create a text body part.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>            mime:Entity[] bodyParts = [part1, part2];\n            response = clientEP-&gt;post(&quot;/echo&quot;, bodyParts);\n            handleResponse(response);\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>POST remote function with body parts as payload.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>            var result = caller-&gt;respond(&quot;Client actions successfully executed!&quot;);\n            handleError(result);\n        } else {\n            http:Response res = new;\n            res.statusCode = 500;\n            res.setPayload(&lt;@untainted string&gt;bChannel.detail()?.message);\n            var result = caller-&gt;respond(res);\n            handleError(result);\n        }\n    }\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>service backEndService on new http:Listener(9091) {\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Back end service that send out different payload types as response.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>    @http:ResourceConfig {\n        methods: [&quot;GET&quot;],\n        path: &quot;/greeting&quot;\n    }\n    resource function replyText(http:Caller caller, http:Request req) {\n        error? result = caller-&gt;respond(&quot;Hello&quot;);\n        if (result is error) {\n            log:printError(&quot;Error in responding to caller&quot;, result);\n        }\n    }\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>    @http:ResourceConfig {\n        methods: [&quot;POST&quot;],\n        path: &quot;/echo&quot;\n    }\n    resource function directResponse(http:Caller caller, http:Request req) {\n        if (req.hasHeader(&quot;content-type&quot;)) {\n            string baseType = getBaseType(req.getContentType());\n            if (mime:TEXT_PLAIN == baseType) {\n                var returnValue = req.getTextPayload();\n                string textValue = &quot;&quot;;\n                if (returnValue is string) {\n                    textValue = returnValue;\n                } else {\n                    textValue = &lt;string&gt;returnValue.detail()?.message;\n                }\n                var result = caller-&gt;respond(&lt;@untainted&gt;textValue);\n                handleError(result);\n            } else if (mime:APPLICATION_XML == baseType) {\n                var xmlValue = req.getXmlPayload();\n                if (xmlValue is xml) {\n                    var result = caller-&gt;respond(&lt;@untainted&gt;xmlValue);\n                    handleError(result);\n                } else {\n                    sendErrorMsg(caller, xmlValue);\n                }\n            } else if (mime:APPLICATION_JSON == baseType) {\n                var jsonValue = req.getJsonPayload();\n                if (jsonValue is json) {\n                    var result = caller-&gt;respond(&lt;@untainted&gt;jsonValue);\n                    handleError(result);\n                } else {\n                    sendErrorMsg(caller, jsonValue);\n                }\n            } else if (mime:APPLICATION_OCTET_STREAM == baseType) {\n                var blobValue = req.getBinaryPayload();\n                if (blobValue is byte[]) {\n                    var result = caller-&gt;respond(&lt;@untainted&gt;blobValue);\n                    handleError(result);\n                } else {\n                    sendErrorMsg(caller, blobValue);\n                }\n            } else if (mime:MULTIPART_FORM_DATA == baseType) {\n                var bodyParts = req.getBodyParts();\n                if (bodyParts is mime:Entity[]) {\n                    var result = caller-&gt;respond(&lt;@untainted&gt;bodyParts);\n                    handleError(result);\n                } else {\n                    sendErrorMsg(caller, bodyParts);\n                }\n            }\n        } else {\n            var result = caller-&gt;respond(());\n            handleError(result);\n        }\n    }\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>    @http:ResourceConfig {\n        methods: [&quot;POST&quot;],\n        path: &quot;/image&quot;\n    }\n    resource function sendByteChannel(http:Caller caller, http:Request req) {\n        var bytes = req.getBinaryPayload();\n        if (bytes is byte[]) {\n            http:Response response = new;\n            response.setBinaryPayload(&lt;@untainted&gt;bytes,\n                                        contentType = mime:IMAGE_PNG);\n            var result = caller-&gt;respond(response);\n            handleError(result);\n        } else {\n            sendErrorMsg(caller, bytes);\n        }\n    }\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>function handleResponse(http:Response|error response) {\n    if (response is http:Response) {\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Handle response data received from HTTP client remote functions.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>        if (response.hasHeader(&quot;content-type&quot;)) {\n            string baseType = getBaseType(response.getContentType());\n            if (mime:TEXT_PLAIN == baseType) {\n                var payload = response.getTextPayload();\n                if (payload is string) {\n                    log:printInfo(&quot;Text data: &quot; + payload);\n                } else {\n                    log:printError(&quot;Error in parsing text data&quot;, payload);\n                }\n            } else if (mime:APPLICATION_XML == baseType) {\n                var payload = response.getXmlPayload();\n                if (payload is xml) {\n                    string strValue = io:sprintf(&quot;%s&quot;, payload);\n                    log:printInfo(&quot;Xml data: &quot; + strValue);\n                } else {\n                    log:printError(&quot;Error in parsing xml data&quot;, payload);\n                }\n            } else if (mime:APPLICATION_JSON == baseType) {\n                var payload = response.getJsonPayload();\n                if (payload is json) {\n                    log:printInfo(&quot;Json data: &quot; + payload.toJsonString());\n                } else {\n                    log:printError(&quot;Error in parsing json data&quot;, payload);\n                }\n            } else if (mime:APPLICATION_OCTET_STREAM == baseType) {\n                var payload = response.getTextPayload();\n                if (payload is string) {\n                    log:printInfo(&quot;Response contains binary data: &quot; + payload);\n                } else {\n                    log:printError(&quot;Error in parsing binary data&quot;, payload);\n                }\n            } else if (mime:MULTIPART_FORM_DATA == baseType) {\n                log:printInfo(&quot;Response contains body parts: &quot;);\n                var payload = response.getBodyParts();\n                if (payload is mime:Entity[]) {\n                    handleBodyParts(payload);\n                } else {\n                    log:printError(&quot;Error in parsing multipart data&quot;, payload);\n                }\n            } else if (mime:IMAGE_PNG == baseType) {\n                log:printInfo(&quot;Response contains an image&quot;);\n            }\n        } else {\n            log:printInfo(&quot;Entity body is not available&quot;);\n        }\n    } else {\n        log:printError(response.reason(), response);\n    }\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Print the content type of the received data.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>function sendErrorMsg(http:Caller caller, error err) {\n    http:Response res = new;\n    res.statusCode = 500;\n    res.setPayload(&lt;@untainted string&gt;err.detail()?.message);\n    var result = caller-&gt;respond(res);\n    handleError(result);\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>function handleError(error? result) {\n    if (result is error) {\n        log:printError(result.reason(), result);\n    }\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code leading\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>function getBaseType(string contentType) returns string {\n    var result = mime:getMediaType(contentType);\n    if (result is mime:MediaType) {\n        return result.getBaseType();\n    } else {\n        panic result;\n    }\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Get the base type from a given content type.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                            <div class=\"cTR hover-enable\">\n\n                                <div class=\"code\">\n                                    <div class=\"highlight\"><pre><code class=language-ballerina>function handleBodyParts(mime:Entity[] bodyParts) {\n    foreach var bodyPart in bodyParts {\n        string baseType = getBaseType(bodyPart.getContentType());\n        if (mime:APPLICATION_JSON == baseType) {\n            var payload = bodyPart.getJson();\n            if (payload is json) {\n                log:printInfo(&quot;Json Part: &quot; + payload.toJsonString());\n            } else {\n                log:printError(payload.reason(), payload);\n            }\n        }\n        if (mime:TEXT_PLAIN == baseType) {\n                var payload = bodyPart.getText();\n            if (payload is string) {\n                log:printInfo(&quot;Text Part: &quot; + payload);\n            } else {\n                log:printError(payload.reason(), payload);\n            }\n        }\n    }\n}\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                    <div class=\"cCodeDesription\">\n                                        <div>\n                                            <p>Loop through body parts and print its content.</p>\n\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                    \n                    <div class=\"codeSnippeset\">\n\n                        <div class=\"cBBE-body\">\n                            \n                            <div class=\"cTR cOutputTr\">\n\n                                <div class=\"code cOutput\">\n                                    <div class=\"highlight\"><pre><code class=shell-session># To start the service, navigate to the directory that contains the\n# `.bal` file and use the `ballerina run` command below.\nballerina run different_payload_types.bal\n[ballerina/http] started HTTP/WS listener 0.0.0.0:9091\n[ballerina/http] started HTTP/WS listener 0.0.0.0:9090\n2018-12-04 21:17:59,696 INFO  [ballerina/log] - Text data: Hello\n2018-12-04 21:17:59,717 INFO  [ballerina/log] - Text data: Hello\n2018-12-04 21:17:59,727 INFO  [ballerina/log] - Entity body is not available\n2018-12-04 21:17:59,737 INFO  [ballerina/log] - Text data: Sample Text\n2018-12-04 21:18:00,005 INFO  [ballerina/log] - Xml data: &lt;yy&gt;Sample Xml&lt;/yy&gt;\n2018-12-04 21:18:00,026 INFO  [ballerina/log] - Json data: {&quot;name&quot;:&quot;apple&quot;, &quot;color&quot;:&quot;red&quot;}\n2018-12-04 21:18:00,036 INFO  [ballerina/log] - Response contains binary data: Sample Text\n2018-12-04 21:18:00,051 INFO  [ballerina/log] - Response contains an image\n2018-12-04 21:18:00,081 INFO  [ballerina/log] - Response contains body parts:\n2018-12-04 21:18:00,084 INFO  [ballerina/log] - Json Part: {&quot;name&quot;:&quot;Jane&quot;}\n2018-12-04 21:18:00,085 INFO  [ballerina/log] - Text Part: Hello\n</code></pre></div>\n\n                                </div>\n                                <div class=\"docs\">\n                                    \n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                    \n\n\n                     \n                </div>\n            </div>\n        </div>\n    </div>\n\n     <script>\n            $(document).ready(function() {\n\n                // hljs.initHighlightingOnLoad();\n\n                $(\".switch\").click(function() {\n                    $(\".cCodeRight\").toggleClass('cShow');\n                    $(\".cCodeLeft\").toggleClass('cHide');\n                });\n\n                // register \"copy to clipboard\" event to elements with \"copy\" class\n                var clipboard = new ClipboardJS('.copy', {\n                    text: function(trigger) {\n                        return $('.FullCode').find('pre').text();\n                    }\n                });\n\n                // Register events show hide tooltip on click event\n                clipboard.on('success', function(e) {\n                    setTooltip(e.trigger, 'Copied!');\n                    hideTooltip(e.trigger);\n                });\n\n                clipboard.on('error', function(e) {\n                    setTooltip(e.trigger, 'Failed!');\n                    hideTooltip(e.trigger);\n                });\n\n                $('.copy').tooltip({\n                    trigger: 'click',\n                    placement: 'bottom'\n                });\n                $(\"a.copy\").unbind(\"click\");\n            });\n\n            function setTooltip(btn, message) {\n                $(btn).attr('data-original-title', message)\n                    .tooltip('show');\n            }\n\n            function hideTooltip(btn) {\n                setTimeout(function() {\n                    $(btn).tooltip('hide').removeAttr('data-original-title');\n                }, 1000);\n            }\n        </script>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"iBallerinaFooter\" class=\"row cBallerina-io-White-row\">\n    <div class=\"container\">\n    <div class=\"col-xs-12 col-sm-12 col-md-3 col-lg-3 cBallerina-io-left-col cBallerinaFooterLinks\">\n        <ul>\n            <li><a class=\"cBioFooterLink\" href=\"/downloads\">DOWNLOAD</a></li>\n            <!--<li><a class=\"cBioFooterLink\" href=\"/community/#report-issues\">REPORT ISSUES</a></li>-->\n            <li data-toggle=\"modal\" data-target=\"#reportissues\" data-whatever=\"@mdo\"><a href=\"/community/#report-issues\">REPORT ISSUES</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"https://github.com/ballerina-lang/ballerina/blob/master/LICENSE\">CODE LICENSE</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/license-of-site\">SITE LICENSE</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/terms-of-service\">TERMS OF SERVICE</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/privacy-policy\">PRIVACY POLICY</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/trademark-usage-policy/\">TRADEMARK USAGE POLICY</a></li>\n            </ul>\n        </div>\n    <div class=\"col-xs-12 col-sm-12 col-md-3 col-lg-3 cBallerina-io-middle-col cBallerinaFooterSignUp\">\n        <div class=\"cSocialmedia\">\n            <ul>\n                <li>\n                    <a class=\"cBioFooterLink\" href=\"https://github.com/ballerina-platform\" target=\"_blank\"><img src=\"/img/github.svg\"/></a>\n                    </li>\n                <li><a class=\"cBioFooterLink\" href=\"https://stackoverflow.com/questions/tagged/ballerina\" target=\"_blank\"><img src=\"/img/stackoverflow.svg\"/></a></li>\n                <li><a class=\"cBioFooterLink\" href=\"https://twitter.com/ballerinalang\" target=\"_blank\"><img src=\"/img/twitter.svg\"/></a></li>\n                <li><a class=\"cBioFooterLink\" href=\"/community/slack/\"><img src=\"/img/slack.svg\"/></a></li>\n                <li><a class=\"cBioFooterLink\" href=\"https://www.youtube.com/c/Ballerinalang\"><img style=\"width: 15px;\" src=\"/img/youtube-icon.svg\"/></a></li>\n                </ul>\n            <div class=\"pdframe\"></div>\n            </div>\n\n\n           <a class=\"cNLButton\" href=\"/community/#subscribe-to-the-newsletter\">Subscribe to the newsletter</a> \n\n           <div class=\"modal fade\" id=\"reportissues\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"reportissueslabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\" role=\"document\">\n              <div class=\"modal-content\" style=\"padding:15px;border-radius:0px;\">\n                <div class=\"modal-header\">\n                  <h3 class=\"modal-title\" style=\"color: #20b6b0;\">Report Issues</h3>\n                  <p style=\"padding: 10px 0px ;\">Report issues in the GitHub repositories of the areas and components listed below.\n                  </p>\n                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                  </button>\n                </div>\n                <div class=\"modal-body\" style=\"background-color: #fff; font-size: 20; color: #465867;font-size: 20px;\">\n                  <ul class=\"b\">\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-lang/issues/new/choose\" target=\"_blank\"> Compiler, runtime, or tooling</a></li>\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-standard-library/issues\" target=\"_blank\"> Standard Library</a></li>\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-standard-library/issues/new/choose\" target=\"_blank\">  Language specification</a></li>\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-dev-website/issues/new/choose\" target=\"_blank\">  Website</a></li>\n                    <li><a class=\"linkText\" href=\"mailto:security@ballerina.io\" target=\"_blank\">Security</a> <span style=\"font-size: 16px;\">(For details, see the</span> <a class=\"linkText\" href=\"/security\" target=\"_blank\">security policy</a>.)</li>\n                  </ul>  \n                \n                </div>\n                <div class=\"modal-footer\">\n                 \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n    <div class=\"col-xs-12 col-sm-10 col-md-6 col-lg-6 cBallerina-io-right-col\">\n        <p>In the creation of Ballerina, we were inspired by so many technologies. Thank you to all that have come before us (and forgive us if we missed one): Java, Go, C, C++, D, Rust, Haskell, Kotlin, Dart, TypeScript, JavaScript, Python, Perl, Flow, Swift, Elm, RelaxNG, NPM, Crates, Maven, Gradle, Kubernetes, Docker, Envoy, Markdown, GitHub and WSO2.</p></div>\n    </div>\n</div>\n\n<div class=\"cCookie-Policy\">\n    <div class=\"container\">\n        <div class=\"col-xs-12 col-sm-12 col-lg-12\">\n            <!-- <div class=\"closebuttoon\"><img src=\"/img/close-w.svg\"/></div> -->\n<h4>Cookie policy</h4>\n<p>This website uses cookies so that we can provide you with the best user experience. Read our <a href=\"https://ballerina.io/cookie-policy/\">Cookie policy</a></a> to find out more.</p>\n<p>If you wish to disable cookies you can do so from your browser. </p>\n  \n<!-- <a href=\"https://ballerina.io/cookie-policy/\"></a> -->\n<a class=\"cIUnderstand \">I understand </a>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n<script src=\"/js/prism.js\"></script>\n<!-- <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.14.0/components/prism-core.min.js\"></script> -->\n<script src=\"/js/prism-ballerina.js\"></script>\n\n\n\n<script>\n\n$(\".cIUnderstand \").click(function() {\n    $(\".cCookie-Policy\").addClass('cHide-Policy');\n   \n    \n});\n\n\n\n</script>\n\n\n<!-- \n<script>\n    (function () {\n\nif (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n}\n\n/**\n * Plugin name which is used as a class name for <pre> which is activating the plugin\n * @type {String}\n */\nvar PLUGIN_NAME = 'line-numbers';\n\n/**\n * Regular expression used for determining line breaks\n * @type {RegExp}\n */\nvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n/**\n * Resizes line numbers spans according to height of line of code\n * @param {Element} element <pre> element\n */\nvar _resizeElement = function (element) {\n    var codeStyles = getStyles(element);\n    var whiteSpace = codeStyles['white-space'];\n\n    if (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {\n        var codeElement = element.querySelector('code');\n        var lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n        if (!codeElement || !lineNumbersWrapper) {\n            return;\n        }\n        var lineNumberSizer = element.querySelector('.line-numbers-sizer');\n        var codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n        if (!lineNumberSizer) {\n            lineNumberSizer = document.createElement('span');\n            lineNumberSizer.className = 'line-numbers-sizer';\n\n            codeElement.appendChild(lineNumberSizer);\n        }\n\n        lineNumberSizer.style.display = 'block';\n\n        codeLines.forEach(function (line, lineNumber) {\n            lineNumberSizer.textContent = line || '\\n';\n            var lineSize = lineNumberSizer.getBoundingClientRect().height;\n            lineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';\n        });\n\n        lineNumberSizer.textContent = '';\n        lineNumberSizer.style.display = 'none';\n    }\n};\n\n/**\n * Returns style declarations for the element\n * @param {Element} element\n */\nvar getStyles = function (element) {\n    if (!element) {\n        return null;\n    }\n\n    return window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n};\n\nwindow.addEventListener('resize', function () {\n    Array.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);\n});\n\nPrism.hooks.add('complete', function (env) {\n    if (!env.code) {\n        return;\n    }\n\n    var code = env.element;\n    var pre = code.parentNode;\n\n    // works only for <code> wrapped inside <pre> (not inline)\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n        return;\n    }\n\n    // Abort if line numbers already exists\n    if (code.querySelector('.line-numbers-rows')) {\n        return;\n    }\n\n    var addLineNumbers = false;\n    var lineNumbersRegex = /(?:^|\\s)line-numbers(?:\\s|$)/;\n\n    for (var element = code; element; element = element.parentNode) {\n        if (lineNumbersRegex.test(element.className)) {\n            addLineNumbers = true;\n            break;\n        }\n    }\n\n    // only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n    if (!addLineNumbers) {\n        return;\n    }\n\n    // Remove the class 'line-numbers' from the <code>\n    code.className = code.className.replace(lineNumbersRegex, ' ');\n    // Add the class 'line-numbers' to the <pre>\n    if (!lineNumbersRegex.test(pre.className)) {\n        pre.className += ' line-numbers';\n    }\n\n    var match = env.code.match(NEW_LINE_EXP);\n    var linesNum = match ? match.length + 1 : 1;\n    var lineNumbersWrapper;\n\n    var lines = new Array(linesNum + 1).join('<span></span>');\n\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.setAttribute('aria-hidden', 'true');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines;\n\n    if (pre.hasAttribute('data-start')) {\n        pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n    }\n\n    env.element.appendChild(lineNumbersWrapper);\n\n    _resizeElement(pre);\n\n    Prism.hooks.run('line-numbers', env);\n});\n\nPrism.hooks.add('line-numbers', function (env) {\n    env.plugins = env.plugins || {};\n    env.plugins.lineNumbers = true;\n});\n\n/**\n * Global exports\n */\nPrism.plugins.lineNumbers = {\n    /**\n     * Returns the node of the given line number in the given element.\n     * @param {Element} element A `<pre>` element with line numbers.\n     * @param {Number} number\n     * @returns {Element | undefined}\n     */\n    getLine: function (element, number) {\n        if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n            return;\n        }\n\n        var lineNumberRows = element.querySelector('.line-numbers-rows');\n        var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n        var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n        if (number < lineNumberStart) {\n            number = lineNumberStart;\n        }\n        if (number > lineNumberEnd) {\n            number = lineNumberEnd;\n        }\n\n        var lineIndex = number - lineNumberStart;\n\n        return lineNumberRows.children[lineIndex];\n    },\n    /**\n     * Resizes the line numbers of the given element.\n     *\n     * This function will not add line numbers. It will only resize existing ones.\n     * @param {Element} element A `<pre>` element with line numbers.\n     * @returns {void}\n     */\n    resize: function (element) {\n        _resizeElement(element);\n    }\n};\n\n}());\n</script> -->\n\n<!-- \n<style>\n    pre[class*=\"language-\"].line-numbers {\n\tposition: relative;\n\tpadding-left: 3.8em;\n\tcounter-reset: linenumber;\n}\n\npre[class*=\"language-\"].line-numbers > code {\n\tposition: relative;\n\twhite-space: inherit;\n}\n\n.line-numbers .line-numbers-rows {\n\tposition: absolute;\n\tpointer-events: none;\n\ttop: 0;\n\tfont-size: 100%;\n\tleft: -3.8em;\n\twidth: 3em; /* works for line-numbers below 1000 lines */\n\tletter-spacing: -1px;\n\tborder-right: 1px solid #999;\n\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\n}\n\n\t.line-numbers-rows > span {\n\t\tdisplay: block;\n\t\tcounter-increment: linenumber;\n\t}\n\n\t\t.line-numbers-rows > span:before {\n\t\t\tcontent: counter(linenumber);\n\t\t\tcolor: #999;\n\t\t\tdisplay: block;\n\t\t\tpadding-right: 0.8em;\n\t\t\ttext-align: right;\n\t\t}\n</style> -->\n\n<script src=\"/js/theme.js\"></script>\n\n<script>\n    $(document).ready(function() {\n        var gitstar = '<iframe id=\"iGitStarIframe\" src=\"https://ghbtns.com/github-btn.html?user=ballerina-platform&repo=ballerina-lang&type=star&count=true&size=small\" frameborder=\"0\" scrolling=\"0\"></iframe>';\n        $('[data-button=\"iGitStarText\"]').replaceWith(gitstar);\n\n        var gitwatch = '<iframe id=\"iGitWatchIframe\" src=\"https://ghbtns.com/github-btn.html?user=ballerina-platform&repo=ballerina-lang&type=watch&count=true&size=lsmalle&v=2\" frameborder=\"0\" scrolling=\"0\"></iframe>';\n        $('[data-button=\"iGitWatchText\"]').replaceWith(gitwatch);\n        checkIsFromRefrencePage();   \n    });\n    function checkIsFromRefrencePage(){ \n        var url_string =window.location.href; \n        var url = new URL(url_string);\n        var isFromRefPage = url.searchParams.get(\"is_ref_by_example\");\n        if(isFromRefPage){ \n            $('.bbe-by-example-page-row').addClass('hide');\n            $('.bbe-by-reference-page-row').removeClass('hide');\n            $('.cTopButtonContainer').show();\n            $('.cVersionItem').hide();\n        }else{ \n            $('.bbe-by-example-page-row').removeClass('hide');\n            $('.bbe-by-reference-page-row').addClass('hide');\n            $('.cTopButtonContainer').hide();\n            $('.cVersionItem').show(); \n        }\n    }\n</script>\n\n<style>\n    .cGitButtonContainer {\n        display: inline-block;\n        width: 100%;\n        margin-bottom: 0px;\n    }\n\n    #iGitStarText {\n        height: 20px;\n        float: left;\n        padding: 0;\n        margin: 0;\n    }\n    #iGitStarIframe , #iGitWatchIframe {\n        height: 20px;\n        width: 100px;\n        float: left;\n    }\n</style>\n\n</body>\n</html>\n\n\n","id":"different-payload-types"},"__N_SSG":true}