{"pageProps":{"frontmatter":{},"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Ballerina Language Specification</title>\n  <meta charset=\"utf-8\">\n  <style type=\"text/css\">\n    body { font-family: sans-serif; line-height: 1.38;  }\n    pre.grammar code, code.grammar { background-color: #D0D0D0; }\n    pre, code { font-family: Consolas, monospace; }\n    table { border: solid thin; border-collapse: collapse; }\n    td, th { border: solid thin; padding: 0.5em; }\n    p.status { font-size: large; font-weight: bold; }\n  </style>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i&amp;display=swap\">\n<link rel=\"stylesheet\" href=\"style/ballerina-language-specification.css\">\n<script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script><script src=\"style/ballerina-language-specification.js\"></script>\n</head>\n<body>\n<h1>Ballerina Language Specification, 2022R1</h1>\n<p>\nPrimary contributors:\n</p>\n<ul>\n<li>James Clark, <a href=\"mailto:jjc@jclark.com\">jjc@jclark.com</a>\n</li>\n<li>Sanjiva Weerawarana, <a href=\"mailto:sanjiva@weerawarana.org\">sanjiva@weerawarana.org</a>\n</li>\n<li>Sameera Jayasoma, <a href=\"mailto:sameera@wso2.com\">sameera@wso2.com</a>\n</li>\n<li>Hasitha Aravinda, <a href=\"mailto:hasitha@wso2.com\">hasitha@wso2.com</a>\n</li>\n</ul>\n<p>\n(Other contributors are listed in <a href=\"#contributors\">Appendix D</a>.)\n</p>\n<p>\nCopyright Â© 2018-2022 <a href=\"https://wso2.com/\">WSO2</a>\n</p>\n<p>\nLicensed under the <a href=\"https://creativecommons.org/licenses/by-nd/4.0/\">Creative Commons\nAttribution-NoDerivatives 4.0 International</a> license\n</p>\n<p class=\"status\">\nLanguage and document status\n</p>\n<p>\nThe language described in this specification is now stable. We do not plan to\nmake changes that introduce significant incompatibilities.\n</p>\n<p>\nComments on this document are welcome and should be made by creating an issue in\n<code><a href=\"https://github.com/ballerina-platform/ballerina-spec\">https://github.com/ballerina-platform/ballerina-spec</a></code>, which is the\nGitHub repository where this specification is maintained.\n</p>\n<section class=\"toc\"><h2>Table of contents</h2>\n<ul>\n<li>1. <a href=\"#introduction\">Introduction</a>\n</li>\n<li>2. <a href=\"#notation\">Notation</a>\n</li>\n<li>3. <a href=\"#program_structure\">Program structure</a>\n</li>\n<li>4. <a href=\"#lexical_structure\">Lexical structure</a>\n</li>\n<li>5. <a href=\"#values_types\">Values, types and variables</a><ul>\n<li>5.1 <a href=\"#section_5.1\">Overview</a><ul>\n<li>5.1.1 <a href=\"#section_5.1.1\">Type system fundamentals</a>\n</li>\n<li>5.1.2 <a href=\"#section_5.1.2\">Mutation</a>\n</li>\n<li>5.1.3 <a href=\"#section_5.1.3\">Isolation</a>\n</li>\n<li>5.1.4 <a href=\"#section_5.1.4\">Type descriptors</a>\n</li>\n<li>5.1.5 <a href=\"#section_5.1.5\">Type-ids</a>\n</li>\n<li>5.1.6 <a href=\"#section_5.1.6\">Iterability</a>\n</li>\n</ul>\n</li>\n<li>5.2 <a href=\"#section_5.2\">Simple values</a><ul>\n<li>5.2.1 <a href=\"#section_5.2.1\">Nil</a>\n</li>\n<li>5.2.2 <a href=\"#section_5.2.2\">Boolean</a>\n</li>\n<li>5.2.3 <a href=\"#section_5.2.3\">Int</a>\n</li>\n<li>5.2.4 <a href=\"#section_5.2.4\">Floating point types</a><ul>\n<li>5.2.4.1 <a href=\"#section_5.2.4.1\">Float</a>\n</li>\n<li>5.2.4.2 <a href=\"#section_5.2.4.2\">Decimal</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.3 <a href=\"#section_5.3\">Sequence values</a><ul>\n<li>5.3.1 <a href=\"#section_5.3.1\">Strings</a>\n</li>\n<li>5.3.2 <a href=\"#XML\">XML</a><ul><li>5.3.2.1 <a href=\"#section_5.3.2.1\">XML namespaces</a>\n</li></ul>\n</li>\n</ul>\n</li>\n<li>5.4 <a href=\"#section_5.4\">Structured values</a><ul>\n<li>5.4.1 <a href=\"#section_5.4.1\">Lists</a><ul>\n<li>5.4.1.1 <a href=\"#section_5.4.1.1\">Array types</a>\n</li>\n<li>5.4.1.2 <a href=\"#section_5.4.1.2\">Tuple types</a>\n</li>\n</ul>\n</li>\n<li>5.4.2 <a href=\"#section_5.4.2\">Mappings</a><ul>\n<li>5.4.2.1 <a href=\"#section_5.4.2.1\">Map types</a>\n</li>\n<li>5.4.2.2 <a href=\"#section_5.4.2.2\">Record types</a>\n</li>\n</ul>\n</li>\n<li>5.4.3 <a href=\"#tables\">Tables</a>\n</li>\n</ul>\n</li>\n<li>5.5 <a href=\"#section_5.5\">Behavioral values</a><ul>\n<li>5.5.1 <a href=\"#section_5.5.1\">Errors</a>\n</li>\n<li>5.5.2 <a href=\"#functions\">Functions</a>\n</li>\n<li>5.5.3 <a href=\"#section_5.5.3\">Objects</a><ul>\n<li>5.5.3.1 <a href=\"#section_5.5.3.1\">Network interaction</a>\n</li>\n<li>5.5.3.2 <a href=\"#section_5.5.3.2\">Fields</a>\n</li>\n<li>5.5.3.3 <a href=\"#section_5.5.3.3\">Methods</a>\n</li>\n<li>5.5.3.4 <a href=\"#section_5.5.3.4\">Visibility</a>\n</li>\n<li>5.5.3.5 <a href=\"#section_5.5.3.5\">Typing</a>\n</li>\n<li>5.5.3.6 <a href=\"#section_5.5.3.6\">Inclusion and type-ids</a>\n</li>\n</ul>\n</li>\n<li>5.5.4 <a href=\"#section_5.5.4\">Futures</a>\n</li>\n<li>5.5.5 <a href=\"#section_5.5.5\">Type descriptors</a>\n</li>\n<li>5.5.6 <a href=\"#section_5.5.6\">Handles</a>\n</li>\n<li>5.5.7 <a href=\"#section_5.5.7\">Streams</a>\n</li>\n</ul>\n</li>\n<li>5.6 <a href=\"#section_5.6\">Other type descriptors</a><ul>\n<li>5.6.1 <a href=\"#section_5.6.1\">Type reference</a>\n</li>\n<li>5.6.2 <a href=\"#section_5.6.2\">Singleton types</a>\n</li>\n<li>5.6.3 <a href=\"#section_5.6.3\">Any type</a>\n</li>\n<li>5.6.4 <a href=\"#section_5.6.4\">Never type</a>\n</li>\n<li>5.6.5 <a href=\"#section_5.6.5\">Readonly type</a>\n</li>\n<li>5.6.6 <a href=\"#distinct_types\">Distinct types</a>\n</li>\n<li>5.6.7 <a href=\"#section_5.6.7\">Union types</a>\n</li>\n<li>5.6.8 <a href=\"#section_5.6.8\">Intersection types</a>\n</li>\n<li>5.6.9 <a href=\"#section_5.6.9\">Optional types</a>\n</li>\n<li>5.6.10 <a href=\"#anydata\">Anydata type</a>\n</li>\n<li>5.6.11 <a href=\"#section_5.6.11\">JSON types</a>\n</li>\n<li>5.6.12 <a href=\"#byte_type\">Byte type</a>\n</li>\n</ul>\n</li>\n<li>5.7 <a href=\"#built-in_object_types\">Built-in object types</a><ul>\n<li>5.7.1 <a href=\"#section_5.7.1\">Iterator</a>\n</li>\n<li>5.7.2 <a href=\"#section_5.7.2\">Iterable</a>\n</li>\n<li>5.7.3 <a href=\"#StreamImplementor\">StreamImplementor</a>\n</li>\n<li>5.7.4 <a href=\"#section_5.7.4\">Listener</a>\n</li>\n<li>5.7.5 <a href=\"#section_5.7.5\">RawTemplate</a>\n</li>\n<li>5.7.6 <a href=\"#section_5.7.6\">RetryManager</a>\n</li>\n</ul>\n</li>\n<li>5.8 <a href=\"#section_5.8\">Abstract operations</a><ul>\n<li>5.8.1 <a href=\"#FillMember\">FillMember</a>\n</li>\n<li>5.8.2 <a href=\"#Cloning\">Cloning</a><ul>\n<li>5.8.2.1 <a href=\"#Clone\">Clone</a>\n</li>\n<li>5.8.2.2 <a href=\"#ImmutableClone\">ImmutableClone</a>\n</li>\n</ul>\n</li>\n<li>5.8.3 <a href=\"#DeepEquals\">DeepEquals</a>\n</li>\n<li>5.8.4 <a href=\"#section_5.8.4\">NumericConvert</a>\n</li>\n<li>5.8.5 <a href=\"#ToString\">ToString</a>\n</li>\n<li>5.8.6 <a href=\"#ordering\">Ordering</a>\n</li>\n</ul>\n</li>\n<li>5.9 <a href=\"#section_5.9\">Binding patterns and variables</a><ul>\n<li>5.9.1 <a href=\"#section_5.9.1\">Binding patterns</a>\n</li>\n<li>5.9.2 <a href=\"#section_5.9.2\">Typed binding patterns</a>\n</li>\n<li>5.9.3 <a href=\"#section_5.9.3\">Variable and identifier scoping</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>6. <a href=\"#expressions\">Expressions</a><ul>\n<li>6.1 <a href=\"#section_6.1\">Expression evaluation</a>\n</li>\n<li>6.2 <a href=\"#section_6.2\">Static typing of expressions</a><ul>\n<li>6.2.1 <a href=\"#lax_static_typing\">Lax static typing</a>\n</li>\n<li>6.2.2 <a href=\"#section_6.2.2\">Contextually expected type</a>\n</li>\n<li>6.2.3 <a href=\"#section_6.2.3\">Precise and broad types</a>\n</li>\n<li>6.2.4 <a href=\"#singleton_typing\">Singleton typing</a>\n</li>\n<li>6.2.5 <a href=\"#nil_lifting\">Nil lifting</a>\n</li>\n<li>6.2.6 <a href=\"#section_6.2.6\">Isolated expressions</a>\n</li>\n</ul>\n</li>\n<li>6.3 <a href=\"#section_6.3\">Casting and conversion</a>\n</li>\n<li>6.4 <a href=\"#section_6.4\">Constant expressions</a>\n</li>\n<li>6.5 <a href=\"#section_6.5\">Literals</a>\n</li>\n<li>6.6 <a href=\"#section_6.6\">Template expressions</a><ul>\n<li>6.6.1 <a href=\"#section_6.6.1\">String template expression</a>\n</li>\n<li>6.6.2 <a href=\"#section_6.6.2\">XML template expression</a>\n</li>\n<li>6.6.3 <a href=\"#section_6.6.3\">Raw template expression</a>\n</li>\n</ul>\n</li>\n<li>6.7 <a href=\"#section_6.7\">Structural constructors</a><ul>\n<li>6.7.1 <a href=\"#section_6.7.1\">List constructor</a>\n</li>\n<li>6.7.2 <a href=\"#section_6.7.2\">Mapping constructor</a>\n</li>\n<li>6.7.3 <a href=\"#section_6.7.3\">Table constructor</a>\n</li>\n</ul>\n</li>\n<li>6.8 <a href=\"#section_6.8\">Object construction</a><ul>\n<li>6.8.1 <a href=\"#section_6.8.1\">Object constructor</a><ul>\n<li>6.8.1.1 <a href=\"#section_6.8.1.1\">Fields</a>\n</li>\n<li>6.8.1.2 <a href=\"#section_6.8.1.2\">Methods</a>\n</li>\n<li>6.8.1.3 <a href=\"#resources\">Resources</a>\n</li>\n<li>6.8.1.4 <a href=\"#section_6.8.1.4\">Initialization</a>\n</li>\n</ul>\n</li>\n<li>6.8.2 <a href=\"#section_6.8.2\">New expression</a>\n</li>\n</ul>\n</li>\n<li>6.9 <a href=\"#section_6.9\">Variable reference expression</a>\n</li>\n<li>6.10 <a href=\"#section_6.10\">Field access expression</a>\n</li>\n<li>6.11 <a href=\"#section_6.11\">Optional field access expression</a>\n</li>\n<li>6.12 <a href=\"#section_6.12\">XML attribute access expression</a>\n</li>\n<li>6.13 <a href=\"#section_6.13\">Annotation access expression</a>\n</li>\n<li>6.14 <a href=\"#section_6.14\">Member access expression</a>\n</li>\n<li>6.15 <a href=\"#function_call\">Function call expression</a>\n</li>\n<li>6.16 <a href=\"#section_6.16\">Method call expression</a>\n</li>\n<li>6.17 <a href=\"#section_6.17\">Error constructor</a>\n</li>\n<li>6.18 <a href=\"#section_6.18\">Anonymous function expression</a>\n</li>\n<li>6.19 <a href=\"#section_6.19\">Let expression</a>\n</li>\n<li>6.20 <a href=\"#section_6.20\">Type cast expression</a>\n</li>\n<li>6.21 <a href=\"#section_6.21\">Typeof expression</a>\n</li>\n<li>6.22 <a href=\"#section_6.22\">Unary expression</a><ul>\n<li>6.22.1 <a href=\"#section_6.22.1\">Unary numeric expression</a>\n</li>\n<li>6.22.2 <a href=\"#section_6.22.2\">Unary logical expression</a>\n</li>\n</ul>\n</li>\n<li>6.23 <a href=\"#section_6.23\">Multiplicative expression</a>\n</li>\n<li>6.24 <a href=\"#section_6.24\">Additive expression</a>\n</li>\n<li>6.25 <a href=\"#section_6.25\">Shift expression</a>\n</li>\n<li>6.26 <a href=\"#section_6.26\">Range expression</a>\n</li>\n<li>6.27 <a href=\"#section_6.27\">Relational expression</a>\n</li>\n<li>6.28 <a href=\"#section_6.28\">Type test expression</a>\n</li>\n<li>6.29 <a href=\"#section_6.29\">Equality expression</a>\n</li>\n<li>6.30 <a href=\"#section_6.30\">Binary bitwise expression</a>\n</li>\n<li>6.31 <a href=\"#section_6.31\">Logical expression</a>\n</li>\n<li>6.32 <a href=\"#section_6.32\">Conditional expression</a>\n</li>\n<li>6.33 <a href=\"#section_6.33\">Checking expression</a>\n</li>\n<li>6.34 <a href=\"#section_6.34\">Trap expression</a>\n</li>\n<li>6.35 <a href=\"#section_6.35\">Query expression</a><ul>\n<li>6.35.1 <a href=\"#section_6.35.1\">From clause</a>\n</li>\n<li>6.35.2 <a href=\"#section_6.35.2\">Where clause</a>\n</li>\n<li>6.35.3 <a href=\"#section_6.35.3\">Let clause</a>\n</li>\n<li>6.35.4 <a href=\"#section_6.35.4\">Join clause</a>\n</li>\n<li>6.35.5 <a href=\"#section_6.35.5\">Order by clause</a>\n</li>\n<li>6.35.6 <a href=\"#section_6.35.6\">Limit clause</a>\n</li>\n<li>6.35.7 <a href=\"#section_6.35.7\">Select clause</a>\n</li>\n<li>6.35.8 <a href=\"#section_6.35.8\">On conflict clause</a>\n</li>\n</ul>\n</li>\n<li>6.36 <a href=\"#section_6.36\">XML navigation expression</a><ul>\n<li>6.36.1 <a href=\"#section_6.36.1\">XML name pattern</a>\n</li>\n<li>6.36.2 <a href=\"#section_6.36.2\">XML filter expression</a>\n</li>\n<li>6.36.3 <a href=\"#section_6.36.3\">XML step expression</a>\n</li>\n</ul>\n</li>\n<li>6.37 <a href=\"#section_6.37\">Transactional expression</a>\n</li>\n</ul>\n</li>\n<li>7. <a href=\"#actions_statements\">Actions and statements</a><ul>\n<li>7.1 <a href=\"#section_7.1\">Actions</a>\n</li>\n<li>7.2 <a href=\"#section_7.2\">Threads and strands</a>\n</li>\n<li>7.3 <a href=\"#section_7.3\">Function bodies</a><ul>\n<li>7.3.1 <a href=\"#section_7.3.1\">Function parameters</a>\n</li>\n<li>7.3.2 <a href=\"#section_7.3.2\">Workers</a>\n</li>\n<li>7.3.3 <a href=\"#section_7.3.3\">Expression-bodied functions</a>\n</li>\n<li>7.3.4 <a href=\"#section_7.3.4\">External functions</a>\n</li>\n<li>7.3.5 <a href=\"#isolated_functions\">Isolated functions</a>\n</li>\n</ul>\n</li>\n<li>7.4 <a href=\"#section_7.4\">Statements</a><ul>\n<li>7.4.1 <a href=\"#section_7.4.1\">Statement execution</a>\n</li>\n<li>7.4.2 <a href=\"#section_7.4.2\">Statement blocks</a>\n</li>\n<li>7.4.3 <a href=\"#section_7.4.3\">Unreachability</a>\n</li>\n</ul>\n</li>\n<li>7.5 <a href=\"#section_7.5\">Fork statement</a>\n</li>\n<li>7.6 <a href=\"#section_7.6\">Start action</a>\n</li>\n<li>7.7 <a href=\"#section_7.7\">Wait action</a><ul>\n<li>7.7.1 <a href=\"#section_7.7.1\">Single wait action</a>\n</li>\n<li>7.7.2 <a href=\"#section_7.7.2\">Multiple wait action</a>\n</li>\n<li>7.7.3 <a href=\"#section_7.7.3\">Alternate wait action </a>\n</li>\n</ul>\n</li>\n<li>7.8 <a href=\"#section_7.8\">Worker message passing</a><ul>\n<li>7.8.1 <a href=\"#section_7.8.1\">Send action</a>\n</li>\n<li>7.8.2 <a href=\"#section_7.8.2\">Receive action</a><ul>\n<li>7.8.2.1 <a href=\"#section_7.8.2.1\">Single receive action</a>\n</li>\n<li>7.8.2.2 <a href=\"#section_7.8.2.2\">Multiple receive action</a>\n</li>\n</ul>\n</li>\n<li>7.8.3 <a href=\"#section_7.8.3\">Flush action</a>\n</li>\n<li>7.8.4 <a href=\"#section_7.8.4\">Send-receive correspondence</a>\n</li>\n</ul>\n</li>\n<li>7.9 <a href=\"#section_7.9\">Outbound network interaction</a>\n</li>\n<li>7.10 <a href=\"#section_7.10\">Query action</a>\n</li>\n<li>7.11 <a href=\"#section_7.11\">Local variable declaration statements</a>\n</li>\n<li>7.12 <a href=\"#conditional_variable_type_narrowing\">Conditional variable type narrowing</a>\n</li>\n<li>7.13 <a href=\"#XML_namespace_declaration_statement\">XML namespace declaration statement</a>\n</li>\n<li>7.14 <a href=\"#section_7.14\">Assignment</a><ul>\n<li>7.14.1 <a href=\"#section_7.14.1\">Lvalues</a>\n</li>\n<li>7.14.2 <a href=\"#section_7.14.2\">Assignment statement</a>\n</li>\n<li>7.14.3 <a href=\"#section_7.14.3\">Compound assignment statement</a>\n</li>\n<li>7.14.4 <a href=\"#section_7.14.4\">Destructuring assignment statement</a>\n</li>\n</ul>\n</li>\n<li>7.15 <a href=\"#section_7.15\">Action statement</a>\n</li>\n<li>7.16 <a href=\"#section_7.16\">Call statement</a>\n</li>\n<li>7.17 <a href=\"#section_7.17\">Conditional statement</a>\n</li>\n<li>7.18 <a href=\"#section_7.18\">Do statement</a>\n</li>\n<li>7.19 <a href=\"#match_statement\">Match statement</a><ul>\n<li>7.19.1 <a href=\"#section_7.19.1\">Match patterns</a>\n</li>\n<li>7.19.2 <a href=\"#section_7.19.2\">Match clause reachability and narrowing</a>\n</li>\n</ul>\n</li>\n<li>7.20 <a href=\"#section_7.20\">Loops</a><ul>\n<li>7.20.1 <a href=\"#section_7.20.1\">Foreach statement</a>\n</li>\n<li>7.20.2 <a href=\"#section_7.20.2\">While statement</a>\n</li>\n<li>7.20.3 <a href=\"#section_7.20.3\">Continue statement</a>\n</li>\n<li>7.20.4 <a href=\"#section_7.20.4\">Break statement</a>\n</li>\n</ul>\n</li>\n<li>7.21 <a href=\"#lock_statement\">Lock statement</a>\n</li>\n<li>7.22 <a href=\"#section_7.22\">Fail and retry</a><ul>\n<li>7.22.1 <a href=\"#section_7.22.1\">Fail statement</a>\n</li>\n<li>7.22.2 <a href=\"#section_7.22.2\">On fail clause</a>\n</li>\n<li>7.22.3 <a href=\"#section_7.22.3\">Retry statement</a>\n</li>\n</ul>\n</li>\n<li>7.23 <a href=\"#transactions\">Transactions</a><ul>\n<li>7.23.1 <a href=\"#section_7.23.1\">Transaction manager</a><ul>\n<li>7.23.1.1 <a href=\"#section_7.23.1.1\">Begin operation</a>\n</li>\n<li>7.23.1.2 <a href=\"#section_7.23.1.2\">Commit operation</a>\n</li>\n<li>7.23.1.3 <a href=\"#section_7.23.1.3\">Rollback operation</a>\n</li>\n</ul>\n</li>\n<li>7.23.2 <a href=\"#section_7.23.2\">Transaction statement</a>\n</li>\n<li>7.23.3 <a href=\"#section_7.23.3\">Retry transaction statement</a>\n</li>\n<li>7.23.4 <a href=\"#section_7.23.4\">Commit action</a>\n</li>\n<li>7.23.5 <a href=\"#section_7.23.5\">Rollback statement</a>\n</li>\n</ul>\n</li>\n<li>7.24 <a href=\"#section_7.24\">Panic statement</a>\n</li>\n<li>7.25 <a href=\"#section_7.25\">Return statement</a>\n</li>\n</ul>\n</li>\n<li>8. <a href=\"#module_level\">Module-level declarations</a><ul>\n<li>8.1 <a href=\"#section_8.1\">Import declaration</a>\n</li>\n<li>8.2 <a href=\"#section_8.2\">Module and program execution</a>\n</li>\n<li>8.3 <a href=\"#listeners_and_services\">Listeners and services</a><ul>\n<li>8.3.1 <a href=\"#section_8.3.1\">Listener declaration</a>\n</li>\n<li>8.3.2 <a href=\"#section_8.3.2\">Service declaration</a>\n</li>\n<li>8.3.3 <a href=\"#section_8.3.3\">Isolated inference</a>\n</li>\n</ul>\n</li>\n<li>8.4 <a href=\"#section_8.4\">Function definition</a>\n</li>\n<li>8.5 <a href=\"#section_8.5\">Module type definition</a>\n</li>\n<li>8.6 <a href=\"#section_8.6\">Module class definition</a>\n</li>\n<li>8.7 <a href=\"#section_8.7\">Module variable declaration</a>\n</li>\n<li>8.8 <a href=\"#section_8.8\">Module constant declaration</a>\n</li>\n<li>8.9 <a href=\"#section_8.9\">Module enumeration declaration</a>\n</li>\n<li>8.10 <a href=\"#section_8.10\">Module XML namespace declaration</a>\n</li>\n</ul>\n</li>\n<li>9. <a href=\"#metadata\">Metadata</a><ul>\n<li>9.1 <a href=\"#section_9.1\">Annotations</a>\n</li>\n<li>9.2 <a href=\"#section_9.2\">Documentation</a>\n</li>\n<li>9.3 <a href=\"#section_9.3\">Ballerina Flavored Markdown</a>\n</li>\n</ul>\n</li>\n<li>10. <a href=\"#lang_library\">Lang library</a><ul>\n<li>10.1 <a href=\"#section_10.1\">Generic types</a>\n</li>\n<li>10.2 <a href=\"#built-in_subtypes\">Built-in subtypes</a>\n</li>\n<li>10.3 <a href=\"#section_10.3\">Lang library modules</a><ul>\n<li>10.3.1 <a href=\"#lang.array\"><code>lang.array</code> module</a>\n</li>\n<li>10.3.2 <a href=\"#lang.boolean\"><code>lang.boolean</code> module</a>\n</li>\n<li>10.3.3 <a href=\"#lang.decimal\"><code>lang.decimal</code> module</a>\n</li>\n<li>10.3.4 <a href=\"#lang.error\"><code>lang.error</code> module</a>\n</li>\n<li>10.3.5 <a href=\"#lang.float\"><code>lang.float</code> module</a>\n</li>\n<li>10.3.6 <a href=\"#lang.future\"><code>lang.future</code> module</a>\n</li>\n<li>10.3.7 <a href=\"#lang.int\"><code>lang.int</code> module</a>\n</li>\n<li>10.3.8 <a href=\"#lang.map\"><code>lang.map</code> module</a>\n</li>\n<li>10.3.9 <a href=\"#lang.object\"><code>lang.object</code> module</a>\n</li>\n<li>10.3.10 <a href=\"#lang.stream\"><code>lang.stream</code> module</a>\n</li>\n<li>10.3.11 <a href=\"#lang.string\"><code>lang.string</code> module</a>\n</li>\n<li>10.3.12 <a href=\"#lang.table\"><code>lang.table</code> module</a>\n</li>\n<li>10.3.13 <a href=\"#lang.typedesc\"><code>lang.typedesc</code> module</a>\n</li>\n<li>10.3.14 <a href=\"#lang.xml\"><code>lang.xml</code> module</a>\n</li>\n<li>10.3.15 <a href=\"#lang.transaction\"><code>lang.transaction</code> module</a>\n</li>\n<li>10.3.16 <a href=\"#lang.runtime\"><code>lang.runtime</code> module</a>\n</li>\n<li>10.3.17 <a href=\"#lang.value\"><code>lang.value</code> module</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>A. <a href=\"#references\">References</a>\n</li>\n<li>B. <a href=\"#changes\">Changes since previous releases</a><ul>\n<li>B.1 <a href=\"#section_B.1\">Summary of changes from 2021R1 to 2022R1</a>\n</li>\n<li>B.2 <a href=\"#section_B.2\">Summary of changes from 2020R1 to 2021R1</a>\n</li>\n<li>B.3 <a href=\"#section_B.3\">Summary of changes from 2019R3 to 2020R1</a>\n</li>\n<li>B.4 <a href=\"#section_B.4\">Summary of changes from 2019R2 to 2019R3</a>\n</li>\n<li>B.5 <a href=\"#section_B.5\">Summary of changes from 2019R1 to 2019R2</a>\n</li>\n<li>B.6 <a href=\"#section_B.6\">Summary of changes from 0.990 to 2019R1</a>\n</li>\n<li>B.7 <a href=\"#section_B.7\">Summary of changes from 0.980 to 0.990</a>\n</li>\n<li>B.8 <a href=\"#section_B.8\">Summary of changes from 0.970 to 0.980</a>\n</li>\n</ul>\n</li>\n<li>C. <a href=\"#planned_future_functionality\">Planned future functionality</a>\n</li>\n<li>D. <a href=\"#contributors\">Other contributors</a>\n</li>\n</ul></section>\n<section>\n<h2 id=\"introduction\">1. Introduction</h2>\n<p>\nBallerina is a statically typed, concurrent programming language, focusing on\nnetwork interaction and structured data. It is intended to be the core of a\nlanguage-centric middleware platform. It has all the general-purpose\nfunctionality expected of a modern programming language, but it also has several\nunusual aspects that make it particularly suitable for its intended purpose.\n</p>\n<p>\nFirst, it provides language constructs specifically for consuming and providing\nnetwork services. Future versions of Ballerina will add language constructs for\nother middleware functionality such as event stream processing and reliable\nmessaging; this is described in more detail in <a href=\"#planned_future_functionality\">Appendix C</a>.\n</p>\n<p>\nSecond, its abstractions and syntax for concurrency and network interaction have\nbeen designed so that there is a close correspondence with sequence diagrams.\nThis enables a bidirectional mapping for any Ballerina function between its\ntextual representation in the syntax described in this specification and its\ngraphical representation as a sequence diagram, such that the sequence diagram\nfully shows the aspects of the behavior of that function that relate to\nconcurrency and network interaction.\n</p>\n<p>\nThird, it has a type system that is more flexible and allows for looser coupling\nthan traditional statically typed languages. The type system is structural:\ninstead of requiring the program to explicitly say which types are compatible\nwith each other, compatibility of types and values is determined automatically\nbased on their structure; this is particularly useful when combining data from\nmultiple, independently-designed systems. In addition, the type system provides\nunion types and open records. This flexibility allows the type system to be used\nas a schema for the data that is exchanged in distributed applications.\nBallerina's data types are designed to work particularly well with JSON; any\nJSON value has a direct, natural representation as a Ballerina value. Ballerina\nalso provides support for XML and tabular data.\n</p>\n<p>\nBallerina is not a research language. It is intended to be a pragmatic language\nsuitable for mass-market commercial adoption. It tries to feel familiar to\nprogrammers who are used to popular, modern C-family languages, notably Java, C#\nand JavaScript. It also gets ideas and inspiration from many other existing\nprogramming languages including TypeScript, Go, Rust, D, Kotlin, Swift, Python\nand Perl.\n</p>\n<p>\nThe Ballerina language has been designed in conjunction with the Ballerina\nplatform, which provides comprehensive support for a module-based software\ndevelopment model, including versioning, dependency management, testing,\ndocumentation, building and sharing. Modules are organized into repositories;\nthere is a globally-shared, central repository, but repositories can also be\nlocal.\n</p>\n<p>\nThe Ballerina language includes a small library, the lang library, which\nprovides fundamental operations on the data types defined by the language; the\nlang library is defined by this specification. The Ballerina platform includes\nan extensive standard library, which includes not only the usual low-level,\ngeneral-purpose functionality, but also support for a wide variety of network\nprotocols, interface standards, data formats and authentication/authorization\nstandards, which make writing secure, resilient distributed applications\nsignificantly easier than with other languages. The standard library is not\nspecified in this document.\n</p>\n</section>\n<section>\n<h2 id=\"notation\">2. Notation</h2>\n<p>\nProductions are written in the form:\n</p>\n\n<pre>symbol := rhs\n</pre>\n<p>\nwhere symbol is the name of a nonterminal, and <code>rhs</code> is as follows:\n</p>\n<ul>\n<li>\n<code>0xX</code> means the single character whose Unicode code point is\ndenoted by the hexadecimal numeral X</li>\n<li>\n<code>^x</code> means any single Unicode code point that does not match x\nand is not a disallowed character;</li>\n<li>\n<code>x..y</code> means any single Unicode character whose code point is\ngreater than or equal to that of x and less than or equal to that of y</li>\n<li>\n<code class=\"grammar\">str</code> means the characters <code>str</code> literally</li>\n<li>\n<code>symbol </code>means a reference to production for the nonterminal\n<code>symbol</code>\n</li>\n<li>\n<code>x|y</code> means x or y</li>\n<li>\n<code>x&amp;y</code> means x and y, interleaved in any order</li>\n<li>\n<code>[x]</code> means zero or one times</li>\n<li>\n<code>x?</code> means x zero or one times</li>\n<li>\n<code>x*</code> means x zero or more times</li>\n<li>\n<code>x+</code> means x one or more times</li>\n<li>\n<code>(x)</code> means x (grouping)</li>\n</ul>\n<p>\nThe <code>rhs</code> of a symbol that starts with a lower-case letter implicitly allows white\nspace and comments, as defined by the production <code>TokenWhiteSpace</code>,\nbetween the terminals and nonterminals that it references.\n</p>\n</section>\n<section>\n<h2 id=\"program_structure\">3. Program structure</h2>\n<p>\nA Ballerina program is divided into modules. A module has a source form and a\nbinary form. The source form of a module consists of an ordered collection of\none or more source parts; each source part is a sequence of bytes that is the\nUTF-8 encoding of part of the source code for the module. The format of a source\npart is defined by this specification. The format of a binary module is\nspecified by the Ballerina platform.\n</p>\n<p>\nA source module can reference other modules. Each source module can be\nseparately compiled into a binary module: compilation of a source module needs\naccess only to the binary form of other modules referenced from the source\nmodule. A source module identifies each module that it references using an\norganization name and a module name, which is divided into one or more parts.\nBoth the organization name and each part of the module name are Unicode strings.\nAny organization name starting with the string <code>ballerina</code> is\nreserved for use by the Ballerina platform.\n</p>\n<p>\nThe Ballerina platform defines a packaging system for Ballerina modules, which\nallows one or more modules to be combined into a package. The packaging system\ntreats the first part of each module's name as being a package name. All the\nmodules combined into a package share the same package name. Packages have both\na source and a binary format. The source format stores the source form of a\npackage's modules in a hierarchical filesystem. The binary format stores the\nbinary form of a package's module as a sequence of bytes.\n</p>\n<p>\nBinary packages can be stored in a package repository. Packages are versioned;\nversions are semantic, as described in the SemVer specification. A package\nrepository can store multiple versions of the same package. Thus, within a\nrepository, binary packages are organized into a three-level hierarchy:\n</p>\n<ol>\n<li>organization;</li>\n<li>package name;</li>\n<li>version.</li>\n</ol>\n<p>\nThe source format of a package includes a <code>Ballerina.toml</code> file that\nallows control over the package versions used for referenced modules.\n</p>\n<p>\nThe packaging system also allows control over which modules are exported from a\npackage; modules that are not exported from a package are visible only to\nmodules within the package.\n</p>\n</section>\n<section>\n<h2 id=\"lexical_structure\">4. Lexical structure</h2>\n<p>\nThe grammar in this document specifies how a sequence of Unicode code points is\ninterpreted as part of the source of a Ballerina module. A Ballerina module part\nis a sequence of octets (8-bit bytes); this sequence of octets is interpreted as\nthe UTF-8 encoding of a sequence of code points and must comply with the\nrequirements of RFC 3629.\n</p>\n<p>\nAfter the sequence of octets is decoded from UTF-8, the following two\ntransformations must be performed before it is parsed using the grammar in this\ndocument:\n</p>\n<ul>\n<li>if the sequence starts with a byte order mark (code point 0xFEFF), it must\nbe removed</li>\n<li>newlines are normalized as follows:\n<ul>\n<li>the two character sequence 0xD 0xA is replaced by 0xA</li>\n<li>a single 0xD character that is not followed by 0xD is replaced by 0xA</li>\n</ul>\n</li>\n</ul>\n<p>\nThe sequence of code points must not contain any of the following disallowed\ncode points:\n</p>\n<ul>\n<li>surrogates (0xD800 to 0xDFFF)</li>\n<li>non-characters (the 66 code points that Unicode designates as\nnon-characters)</li>\n<li>C0 control characters (0x0 to 0x1F and 0x1F) other than white space (0x9,\n0xA, 0xC, 0xD)</li>\n<li>C1 control characters (0x80 to 0x9F)</li>\n</ul>\n<p>\nNote that the grammar notation ^X does not allow the above disallowed code\npoints.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"identifier\">identifier</span> := <a href=\"#UnquotedIdentifier\"><span class=\"ntref\">UnquotedIdentifier</span></a> | <a href=\"#QuotedIdentifier\"><span class=\"ntref\">QuotedIdentifier</span></a>\n<span class=\"ntdfn\" id=\"UnquotedIdentifier\">UnquotedIdentifier</span> := (<a href=\"#IdentifierInitialChar\"><span class=\"ntref\">IdentifierInitialChar</span></a> | <a href=\"#IdentifierEscape\"><span class=\"ntref\">IdentifierEscape</span></a>) (<a href=\"#IdentifierFollowingChar\"><span class=\"ntref\">IdentifierFollowingChar</span></a> | <a href=\"#IdentifierEscape\"><span class=\"ntref\">IdentifierEscape</span></a>)*\n<span class=\"ntdfn\" id=\"QuotedIdentifier\">QuotedIdentifier</span> := <code>'</code> (<a href=\"#IdentifierFollowingChar\"><span class=\"ntref\">IdentifierFollowingChar</span></a> | <a href=\"#IdentifierEscape\"><span class=\"ntref\">IdentifierEscape</span></a>)+\n<span class=\"ntdfn\" id=\"IdentifierInitialChar\">IdentifierInitialChar</span> :=  <a href=\"#AsciiLetter\"><span class=\"ntref\">AsciiLetter</span></a> | <code>_</code> | <a href=\"#UnicodeIdentifierChar\"><span class=\"ntref\">UnicodeIdentifierChar</span></a>\n<span class=\"ntdfn\" id=\"IdentifierFollowingChar\">IdentifierFollowingChar</span> := <a href=\"#IdentifierInitialChar\"><span class=\"ntref\">IdentifierInitialChar</span></a> | <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>\n<span class=\"ntdfn\" id=\"IdentifierEscape\">IdentifierEscape</span> := <a href=\"#IdentifierSingleEscape\"><span class=\"ntref\">IdentifierSingleEscape</span></a> | <a href=\"#NumericEscape\"><span class=\"ntref\">NumericEscape</span></a>\n<span class=\"ntdfn\" id=\"IdentifierSingleEscape\">IdentifierSingleEscape</span> := <code>\\</code> ^ ( <a href=\"#AsciiLetter\"><span class=\"ntref\">AsciiLetter</span></a> | 0x9 | 0xA | 0xD | <a href=\"#UnicodePatternWhiteSpaceChar\"><span class=\"ntref\">UnicodePatternWhiteSpaceChar</span></a> )\n<span class=\"ntdfn\" id=\"NumericEscape\">NumericEscape</span> := <code>\\u{</code> <a href=\"#CodePoint\"><span class=\"ntref\">CodePoint</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"CodePoint\">CodePoint</span> := <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n<span class=\"ntdfn\" id=\"AsciiLetter\">AsciiLetter</span> := <code>A</code> .. <code>Z</code> | <code>a</code> .. <code>z</code>\n<span class=\"ntdfn\" id=\"UnicodeIdentifierChar\">UnicodeIdentifierChar</span> := ^ ( <a href=\"#AsciiChar\"><span class=\"ntref\">AsciiChar</span></a> | <a href=\"#UnicodeNonIdentifierChar\"><span class=\"ntref\">UnicodeNonIdentifierChar</span></a> )\n<span class=\"ntdfn\" id=\"AsciiChar\">AsciiChar</span> := 0x0 .. 0x7F\n<span class=\"ntdfn\" id=\"UnicodeNonIdentifierChar\">UnicodeNonIdentifierChar</span> :=\n   <a href=\"#UnicodePrivateUseChar\"><span class=\"ntref\">UnicodePrivateUseChar</span></a>\n   | <a href=\"#UnicodePatternWhiteSpaceChar\"><span class=\"ntref\">UnicodePatternWhiteSpaceChar</span></a>\n   | <a href=\"#UnicodePatternSyntaxChar\"><span class=\"ntref\">UnicodePatternSyntaxChar</span></a>\n<span class=\"ntdfn\" id=\"UnicodePrivateUseChar\">UnicodePrivateUseChar</span> :=\n   0xE000 .. 0xF8FF\n   | 0xF0000 .. 0xFFFFD\n   | 0x100000 .. 0x10FFFD\n<span class=\"ntdfn\" id=\"UnicodePatternWhiteSpaceChar\">UnicodePatternWhiteSpaceChar</span> := 0x200E | 0x200F | 0x2028 | 0x2029\n<span class=\"ntdfn\" id=\"UnicodePatternSyntaxChar\">UnicodePatternSyntaxChar</span> := <em>character with Unicode property Pattern_Syntax=True</em>\n<span class=\"ntdfn\" id=\"Digit\">Digit</span> := <code>0</code> .. <code>9</code>\n</pre>\n<p>\nNote that the set of characters allowed in identifiers follows the requirements\nof Unicode TR31 for immutable identifiers; the set of characters is immutable in\nthe sense that it does not change between Unicode versions.\n</p>\n<p>\nThe <code>QuotedIdentifier</code> syntax allows a reserved keyword\n<code><var>K</var></code> can be used as an identifier by preceding it with a\nsingle quote i.e. <code>'<var>K</var></code>. The <code>IdentifierEscape</code>\nsyntax allows an arbitrary non-empty string to be treated as an identifier. In a\n<code>NumericEscape</code>, <code>CodePoint</code> must valid Unicode code\npoint; more precisely, it must be a hexadecimal numeral denoting an integer\n<em>n</em> where 0 â¤ <em>n</em> &lt; 0xD800 or 0xDFFF &lt; n â¤\n0x10FFFF.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"RestrictedIdentifier\">RestrictedIdentifier</span> := <a href=\"#AsciiLetter\"><span class=\"ntref\">AsciiLetter</span></a> <a href=\"#RestrictedFollowingChar\"><span class=\"ntref\">RestrictedFollowingChar</span></a>* <a href=\"#RestrictedIdentifierWord\"><span class=\"ntref\">RestrictedIdentifierWord</span></a>*\n<span class=\"ntdfn\" id=\"RestrictedIdentifierWord\">RestrictedIdentifierWord</span> := <code>_</code> <a href=\"#RestrictedFollowingChar\"><span class=\"ntref\">RestrictedFollowingChar</span></a>+\n<span class=\"ntdfn\" id=\"RestrictedFollowingChar\">RestrictedFollowingChar</span> := <a href=\"#AsciiLetter\"><span class=\"ntref\">AsciiLetter</span></a> | <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>\n</pre>\n\n<p>\nIdentifiers used for the names of organizations and modules are restricted to\n<code>RestrictedIdentifier</code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"TokenWhiteSpace\">TokenWhiteSpace</span> := (<a href=\"#Comment\"><span class=\"ntref\">Comment</span></a> | <a href=\"#WhiteSpaceChar\"><span class=\"ntref\">WhiteSpaceChar</span></a>)*\n<span class=\"ntdfn\" id=\"Comment\">Comment</span> := <code>//</code> <a href=\"#AnyCharButNewline\"><span class=\"ntref\">AnyCharButNewline</span></a>*\n<span class=\"ntdfn\" id=\"AnyCharButNewline\">AnyCharButNewline</span> := ^ 0xA\n<span class=\"ntdfn\" id=\"WhiteSpaceChar\">WhiteSpaceChar</span> := 0x9 | 0xA | 0xD | 0x20\n</pre>\n<p>\n<code>TokenWhiteSpace</code> is implicitly allowed on the right hand side of\nproductions for non-terminals whose names start with a lower-case letter.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"NoSpaceColon\">NoSpaceColon</span> := <code>:</code>\n</pre>\n<p>\nWhen <code>NoSpaceColon</code> is used in a production,\n<code>TokenWhiteSpace</code> is not allowed immediately before or after the\ncolon. When a literal <code>:</code> is used in a production, white space is\nhandled in the same was as for any other character.\n</p>\n\n</section>\n<section>\n<h2 id=\"values_types\">5. Values, types and variables</h2>\n\n<section>\n<h3 id=\"section_5.1\">5.1 Overview</h3>\n\n<section>\n<h4 id=\"section_5.1.1\">5.1.1 Type system fundamentals</h4>\n<p>\nBallerina programs operate on a rich universe of values. This universe of values\nis partitioned into a number of <em>basic types</em>; every value belongs to\nexactly one basic type.\n</p>\n<p>\nValues are of four kinds, each corresponding to a kind of basic type:\n</p>\n<ul>\n<li>simple values, like booleans and floating point numbers, which are not\nconstructed from other values;</li>\n<li>structured values, like mappings and lists, which contain other values;</li>\n<li>sequence values, which combine aspects of simple values and structured\nvalues;</li>\n<li>behavioral values, like functions and objects, which are not just data</li>\n</ul>\n<p>\nThere is a fundamental distinction between values that have a <em>storage\nidentity</em> and values that do not. A value that has storage identity has an\nidentity that comes from the location where the value is stored. All structural\nand behavioural values have a storage identity, whereas all simple values do\nnot. Storage identity for sequence values is more complicated and will be\nexplained in the section on sequence values.\n</p>\n<p>\nValues can be stored in variables or as members of structures or in constituents\nof sequences. When a value has no storage identity, it can be stored directly in\nthe variable, structure or sequence. However, when a value has storage identity,\nwhat is stored in the variable, structure or sequence is a reference to the\nlocation where the value is stored rather than the value itself. Storage\nidentity allows values in Ballerina to represent not just trees but graphs.\n</p>\n<p>\nBallerina provides the ability to test whether two values have the same storage\nidentity, but does not expose the specific storage location of a value. For\nvalues with storage identity, there is the concept of creating a <em>new</em>\nvalue: this means creating a value that has a storage identity that is different\nfrom any existing value. For values with storage identity, there is also the\nconcept of <em>copying</em>: it means to create a value that is the same, except\nfor having a new storage identity. The concept of having storage identity is\nsimilar to the concept of a reference type in some other programming languages,\nbut also accomodates the concept of a sequence value.\n</p>\n<p>\nBallerina programs use types to categorize values both at compile-time and\nruntime. Types deal with an abstraction of values that does not consider storage\nidentity. This abstraction is called a <em>shape</em>. A type denotes a set of\nshapes. Subtyping in Ballerina is <em>semantic</em>: a type S is a subtype of\ntype T if the set of shapes denoted by S is a subset of the set of shapes\ndenoted by T. Every value has a corresponding shape. A shape is specific to a\nbasic type: if two values have different basic types, then they have different\nshapes. The shape of the values contained in a structured value are part of the\nshape of the structured value. Since shapes do not deal with storage identity,\nthey represent trees rather graphs. For simple values, there is no difference\nbetween a shape and a value, with the exception of floating point values where\nthe shape does not consider representation details that do not affect the\nmathematical value being represented.\n</p>\n<p>\nA value is <em>plain data</em> if it is a simple value, a sequence value or a\nstructured value that does not contain a behavioral value at any depth.\nMore precisely, a value is defined to be <em>plain data</em> if it is\n</p>\n<ul>\n<li>a simple value,</li>\n<li>a sequence value, or</li>\n<li>a structured value, all of whose members are also plain data.</li>\n</ul>\n<p>\nPlain data values can in general contain cycles of references, but in some\ncontexts are restricted to be acyclic. Plain data values, including values with\ncycles, can be compared for equality.\n</p>\n<p>\nThe two most important kinds of behavioural values are functions and objects. A\nfunction value can be executed by calling it; when a function is called, it is\npassed values and arguments and returns a value. An object encapsulates data\nwith functions that operate on the data: an object's members are divided into\nfields, which hold the data, and methods, which are the functions that operate\non the data.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_5.1.2\">5.1.2 Mutation</h4>\n<p>\nThere are two kinds of things that can be mutated in Ballerina: variables and\nvalues. Mutation of values is tied to storage identity: mutation is only\npossible for values with storage identity. When a value stored in some storage\nlocation is mutated, the change will be visible through all variables referring\nto the value in that location. But not all values with storage identity can be\nmutated: a value may not support mutation even though it has a storage identity.\n</p>\n<p>\nThe possibility of mutation gives rise to two relations between a value and a\ntype:\n</p>\n<ul>\n<li>a value <em>looks like</em> a type at a particular point in the execution of\na program if its shape at that point is a member of the type;</li>\n<li>a value <em>belongs to</em> a type if it looks like the type, and it will\nnecessarily continue to look like the type no matter how the value is mutated.</li>\n</ul>\n<p>\nIf a value cannot be mutated, looking like a type and belonging to a type are\nthe same thing.\n</p>\n<p>\nWhen a Ballerina program declares a variable to have a compile-time type, this\nmeans that the Ballerina compiler together with the runtime system will ensure\nthat the variable will only ever hold a value that belongs to the type.\nBallerina also provides mechanisms that take a value that looks like a type and\nuse it to create a value that belongs to a type.\n</p>\n<p>\nEvery value has a read-only bit. If the read-only bit is on, it means that the\nvalue is immutable. A value's read-only bit is fixed when the value is\nconstructed, and cannot be changed thereafter. Ballerina maintains the invariant\nthat immutability is deep: any value reachable from a value with its read-only\nbit set is guaranteed to have its read-only bit set. Here <em>reachable</em>\nmeans reachable through read operations: every member of a structure value is\nreachable from the structure value; every constituent of a sequence value is\nreachable from the sequence value; every member of an object value is reachable\nfrom the object value. Reachability is transitive: if <var>t</var> is reachable\nfrom <var>s</var>, and <var>s</var> is reachable from <var>r</var>, then\n<var>t</var> is reachable from <var>r</var>. Reachability is also considered\nreflexive: a value is reachable from itself.\n</p>\n<p>\nSome basic types are inherently immutable: the read-only bit is always on for a\nvalue that belongs to an inherently immutable basic type. All simple types are\ninherently immutable as are functions. Some basic types are selectively\nimmutable: a type is selectively immutable if it is possible to construct both\nvalues of the type that have the read-only bit on and values that do not have\nthe read-only bit on. All structured types are selectively immutable as are\nobjects. Finally, some basic types are inherently mutable: the read-only bit is\nnever on for a value belonging to an inherently mutable basic type.\n</p>\n<p>\nEach selectively immutable basic type can be partitioned into two\n<em>uniform</em> types, one containing values with the read-only bit on, and one\ncontaining values where the read-only bit is off. For every other basic type,\nthere is a single uniform type. Every uniform type is thus either completely\nreadonly or completely mutable; every value thus belongs to exactly one uniform\ntype, and mutation cannot change the uniform type to which a value belongs.\n</p>\n<p>\nIt is also possible to limit the mutability of variables, by making them final.\nThis means that the value that a variable holds cannot be changed after the\nvariable has been initialized. Unlike immutability of variables, this is not\ndeep. A final variable can hold a mutable value.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_5.1.3\">5.1.3 Isolation</h4>\n<p>\nThere are three possible operations on storage: read, write and execute. The\nconcept of immutability relates to reading and writing storage, and provides\nlimited information about execution: execution cannot lead to mutation of an\nimmutable value. For functions and objects, it is useful to have more\ninformation about how execution may lead to mutation. Ballerina has a concept of\n<em>isolation</em> that provides this.\n</p>\n<p>\nIn addition to defining when a value is reachable from a value, we can define\nwhen a value is reachable from a variable: a value is reachable from a variable\nif the value is reachable from the value that the variable holds. We\ncan also define when mutable state is reachable from a value or variable: the\nmutable state of a value v is reachable from a value or variable, if v is\nreachable from the value or variable; the mutable state of a variable v is\nreachable only from the variable v.\n</p>\n<p>\nObjects have an isolated bit in addition to a read-only bit; an object value is\nisolated if its isolated bit is set. Mutable state is defined to be <em>freely\nreachable</em> from a value or variable if it is reachable without following a\nreference to an isolated object. A variable or value is an <em>isolated\nroot</em> if its mutable state is isolated from the rest of the program's\nmutable state: any mutable state that is freely reachable from the isolated root\nis reachable from outside only through the isolated root. More precisely, if\nsome mutable state <var>s</var> is freely reachable from an isolated root value\n<var>r</var>, then <var>s</var> is not freely reachable from a variable or value\nthat is not reachable from <var>r</var> except by following a reference through\n<var>r</var>; similarly, if some mutable state <var>s</var> is freely reachable\nfrom an isolated root variable <var>r</var>, then <var>s</var> is not freely\nreachable from a value that is not reachable from <var>r</var> and is not freely\nreachable from any variable other than <var>r</var>. A variable can also be\ndeclared to be isolated. Ballerina maintains the invariant that isolated objects\nand isolated variables are isolated roots. Ballerina also guarantees that any\nmutable state freely reachable from an isolated object or isolated variable is\naccessed only within the scope of a <a href=\"#lock_statement\">lock\nstatement</a>, which ensures that there is no data race in accessing that\nmutable state. This implies that there will be no data race accessing any\nmutable state that is reachable (not just freely reachable) from an isolated\nobject or isolated variable.\n</p>\n<p>\nFunctions and methods have an isolated bit in addition to a read-only bit; a\nfunction or method is isolated if its isolated bit is set. Ballerina guarantees\nthat a call an isolated method or function will only result in access to mutable\nstate if at least one of the following conditions applies:\n</p>\n<ul>\n<li>the mutable state is freely reachable from an argument passed to the\nfunction or method and the access happens on the strand on which the function is\ncalled; the object on which a method is invoked is considered as an argument for\nthis purpose;</li>\n<li>the mutable state is freely reachable from an isolated variable or an\nisolated object;</li>\n<li>the mutable state is part of a new value created by the call.</li>\n</ul>\n<p>\nThe caller of a function can thus ensure that a function call will not lead to a\ndata race by ensuring that no data race is possible for the mutable state freely\nreachable from the arguments that it passes to the function, for example by\npassing only immutable values or isolated objects.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.1.4\">5.1.4 Type descriptors</h4>\n<p>\nBallerina provides a rich variety of type descriptors, which programs use to\ndescribe types. For example, there is a type descriptor for each simple basic\ntype; there is a type descriptor that describes a type as a union of two types;\nthere is a type descriptor that uses a single value to describe a type that\ncontains a single shape. This means that values can look like and belong to\narbitrarily many types, even though they look like or belong to exactly one\n<em>basic</em> type.\n</p>\n<p>\nThe following table summarizes the type descriptors provided by Ballerina.\n</p>\n<table>\n  <tr>\n   <td><strong>Kind</strong></td>\n   <td><strong>Name</strong></td>\n   <td><strong>Set of values denoted by type descriptor</strong></td>\n  </tr>\n  <tr>\n   <td rowspan=\"5\">basic, simple</td>\n   <td>nil</td>\n   <td>()</td>\n  </tr>\n  <tr>\n   <td>boolean</td>\n   <td>true, false</td>\n  </tr>\n  <tr>\n   <td>int</td>\n   <td>64-bit signed integers</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>64-bit IEEE 754-2008 binary floating point numbers</td>\n  </tr>\n  <tr>\n   <td>decimal</td>\n   <td>decimal floating point numbers</td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">basic, sequence</td>\n   <td>string</td>\n   <td>a sequence of Unicode scalar values</td>\n  </tr>\n  <tr>\n   <td>XML</td>\n   <td>a sequence of zero or more elements, processing instructions, comments or\ntext items</td>\n  </tr>\n  <tr>\n   <td rowspan=\"5\">basic, structured</td>\n   <td>array</td>\n   <td>an ordered list of values, optionally with a specific length, where a\nsingle type is specified for all members of the list</td>\n  </tr>\n  <tr>\n   <td>tuple</td>\n   <td>an ordered list of values, where a type is specified separately for each\nmember of the list</td>\n  </tr>\n  <tr>\n   <td>map</td>\n   <td>a mapping from keys, which are strings, to values; specifies mappings in\nterms of a single type to which all keys are mapped</td>\n  </tr>\n  <tr>\n   <td>record</td>\n   <td>a mapping from keys, which are strings, to values; specifies maps in\nterms of names of fields (required keys) and value for each field</td>\n  </tr>\n  <tr>\n   <td>table</td>\n   <td>a ordered collection of mappings, where a mapping is uniquely identified\nwithin the table by a key derived from the mapping</td>\n  </tr>\n  <tr>\n   <td rowspan=\"7\">basic, behavioral</td>\n   <td>error</td>\n   <td>an indication that there has been an error, with a string identifying the\nreason for the error, and a mapping giving additional details about the error</td>\n  </tr>\n  <tr>\n   <td>function</td>\n   <td>a function with 0 or more specified parameter types and a single return\ntype</td>\n  </tr>\n  <tr>\n   <td>future</td>\n   <td>a value to be returned by a function execution</td>\n  </tr>\n  <tr>\n   <td>object</td>\n   <td>a combination of named fields and named methods</td>\n  </tr>\n  <tr>\n   <td>typedesc</td>\n   <td>a type descriptor</td>\n  </tr>\n  <tr>\n   <td>handle</td>\n   <td>reference to externally managed storage</td>\n  </tr>\n  <tr>\n   <td>stream</td>\n   <td>a sequence of values that can be generated lazily</td>\n  </tr>\n  <tr>\n   <td rowspan=\"11\">other</td>\n   <td>singleton</td>\n   <td>a single value described by a literal</td>\n  </tr>\n  <tr>\n   <td>readonly</td>\n   <td>any value whose read-only bit is on</td>\n  </tr>\n  <tr>\n   <td>any</td>\n   <td>any value other than an error</td>\n  </tr>\n  <tr>\n   <td>never</td>\n   <td>no value</td>\n  </tr>\n  <tr>\n   <td>optional</td>\n   <td>a value that is either () or belongs to a type</td>\n  </tr>\n  <tr>\n   <td>union</td>\n   <td>a value that belongs to at least one of a number of types</td>\n  </tr>\n  <tr>\n   <td>intersection</td>\n   <td>a value that belongs to all of a number of types</td>\n  </tr>\n  <tr>\n   <td>distinct</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>anydata</td>\n   <td>plain data (a simple value, sequence value or structured value that\n   does not contain behavioral members at any depth)</td>\n  </tr>\n  <tr>\n   <td>json</td>\n   <td>the union of (), int, float, decimal, string, and maps and arrays whose\nvalues are, recursively, json</td>\n  </tr>\n  <tr>\n   <td>byte</td>\n   <td>int in the range 0 to 255 inclusive</td>\n  </tr>\n</table>\n<p>\nA shape is divided into two <em>aspects</em>: the <em>primary aspect</em> and\nthe <em>read-only aspect</em>. A value's read-only bit is a part of the\n<em>read-only aspect</em> of the value's shape. The read-only bit of values\ncontained in a structured value is part of the read-only aspect of those values\nand of the read-only aspect of the structured value. Everything about a shape\nexcept the read-only bits constitutes the primary aspect of the shape. If two\nplain data values compare equal, then the primary aspect of their shapes is the\nsame, but there may be differences in the read-only aspect.\n</p>\n<p>\nType descriptors other than <code>readonly</code> describes types using only the\nprimary aspect of shape: whether a value belongs to the type is not affected by\nthe read-only aspect of the value's shape. The <code>readonly</code> type uses\nonly the read-only aspect: whether a value belongs to the <code>readonly</code>\ntype depends only on the read-only aspect of the value's shape.\n</p>\n<p>\nIn addition to describing a type, a type descriptor may also include information\nused to construct a value of the type, as well as metadata. Whereas the type\ndescribed by a type descriptor is known at compile time, this additional\ninformation may need to be resolved at runtime. The typedesc basic type\nrepresents a type descriptor that has been resolved.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"type-descriptor\">type-descriptor</span> :=\n   <a href=\"#simple-type-descriptor\"><span class=\"ntref\">simple-type-descriptor</span></a>\n   | <a href=\"#sequence-type-descriptor\"><span class=\"ntref\">sequence-type-descriptor</span></a>\n   | <a href=\"#structured-type-descriptor\"><span class=\"ntref\">structured-type-descriptor</span></a>\n   | <a href=\"#behavioral-type-descriptor\"><span class=\"ntref\">behavioral-type-descriptor</span></a>\n   | <a href=\"#other-type-descriptor\"><span class=\"ntref\">other-type-descriptor</span></a>\n</pre>\n<p>\nFor simplicity, the type-descriptor grammar is ambiguous. The following table\nshows the various types of type descriptor in decreasing order of precedence,\ntogether with associativity.\n</p>\n<table>\n  <tr>\n   <td><strong>Operator</strong></td>\n   <td><strong>Associativity</strong></td>\n  </tr>\n  <tr>\n   <td><code>distinct T</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>T[]</code><br><code>T?</code>\n</td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>T1 &amp; T2</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>T1 | T2</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>function(args) returns T</code></td>\n   <td>right</td>\n  </tr>\n</table>\n\n\n</section>\n<section>\n<h4 id=\"section_5.1.5\">5.1.5 Type-ids</h4>\n<p>\nBallerina has a feature, called <em>distinct types</em>, which provides\nfunctionality similar to that provided by nominal types, but which works within\nBallerina's structural type system. Distinct types are similar to the branded\ntypes found in some other structurally typed languages, such as Modula-3.\n</p>\n<p>\nThe semantics of distinct types are based on type-ids. These are similar to the\nbrands used by branded types. A distinct type is created by the use of the\n<code>distinct</code> keyword in either a <a href=\"#distinct-types\">distinct-type-descriptor</a> or the\n<code>class-type-quals</code> of a <code>module-class-defn</code>. Each such\noccurrence of the <code>distinct</code> keyword has a distinct type-id, which\nuniquely identifies it within a Ballerina program. A type-id has three parts:\n</p>\n<ol>\n<li>a module id, which identifies the module within which the\ndistinct-type-descriptor occurs; this consists of an organization, a module\nname, and an array of platform-specified strings, which could include\ninformation about, for example, the repository or version of the package the\nmodule comes from;</li>\n<li>a local id, which identifies the occurrence of the\n<code>distinct</code> within the module; this takes one of two forms:\n<ul>\n<li>named - \n<ul>\n<li>if the <code>distinct</code> keyword is part of a distinct-type-descriptor\nthat is the only distinct-type-descriptor occurring within a module-type-defn,\nthen the local id is the name of the type defined by the module-type-defn;</li>\n<li>if the <code>distinct</code> keyword is part of the class-type-quals\nof a module-class-defn, then the local id is the name of the class defined\nby the module-class-defn;</li>\n</ul>\n</li>\n<li>anonymous - otherwise, the local id is a compiler-generated integer;</li>\n</ul>\n</li>\n<li>a boolean flag saying whether the type-id is public; this flag is on if and\nonly if the local id part is named and is the name of a module-type-defn that is\npublic.</li>\n</ol>\n<p>\nDistinct types can be used with only the object or error basic types. An object\nvalue or error value has a set of type-ids. These type-ids are fixed at the\ntime of construction and are immutable thereafter. A value's set of type-ids may\nbe empty. The type-ids of a value are part of the value's shape and so can\naffect when an object belongs to a type. The set of type-ids of an object or\nerror value are divided into primary type-ids and secondary type-ids: the\nsecondary type-ids could be inferred from the primary type-ids using the\nprogram's source.\n</p>\n<p>\nAn object or error value is always constructed using a specific type descriptor.\nA type descriptor for objects and errors thus performs a dual role: it denotes a\ntype and it defines a mechanism to construct a value of the type. A type\ndescriptor is <em>definite</em> if it induces a specific set of type-ids. The\nset of type-ids of an object or error value are those induced by the\ntype-descriptor used to construct it; such a type descriptor must therefore be\ndefinite. A type descriptor that denotes a type that does not allow object or\nerror values induces an empty set of type-ids and so is vacuously definite. For\nother type descriptors, the section that specifies that type descriptor will say\nwhen it is definite, the set of type-ids that it induces when it is, and which\nof those are primary.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.1.6\">5.1.6 Iterability</h4>\n<p>\nValues of some basic types are <em>iterable</em>. An iterable value supports an\niteration operation, which treats the iterable value as consisting of a sequence\nof zero or more simpler values, which are in some sense a part of the iterable\nvalue; the iteration operation provides the values in the sequence, one after\nanother. The sequence of values that an iteration operation on a value provides\nis the <em>iteration sequence</em> of the value. Each iterable basic type\ndefines the iteration sequence for a value of that basic type. There is also a\nvalue associated with the completion of the iteration operation, which is nil if\nthe iteration completed successfully and an error otherwise. The iteration\noperation thus determines two associated types for an iterable type: the value\ntype, which is the type of the values in the iteration sequence, and the\ncompletion type, which is the type of the iteration completion value.\n</p>\n<p>\nThe following tables summarizes the iterable basic types.\n</p>\n<table>\n<tr>\n<th>Basic type</th>\n<th>Iteration sequence</th>\n<th>Type descriptor</th>\n<th>Value type</th>\n<th>Completion type</th>\n</tr>\n<tr>\n<td>string</td>\n<td>length 1 substrings</td>\n<td><code>string</code></td>\n<td><code>string:Char</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>xml</td>\n<td>singleton xml values</td>\n<td><code>xml&lt;T&gt;</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>list</td>\n<td>members in order</td>\n<td><code>T[]</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>mapping</td>\n<td>members</td>\n<td><code>map&lt;T&gt;</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>table</td>\n<td>members in order</td>\n<td><code>table&lt;T&gt;</code></td>\n<td><code>T</code></td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>stream</td>\n<td>items</td>\n<td><code>stream&lt;T,C&gt;</code></td>\n<td><code>T</code></td>\n<td><code>C</code></td>\n</tr>\n</table>\n</section>\n</section>\n\n<section>\n<h3 id=\"section_5.2\">5.2 Simple values</h3>\n<p>\nA simple value belongs to exactly one of the following basic types:\n</p>\n<ul>\n<li>nil</li>\n<li>boolean</li>\n<li>int</li>\n<li>float</li>\n<li>decimal</li>\n</ul>\n<p>\nThe type descriptor for each simple basic type contains all the values of the\nbasic type.\n</p>\n<p>\nAll simple basic types are inherently immutable.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"simple-type-descriptor\">simple-type-descriptor</span> :=\n   <a href=\"#nil-type-descriptor\"><span class=\"ntref\">nil-type-descriptor</span></a>\n   | <a href=\"#boolean-type-descriptor\"><span class=\"ntref\">boolean-type-descriptor</span></a>\n   | <a href=\"#int-type-descriptor\"><span class=\"ntref\">int-type-descriptor</span></a>\n   | <a href=\"#floating-point-type-descriptor\"><span class=\"ntref\">floating-point-type-descriptor</span></a>\n</pre>\n<section>\n<h4 id=\"section_5.2.1\">5.2.1 Nil</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"nil-type-descriptor\">nil-type-descriptor</span> := <a href=\"#nil-literal\"><span class=\"ntref\">nil-literal</span></a>\n<span class=\"ntdfn\" id=\"nil-literal\">nil-literal</span> :=  <code>(</code> <code>)</code> | <code>null</code>\n</pre>\n<p>\nThe nil type contains a single value, called nil, which is used to represent the\nabsence of any other value. The nil value is written <code>()</code>. The nil\nvalue can also be written <code>null</code>, for compatibility with JSON; the\nuse of null should be restricted to JSON-related contexts.\n</p>\n<p>\nThe nil type is special, in that it is the only basic type that consists of a\nsingle value. \n</p>\n</section>\n<section>\n<h4 id=\"section_5.2.2\">5.2.2 Boolean</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"boolean-type-descriptor\">boolean-type-descriptor</span> := <code>boolean</code>\n<span class=\"ntdfn\" id=\"boolean-literal\">boolean-literal</span> := <code>true</code> | <code>false</code>\n</pre>\n<p>\nThe boolean type consists of the values true and false.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.2.3\">5.2.3 Int</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"int-type-descriptor\">int-type-descriptor</span> := <code>int</code>\n<span class=\"ntdfn\" id=\"int-literal\">int-literal</span> := <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> | <a href=\"#HexIntLiteral\"><span class=\"ntref\">HexIntLiteral</span></a>\n<span class=\"ntdfn\" id=\"DecimalNumber\">DecimalNumber</span> := <code>0</code> | <a href=\"#NonZeroDigit\"><span class=\"ntref\">NonZeroDigit</span></a> <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>*\n<span class=\"ntdfn\" id=\"HexIntLiteral\">HexIntLiteral</span> := <a href=\"#HexIndicator\"><span class=\"ntref\">HexIndicator</span></a> <a href=\"#HexNumber\"><span class=\"ntref\">HexNumber</span></a>\n<span class=\"ntdfn\" id=\"HexNumber\">HexNumber</span> := <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n<span class=\"ntdfn\" id=\"HexIndicator\">HexIndicator</span> := <code>0x</code> | <code>0X</code>\n<span class=\"ntdfn\" id=\"HexDigit\">HexDigit</span> := <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a> | <code>a</code> .. <code>f</code> | <code>A</code> .. <code>F</code>\n<span class=\"ntdfn\" id=\"NonZeroDigit\">NonZeroDigit</span> := <code>1</code> .. <code>9</code>\n</pre>\n<p>\nThe int type consists of integers between -9,223,372,036,854,775,808 and\n9,223,372,036,854,775,807 (i.e. signed integers than can fit into 64 bits using\na two's complement representation).\n</p>\n<p>\nThe <a href=\"#byte_type\"><code>byte</code> type</a> is a subtype of\n<code>int</code>. The <code>lang.int</code> lang library module also\nprovides <a href=\"#built-in_subtypes\">built-in subtypes</a> for signed and\nunsigned integers representable in 8, 16 and 32 bits.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.2.4\">5.2.4 Floating point types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"floating-point-type-descriptor\">floating-point-type-descriptor</span> := <code>float</code> | <code>decimal</code>\n<span class=\"ntdfn\" id=\"floating-point-literal\">floating-point-literal</span> :=\n   <a href=\"#DecimalFloatingPointNumber\"><span class=\"ntref\">DecimalFloatingPointNumber</span></a> | <a href=\"#HexFloatingPointLiteral\"><span class=\"ntref\">HexFloatingPointLiteral</span></a>\n<span class=\"ntdfn\" id=\"DecimalFloatingPointNumber\">DecimalFloatingPointNumber</span> :=\n   <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> <a href=\"#Exponent\"><span class=\"ntref\">Exponent</span></a> [<a href=\"#FloatingPointTypeSuffix\"><span class=\"ntref\">FloatingPointTypeSuffix</span></a>]\n   | <a href=\"#DottedDecimalNumber\"><span class=\"ntref\">DottedDecimalNumber</span></a> [<a href=\"#Exponent\"><span class=\"ntref\">Exponent</span></a>] [<a href=\"#FloatingPointTypeSuffix\"><span class=\"ntref\">FloatingPointTypeSuffix</span></a>]\n   | <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> <a href=\"#FloatingPointTypeSuffix\"><span class=\"ntref\">FloatingPointTypeSuffix</span></a>\n<span class=\"ntdfn\" id=\"DottedDecimalNumber\">DottedDecimalNumber</span> :=\n   <a href=\"#DecimalNumber\"><span class=\"ntref\">DecimalNumber</span></a> <code>.</code> <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n   | <code>.</code> <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n<span class=\"ntdfn\" id=\"Exponent\">Exponent</span> := <a href=\"#ExponentIndicator\"><span class=\"ntref\">ExponentIndicator</span></a> [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n<span class=\"ntdfn\" id=\"ExponentIndicator\">ExponentIndicator</span> := <code>e</code> | <code>E</code>\n<span class=\"ntdfn\" id=\"HexFloatingPointLiteral\">HexFloatingPointLiteral</span> := <a href=\"#HexIndicator\"><span class=\"ntref\">HexIndicator</span></a> <a href=\"#HexFloatingPointNumber\"><span class=\"ntref\">HexFloatingPointNumber</span></a>\n<span class=\"ntdfn\" id=\"HexFloatingPointNumber\">HexFloatingPointNumber</span> :=\n   <a href=\"#HexNumber\"><span class=\"ntref\">HexNumber</span></a> <a href=\"#HexExponent\"><span class=\"ntref\">HexExponent</span></a>\n   | <a href=\"#DottedHexNumber\"><span class=\"ntref\">DottedHexNumber</span></a> [<a href=\"#HexExponent\"><span class=\"ntref\">HexExponent</span></a>]\n<span class=\"ntdfn\" id=\"DottedHexNumber\">DottedHexNumber</span> :=\n   <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+ <code>.</code> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n   | <code>.</code> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>+\n<span class=\"ntdfn\" id=\"HexExponent\">HexExponent</span> := <a href=\"#HexExponentIndicator\"><span class=\"ntref\">HexExponentIndicator</span></a> [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#Digit\"><span class=\"ntref\">Digit</span></a>+\n<span class=\"ntdfn\" id=\"HexExponentIndicator\">HexExponentIndicator</span> := <code>p</code> | <code>P</code>\n<span class=\"ntdfn\" id=\"Sign\">Sign</span> := <code>+</code> | <code>-</code>\n<span class=\"ntdfn\" id=\"FloatingPointTypeSuffix\">FloatingPointTypeSuffix</span> := <a href=\"#DecimalTypeSuffix\"><span class=\"ntref\">DecimalTypeSuffix</span></a> | <a href=\"#FloatTypeSuffix\"><span class=\"ntref\">FloatTypeSuffix</span></a>\n<span class=\"ntdfn\" id=\"DecimalTypeSuffix\">DecimalTypeSuffix</span> := <code>d</code> | <code>D</code>\n<span class=\"ntdfn\" id=\"FloatTypeSuffix\">FloatTypeSuffix</span> :=  <code>f</code> | <code>F</code>\n</pre>\n\n<section>\n<h5 id=\"section_5.2.4.1\">5.2.4.1 Float</h5>\n\n<p>\nThe float type corresponds to IEEE 754-2008 64-bit binary (radix 2) floating\npoint numbers. A float value can be represented by either a\nDecimalFloatingPointNumber with an optional FloatTypeSuffix, or by a\nHexFloatingPointLiteral.\n</p>\n<p>\nThe multiple bit patterns that IEEE 754 treats as NaN are considered to be the\nsame value in Ballerina. Positive and negative zero of a floating point basic\ntype are distinct values, following IEEE 754, but are defined to have the same\nshape, so that they will usually be treated as being equal.\n</p>\n<p>\nIEEE-defined operations on float values must be performed using a\nrounding-direction attribute of roundTiesToEven (which is the default IEEE\nrounding direction, sometimes called <em>round to nearest</em>). All float\nvalues, including the intermediate results of expressions, must use the value\nspace defined for the float type; implementations must not use extended\nprecision for intermediate results. This ensures that all implementations will\nproduce identical results. (This is the same as what is required by strictfp in\nJava.)\n</p>\n</section>\n<section>\n<h5 id=\"section_5.2.4.2\">5.2.4.2 Decimal</h5>\n\n<p>\nThe decimal type corresponds to a subset of IEEE 754-2008 128-bit decimal (radix\n10) floating point numbers. Any decimal value can be represented by a\nDecimalFloatingPointNumber with an optional DecimalTypeSuffix.\n</p>\n<p>\nA decimal value is a triple (<var>s</var>, <var>c</var>, <var>e</var>) where\n</p>\n<ul>\n<li>\n<var>s</var> is sign, either 0 or -1</li>\n<li>\n<var>c</var> is the coefficient, an unsigned integer that can be exactly\nrepresented in 34 decimal digits</li>\n<li>\n<var>e</var> is the exponent, a signed integer</li>\n</ul>\n<p>\nrepresenting the mathematical value -1<sup><var>s</var></sup> Ã\n<var>c</var> Ã 10<sup><var>e</var></sup>. The range for the exponent\n<var>e</var> is implementation dependent, but must be at least the range\nsupported by the IEEE 754-2008 decimal128 format (which is -6176 to 6111\ninclusive).\n</p>\n<p>\nThe decimal type corresponds to the ANSI X3.274 subset of IEEE 754-2008, which\nhas the following simplifications:\n</p>\n<ul>\n<li>+0 and -0 are not distinguished; if the coefficent is zero, then the sign is\nalso constrained to be zero;</li>\n<li>NaN, infinities and subnormals are not supported; operations that would\nresult in one of these values according to the normal rules of IEEE 754-2008\ninstead result in a panic.</li>\n</ul>\n<p>\nOperations on the decimal type use the roundTiesToEven rounding mode, like the\nfloat type.\n</p>\n<p>\nThe shape of a decimal value is its mathematical value. Thus two decimal values\nhave the same shape if they represent the same mathematical value, even if they\ndo so using different exponents.\n</p>\n</section>\n</section>\n</section>\n<section>\n<h3 id=\"section_5.3\">5.3 Sequence values</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"sequence-type-descriptor\">sequence-type-descriptor</span> :=\n   <a href=\"#string-type-descriptor\"><span class=\"ntref\">string-type-descriptor</span></a>\n   | <a href=\"#xml-type-descriptor\"><span class=\"ntref\">xml-type-descriptor</span></a>\n</pre>\n<p>\nA sequence value belongs to one of the following two basic types:\n</p>\n<ul>\n<li>string</li>\n<li>xml</li>\n</ul>\n<p>\nA sequence value consists of an ordered sequence of zero or more constituent\nitems, where the constituent items belong to the same basic type as the sequence\nvalue itself. The <em>length</em> of a sequence value is the number of its\nconstituent items. Each constituent of a sequence value has an integer index\nâ¥ 0 and &lt; length. A sequence value is a <em>singleton</em> if its\nlength is 1. For each sequence basic type, there is an <em>empty</em> value,\nwhich has length 0. As with other basic types, the sequence basic types are\ndisjoint with themselves and with other basic types. Thus the empty value for\nstring is distinct from the empty value for xml, and these are both distinct\nfrom nil.\n</p>\n<p>\nThe values belonging to a sequence basic type B can be defined in terms of its\nsingleton values and a concatenation operation, by the following rules:\n</p>\n<ul>\n<li>\nthe singleton values of B belong to B;\n</li>\n<li>\nthe empty value of B belongs to B;\n</li>\n<li>\nif v<sub>1</sub> and v<sub>2</sub> belong to B, then the concatenation of\nv<sub>1</sub> and v<sub>2</sub> belongs to B.\n</li>\n</ul>\n<p>\nThe concatenation of any value v belonging to B with the empty sequence of B in\neither order is v.\n</p>\n<p>\nNote that for a sequence consisting of a single item v is the same thing as v. A\nsingle item <em>is a</em> sequence. The type of the constituent items of a\nsequence of basic type B is thus a subtype of B. This is a fundamental\ndifference between sequences and lists.\n</p>\n<p>\nOnly singleton values of a sequence type can have storage identity. When a\nconstituent of a sequence value has storage identity, what is stored in the\nsequence value is a reference to the location where the constituent value is\nstored rather than the constituent value itself.\n</p>\n<p>\nA sequence value is iterable: the iteration sequence consists of the singleton\nitems of the sequence value in order and the iteration completion value is\nalways nil.\n</p>\n\n<section>\n<h4 id=\"section_5.3.1\">5.3.1 Strings</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"string-type-descriptor\">string-type-descriptor</span> := <code>string</code>\n<span class=\"ntdfn\" id=\"string-literal\">string-literal</span> := <a href=\"#DoubleQuotedStringLiteral\"><span class=\"ntref\">DoubleQuotedStringLiteral</span></a>\n<span class=\"ntdfn\" id=\"DoubleQuotedStringLiteral\">DoubleQuotedStringLiteral</span> := <code>\"</code> (<a href=\"#StringChar\"><span class=\"ntref\">StringChar</span></a> | <a href=\"#StringEscape\"><span class=\"ntref\">StringEscape</span></a>)* <code>\"</code>\n<span class=\"ntdfn\" id=\"StringChar\">StringChar</span> := ^ ( 0xA | 0xD | <code>\\</code> | <code>\"</code> )\n<span class=\"ntdfn\" id=\"StringEscape\">StringEscape</span> := <a href=\"#StringSingleEscape\"><span class=\"ntref\">StringSingleEscape</span></a> | <a href=\"#NumericEscape\"><span class=\"ntref\">NumericEscape</span></a>\n<span class=\"ntdfn\" id=\"StringSingleEscape\">StringSingleEscape</span> := <code>\\t</code> | <code>\\n</code> | <code>\\r</code> | <code>\\\\</code> | <code>\\\"</code>\n</pre>\n<p>\nA string is an sequence of zero or more Unicode characters. More precisely, it\nis a sequence whose singleton values represent Unicode scalar values, where a\nUnicode scalar value is any code point in the Unicode range of 0x0 to 0x10FFFF\ninclusive, other than surrogate code points, which are 0xD800 to 0xDFFF\ninclusive. Note that a string may include Unicode noncharacters, such as 0xFFFE\nand 0xFFFF.\n</p>\n<p>\nString values do not have storage identity and so the string basic type is\ninherently immutable.\n</p>\n<p>\nThere is a <a href=\"#built-in_subtypes\">built-in subtype</a>\n<code>string:Char</code> for single character strings.\n</p>\n</section>\n<section>\n<h4 id=\"XML\">5.3.2 XML</h4>\n\n<p>\nAn xml value is a sequence representing parsed XML, such as occurs in the\ncontent of an XML element. The singleton values are of the following types:\n</p>\n<ul>\n<li>element</li>\n<li>processing instruction</li>\n<li>comment</li>\n<li>text</li>\n</ul>\n<p>\nThe element, processing instruction and comment singletons correspond directly\nto information items in the XML Information Set. A text singleton corresponds to\none or more character information items. When an xml value is constructed,\nconsecutive text singletons are merged, so that an xml value never contains\nconsecutive text singletons. There are <a href=\"#built-in_subtypes\">built-in\nsubtypes</a> <code>xml:Element</code>, <code>xml:ProcessingInstruction</code>,\n<code>xml:Comment</code> and <code>xml:Text</code> corresponding to the above\nsingletons; <code>xml:Text</code> also allows the empty xml value.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-type-descriptor\">xml-type-descriptor</span> := <code>xml</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n<span class=\"ntdfn\" id=\"type-parameter\">type-parameter</span> := <code>&lt;</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>&gt;</code>\n</pre>\n<p>\nA shape belongs to type <code>xml</code> if its basic type is <code>xml</code>.\nA type parameter of an xml-type-descriptor must be a subtype of\n<code>xml</code>. A shape belongs to type <code>xml&lt;T&gt;</code> if all of\nits constituent items belong to <code>T</code>. So, for example,\n<code>xml&lt;xml:Element&gt;</code> is the type for xml values containing\nonly elements. Note that <code>xml&lt;xml&lt;<var>T</var>&gt;&gt;</code> is the\nsame as <code>xml&lt;<var>T</var>&gt;</code> and that\n<code>xml&lt;xml:Text&gt;</code> is the same as <code>xml:Text</code>.\n</p>\n<p>\nThe name of an element is represented by a string. The attributes of an element\nare represented by a value of type <code>map&lt;string&gt;</code>. The children\nof an element is represented by a value of type <code>xml</code>.\n</p>\n<p>\nSingleton element, processing instruction and comment values have storage\nidentity. Other xml values do not.\n</p>\n<p>\nThe <code>xml:Text</code> type is inherently immutable. This implies that both\ntext singletons and empty xml values always have their read-only bits on. The\n<code>xml:Element</code>, <code>xml:ProcessingInstruction</code> and\n<code>xml:Comment</code> types are selectively immutable. The read-only bit of a\nxml value with length greater than one is on if and only if the read-only bit of\nall its constituent items is on. The attributes and children of an element are\nreachable from the element. Thus, if the read-only bit of an\n<code>xml:Element</code> is on, then the read-only bits of the mapping\nrepresenting its attributes and of the xml value representing its children are\nalso on.\n</p>\n<p>\nNote that although the mutable constituents of mutable xml value can be mutated,\nthe number and the storage identity of the constituents of a xml value are fixed\nwhen the value is constructed. The storage identity of the attributes map of an\nelement are also fixed when the element is constructed.\n</p>\n<section>\n<h5 id=\"section_5.3.2.1\">5.3.2.1 XML namespaces</h5>\n<p>\nThe name of an element or attribute, which in the XML Information Set is\nrepresented by a combination of the [namespace name] and [local name] properties\nof an element information item (EII) or attribute information item (AII), is\nrepresented by a single <em>expanded name</em> string. If the [namespace name]\nproperty has no value, then the expanded name consists of just the value of the\n[local name] property; otherwise, the expanded name is of the form:\n</p>\n<pre>\n   {<var>namespace-uri</var>}<var>local-name</var>\n</pre>\n<p>\nwhere <code><var>namespace-uri</var></code> and\n<code><var>local-name</var></code> are the values of the [namespace name] and\n[local name] properties respectively.\n</p>\n<p>\nThe attributes map for an element includes not only an entry for each AII in the\n[attributes] property of the EII, but also an entry for each attribute in the\n[namespace attributes] property. The key of the entry is the string representing\nthe name of the attribute, constructed from the AII item as described in the\nprevious paragraph. The name of every namespace attribute will thus start with\nthe string <code>{http://www.w3.org/2000/xmlns/}</code>.\n</p>\n<p>\nThe attributes map can also contain entries representing namespace attributes\nsynthesized from the [in-scope namespaces] property. There will be a synthesized\nnamespace attribute for every prefix other than <code>xml</code> that occurs as\na prefix of the EII or of an AII in the element's [attributes] property and for\nwhich there is no declaration in the [namespace attributes] property. No\nnamespace attribute will be synthesized for the default namespace. (The\nsynthesized namespace attributes ensure that namespace prefixes will not be lost\nif the element is extracted into a new context.)\n</p>\n<p>\nAn xml value can be converted to an XML information set for serialization. This\nis done in the context of a set of namespace declarations that are in-scope from\nthe xml value's parent element, if any. The process of converting an xml element\nsingleton into an EII has the following stages.\n</p>\n<ol>\n<li>The [namespace name] and [local name] properties of the EII are determined\nfrom the element's expanded name.</li>\n<li>An AII is constructed for each entry in the element's attribute map, with\nthe [namespace name] and [local name] properties of the AII determined from the\nentry's key, which is the attribute's expanded name. Each AII is added to either\nthe [attributes] or [namespace attributes] property of the EII depending on the\nAII's [namespace name] property. The [prefix] property of each AII in the\n[namespace attributes] property can also be set at this point.</li>\n<li>The [namespace attributes] property of the EII is pruned by removing an\nAII with [normalized value] N if the AII is not a default namespace declaration,\nand the in-scope namespace declarations include a declaration with namespace\nname N, and either the EII or one of the AIIs has a [namespace name] property\nequal to N. (In this case, the entry for the namespace attribute would get\nsynthesized when the information set is converted to an xml value.)</li>\n<li>For each AII in the EII's [attributes] property that has a [namespace name]\nproperty, a [prefix] property is assigned. If the namespace name is\n<code>http://www.w3.org/XML/1998/namespace</code>, then use a prefix of\n<code>xml</code>. If there is already a namespace declaration in the [namespace\nattributes] that declares a prefix with that namespace name, then that prefix is\nused. Otherwise if there is a namespace declaration in the in-scope namespaces\nthat declares a prefix with that namespace and it is not redeclared or\nundeclared by the [namespace attributes], then that prefix is used. Otherwise\ngenerate a prefix and add an AII to the [namespace attributes] to declare\nit.</li>\n<li>If the EII has no [namespace name] property, but a default namespace\ndeclaration is in scope, then an <code>xmlns=\"\"</code> AII is added to the\n[namespace attributes] property to undeclare the default namespace.</li>\n<li>If the EII has a [namespace name] property N, then we need\nto ensure that there is an applicable namespace declaration:\n<ol>\n<li>if one of the [namespace attributes] declares N as the default namespace,\nthen nothing needs to be done;</li>\n<li>similarly, if an in-scope namespace declaration declares N as the default\nnamespace, and the [namespace attributes] do not undeclare it, then nothing\nneeds to be done;</li>\n<li>otherwise, try to find, in the same way as for an AII, a prefix P which is\nalready declared as N; if there is one, set the [prefix] property of the EII to\nP;</li>\n<li>otherwise, if the [namespace attributes] property does not contain a default\nnamespace declaration or undeclaration, generate a default namespace declaration\nfor N and add it to the [namespace attributes] property;</li>\n<li>otherwise, generate a new prefix P, set the [prefix] property of the EII to\nP, and add an AII to the [namespace attributes] to declare it.</li>\n</ol>\n</li>\n<li>Generate the [in-scope namespaces] property for this EII, using the parent's\nin-scope namespaces and the [namespace attributes].</li>\n<li>Convert the children of the xml element, including the element children, to\na list of information items, in the context of this EII's in-scope\nnamespaces.</li>\n</ol>\n\n</section>\n\n</section>\n\n</section>\n<section>\n<h3 id=\"section_5.4\">5.4 Structured values</h3>\n<p>\nStructured values are containers for other values, which are called their\nmembers. There are three basic types of structured value: list, mapping and\ntable.\n</p>\n<p>\nStructured values are usually mutable. Mutating a structured value changes which\nvalues it contains. Structured values can also be constructed as immutable.\nImmutability is deep: immutable structured values cannot contain mutable\nstructured values; if the read-only bit of a structured value is on, then the\nread-only bit of each of its members is on.\n</p>\n<p>\nThe shape of the members of a structured value contributes to the shape of the\nstructured value. A structured type descriptor describe the shape of the\nstructured value in terms of the shapes of its members. Mutating a member of a\nstructured value can cause the shape of the structured value to change. A\nstructured value has an inherent type, which is a type descriptor which is part\nof the structured value's runtime value. At runtime, the structured value\nprevents any mutation that might lead to the structured value having a shape\nthat is not a member of its inherent type. Thus a structured value belongs to a\ntype if and only if its inherent type is a subtype of that type.\n</p>\n<p>\nThe inherent type of an immutable structured value is a singleton type with the\nstructured value's shape as its single member. Thus, an immutable structured\nvalue belongs to a type if and only if the type contains the shape of the value.\n</p>\n<p>\nEvery structured value has a length, which is the number of its members.\nAll structured values are iterable: the iteration sequence consists of the\nmembers of the structure and the completion type is always nil.\n</p>\n<p>\nA structured value provides random access to its members using a key that\nuniquely identifies each member within the structure. A key can be out-of-line,\nmeaning it is independent of the member, or in-line, meaning it is part of the\nmember. The <em>member type</em> for a key type K in a structured type T\nconsists of all shapes v such that there is a shape in T with key in K and shape\nv. A type K is an <em>optional key type</em> for T if there is a shape v in T\nand a key k in K such that v does not have a member k; a type that is not an\noptional key type is a required key type.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"structured-type-descriptor\">structured-type-descriptor</span> :=\n   <a href=\"#list-type-descriptor\"><span class=\"ntref\">list-type-descriptor</span></a>\n   | <a href=\"#mapping-type-descriptor\"><span class=\"ntref\">mapping-type-descriptor</span></a>\n   | <a href=\"#table-type-descriptor\"><span class=\"ntref\">table-type-descriptor</span></a>\n</pre>\n<p>\nThe following table summarizes the type descriptors for structured types.\n</p>\n<table>\n  <tr>\n   <td>Structured type</td>\n   <td>list</td>\n   <td>mapping</td>\n   <td>table</td>\n  </tr>\n  <tr>\n   <td>Key source</td>\n   <td>out-of-line</td>\n   <td>out-of-line</td>\n   <td>in-line</td>\n  </tr>\n  <tr>\n   <td>Key type</td>\n   <td>integer</td>\n   <td>string</td>\n   <td>anydata</td>\n  </tr>\n  <tr>\n   <td>Type descriptor with uniform member type</td>\n   <td>array</td>\n   <td>map</td>\n   <td>table</td>\n  </tr>\n  <tr>\n   <td>Type descriptor with separate member types</td>\n   <td>tuple</td>\n   <td>record</td>\n   <td>-</td>\n  </tr>\n</table>\n\n<section>\n<h4 id=\"section_5.4.1\">5.4.1 Lists</h4>\n<p>\nA list value is a container that keeps its members in an ordered list. The\nnumber of members of the list is called the <em>length</em> of the list. The key\nfor a member of a list is the integer index representing its position in the\nlist, with the index of the first member being 0. For a list of length\n<em>n</em>, the indices of the members of the list, from first to last, are\n0,1,...,<em>n</em> - 1. The shape of a list value is an ordered list of the\nshapes of its members.\n</p>\n<p>\nA list is iterable: the iteration sequence consists of the members of the\nlist in order and the iteration completion value is always nil.\n</p>\n<p>\nThe type of list values can be described by two kinds of type descriptors.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"list-type-descriptor\">list-type-descriptor</span> :=\n   <a href=\"#array-type-descriptor\"><span class=\"ntref\">array-type-descriptor</span></a> | <a href=\"#tuple-type-descriptor\"><span class=\"ntref\">tuple-type-descriptor</span></a>\n</pre>\n<p>\nThe inherent type of a list value must be a <code>list-type-descriptor</code>.\nThe inherent type of a list value determines a type T<sub><em>i</em></sub> for a\nmember with index <em>i</em>. The runtime system will enforce a constraint that\na value written to index <em>i</em> will belong to type T<sub><em>i</em></sub>.\nNote that the constraint is not merely that the value looks like\nT<sub><em>i</em></sub>.\n</p>\n<p>\nBoth kinds of type descriptor are covariant in the types of their members.\n</p>\n<section>\n<h5 id=\"section_5.4.1.1\">5.4.1.1 Array types</h5>\n<p>\nAn array type-descriptor describes a type of list value by specifying the type\nthat the value for all members must belong to, and optionally, a length.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"array-type-descriptor\">array-type-descriptor</span> := <a href=\"#array-member-type-descriptor\"><span class=\"ntref\">array-member-type-descriptor</span></a> <a href=\"#array-dimension\"><span class=\"ntref\">array-dimension</span></a>+\n<span class=\"ntdfn\" id=\"array-dimension\">array-dimension</span> := <code>[</code> [ <a href=\"#array-length\"><span class=\"ntref\">array-length</span></a> ] <code>]</code>\n<span class=\"ntdfn\" id=\"array-member-type-descriptor\">array-member-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <em>but not</em> <a href=\"#array-type-descriptor\"><span class=\"ntref\">array-type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"array-length\">array-length</span> :=\n   <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a>\n   | <a href=\"#constant-reference-expr\"><span class=\"ntref\">constant-reference-expr</span></a>\n   | <a href=\"#inferred-array-length\"><span class=\"ntref\">inferred-array-length</span></a>\n<span class=\"ntdfn\" id=\"inferred-array-length\">inferred-array-length</span> := <code>*</code>\n</pre>\n<p>\nA type <code>T[]</code> contains a list shape if all members of the list shape\nare in <code>T</code>. A type <code>T[n]</code> contains a list shape if in\naddition the length of the list shape is n.\n</p>\n<p>\nWhen an <code>array-type-descriptor</code> includes multiple\n<code>array-dimension</code>s, the <code>array-dimension</code>s are interpreted\nso that the order of the dimensions in the <code>array-type-descriptor</code> is\nconsistent with the order of the dimensions in a\n<code>member-access-expr</code>. Specifically, a type\n<code>T[n<sub>1</sub>]...[n<sub>k - 1</sub>][n<sub>k</sub>]</code> is\ninterpreted as <code>(T[n<sub>k</sub>])[n<sub>1</sub>]...[n<sub>k -\n1</sub>]</code>. Thus, for a value <code>v</code> of type <code>T[M][N]</code>,\na member-access-expr <code>v[i][j]</code> will evaluate to an value of type\n<code>T</code> if and only if 0 â¤ <code>i</code> â¤ <code>M</code>\nand 0 â¤ <code>j</code> â¤ <code>N</code>. An\n<code>array-type-descriptor</code> is parsed to include all following\n<code>array-dimension</code>s: an <code>array-type-descriptor</code> is not\nrecognized as <code>array-member-type-descriptor</code>.\n</p>\n<p>\nA <code>constant-reference-expr</code> in an <code>array-length</code> must\nevaluate to a non-negative integer. An array length of <code>*</code> means that\nthe length of the array is to be inferred from the context; this is allowed only\nwithin a type descriptor occurring in a context that is specified to be\ninferable; its meaning is the same as if the length was specified explicitly.\n</p>\n<p>\nNote also that <code>T[n]</code> is a subtype of <code>T[]</code>, and that if\n<code>S</code> is a subtype of <code>T</code>, then <code>S[]</code> is a\nsubtype of <code>T[]</code>; this is a consequence of the definition of\nsubtyping in terms of subset inclusion of the corresponding sets of shapes.\n</p>\n<p>\nThe type of the values in the iteration sequence of a value belonging\n<code>T[]</code> is <code>T</code>.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.4.1.2\">5.4.1.2 Tuple types</h5>\n<p>\nA tuple type descriptor describes a type of list value by specifying a separate\ntype for each member of the list.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"tuple-type-descriptor\">tuple-type-descriptor</span> :=\n   <code>[</code> <a href=\"#tuple-member-type-descriptors\"><span class=\"ntref\">tuple-member-type-descriptors</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"tuple-member-type-descriptors\">tuple-member-type-descriptors</span> :=\n   <a href=\"#member-type-descriptor\"><span class=\"ntref\">member-type-descriptor</span></a> (<code>,</code> <a href=\"#member-type-descriptor\"><span class=\"ntref\">member-type-descriptor</span></a>)* [<code>,</code> <a href=\"#tuple-rest-descriptor\"><span class=\"ntref\">tuple-rest-descriptor</span></a>]\n   | [ <a href=\"#tuple-rest-descriptor\"><span class=\"ntref\">tuple-rest-descriptor</span></a> ]\n<span class=\"ntdfn\" id=\"member-type-descriptor\">member-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"tuple-rest-descriptor\">tuple-rest-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code>\n\n</pre>\n<p>\nA tuple type descriptor T with m member type descriptors contains a list shape L\nof length n if and only if:\n</p>\n<ul>\n<li>m is less than or equal to n</li>\n<li>the i-th member type descriptor of T contains the i-th member of L for each\ni from 1 to m;</li>\n<li>if n is greater than m, then T has a tuple-rest-descriptor\nR<code>...</code>, and R contains the j-th member of L for each j from m + 1 to\nn.</li>\n</ul>\n<p>\nNote that a tuple type where all the <code>member-type-descriptor</code>s are\nthe same and there is no tuple-rest-descriptor is equivalent to an\narray-type-descriptor with a length.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"section_5.4.2\">5.4.2 Mappings</h4>\n<p>\nA mapping value is a container where each member has a key, which is a string,\nthat uniquely identifies within the mapping. We use the term <em>field</em> to\nmean the member together its key; the name of the field is the key, and the\nvalue of the field is that value of the member; no two fields in a mapping value\ncan have the same name.\n</p>\n<p>\nThe shape of a mapping value is an unordered collection of field shapes one for\neach field. The field shape for a field f has a name, which is the same as the\nname of f, and a shape, which is the shape of the value of f.\n</p>\n<p>\nEach field also has a read-only bit. This is in addition to the read-only bit of\nthe mapping value. If a mapping value's field has its read-only bit on, then\nthat field cannot be assigned to nor removed. If the mapping value's read-only\nbit is on, then the read-only bit of every field is also on. A field's read-only\nbit is fixed when the mapping value is constructed, and cannot be changed\nthereafter. If a field's read-only bit is on, the read-only bit of the value of\nthe field is also on. The read-only bit of a field is part of the read-only\naspect of the mapping value's shape.\n</p>\n<p>\nThe type of mapping values can be described by two kinds of type descriptors.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"mapping-type-descriptor\">mapping-type-descriptor</span> :=\n   <a href=\"#map-type-descriptor\"><span class=\"ntref\">map-type-descriptor</span></a> | <a href=\"#record-type-descriptor\"><span class=\"ntref\">record-type-descriptor</span></a>\n</pre>\n<p>\nThe inherent type of a mapping value must be a\n<code>mapping-type-descriptor</code>. The inherent type of a mapping value\ndetermines a type T<sub><em>f</em></sub> for the value of the field with name\n<em>f</em>. The runtime system will enforce a constraint that a value written to\nfield <em>f</em> will belong to type T<sub><em>f</em></sub>. Note that the\nconstraint is not merely that the value looks like T<sub><em>f</em></sub>.\n</p>\n<p>\nBoth kinds of type descriptor are covariant in the types of their members.\n</p>\n<p>\nA mapping value is iterable: the iteration sequence consists of the members of\nthe mapping value and the iteration completion value is always nil. When the\ninherent type of a mapping value is equivalent to a\n<code>map-type-descriptor</code>, the order of iteration must correspond to the\norder in which fields were added. In other cases, the order of the iteration\nsequence is implementation-dependent.\n</p>\n\n<section>\n<h5 id=\"section_5.4.2.1\">5.4.2.1 Map types</h5>\n<p>\nA map type-descriptor describes a type of mapping value by specifying the type\nthat the value for all fields must belong to.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"map-type-descriptor\">map-type-descriptor</span> := <code>map</code> <a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>\n</pre>\n<p>\nA type <code>map&lt;T&gt;</code> contains a mapping shape <em>m</em> if every field\nshape in <em>m</em> has a value shape that is in <code>T</code>.\n</p>\n<p>\nThe type of the values in the iteration sequence of a value belonging\n<code>map&lt;T&gt;</code> is <code>T</code>.\n</p>\n<p>\nIf a type descriptor T has <a href=\"#lax_static_typing\">lax static typing</a>,\nthen the type <code>map&lt;T&gt;</code> also has lax static typing.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.4.2.2\">5.4.2.2 Record types</h5>\n<p>\nA record type descriptor describes a type of mapping value by specifying a type\nseparately for the value of each field.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"record-type-descriptor\">record-type-descriptor</span> :=\n   <a href=\"#inclusive-record-type-descriptor\"><span class=\"ntref\">inclusive-record-type-descriptor</span></a> | <a href=\"#exclusive-record-type-descriptor\"><span class=\"ntref\">exclusive-record-type-descriptor</span></a>\n<span class=\"ntdfn\" id=\"inclusive-record-type-descriptor\">inclusive-record-type-descriptor</span> :=\n   <code>record</code> <code>{</code> <a href=\"#field-descriptor\"><span class=\"ntref\">field-descriptor</span></a>* <code>}</code>\n<span class=\"ntdfn\" id=\"exclusive-record-type-descriptor\">exclusive-record-type-descriptor</span> :=\n   <code>record</code> <code>{|</code> <a href=\"#field-descriptor\"><span class=\"ntref\">field-descriptor</span></a>* [<a href=\"#record-rest-descriptor\"><span class=\"ntref\">record-rest-descriptor</span></a>] <code>|}</code>\n<span class=\"ntdfn\" id=\"field-descriptor\">field-descriptor</span> :=\n   <a href=\"#individual-field-descriptor\"><span class=\"ntref\">individual-field-descriptor</span></a> | <a href=\"#record-type-inclusion\"><span class=\"ntref\">record-type-inclusion</span></a>\n<span class=\"ntdfn\" id=\"individual-field-descriptor\">individual-field-descriptor</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<code>readonly</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> [<code>?</code> | (<code>=</code> <a href=\"#default-expression\"><span class=\"ntref\">default-expression</span></a>)] <code>;</code>\n<span class=\"ntdfn\" id=\"field-name\">field-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"default-expression\">default-expression</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"record-type-inclusion\">record-type-inclusion</span> := <code>*</code> <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"record-rest-descriptor\">record-rest-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code> <code>;</code>\n</pre>\n<p>\nEach <code>individual-field-descriptor</code> specifies an additional constraint\nthat a mapping value shape must satisfy for it to be a member of the described\ntype. The constraint depends on whether <code>?</code> is present:\n</p>\n<ul>\n<li>if <code>?</code> is not present, then the constraint is that the mapping\nvalue shape must have a field shape with the specified field-name and with a\nvalue shape that is a member of the specified type-descriptor; this is called a\nrequired field;</li>\n<li>if <code>?</code> is present, then the constraint is that if the mapping\nvalue shape has a field shape with the specified field-name, then its value\nshape must be a member of the specified type-descriptor; this is called an\noptional field.</li>\n</ul>\n<p>\nIf an <code>individual-field-descriptor</code> specifies <code>readonly</code>,\nthen there is also a constraint that the field has its read-only bit set.\nFurthermore, the type of the field is the intersection of <code>readonly</code>\nand the type specified by the type-descriptor.\n</p>\n<p>\nThe order of the <code>individual-field-descriptor</code>s within a\n<code>record-type-descriptor</code> is not significant. Note that the delimited\nidentifier syntax allows the field name to be any non-empty string.\n</p>\n<p>\nAn exclusive-record-type-descriptor, which uses the <code>{|</code> and\n<code>|}</code> delimiters, allows exclusively the fields described. More\nprecisely, for a mapping value shape and a record-type-descriptor, let the extra\nfield shapes be the field shapes of the mapping value shapes whose names are not\nthe same as field-name of any individual-field-descriptor; a mapping value shape\nis a member of the type described by an exclusive-record-type-descriptor only if\neither:\n</p>\n<ul>\n<li>there are no extra fields shapes, or</li>\n<li>there is a record-rest-descriptor <code>T...</code>, and the value shape of\nevery extra field shape is a member of <code>T</code>.</li>\n</ul>\n<p>\nAn inclusive-record-type-descriptor, which uses the <code>{</code> and\n<code>}</code> delimiters, allows any mapping value that includes the fields\ndescribed, provided that the values of all other fields are plain data. A type\ndescriptor <code>record { F };</code> is thus equivalent to <code>record {| F;\nanydata...; |}</code>, where <code>anydata</code> is defined <a href=\"#anydata\">below</a> as the type descriptor for plain data.\n</p>\n<p>\nA record type descriptor that either is an inclusive-record-type-descriptor or\nis an exclusive-record-type-descriptor with a record-rest-descriptor is called\n<em>open</em>; a record type descriptor that is not open is called\n<em>closed</em>.\n</p>\n<p>\nIf a record type descriptor is closed and every individual-field-descriptor\nspecifies <code>readonly</code>, then it describes a type that is a subtype of\n<code>readonly</code>: a shape belongs to the type only if its read-only bit is\nset.\n</p>\n<p>\nA <code>default-expression</code> is an expression that specifies a default\nvalue for the field, which is used when the record type descriptor is used to\nconstruct a mapping value but no value is specified explicitly for the field.\nThe type descriptor contains a 0-argument function closure for each default\nvalue. The closure is created from the expression when the type descriptor is\nresolved. The expression must meet the requirements for an <a href=\"#isolated_functions\">isolated function</a>. The closure is evaluated to\ncreate a field value each time the default is used in the construction of a\nmapping value. The default value does not affect the type described by the type\ndescriptor.\n</p>\n<p>\nA <code>record-type-inclusion</code> includes fields from a named record type.\nThe <code>type-reference</code> must reference a type described by a\n<code>record-type-descriptor</code>. The <code>field-descriptor</code>s and any\n<code>record-rest-descriptor</code> are included the type being defined; the\nmeaning is the same as if they had been specified explicitly. For default\nvalues, the closure rather than the expression is copied in.\nIt is an error for an <code>record-type-descriptor</code> to directly or\nindirectly include itself. An <code>individual-field-descriptor</code> in a\n<code>record-type-descriptor</code> can override an\n<code>individual-field-descriptor</code> of the same name in an included\n<code>record-type-descriptor</code>, provided the type declared for the field in\nthe overriding field descriptor is a subtype of the type declared in the\noverridden field descriptor. It is an error if a\n<code>record-type-descriptor</code> has two or more\n<code>record-type-inclusion</code>s that include an\n<code>individual-field-descriptor</code> with the same name, unless those\n<code>individual-field-descriptor</code>s are overridden by an\n<code>individual-field-descriptor</code> in the including\n<code>record-type-descriptor</code>. A <code>record-rest-descriptor</code> in\nthe including type overrides any <code>record-rest-descriptor</code> in the\nincluded type. It is an error if a <code>record-type-descriptor</code> has two\nor more <code>record-type-inclusion</code>s that include different\n<code>record-rest-descriptor</code>s, unless those\n<code>record-rest-descriptor</code>s are overridden by an\n<code>record-rest-descriptor</code> in the including\n<code>record-type-descriptor</code>. For the purposes of\nresolving a <code>record-type-inclusion</code>, an including or included type\nthat is an <code>inclusive-record-type-descriptor</code> is treated as if it\nwere the equivalent <code>exclusive-record-type-descriptor</code> with an\nexplicit <code>record-rest-descriptor</code>.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"tables\">5.4.3 Tables</h4>\n<p>\nA table is a structural value, whose members are mapping values. A table\nprovides access to its members using a key that comes from the read-only fields\nof the member. It keeps its members in order, but does not provide random access\nto a member using its position in this order.\n</p>\n<p>\nEvery table value has, in addition to its members, a key sequence, which is used\nto provide keyed access to its members. The key sequence is an ordered sequence\nof field names. The key sequence of a table is fixed when a table is\nconstructed and cannot be changed thereafter. For each field name in the key\nsequence, every member of the table must have a read-only field with that name\nand the value of the field must be acyclic plain data. A table's key sequence\ndetermines a key value for each member of the table: if the key sequence\nconsists of a single field name f, then the key value of a member is that value\nof field f of that member. If the key sequence consists of multiple field names\nf<sub>1</sub>,f<sub>2</sub>,...,f<sub>n</sub> where n is â¥ 2, then the\nkey value for a member r is a tuple with members\nv<sub>1</sub>,v<sub>2</sub>,...,v<sub>n</sub> where v<sub>i</sub> is the value\nof field f<sub>i</sub> of r. A table constrains its membership so that a key\nvalue uniquely identifies a member within the table. More precisely, for every\ntwo rows r<sub>i</sub> and r<sub>j</sub> in a table with i not equal to j, the\nkey value for r<sub>i</sub> must not be equal to the key value for\nr<sub>j</sub>. Key values are compared for equality using the <a href=\"#DeepEquals\">DeepEquals</a> abstract operation. This constraint is\nenforced by the table both when the table is constructed and when the table is\nmutated. As a special case, a table's key sequence may be empty; this represents\na keyless table, whose members are not uniquely identified by a key.\n</p>\n<p>\nThe shape of a table value is a triple consisting of\n</p>\n<ul>\n<li>an ordered list containing for each table member, the shape of that member</li>\n<li>the table's key sequence, and</li>\n<li>a set containing for each table member, the shape of the key value of that\nmember (derived from the table members and the key sequence)</li>\n</ul>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"table-type-descriptor\">table-type-descriptor</span> := <code>table</code> <a href=\"#row-type-parameter\"><span class=\"ntref\">row-type-parameter</span></a> [<a href=\"#key-constraint\"><span class=\"ntref\">key-constraint</span></a>]\n<span class=\"ntdfn\" id=\"row-type-parameter\">row-type-parameter</span> := <a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>\n<span class=\"ntdfn\" id=\"key-constraint\">key-constraint</span> := <a href=\"#key-specifier\"><span class=\"ntref\">key-specifier</span></a> | <a href=\"#key-type-constraint\"><span class=\"ntref\">key-type-constraint</span></a>\n<span class=\"ntdfn\" id=\"key-specifier\">key-specifier</span> := <code>key</code> <code>(</code> [ <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> (<code>,</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>)* ] <code>)</code>\n<span class=\"ntdfn\" id=\"key-type-constraint\">key-type-constraint</span> := <code>key</code> <a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>\n</pre>\n<p>\nThe row-type-parameter specifies the shape of the table's members. A table type\n<code>table&lt;<var>R</var>&gt; <var>KC</var> </code> contains a table shape if\nand only if every table member shape belongs to <code><var>R</var></code> and\nthe table shape satisfies the key constraint <code><var>KC</var></code>. The\ntype specified by a row-type-parameter must be a subtype of\n<code>map&lt;any|error&gt;</code>\n</p>\n<p>\nIn a table-type-descriptor <code>table&lt;<var>R</var>&gt;\nkey(<var>ks</var>)</code>, <code><var>R</var></code> and\n<code><var>ks</var></code> must be consistent in the following sense: for each\nfield name f<sub>i</sub> in <code><var>ks</var></code>, f<sub>i</sub> must be a\nrequired, read-only field of <code><var>R</var></code> with a type that is a\nsubtype of <code>anydata</code>. A table shape satisfies a key-constraint\n<code>key(<var>ks</var>)</code> if and only if its key sequence is\n<code><var>ks</var></code>. A table shape satisfies a key-constraint\n<code>key&lt;K&gt;</code> if and and only if its set of key value shapes are a\nsubset of <code><var>K</var></code>. The shape of a keyless table satisfies the\nkey-constraint <code>key&lt;never&gt;</code>.\n</p>\n<p>\nAs with other structured values, a table value has an inherent type. The\ninherent type of a table value must be a table-type-descriptor with a\nkey-constraint that is a key-specifier.\n</p>\n<p>\nA table is iterable: the iteration sequence consists of the members of the\ntable in order and the iteration completion value is always nil.\n</p>\n\n</section>\n</section>\n<section>\n<h3 id=\"section_5.5\">5.5 Behavioral values</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"behavioral-type-descriptor\">behavioral-type-descriptor</span> :=\n   <a href=\"#error-type-descriptor\"><span class=\"ntref\">error-type-descriptor</span></a>\n   | <a href=\"#function-type-descriptor\"><span class=\"ntref\">function-type-descriptor</span></a>\n   | <a href=\"#object-type-descriptor\"><span class=\"ntref\">object-type-descriptor</span></a>\n   | <a href=\"#future-type-descriptor\"><span class=\"ntref\">future-type-descriptor</span></a>\n   | <a href=\"#typedesc-type-descriptor\"><span class=\"ntref\">typedesc-type-descriptor</span></a>\n   | <a href=\"#handle-type-descriptor\"><span class=\"ntref\">handle-type-descriptor</span></a>\n   | <a href=\"#stream-type-descriptor\"><span class=\"ntref\">stream-type-descriptor</span></a>\n</pre>\n\n<section>\n<h4 id=\"section_5.5.1\">5.5.1 Errors</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"error-type-descriptor\">error-type-descriptor</span> := <code>error</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n</pre>\n<p>\nAn error value provides information about an error that has occurred. Error\nvalues belong to a separate basic type; this makes it possible for language\nconstructs to handle errors differently from other values.\n</p>\n<p>\nThe error type is inherently immutable. An error value contains the following\ninformation:\n</p>\n<ul>\n<li>a message, which is a string containing a human-readable message describing\nthe error</li>\n<li>a cause, which is either nil or another error value that was the cause of\nthis error</li>\n<li>a detail, which is an immutable mapping providing additional information about\nthe error</li>\n<li>a stack trace, which is an immutable snapshot of the state of the execution\nstack</li>\n</ul>\n<p>\nThe detail mapping must be a subtype of <code>map&lt;Cloneable&gt;</code>.\n</p>\n<p>\nThe shapes of the message, cause and detail record are part of the shape of the\nerror; the stack trace is not part of the shape. A type descriptor\n<code>error&lt;<var>T</var>&gt;</code> contains an error shape if\n<code><var>T</var></code> contains the shape of its detail. The type\n<code>error</code> contains a shape if its basic type is error.\n</p>\n<p>\nAn error-type-descriptor is always definite and induces an empty set of\ntype-ids. An intersection type can be used to describe an error type that induces\na non-empty set of type-ids.\n</p>\n</section>\n\n<section>\n<h4 id=\"functions\">5.5.2 Functions</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"function-type-descriptor\">function-type-descriptor</span> :=\n   <a href=\"#function-quals\"><span class=\"ntref\">function-quals</span></a> <code>function</code> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a>\n   | [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>] <code>function</code>\n<span class=\"ntdfn\" id=\"function-quals\">function-quals</span> :=\n   <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a> [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>]\n   | [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>] [<a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a>]\n<span class=\"ntdfn\" id=\"isolated-qual\">isolated-qual</span> := <code>isolated</code>\n<span class=\"ntdfn\" id=\"transactional-qual\">transactional-qual</span> := <code>transactional</code>\n<span class=\"ntdfn\" id=\"function-signature\">function-signature</span> := <code>(</code> <a href=\"#param-list\"><span class=\"ntref\">param-list</span></a> <code>)</code> <a href=\"#return-type-descriptor\"><span class=\"ntref\">return-type-descriptor</span></a>\n</pre>\n<p>\nA function is a part of a program that can be explicitly executed. In Ballerina,\na function is also a value, implying that it can be stored in variables, and\npassed to or returned from functions. When a function is executed, it is passed\nan argument list as input and returns a value as output.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"param-list\">param-list</span> :=\n   <a href=\"#required-params\"><span class=\"ntref\">required-params</span></a> [<code>,</code> <a href=\"#defaultable-params\"><span class=\"ntref\">defaultable-params</span></a>] [<code>,</code> <a href=\"#included-record-params\"><span class=\"ntref\">included-record-params</span></a>] [<code>,</code> <a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n   | <a href=\"#defaultable-params\"><span class=\"ntref\">defaultable-params</span></a> [<code>,</code> <a href=\"#included-record-params\"><span class=\"ntref\">included-record-params</span></a>] [<code>,</code> <a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n   | <a href=\"#included-record-params\"><span class=\"ntref\">included-record-params</span></a> [<code>,</code> <a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n   | [<a href=\"#rest-param\"><span class=\"ntref\">rest-param</span></a>]\n<span class=\"ntdfn\" id=\"required-params\">required-params</span> := <a href=\"#required-param\"><span class=\"ntref\">required-param</span></a> (<code>,</code> <a href=\"#required-param\"><span class=\"ntref\">required-param</span></a>)*\n<span class=\"ntdfn\" id=\"required-param\">required-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>]\n<span class=\"ntdfn\" id=\"defaultable-params\">defaultable-params</span> := <a href=\"#defaultable-param\"><span class=\"ntref\">defaultable-param</span></a> (<code>,</code> <a href=\"#defaultable-param\"><span class=\"ntref\">defaultable-param</span></a>)*\n<span class=\"ntdfn\" id=\"defaultable-param\">defaultable-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>] <code>=</code> (<a href=\"#default-expression\"><span class=\"ntref\">default-expression</span></a> | <a href=\"#inferred-typedesc-default\"><span class=\"ntref\">inferred-typedesc-default</span></a>) \n<span class=\"ntdfn\" id=\"included-record-params\">included-record-params</span> := <a href=\"#included-record-param\"><span class=\"ntref\">included-record-param</span></a> (<code>,</code> <a href=\"#included-record-param\"><span class=\"ntref\">included-record-param</span></a>)*\n<span class=\"ntdfn\" id=\"included-record-param\">included-record-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>*</code> <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>]\n<span class=\"ntdfn\" id=\"rest-param\">rest-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code> [<a href=\"#param-name\"><span class=\"ntref\">param-name</span></a>]\n<span class=\"ntdfn\" id=\"param-name\">param-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"inferred-typedesc-default\">inferred-typedesc-default</span> := <code>&lt;</code> <code>&gt;</code>\n</pre>\n<p>\nA param-name can be omitted from a required-param, defaultable-param,\nincluded-record-param or rest-param only when occuring in the function-signature\nof a function-type-descriptor. The type-descriptor in a required-param or\ndefaultable-param must not be <code>never</code>.\n</p>\n<p>\nThe argument list passed to a function consists of zero or more arguments in order;\neach argument is a value, but the argument list itself is not passed as a value.\nThe argument list must conform to the param-list as described in this section.\nUsually, the compiler's type checking will ensure that this is the case; if not,\nthe function will panic.\n</p>\n<p>\nIt is convenient to consider the complete param-list as having a type. This type\nis described by a tuple-type-descriptor that has a member-type-descriptor for\neach required-param, defaultable-param and included-record-param, and has a\ntuple-rest-descriptor if and only if there is a rest-param. The i-th\nmember-type-descriptor of the tuple type descriptor is the same as the\ntype-descriptor of the i-th member of the param-list; for an\nincluded-record-param, the type-descriptor is the type-reference; the\ntype-descriptor of the tuple-rest-descriptor, if present, is the same as the\ntype-descriptor of the rest-param.\n</p>\n<p>\nAn argument list consisting of values v<sub>1</sub>,..., v<sub>n</sub> conforms\nto a param-list that has type P, if and only if for each i with 1 â¤ i â¤\nn, v<sub>i</sub> belongs to T<sub>i</sub>, where T<sub>i</sub> is defined to be the type\nthat contains a shape s if and only if P contains a list shape whose i-th member\nis s.\n</p>\n<p>\nA defaultable-param is a parameter for which a default value is specified. An\nexpression can be used to specify the default value; this expression may refer\nto previous parameters. Each such expression is turned into a closure that\ncomputes the default value for the parameter using the values of previous\nparameters, and this closure is part of the type descriptor for the function. It\nis also possible for the default to be specified as <code>&lt;&gt;</code>; this\nmeans that the default value is a <code>typedesc</code> value that is to be\ninferred by the caller from the contextually expected type of the function call.\nIt is allowed only when the parameter name to which the default value applies is\nreferenced in the return-type-descriptor, as described below, and is allowed for\nat most one parameter in a function. The caller of the function uses the\nfunction's type descriptor to compute default values for any defaultable\narguments that were not specified explicitly. These default values are included\nin the argument list passed to the function. Whether a parameter is defaultable,\nand what its default is, do not affect the shape of the function and thus do not\naffect typing. The closures computing the defaultable parameters are created\nwhen the type descriptor is resolved; the default value is computed by calling\nthe closure each time the function is called and the corresponding parameter is\nnot specified. Whether a parameter is defaultable is used at compile time, but\nthe closure that computes the default value is only used at runtime. If the\nfunction-type-descriptor includes an isolated-qual, then an expression used as a\ndefault-expression must meet the requirements for an <a href=\"#isolated_functions\">isolated function</a>.\n</p>\n<p>\nThe name of each parameter is included in the function's type descriptor. A\ncaller of the function may specify the name of the parameter that an argument is\nsupplying. In this case, the caller uses the parameter name at compile time in\nconjunction with the type descriptor to create the argument list. The\nparameter names do not affect the shape of the function and thus do not affect\ntyping.\n</p>\n<p>\nThe type-reference in an included-record-param must refer to a type defined by a\nrecord-type-descriptor. Specifying an included-record-param <code>*<var>T</var>\n<var>p</var></code> is similar to specifying a required-param <code><var>T</var>\n<var>p</var></code>. The difference is that the caller of the function may\nspecify the value for a field of an included-record-param using the field's name\nas if it had been declared as a parameter. Any field of the\nincluded-record-param not so specified is defaulted using the\nrecord-type-descriptor. A field-descriptor is a <code>parameter field\ndescriptor</code> of a function if it is a field descriptor of a\nrecord-type-descriptor referenced by an included-record-param of the function.\nThe field names of all the parameter field descriptors whose type is not\n<code>never</code> must be distinct from each other and from the names of the\nparameters. Whether a parameter is an included-record-param is part of the\nfunction's type-descriptor, but does not affect the shape of the function and\nthus does not affect whether a function value belongs to a function type.\n</p>\n<p>\nThe process by which the function caller creates an argument list, which may\nmake use of arguments specified both by position and by name, is described in\nmore detail in the <a href=\"#function_call\">section on function calls</a>.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"return-type-descriptor\">return-type-descriptor</span> := [ <code>returns</code> [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> ]\n</pre>\n<p>\nWhen the execution of a function returns to its caller, it returns exactly one\nvalue. A function that would in other programming languages not return a value\nis represented in Ballerina by a function returning <code>()</code>. Note that\nthe function definition does not have to explicitly return <code>()</code>; a\nreturn statement or falling off the end of the function body will implicitly\nreturn <code>()</code>.\n</p>\n<p>\nThe value returned by a function will belong to the type specified in the\nreturn-type-descriptor. An empty return-type-descriptor is equivalent to\n<code>returns ()</code>. The type-descriptor in a return-type-descriptor may be\n<code>never</code>.\n</p>\n<p>\nA return-type-descriptor may be depend on the param-list in the following way. A\ntype-reference occurring in a return-type-descriptor can refer to a parameter\nname if the type of the parameter is a subtype of <code>typedesc</code>. If p is\nsuch a parameter, then a reference to p in the return-type-descriptor denotes\nthe type that is the value of p. If the default value for p is\n<code>&lt;&gt;</code> and p occurs in the return-type-descriptor in a union p|T,\nthen for every basic type B, either the intersection of B and T must be empty,\nor the intersection of typedesc&lt;B&gt; and the declared type of p must be\nempty, or both. The return-type-descriptor thus denotes a\ndistinct set of shapes for each invocation of the function. A function-signature\nwith a return-type-descriptor that uses a type-reference to refer to a parameter\nname in this way is said to be <em>dependently-typed</em>. Functions with\ndependently-types signatures can be declared and used within Ballerina, but\nBallerina does not yet provide a mechanism to define such functions.\n</p>\n<p>\nFunction types are covariant in their return types and contravariant in the type\nof their parameter lists. More precisely, a function type with return type R and\nparameter list type P is a subtype of a function type with return type R' and\nparameter list type P' if and only if R is a subtype of R' and P' is a subtype\nof P. A function value f belongs to a function type T if the declared type of f\nis a subtype of T.\n</p>\n<p>\nIf a function-type-descriptor includes an <code>isolated-qual</code>, then a\nfunction value belongs to the type only if the value's isolated bit is set; if\nthe function type does not include an <code>isolated-qual</code>, then whether a\nfunction value belongs to the type is not affected by the value's isolated bit.\n</p>\n<p>\nAll function values belongs to a function-type-descriptor <code>function</code>;\na function value belongs to the function-type-descriptor <code>isolated\nfunction</code> if and only if it is an isolated function.\n</p>\n<p>\nIn addition to a readonly bit and an isolated bit, a function value also has a\ntransactional bit. A function value with its transactional bit set can only be\ncalled in a <a href=\"#transactions\">transactional scope</a>; this is enforced by\nthe type system. A function value with its transactional bit not set belongs to\nthe type described by a function-type-descriptor with a function-signature only\nif the function-type-descriptor does not include a <code>transactional</code>\nqualifier. This means that a function-type-descriptor with a function-signature\nbut without a <code>transactional</code> qualifier is a subtype of the\ncorresponding function-type-descriptor with a <code>transactional</code>\nqualifier. Note that the subtyping relationship for <code>transactional</code>\nis in the opposite direction from <code>isolated</code>. A function value's\ntransactional bit does not affect whether it belongs to the type described by a\nfunction-type-descriptor without a function-signature.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.5.3\">5.5.3 Objects</h4>\n<p>\nAn object value encapsulates data with functions that operate on the data. An\nobject consists of named members, where each member is either a field or a\nmethod. A field of an object stores a value. A method of an object is a function\nthat can be invoked on the object using a <code>method-call-expr</code>; when a\nmethod is invoked on an object, the function can access the object using the\n<code>self</code> variable. An object's methods are associated with the object\nwhen the object is constructed and cannot be changed thereafter. Fields and\nmethods have names that uniquely identify them within their object; fields and\nmethods share a single symbol space; it is not possible for an object to have a\nfield and a method with the same name.\n</p>\n<p>\nThe type of object values can be described using an\n<code>object-type-descriptor</code>, as specified in this section. It can also\nbe described using a <em>class</em>. A class both describes an object type and\nprovides a way to construct an object belonging to the type; in particular, it\nprovides the method definitions that are associated with the object when it is\nconstructed. A class is defined using a module-level class definition.\n</p>\n<p>\nThe object basic type is selectively immutable. An object value has a read-only\nbit, which is fixed when the object is constructed. An\n<code>object-type-descriptor</code> does not describe whether the object's\nread-only bit is set: whether a value belongs to the type described by an\n<code>object-type-descriptor</code> is not affected by the object's read-only\nbit. Whether an object is read-only can be described separately using a\n<code>readonly</code> type descriptor, which can be combined with an\n<code>object-type-descriptor</code> using the type intersection operator.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-type-descriptor\">object-type-descriptor</span> :=\n   <a href=\"#object-type-quals\"><span class=\"ntref\">object-type-quals</span></a> <code>object</code> <code>{</code>\n      <a href=\"#object-member-descriptor\"><span class=\"ntref\">object-member-descriptor</span></a>*\n   <code>}</code>\n<span class=\"ntdfn\" id=\"object-type-quals\">object-type-quals</span> :=\n   <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a> [<a href=\"#object-network-qual\"><span class=\"ntref\">object-network-qual</span></a>]\n   | [<a href=\"#object-network-qual\"><span class=\"ntref\">object-network-qual</span></a> [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>]]\n<span class=\"ntdfn\" id=\"object-member-descriptor\">object-member-descriptor</span> :=\n   <a href=\"#object-field-descriptor\"><span class=\"ntref\">object-field-descriptor</span></a>\n   | <a href=\"#method-decl\"><span class=\"ntref\">method-decl</span></a>\n   | <a href=\"#remote-method-decl\"><span class=\"ntref\">remote-method-decl</span></a>\n   | <a href=\"#object-type-inclusion\"><span class=\"ntref\">object-type-inclusion</span></a>\n</pre>\n\n<p>\nIf an isolated-qual is specified, then an object belongs to the described type\nonly if the object's isolated bit is set. If an isolated-qual is not specified,\nthen an object's isolated bit does not affect whether it belongs to the\ndescribed type.\n</p>\n\n<section>\n<h5 id=\"section_5.5.3.1\">5.5.3.1 Network interaction</h5>\n<p>\nObjects are the basis for Ballerina's network interaction primitives. There are\ntwo special kinds of object for network interaction: client objects and service\nobjects. A client object supports network interaction with a remote system that\nis originated by the Ballerina program. A service object supports network\ninteraction with a remote system that is originated by the remote system. An\nobject may be a client object or a service object or neither; it cannot be both\na client object and a service object. An object that is a client object or a\nservice object is a network interaction object.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-network-qual\">object-network-qual</span> := <code>client</code> | <code>service</code>\n</pre>\n\n<p>\nIf the <code>object-network-qual</code> is <code>client</code>, then an object\nbelongs to the type only if it is a client object. If the\n<code>object-network-qual</code> is <code>service</code>, then an object belongs\nto the type only if it is a service object. If <code>object-network-qual</code>\nis not present, then an object belongs to the type regardless of whether it is a\nclient object or service object or neither. A <code>object-network-qual</code>\nis not allowed in conjunction with <code>public</code>.\n</p>\n\n<p>\nNetwork interaction objects provide two additional features: remote methods and\nresources. Remote methods are supported by both client and service objects. The\nremote methods of an object are in a separate symbol space from the other\nmethods of the object. Resources are supported only by service objects. Object\ntype descriptors do not provide a way to describe the resources of a service\nobject: whether a service object belongs to an object type is not affected by\nthe service object's resources. Resources are described in detail in the <a href=\"#resources\">section</a> on object constructors.\n</p>\n\n</section>\n\n<section>\n<h5 id=\"section_5.5.3.2\">5.5.3.2 Fields</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-field-descriptor\">object-field-descriptor</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<code>public</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>;</code>\n</pre>\n<p>\nAn <code>object-field-descriptor</code> describes a field of the object. The\n<code>field-name</code> of an <code>object-field-descriptor</code> must be\ndistinct from the <code>field-name</code> of every other\n<code>object-field-descriptor</code> in the <code>object-type-descriptor</code>\nand from the <code>method-name</code> of every <code>method-decl</code> in the\n<code>object-type-descriptor</code>.\n</p>\n<p>\nIf an object's read-only bit is set, then the read-only bit of the value of\nevery field must also be set and the value of a field cannot be changed after\nthe object has been constructed.\n</p>\n</section>\n\n<section>\n<h5 id=\"section_5.5.3.3\">5.5.3.3 Methods</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"method-decl\">method-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<code>public</code>] <a href=\"#method-quals\"><span class=\"ntref\">method-quals</span></a>\n   <code>function</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"method-quals\">method-quals</span> := <a href=\"#function-quals\"><span class=\"ntref\">function-quals</span></a>\n<span class=\"ntdfn\" id=\"method-name\">method-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#special-method-name\"><span class=\"ntref\">special-method-name</span></a>\n<span class=\"ntdfn\" id=\"special-method-name\">special-method-name</span> := <code>map</code> | <code>join</code> | <code>start</code>\n</pre>\n<p>\nA <code>method-decl</code> describes a method of the object. The\n<code>method-name</code> of a <code>method-decl</code> must be distinct from the\n<code>method-name</code> of every other <code>method-decl</code> in the\n<code>object-type-descriptor</code> and from the <code>field-name</code> of\nevery <code>object-field-descriptor</code> in the\n<code>object-type-descriptor</code>. Note that here is no method overloading.\nThe <code>method-name</code> in a <code>method-decl</code> must not be\n<code>init</code>. The identifiers <code>map</code>, <code>join</code> and\n<code>start</code>, which are usually reserved keywords, are allowed as method\nnames.\n</p>\n\n<p>\nThe <code>isolated-qual</code> together with the <code>function-signature</code>\ngive the function type of the method. An isolated method has the same access to\nthe object on which the method is invoked that it has to parameters.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"remote-method-decl\">remote-method-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#remote-method-quals\"><span class=\"ntref\">remote-method-quals</span></a> \n   <code>function</code> <a href=\"#remote-method-name\"><span class=\"ntref\">remote-method-name</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"remote-method-quals\">remote-method-quals</span> :=\n   <a href=\"#remote-qual\"><span class=\"ntref\">remote-qual</span></a> <a href=\"#function-quals\"><span class=\"ntref\">function-quals</span></a>\n   | <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a> [<a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a>] <a href=\"#remote-qual\"><span class=\"ntref\">remote-qual</span></a>\n   | <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a> [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>] <a href=\"#remote-qual\"><span class=\"ntref\">remote-qual</span></a>\n   | <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a> <a href=\"#remote-qual\"><span class=\"ntref\">remote-qual</span></a> <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a>\n   | <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a> <a href=\"#remote-qual\"><span class=\"ntref\">remote-qual</span></a> <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>\n<span class=\"ntdfn\" id=\"remote-qual\">remote-qual</span> := <code>remote</code>\n<span class=\"ntdfn\" id=\"remote-method-name\">remote-method-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA <code>remote-method-decl</code> declares a remote method. An object can\ninclude a <code>remote-method-decl</code> only if it is a network interaction\nobject. A remote method is a method for network interaction: a remote method of\na client object is for outbound network interaction; a remote method of a\nservice object is for inbound network interaction. The <code>remote-method-name</code>\nof a <code>remote-method-decl</code> must be distinct from the\n<code>remote-method-name</code> of every other <code>remote-method-decl</code> in the\n<code>object-type-descriptor</code>. However, a <code>method-decl</code> and a\n<code>remote-method-decl</code> can have the same name. A remote method cannot\nbe called using the normal method call syntax. A remote method of a client\nobject can only be invoked by a <code>client-remote-method-call-action</code>.\nThe return type of the remote method of a client object must not be\n<code>never</code>. A remote method of a service object is invoked by a listener\nobject provided by a library module; Ballerina does not yet define a mechanism\nto allow such a library module to be implemented completely in Ballerina.\n</p>\n\n</section>\n\n<section>\n<h5 id=\"section_5.5.3.4\">5.5.3.4 Visibility</h5>\n<p>\nEach field and method of an object has a <em>visibility region</em>, which is\nthe region of code within which the field or method is visible and can be\naccessed. The visibility region of a <code>remote-method-decl</code> or of\n<code>object-field-descriptor</code> or <code>method-decl</code> that includes\n<code>public</code> consists of all the modules of the program. Otherwise the\nvisibility region is the module containing this object type descriptor; this is\ncalled module-level visibility.\n</p>\n</section>\n<section>\n<h5 id=\"section_5.5.3.5\">5.5.3.5 Typing</h5>\n\n<p>\nThe shape of an object consists of a read-only bit, an isolated bit, a network\ninteraction kind and an unordered collection of object field shapes and object\nmethod shapes. A network interaction kind has one of three values: service,\nclient or empty. An object field shape or object method shape is a 4-tuple\nconsisting of the name of the field or method, the visibility region, a remote\nflag and a shape for the value of the field or for the method's function.\n</p>\n<p>\nAn object type is inclusive, in a similar way to an\ninclusive-record-type-descriptor: an object shape belongs to an object type if\nit has at least the fields and methods described in the object-type-descriptor.\nThus all object values belong to the type <code>object { }</code>.\n</p>\n<p>\nAn object-type-descriptor that has a field with name f, visibility region R and\ntype T contains an object shape only if the object shape contains an object\nfield shape that has name f, visibility region R and a value shape that is\ncontained in T. An object-type-descriptor that has a method with name m,\nvisibility region R, remote qualifier r and function type T contains an object\nshape only if the object shape contains an object method shape that has name m,\nvisibility region R, a remote flag that matches r and a function value that\nbelongs to type T.\n</p>\n<p>\nThus an object type T' is a subtype of an object type T only if for each field\nor method f of T there is a corresponding field or method f' of T such that the\ntype of f' in T' is a subtype of the type of f in T and the visibility region of\nf' in T' is the same as the visibility region of f in T. This implies that if an\nobject type descriptor T has fields or methods with module-level visibility,\nthen it is possible to define another object type descriptor that is a subtype\nof T only within the same module as T.\n</p>\n \n</section>\n<section>\n<h5 id=\"section_5.5.3.6\">5.5.3.6 Inclusion and type-ids</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-type-inclusion\">object-type-inclusion</span> := <code>*</code> <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a> <code>;</code>\n</pre>\n<p>\nEvery type descriptor referenced directly or indirectly by a\n<code>type-reference</code> in an <code>object-type-inclusion</code> must be an\n<code>object-type-descriptor</code>, <code>distinct-type-descriptor</code>,\n<code>intersection-type-descriptor</code> or\na class that has no <code>private</code> members and no <code>readonly</code> qualifier; the\nreferenced type descriptor will thus necessarily be definite and a subtype of\nobject. If a referenced object-type-descriptor or class has an\n<code>isolated</code>, <code>service</code> or <code>client</code> qualifier\n<var>Q</var>, then the referencing object-type-descriptor must also have the\nqualifier <var>Q</var>. The <code>object-field-descriptor</code>s and\n<code>method-decl</code>s from the referenced type are included in the type\nbeing defined. A type-reference to a class is treated as a reference to the\nclass's type; only the types of the methods and fields are copied from the\nreferenced type. An <code>object-field-descriptor</code> or\n<code>method-decl</code> in a <code>object-type-descriptor</code> can override\nrespectively an <code>object-field-descriptor</code> or <code>method-decl</code>\nof the same name in an included <code>object-type-descriptor</code>, provided\nthe type declared for the field or method in the overriding descriptor is a\nsubtype of the type declared in the overridden descriptor. An\n<code>object-field-descriptor</code> cannot override a <code>method-decl</code>,\nnor can a <code>method-decl</code> override an\n<code>object-field-descriptor</code>. It is an error if an\n<code>object-type-descriptor</code> has two or more\n<code>object-type-inclusion</code>s that include an\n<code>object-field-descriptor</code> with the same name, unless those\n<code>object-field-descriptor</code>s are overridden by an\n<code>object-field-descriptor</code> in the including\n<code>object-type-descriptor</code>. It is an error if an\n<code>object-type-descriptor</code> has two or more\n<code>object-type-inclusion</code>s that include <code>method-decl</code>s with\nthe same name but different <code>function-signature</code>s, unless those\n<code>method-decl</code>s are overridden by a <code>method-decl</code> in the\nincluding <code>object-type-descriptor</code>.\n</p>\n<p>\nAn object-type-descriptor is always definite. The set of type-ids induced by an\nobject-type-descriptor is the union of the set of type-ids induced by the type\ndescriptors that it includes. An induced type-id is primary in an\nobject-type-descriptor if and only if it is primary in any of the included type\ndescriptors. It is an error if the induced set of type-ids includes a non-public\ntype-id from another module.\n</p>\n<p>\nIt is an error for an <code>object-type-descriptor</code> to directly or\nindirectly include itself.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"section_5.5.4\">5.5.4 Futures</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"future-type-descriptor\">future-type-descriptor</span> := <code>future</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n</pre>\n<p>\nA future value refers to a named worker, which will return a value. A future\nvalue belongs to a type <code>future&lt;T&gt;</code> if the return type of the\nnamed worker is a subtype of T.\n</p>\n<p>\nA value belongs to a type <code>future</code> (without the type-parameter)\nif it has basic type future.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.5.5\">5.5.5 Type descriptors</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"typedesc-type-descriptor\">typedesc-type-descriptor</span> := <code>typedesc</code> [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>]\n</pre>\n<p>\nA type descriptor value is an immutable value representing a resolved type\ndescriptor. The type typedesc contains all values with basic type typedesc. A\ntypedesc value <var>t</var> belongs to a type typedesc&lt;<var>T</var>&gt; if\nand only if the type described by <code>t</code> is a subtype of <var>T</var>.\nThe typedesc type is thus covariant with its type parameter.\n</p>\n<p>\nReferencing an identifier defined by a type definition in an expression context\nwill result in a type descriptor value.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.5.6\">5.5.6 Handles</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"handle-type-descriptor\">handle-type-descriptor</span> := <code>handle</code>\n</pre>\n<p>\nA handle value is a reference to storage managed externally to a Ballerina\nprogram. Handle values are useful only in conjunction with functions that have\nexternal function bodies; in particular, a new handle value can be created only\nby a function with an external function body. Handle values are inherently\nimmutable.\n</p>\n<p>\nA value belongs to a type <code>handle</code> if it has a basic type of handle.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_5.5.7\">5.5.7 Streams</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"stream-type-descriptor\">stream-type-descriptor</span> := <code>stream</code> [<a href=\"#stream-type-parameters\"><span class=\"ntref\">stream-type-parameters</span></a>]\n<span class=\"ntdfn\" id=\"stream-type-parameters\">stream-type-parameters</span> := <code>&lt;</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> [<code>,</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>]<code>&gt;</code>\n</pre>\n<p>\nA stream is an object-like value that can generate a sequence of values. There\nis also a value associated with the completion of the generation of the\nsequence, which is either nil, indicating the generation of the sequence completed\nsuccessfully, or an error. A stream belongs to type\n<code>stream&lt;T,C&gt;</code> if the values in the generated sequence all\nbelong to T and if the completion value belongs to C. The type\n<code>stream&lt;T&gt;</code> is equivalent to <code>stream&lt;T,()&gt;</code>. A\nvalue belongs to a type <code>stream</code> (without the type-parameter) if it\nhas basic type stream. A type <code>stream&lt;T,C&gt;</code> where C does not\ninclude nil describes an unbounded stream.\n</p>\n<p>\nA stream supports two primitive operations: a next operation and a close\noperation. The next operation has the same semantics as the next method on the\nIterator object type. The close operation informs the stream that there will be\nno more next operations and thus allows the stream to release resources used by\nthe stream; the close operation on a <code>stream&lt;T,C&gt;</code> has a result\nof type <code>C?</code>, where nil means that the close operation was\nsuccessful. The close operation is idempotent: performing the close operation on\na stream on which the close operation has already been performed has no effect.\nWhen the generation of the sequence is complete, the stream automatically\nperforms the close operation to release resources used by the stream.\n</p>\n<p>\nThe type descriptor <code>stream&lt;T,C&gt;</code> works like a class, in that\nit can be used with <code>new</code> to construct stream values that belong to\nthe type. The normal implementation of a <code>stream&lt;T,C&gt;</code> is a\nwrapper around an object belonging to <a href=\"#StreamImplementor\">object type\n<code>StreamImplementor&lt;T,C&gt;</code></a>. The next and close operations on\nthe stream delegate to the next and close methods on the StreamImplementor.\n</p>\n<p>\nThe stream module of the <a href=\"#lang_library\">lang library</a> provides\nadditional operations on stream that can be implemented in terms of the\nprimitive next and close operations.\n</p>\n<p>\nA stream is iterable. A stream of type <code>stream&lt;T,C&gt;</code> has value\ntype <code>T</code> and completion type <code>C</code>. Calling the next method\non the iterator created for an iteration has the same effect as performing the\nnext operation on the stream. The stream does not keep a copy of the sequence of\nvalues returned by the next operation. Any subsequent iteration operation on the\nsame stream will not generate further values, so the iteration sequence for\niterations other than the first will be the empty sequence.\n</p>\n<p>\nNote that in this version of Ballerina the stream type is not a class because\nBallerina does not yet support parameterized classes.\n</p>\n</section>\n\n</section>\n<section>\n<h3 id=\"section_5.6\">5.6 Other type descriptors</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"other-type-descriptor\">other-type-descriptor</span> :=\n   | <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a>\n   | <a href=\"#singleton-type-descriptor\"><span class=\"ntref\">singleton-type-descriptor</span></a>\n   | <a href=\"#any-type-descriptor\"><span class=\"ntref\">any-type-descriptor</span></a>\n   | <a href=\"#never-type-descriptor\"><span class=\"ntref\">never-type-descriptor</span></a>\n   | <a href=\"#readonly-type-descriptor\"><span class=\"ntref\">readonly-type-descriptor</span></a>\n   | <a href=\"#distinct-type-descriptor\"><span class=\"ntref\">distinct-type-descriptor</span></a>\n   | <a href=\"#union-type-descriptor\"><span class=\"ntref\">union-type-descriptor</span></a>\n   | <a href=\"#intersection-type-descriptor\"><span class=\"ntref\">intersection-type-descriptor</span></a>\n   | <a href=\"#optional-type-descriptor\"><span class=\"ntref\">optional-type-descriptor</span></a>\n   | <a href=\"#anydata-type-descriptor\"><span class=\"ntref\">anydata-type-descriptor</span></a>\n   | <a href=\"#json-type-descriptor\"><span class=\"ntref\">json-type-descriptor</span></a>\n   | <a href=\"#byte-type-descriptor\"><span class=\"ntref\">byte-type-descriptor</span></a>\n   | <code>(</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>)</code>\n</pre>\n<p>\nIt is important to understand that the type descriptors specified in this\nsection do not add to the universe of values. They are just adding new ways to\ndescribe subsets of this universe.\n</p>\n<section>\n<h4 id=\"section_5.6.1\">5.6.1 Type reference</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"type-reference\">type-reference</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a>\n</pre>\n\n<p>\nA type descriptor can use a type-reference to refer to a type definition in the\nsame module or another module.\n</p>\n<p>\nA type-reference referring to a type descriptor <var>T</var> is definite if and\nonly if <var>T</var>. If it is, the type-ids induced by are the same as those\ninduced by <var>T</var> and a type-id is primary in <var>t</var> if and only if\nit is primary in <var>T</var>. It is an error if the induced set of type-ids\nincludes a non-public type-id from another module.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.6.2\">5.6.2 Singleton types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"singleton-type-descriptor\">singleton-type-descriptor</span> := <a href=\"#simple-const-expr\"><span class=\"ntref\">simple-const-expr</span></a>\n\n</pre>\n<p>\nA singleton type is a type containing a single shape. A singleton type is\ndescribed using an compile-time constant expression for a single value: the type\ncontains the shape of that value. Note that it is possible for the\nvariable-reference within the simple-const-expr to reference a structured value;\nin this case, the value will have its read-only bit set; a value without its\nread-only bit set will thus not belong to any singleton type.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.6.3\">5.6.3 Any type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"any-type-descriptor\">any-type-descriptor</span> := <code>any</code>\n</pre>\n<p>\nThe type descriptor <code>any</code> describes the type consisting of all values\nother than errors. A value belongs to the any type if and only if its basic type\nis not error. Thus all values belong to the type <code>any|error</code>. Note\nthat a structure with members that are errors belongs to the <code>any</code>\ntype.\n</p>\n<p>\nThe any-type-descriptor is not definite.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.6.4\">5.6.4 Never type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"never-type-descriptor\">never-type-descriptor</span> := <code>never</code>\n</pre>\n<p>\nThe type descriptor <code>never</code> describes the type that does not contain\nany shapes. No value ever belongs to the <code>never</code>.\n</p>\n<p>\nThis can be useful to describe for the return type of a function, if the\nfunction never returns. It can also be useful as a type parameter. For example,\n<code>xml&lt;never&gt;</code> describes the an xml type that has no\nconstituents, i.e. the empty xml value.\n</p>\n<p>\nNote that for any type <code>T</code>, the type <code>T|never</code> is the same\nas <code>T</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.6.5\">5.6.5 Readonly type</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"readonly-type-descriptor\">readonly-type-descriptor</span> := <code>readonly</code>\n</pre>\n<p>\nA shape belongs to the type <code>readonly</code> if its read-only bit is on.\n</p>\n<p>\nA value belonging to an inherently immutable basic type will always have its\nread-only bit on. These basic types are:\n</p>\n<ul>\n<li>all simple types\n<ul>\n<li>nil</li>\n<li>boolean</li>\n<li>int</li>\n<li>float</li>\n<li>decimal</li>\n</ul>\n</li>\n<li>string</li>\n<li>error</li>\n<li>function</li>\n<li>typedesc</li>\n<li>handle</li>\n</ul>\n<p>\nA value belonging to a selectively immutable basic type may have its read-only\nbit on. These basic types are:\n</p>\n<ul>\n<li>xml</li>\n<li>list</li>\n<li>mapping</li>\n<li>table</li>\n<li>object</li>\n</ul>\n\n</section>\n<section>\n<h4 id=\"distinct_types\">5.6.6 Distinct types</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"distinct-type-descriptor\">distinct-type-descriptor</span> := <code>distinct</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n</pre>\n<p>\nEach occurrence of a distinct-type-descriptor describes a type that is distinct\nfrom any other occurrence of a distinct-type-descriptor. Only object and error\nvalues can belong to a type described by a distinct-type-descriptor.\n</p>\n<p>\nThe type denoted by a distinct-type-descriptor <code><var>D</var></code>, where\n<code><var>D</var></code> is <code>distinct <var>T</var></code>, and\n<var>d</var> is the type-id of this occurrence of <code><var>D</var></code>,\ncontains a shape <var>s</var> of an object or error value if and only if both\n<code><var>T</var></code> contains <var>s</var> and the set of type-ids of\n<var>s</var> contains <var>d</var>. The set of type-ids induced by\n<code><var>D</var></code> consists of <var>d</var> as the primary type-id and\nthe type-ids induced by <code><var>T</var></code> as the secondary type-ids. The\ntype <code><var>T</var></code> must be definite and must be a subtype of object\nor a subtype of error. The type <code><var>D</var></code> is always definite.\nNote that <code><var>D</var></code> is always a proper subtype of\n<code><var>T</var></code>.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.6.7\">5.6.7 Union types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"union-type-descriptor\">union-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>|</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n</pre>\n<p>\nThe set of shapes denoted by an union type <code>T1|T2</code> is the union of\nthe set of shapes denoted by <code>T1</code> and the set of shapes denoted by\n<code>T2</code>. Thus, the type <code>T1|T2</code> contains a shape if and only\nif either the type denoted by <code>T1</code> contains the shape or the type\ndenoted by <code>T2</code> contains the shape. A type descriptor\n<code>T1|T2</code> is not a class and cannot be used with <code>new</code>,\neven if one or both of T1 and T2 are classes.\n</p>\n<p>\nA union type <code>T1|T2</code> is definite if and only if both <code>T1</code>\nand <code>T2</code> are definite and the set of type-ids induced by\n<code>T1</code> and <code>T2</code> are the same. If it is definite, then it\ninduces the same set of type-ids as <code>T1</code> and <code>T2</code>, and a\ntype-id is primary if it is primary in either <code>T1</code> or\n<code>T2</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.6.8\">5.6.8 Intersection types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"intersection-type-descriptor\">intersection-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>&amp;</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n</pre>\n<p>\nThe set of shapes denoted by an intersection type  is the\nintersection of the set of shapes denoted by <code>T1</code> and the set of\nshapes denoted by <code>T2</code>. Thus, the type <code>T1&amp;T2</code>\ncontains a shape if and only if the types denoted by <code>T1</code> and\n<code>T2</code> both contain the shape. It is a error to have an intersection\ntype that denotes an empty set of shapes. In an intersection type\n<code>T1&amp;T2</code>, it is an error if <code>T1</code> and <code>T2</code>\nare both function types unless there is a single function-type-descriptor that\ndenotes a type that is a subtype of both <code>T1</code> and <code>T2</code>.\nA type descriptor <code>T1&amp;T2</code> is not a class and cannot be used\nwith <code>new</code>, even if one or both of T1 and T2 are classes.\n</p>\n<p>\nAn intersection type <code>T1&amp;T2</code> is definite if and only if both\n<code>T1</code> and <code>T2</code> are definite. If it is definite, then it\ninduces the union of the set of type-ids induced by <code>T1</code> and\n<code>T2</code>, and a type-id is primary if it is primary in either\n<code>T1</code> or <code>T2</code>.\n</p>\n<p>\nIntersection types are particularly useful in conjunction with\n<code>readonly</code>. A set of readonly shapes can be described by\n<code>readonly&amp;T</code>, where <code>T</code> describes the primary aspect\nof the shape.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_5.6.9\">5.6.9 Optional types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"optional-type-descriptor\">optional-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>?</code>\n</pre>\n<p>\nA type <code><var>T</var>?</code> means the union of <code><var>T</var></code>\nand <code>()</code>. It is completely equivalent to\n<code><var>T</var>|()</code>.\n</p>\n</section>\n\n<section>\n<h4 id=\"anydata\">5.6.10 Anydata type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"anydata-type-descriptor\">anydata-type-descriptor</span> := <code>anydata</code>\n</pre>\n<p>\nThe type descriptor <code>anydata</code> describes the type of plain data. The\ntype <code>anydata</code> contains a shape if and only if it is the shape of a\nvalue that is plain data. The <code>anydata</code> type can thus be defined as:\n</p>\n\n<pre>  () | boolean | int | float | decimal\n    | string | xml\n    | anydata[] | map&lt;anydata&gt; | table&lt;map&lt;anydata&gt;&gt;\n</pre>\n</section>\n<section>\n<h4 id=\"section_5.6.11\">5.6.11 JSON types</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"json-type-descriptor\">json-type-descriptor</span> := <code>json</code>\n</pre>\n<p>\nThe <code>json</code> type is designed for processing data expression in JSON\nformat. It is a built-in name for a union defined as follows:\n</p>\n<pre>type json = () | boolean | int | float | decimal | string | json[] | map&lt;json&gt;;\n</pre>\n<p>\nIn addition, the <code>json</code> type is defined to have <a href=\"#lax_static_typing\">lax static typing</a>.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"byte_type\">5.6.12 Byte type</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"byte-type-descriptor\">byte-type-descriptor</span> := <code>byte</code>\n</pre>\n<p>\nThe byte type is a predefined name for a union of the int values in the range 0\nto 255 inclusive. It is equivalent to the <a href=\"#built-in_subtypes\">built-in\nsubtype</a> <code>int:Unsigned8</code>.\n</p>\n</section>\n\n</section>\n<section>\n<h3 id=\"built-in_object_types\">5.7 Built-in object types</h3>\n<p>\nThere are several object types that are built-in in the sense that the\nlanguage treats objects with these types specially. There are two kinds of\nobject type:\n</p>\n<ul>\n<li>purely structural types; the name of the type is internal to this\nspecification and not exposed to the language;</li>\n<li>distinct types; the name of the type is defined in a lang library\nmodule.</li>\n</ul>\n\n<section>\n<h4 id=\"section_5.7.1\">5.7.1 Iterator</h4>\n<p>\nA value of iterable type with iteration value type T and iteration completion\ntype C provides a way of creating an iterator object that belongs to the object\ntype\n</p>\n\n<pre>    object {\n       public function next() returns record {| T value; |}|C;\n    }\n</pre>\n<p>\nIn this specification, we refer to this type as Iterator&lt;T,C&gt;.\n</p>\n<p>\nConceptually an iterator is at a position between members of the iteration sequence. \nPossible positions are at the beginning (immediately before the first member if\nany), between members and at the end (immediately after the last member if any).\nA newly created iterator is at the beginning position. For an empty sequence,\nthere is only one possible position which is both at the beginning and at the\nend.\n</p>\n<p>\nThe <code>next()</code> method behaves as follows:\n</p>\n<ul>\n<li>if the iteration has encountered an error, return an error value</li>\n<li>otherwise, if the iterator has completed successfully by reaching the end\nposition without an error, return nil</li>\n<li>otherwise\n<ul>\n<li>move the iterator to next position, and</li>\n<li>return a record <code>{ value: v }</code> where v is the member of the\nsequence between the previous position and the new position</li>\n</ul>\n</li>\n</ul>\n<p>\nMutation of a structured value during iteration is handled as follows. A call to\n<code>next()</code> must panic if there has been any mutation to the structured\nvalue since the iterator was created other than the following:</p>\n<ul>\n<li>removing a member of the structured value that a preceding call to the\niterator has already returned;</li>\n<li>changing the member associated with an existing key.</li>\n</ul>\n<p>\nIn the latter case, <code>next()</code> must return the value associated with\nthe key at the point when <code>next()</code> is called.\n</p>\n<p>\nNote that it is not possible for the <code>next()</code> method simply to return\nthe values in the iteration sequence, since there would be no way to distinguish\na nil or error value that is part of the iteration sequence from a nil or error\nvalue that represents the result of the iteration.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.7.2\">5.7.2 Iterable</h4>\n<p>\nAn object belongs to the object type Iterable&lt;T,C&gt; if it has a\nmethod named <code>iterator</code> with no arguments and a return type that is\nsubtype of Iterator&lt;T,C&gt; and it belongs to the distinct type\n<code>Iterable</code> defined in <code>lang.object</code>. An object that\nbelongs to Iterable&lt;T,C&gt; is iterable: the object returned by the\n<code>iterator</code> method determines the iteration sequence and iteration\ncompletion value.\n</p>\n</section>\n<section>\n<h4 id=\"StreamImplementor\">5.7.3 StreamImplementor</h4>\n<p>\nAn object belongs to the object type StreamImplementor&lt;T,C&gt; if it\nbelongs to Iterator&lt;T,C&gt; and also optionally has a method\n<code>close()</code> with return value <code>C?</code>. This is equivalent to\nbelonging to the following type.\n</p>\n\n<pre>    object {\n       public isolated function next() returns record {| T value; |}|C;\n    }\n    | object {\n       public isolated function next() returns record {| T value; |}|C;\n       public isolated function close() returns C?;\n    }\n</pre>\n\n<p>\nThe close method says that there will be no more calls to the next method. Any\ncall to a next method after the close method has been called must result in a\npanic. A missing close method behaves like a close method that puts the object\ninto a closed state, in which calls to next will result in a panic, and then\nimmediately returns <code>()</code>.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_5.7.4\">5.7.4 Listener</h4>\n<p>\nThe object type Listener&lt;T,A&gt;, where T is a a subtype of <code>service\nobject {}</code> and A is a subtype of <code>string[]|string|()</code>, is\ndescribed by the following object type descriptor:\n</p>\n\n<pre>object {\n   public function attach(T svc, A attachPoint) returns error?;\n   public function detach(T svc) returns error?;\n   public function start() returns error?;\n   public function gracefulStop() returns error?;\n   public function immediateStop() returns error?;\n}\n</pre>\n<p>\nThe role of a Listener is to handle incoming network messages by making\ncalls on service objects as described in <a href=\"#listeners_and_services\">Listeners and services</a>. Each method is used\nas follows:\n</p>\n<ul>\n<li>the <code>attach</code> method is used to provide the Listener with a\nservice object that it can use to handle incoming network messages; the\n<code>attachPoint</code> argument is used to identify which network messages the\nservice object should be used for;</li>\n<li>the <code>detach</code> method tells the Listener to stop using a service\nobject that was previously provided using the <code>attach</code> method;</li>\n<li>the <code>start</code> method tells the Listener to start handling incoming\nnetwork messages;</li>\n<li>the <code>gracefulStop</code> and <code>immediateStop</code> messages tell\nthe Listener to stop handling incoming network messages;\n<ul>\n<li>in the case of <code>gracefulStop</code>, the listener should complete the\nhandling of any incoming messages that it has started to handle; in particular,\nit should wait for the completion of any strands that it created to execute\nservice object methods;</li>\n<li>in the case of <code>immediateStop</code>, the listener should not try to\ncomplete the hanlding of any incoming messages that is has started to handle; in\nparticular, it should cancel any strands that it created to execute service\nobject methods.</li>\n</ul>\n</li>\n</ul>\n<p> \nEach method returns an error value if an error occurred, and return nil\notherwise. The listener object is responsible for creating and keeping track of\nany strands that it needs.\n</p>\n<p>\nA type is a <em>listener object type</em> if it is a subtype of the object type\nListener&lt;T,A&gt;, for some type T that is a subtype of <code>service object\n{}</code> and some type A that is a subtype of <code>string[]|string|()</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.7.5\">5.7.5 RawTemplate</h4>\n<p>\nThe RawTemplate type describes the type of object constructed by a raw template\nexpression. The type is defined in <code>lang.object</code> as follows.\n</p>\n<pre>distinct object {\n    public (readonly &amp; string[]) strings;\n    public (any|error)[] insertions;\n}\n</pre>\n\n</section>\n<section>\n<h4 id=\"section_5.7.6\">5.7.6 RetryManager</h4>\n\n<p>\nClasses of type RetryManager are defined by the application to allow control\nover retries performed by the retry statement and retry transaction statement\nThe object type RetryManager&lt;E&gt;, where E is a a subtype of\n<code>error</code>, is described by the following object type descriptor:\n</p>\n\n<pre>object {\n   public function shouldRetry(E e) returns boolean;\n}\n</pre>\n<p>\nNote that RetryManager&lt;E&gt; is contravariant in E i.e. RetryManager&lt;E&gt;\nis a subtype of RetryManager&lt;E'&gt; if and only if E' is a subtype of E.\n</p>\n\n</section>\n\n</section>\n<section>\n<h3 id=\"section_5.8\">5.8 Abstract operations</h3>\n<p>\nThese section specifies a number of operations that can be performed on values.\nThese operations are for internal use by the specification. These operations are\nnamed in CamelCase with an initial upper-case letter to distinguish them from\nfunctions in the lang library.\n</p>\n<section>\n<h4 id=\"FillMember\">5.8.1 FillMember</h4>\n<p>\nThe FillMember(s, k) operation is defined for a structured value s and an\nout-of-line key value k. It can be performed when s does not have a member with\nkey k; if it succeeds, it will result in a member with key k being added to s.\nIt will succeed if the inherent type of s allows the addition of a member with\nkey k and there is a way to construct a filler value for the type descriptor\nthat the inherent type of s requires for member k. The following table specifies\nwhen and how a filler value can be constructed for a type descriptor.\n</p>\n<table>\n<tr>\n<th>Type descriptor</th>\n<th>Filler value</th>\n<th>When available</th>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>+0.0f</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>decimal</code></td>\n<td><code>+0d</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>\"\"</code></td>\n<td></td>\n</tr>\n<tr>\n<td>array or tuple type descriptor</td>\n<td><code>[]</code></td>\n<td>if that is a valid constructor for the type</td>\n</tr>\n<tr>\n<td>map or record type descriptor</td>\n<td><code>{ }</code></td>\n<td>if that is a valid constructor for the type</td>\n</tr>\n<tr>\n<td><code>readonly &amp; T</code></td>\n<td>the filler value for T constructed as read-only</td>\n<td>if that belongs to the type</td>\n</tr>\n<tr>\n<td>table</td>\n<td>empty table (with no rows)</td>\n<td></td>\n</tr>\n<tr>\n<td>object</td>\n<td><code>new T()</code></td>\n<td>if T is a class, where T is the type descriptor for the object, and the\nstatic type of T's init method allows no arguments and does not include error</td>\n</tr>\n<tr>\n<td>stream</td>\n<td>empty stream</td>\n<td></td>\n</tr>\n<tr>\n<td><code>xml</code></td>\n<td><code>xml``</code></td>\n<td></td>\n</tr>\n<tr>\n<td>built-in subtype of <code>xml</code>\n</td>\n<td><code>xml``</code></td>\n<td>if this belongs to the subtype, i.e. if the subtype is\n<code>xml:Text</code>\n</td>\n</tr>\n<tr>\n<td>singleton</td>\n<td>the single value used to specify the type</td>\n<td></td>\n</tr>\n<tr>\n<td rowspan=\"2\">union</td>\n<td><code>()</code></td>\n<td>if <code>()</code> is a member of the union</td>\n</tr>\n<tr>\n<td>the filler value for basic type B</td>\n<td>if all members of the union belong to a single basic type B,\nand the filler value for B also belongs to the union</td>\n</tr>\n<tr>\n<td><code>T?</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>any</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>anydata</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>byte</code></td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td>built-in subtype of <code>int</code>\n</td>\n<td><code>0</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>json</code></td>\n<td><code>()</code></td>\n<td></td>\n</tr>\n</table>\n\n</section>\n<section>\n<h4 id=\"Cloning\">5.8.2 Cloning</h4>\n<p>\nThere are two cloning operations. Both of these operate on values belonging to the\nCloneable type defined as follows:\n</p>\n<pre>\npublic type Cloneable readonly|xml|Cloneable[]|map&lt;Cloneable&gt;|table&lt;map&lt;Cloneable&gt;&gt;;\n</pre>\n<p>\nThis type is defined in the lang.value module of the lang library. In this document,\nthe type will be referred to as <code>value:Cloneable</code>.\n</p>\n\n<section>\n<h5 id=\"Clone\">5.8.2.1 Clone</h5>\n<p>\nClone(v) is defined for any value v that belongs to the type\n<code>value:Cloneable</code>. It performs a deep copy, recursively copying all\nstructural values and their members and recursively copying all sequence values\nand their constituents. Clone(v) for an immutable value v returns v. If v is of\na basic type that has an inherent type, Clone(v) has the same inherent type as\nv. The graph of references of Clone(v) must have the same structure as that of\nv. This implies that the number of distinct references reachable from Clone(v)\nmust be the same as the number of distinct references reachable from v. Clone(v)\nmust terminate even if v has cycles.\n</p>\n<p>\nClone(v) cannot be implemented simply by recursively calling Clone on all\nmembers of v. Rather Clone must maintain a map that records the result of\ncloning each reference value. When a Clone operation starts, this map as empty.\nWhen cloning a reference value, it must use the result recorded in the map if\nthere is one.\n</p>\n<p>\nThe Clone operation is exposed by the <code>clone</code> function in the\nlang.value module of the lang library.\n</p>\n</section>\n<section>\n<h5 id=\"ImmutableClone\">5.8.2.2 ImmutableClone</h5>\n<p>\nImmutableClone(v) is defined for any value v that belongs to the type\n<code>value:Cloneable</code>. It performs a deep copy of v similar to Clone(v),\nexcept that newly constructed values will be constructed as immutable and so\nhave their read-only bit on. Any immutable value is not copied. So the result\nof Immutable always has its read-only bit on.\n</p>\n<p>\nLike Clone, ImmutableClone must preserve graph structure, including cycles.\nConceptually the whole graph is constructed before being made immutable.\n</p>\n<p>\nThe ImmutableClone operation is exposed by the <code>cloneReadOnly</code>\nfunction in the lang.value module of the lang library.\n</p>\n</section>\n</section>\n<section>\n<h4 id=\"DeepEquals\">5.8.3 DeepEquals</h4>\n<p>\nDeepEquals(v1, v2) is defined for any values v1, v2 that belong to type anydata.\nIt returns true or false depending of whether the primary aspect of the shape v1\nand of v2 are the same. In other words, DeepEquals returns true if and only if\nthe values are the same ignoring whether read-only bits are on or off.\nDeepEquals(v1, v2) must terminate for any values v1 and v2 of type anydata, even\nif v1 or v2 have cycles. DeepEquals(v1, v2) returns true if v1 and v2 have the\nsame shape, even if the graphs of references of v1 and v2 have different\nstructures. If two values v1 and v2 have different basic types, then\nDeepEquals(v1, v2) will be false.\n</p>\n<p>\nThe possibility of cycles means that DeepEquals cannot be implemented simply by\ncalling DeepEquals recursively on members. Rather DeepEquals must maintain a\nmapping that records for each pair of references whether it is already in\nprocess of comparing those references. When a DeepEquals operation starts, this\nmap is empty. Whenever it starts to compare two references, it should see\nwhether it has already recorded that pair (in either order), and, if it has,\nproceed on the assumption that they compare equal.\n</p>\n<p>\nDeepEquals(Clone(x), x) is guaranteed to be true for any value of type anydata.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.8.4\">5.8.4 NumericConvert</h4>\n<p>\nNumericConvert(t, v) is defined if t is the typedesc for float, decimal or int,\nand v is a numeric value. It converts v to a value in t, or returns an error,\naccording to the following table.\n</p>\n<table>\n  <tr>\n   <td>from \\ to</td>\n   <td>float</td>\n   <td>decimal</td>\n   <td>int</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>unchanged</td>\n   <td>closest math value</td>\n   <td rowspan=\"2\">round, error for NaN or out of int range</td>\n  </tr>\n  <tr>\n   <td>decimal</td>\n   <td>closest math value</td>\n   <td>unchanged</td>\n  </tr>\n  <tr>\n   <td>int</td>\n   <td>same math value</td>\n   <td>same math value</td>\n   <td>unchanged</td>\n  </tr>\n</table>\n</section>\n<section>\n<h4 id=\"ToString\">5.8.5 ToString</h4>\n<p>\nToString(v,style) converts a value to a string in one of three styles. The\nconversion can be performed in one of three styles, specified by the style\nparameter, which are as follows.\n</p>\n<ul>\n<li>expression style: produces a string that looks like a Ballerina expression; there are\ntwo cases\n<ul>\n<li>when v belongs to anydata and does not have cycles, it will produce a string that\nis a valid Ballerina expression, such that evaluating that string will result in a value v'\nfor which DeepEquals(v, v') is true</li>\n<li>otherwise, it will produce a string that is either not a valid Ballerina expression\nor is a valid Ballerina expression that evaluates to a value that does not belong type type anydata</li>\n</ul>\n</li>\n<li>informal style: similar to expression style, but does not preserve all the distinctions that\nexpression style does, and avoids syntax that requires a knowledge of Ballerina</li>\n<li>direct style: this does a direct conversion of the value to a string rather than producing\na string that describes the value\n<ul>\n<li>if v is a string, then the result of ToString(v,direct) is v</li>\n<li>if v is XML, then the result of ToString(v,direct) is v in XML syntax</li>\n<li>direct style falls back to informal style for basic types where there is no\nother natural more direct conversion</li>\n</ul>\n</li>\n</ul>\n<p>\nThe following table summarizes the result of ToString(v,style) for each basic type.\n</p>\n<table>\n  <tr>\n   <td rowspan=\"2\">Basic type of v\n   </td>\n   <td colspan=\"3\">style\n   </td>\n  </tr>\n  <tr>\n   <td>expression\n   </td>\n   <td>informal\n   </td>\n   <td>direct\n   </td>\n  </tr>\n  <tr>\n   <td>nil\n   </td>\n   <td>\n<code>()</code>\n   </td>\n   <td>\n<code>null</code>\n   </td>\n   <td>\n   </td>\n  </tr>\n  <tr>\n   <td>true\n   </td>\n   <td colspan=\"3\">\n<code>true</code>\n   </td>\n  </tr>\n  <tr>\n   <td>int\n   </td>\n   <td colspan=\"3\">\n<code>2</code>\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"3\">float\n   </td>\n   <td colspan=\"3\">\n<code>1.0</code>\n   </td>\n  </tr>\n  <tr>\n   <td>\n<code>float:NaN</code>\n   </td>\n   <td colspan=\"2\">\n<code>NaN</code>\n   </td>\n  </tr>\n  <tr>\n   <td>\n<code>float:Infinity</code>\n   </td>\n   <td colspan=\"2\">\n<code>Infinity</code>\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">decimal\n   </td>\n   <td>\n<code>1d</code>\n   </td>\n   <td colspan=\"2\">\n<code>1</code>\n   </td>\n  </tr>\n  <tr>\n   <td>\n<code>1.20d</code>\n   </td>\n   <td colspan=\"2\">\n<code>1.20</code>\n   </td>\n  </tr>\n  <tr>\n   <td>string\n   </td>\n   <td colspan=\"2\">\n<code>\"xyz\"</code>\n   </td>\n   <td>\n<code>xyz</code>\n   </td>\n  </tr>\n  <tr>\n   <td>xml\n   </td>\n   <td>\n<code>xml`&lt;d&gt;t&lt;/d&gt;`</code>\n   </td>\n   <td>\n<code>`&lt;d&gt;t&lt;/d&gt;`</code>\n   </td>\n   <td>\n<code>&lt;d&gt;t&lt;/d&gt;</code>\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">array\n   </td>\n   <td colspan=\"3\">\n<code>[<var>X</var>,<var>Y</var>]</code>\n   </td>\n  </tr>\n  <tr>\n   <td>\n<var>X</var>, <var>Y</var> expression style\n   </td>\n   <td colspan=\"2\">\n<var>X</var>,<var>Y</var> informal style\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">map\n   </td>\n   <td colspan=\"3\">\n<code>{\"x\":<var>X</var>,\"y\":<var>Y</var>}</code>\n   </td>\n  </tr>\n  <tr>\n   <td>\n<var>X</var>, <var>Y</var> expression style\n   </td>\n   <td colspan=\"2\">\n<var>X</var>,<var>Y</var> informal style\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">table\n   </td>\n   <td>\n<code>table key(k) [<var>R<sub>1</sub></var>,<var>R<sub>2</sub></var>]</code>\n   </td>\n   <td colspan=\"2\">\n<code>[<var>R<sub>1</sub></var>,<var>R<sub>2</sub></var>]</code>\n   </td>\n  </tr>\n  <tr>\n   <td>\n<var>R<sub>1</sub></var>,<var>R<sub>2</sub></var> expression style\n   </td>\n   <td colspan=\"2\">\n<var>R<sub>1</sub></var>,<var>R<sub>2</sub></var> informal style\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"3\">error\n   </td>\n   <td colspan=\"3\">\n<code>error D<sub>1</sub>&amp;D<sub>2</sub> (M,C,F<sub>1</sub>=V<sub>1</sub>,F<sub>2</sub>=V<sub>2</sub>)</code>\n   </td>\n  </tr>\n  <tr>\n   <td>V<sub>1</sub>, V<sub>2</sub> expression style, D<sub>1</sub>,D<sub>2</sub>  in the form <code>{<var>module-id</var>}<var>local-id</var></code>, M expression style, C expression style\n   </td>\n   <td colspan=\"2\">V<sub>1</sub>, V<sub>2</sub> informal style, just local id of D<sub>1</sub>,D<sub>2</sub>, M informal style, C informal style\n   </td>\n  </tr>\n  <tr>\n   <td colspan=\"3\">D<sub>1</sub>,D<sub>2</sub> are type-ids, M is the error message, C is the error cause, F<sub>1</sub>=V<sub>1</sub>,F<sub>2</sub>=V<sub>2</sub> are field names and values of the error detail\n   </td>\n  </tr>\n  <tr>\n   <td>object w/o toString method\n   </td>\n   <td colspan=\"3\">\n<code>object D1&amp;D2 U</code> where U is an identifier that uniquely identifies the object (objects will have the same identifier only if they are <code>===</code>)\n   </td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">object with toString method\n   </td>\n   <td>\n<code>object S</code>\n   </td>\n   <td colspan=\"2\">\n<code>S</code>\n   </td>\n  </tr>\n  <tr>\n    <td colspan=\"3\">\n<code>S</code> in direct style where S is the result of calling the toString method</td>\n  </tr>\n  <tr>\n   <td rowspan=\"2\">\n<em>cycle detected</em>\n   </td>\n   <td>\n<code>...[N]</code>\n   </td>\n   <td colspan=\"2\">\n<code>...</code>\n   </td>\n  </tr>\n  <tr>\n   <td>N is 0-based index down path from root object to object where cycle is detected\n   </td>\n   <td colspan=\"2\">\n   </td>\n  </tr>\n</table>\n</section>\n<section>\n<h4 id=\"ordering\">5.8.6 Ordering</h4>\n<p>\nThere are three abstract operations related to ordering: Compare(x, y),\nCompareA(x, y), CompareD(x, y). CompareA(x, y) and CompareD(x, y), which are\nused to define sorting, return one of the values LT, EQ, GT representing the\ncases where x is less than, equal to or greater than y. Compare(x, y), which is\nused to define the relational operators, can also return the value UN to\nrepresent the case where x is unordered with respect to y; this is used to deal\nwith NaN.\n</p>\n<p>\nThe three operations are related as follows: Compare(x, y) is the same as\nCompareA(x, y) and CompareD(x, y) unless Compare(x, y) is UN.\n</p>\n<p>\nA type is ordered if all the values that belong to the type can be compared to\neach other using the above three abstract operations. Thus each of the abstract\noperations are defined when there is an ordered type to which both arguments\nbelong.\n</p>\n<p>\nIf C is any of the three abstract operations, and there is an ordered type to\nwhich both x and y belong, then:\n</p>\n<ul>\n<li>C(x, y) is LT if and only if C(y, x) is GT</li>\n<li>C(x, y) is EQ if and only if C(y, x) is EQ</li>\n<li>C(x, y) is UN if and only if C(y, x) is UN</li>\n</ul>\n<p>\nThe most straightforward ordered types are basic types where all the values of\nthe type can be put into an order. These types are nil, boolean, int, string. For\neach of these three types, for any pair of values x, y belonging to the type\n</p>\n<ul>\n<li>Compare(x, y) is EQ if x and y are the same value</li>\n\n<li>Compare(x, y) is LT in the following cases: \n<ul>\n<li>for int, if x is mathematically less than y</li>\n<li>for boolean, if x is false and y is true</li>\n<li>for string, if x is lexicographically less than y in Unicode code point\norder, more precisely, if\n<ul>\n<li>x is an proper initial substring of y, or</li>\n<li>for the first index at which x and y differ, the code point at that index in\nx is less than the code point at that index in y</li>  \n</ul>\n</li>  \n</ul>\n</li>\n<li>CompareA(x,y), and CompareD(x,y) have the same value as Compare(x, y)</li>\n</ul>\n<p>\nThe basic type decimal is ordered. The abstract operations are defined the same\nas for int, except that Compare(x, y) is EQ if x and y have the same shape. In\nother words, the compare operations ignore precision.\n</p>\n<p>\nThe basic type float is also ordered. Compare(x,y) is as defined by IEEE\n754-2008 clause 5.11. In particular:\n</p>\n<ul>\n<li>the Compare operation does not distinguish +0 from -0 i.e.\nCompare(-0.0,+0.0) is EQ</li>\n<li>Compare(x, y) is UN if x or y or both is NaN</li>\n</ul>\n<p>\nWhen x and y belong to type float, CompareA(x, y) and CompareD(x, y) differ from\nCompare(x, y) as follows:\n</p>\n<ul>\n<li>CompareA(NaN,NaN) and CompareD(NaN, NaN) are EQ</li>\n<li>CompareA(x, NaN) is LT if x is not NaN</li>\n<li>CompareD(NaN, x) is LT if x is not NaN</li>\n</ul>\n<p>\nIf type T is ordered, then type T? Is also ordered. Comparison operations\ninvolving nil are defined as follows:\n</p>\n<ul>\n<li>Compare((),()), CompareA((),()) and CompareD((),()) are all EQ</li>\n<li>Compare(x,()) is UN if x is not ()</li>\n<li>CompareA(x,()) is LT if x is not ()</li>\n<li>CompareA((), x) is LT if x is not ()</li>\n</ul>\n<p>\nThe CompareA operation is used for sorting in ascending order; the CompareD\noperation is used in reverse for sorting in descending order. The net effect of\nthe above rules is thus that both () and NaN will appear at the end of a sorted\nlist, with NaN before (), in both ascending and descending order.\n</p>\n<p>\nThe following rules determine when a subtype of list is ordered:\n</p>\n<ul>\n<li>[T...]  is ordered, if T is ordered;</li>\n<li>[] is ordered;</li>\n<li>[T, rest] is ordered if T is ordered and [rest] is ordered.</li>\n</ul>\n<p>\nEach of the three abstract operations C are extended to apply to lists as\nfollows:\n</p>\n<ul>\n<li>C([], []) is EQ;</li>\n<li>C([], [y1,...]) is LT;</li>\n<li>C([x1,x2,...],[y1, y2...]) is r unless r is EQ and otherwise C([x2,...],[y2,...]), where r is C(x1, y1).</li>\n</ul>\n</section>\n</section>\n<section>\n<h3 id=\"section_5.9\">5.9 Binding patterns and variables</h3>\n<section>\n<h4 id=\"section_5.9.1\">5.9.1 Binding patterns</h4>\n<p>\nBinding patterns are used to support destructuring, which allows different parts\nof a single structured value each to be assigned to separate variables at the\nsame time.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"binding-pattern\">binding-pattern</span> :=\n   <a href=\"#capture-binding-pattern\"><span class=\"ntref\">capture-binding-pattern</span></a>\n   | <a href=\"#wildcard-binding-pattern\"><span class=\"ntref\">wildcard-binding-pattern</span></a>\n   | <a href=\"#list-binding-pattern\"><span class=\"ntref\">list-binding-pattern</span></a>\n   | <a href=\"#mapping-binding-pattern\"><span class=\"ntref\">mapping-binding-pattern</span></a>\n   | <a href=\"#error-binding-pattern\"><span class=\"ntref\">error-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"capture-binding-pattern\">capture-binding-pattern</span> := <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"variable-name\">variable-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"wildcard-binding-pattern\">wildcard-binding-pattern</span> := <code>_</code>\n<span class=\"ntdfn\" id=\"list-binding-pattern\">list-binding-pattern</span> := <code>[</code> <a href=\"#list-member-binding-patterns\"><span class=\"ntref\">list-member-binding-patterns</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"list-member-binding-patterns\">list-member-binding-patterns</span> :=\n   <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a> (<code>,</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>)* [<code>,</code> <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>]\n   | [ <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a> ]\n<span class=\"ntdfn\" id=\"mapping-binding-pattern\">mapping-binding-pattern</span> := <code>{</code> <a href=\"#field-binding-patterns\"><span class=\"ntref\">field-binding-patterns</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"field-binding-patterns\">field-binding-patterns</span> :=\n   <a href=\"#field-binding-pattern\"><span class=\"ntref\">field-binding-pattern</span></a> (<code>,</code> <a href=\"#field-binding-pattern\"><span class=\"ntref\">field-binding-pattern</span></a>)* [<code>,</code> <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>]\n   | [ <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a> ] \n<span class=\"ntdfn\" id=\"field-binding-pattern\">field-binding-pattern</span> :=\n   <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n   | <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"rest-binding-pattern\">rest-binding-pattern</span> := <code>...</code> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"error-binding-pattern\">error-binding-pattern</span> := <code>error</code> [<a href=\"#error-type-reference\"><span class=\"ntref\">error-type-reference</span></a>] <code>(</code> <a href=\"#error-arg-list-binding-pattern\"><span class=\"ntref\">error-arg-list-binding-pattern</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"error-type-reference\">error-type-reference</span> := <a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a>\n<span class=\"ntdfn\" id=\"error-arg-list-binding-pattern\">error-arg-list-binding-pattern</span> :=\n   <a href=\"#error-message-binding-pattern\"><span class=\"ntref\">error-message-binding-pattern</span></a> [<code>,</code> <a href=\"#error-cause-binding-pattern\"><span class=\"ntref\">error-cause-binding-pattern</span></a>] [<code>,</code> <a href=\"#error-field-binding-patterns\"><span class=\"ntref\">error-field-binding-patterns</span></a>]\n   | [<a href=\"#error-field-binding-patterns\"><span class=\"ntref\">error-field-binding-patterns</span></a>]\n<span class=\"ntdfn\" id=\"error-message-binding-pattern\">error-message-binding-pattern</span> := <a href=\"#simple-binding-pattern\"><span class=\"ntref\">simple-binding-pattern</span></a> \n<span class=\"ntdfn\" id=\"error-cause-binding-pattern\">error-cause-binding-pattern</span> := <a href=\"#simple-binding-pattern\"><span class=\"ntref\">simple-binding-pattern</span></a> | <a href=\"#error-binding-pattern\"><span class=\"ntref\">error-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"simple-binding-pattern\">simple-binding-pattern</span> := <a href=\"#capture-binding-pattern\"><span class=\"ntref\">capture-binding-pattern</span></a> | <a href=\"#wildcard-binding-pattern\"><span class=\"ntref\">wildcard-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"error-field-binding-patterns\">error-field-binding-patterns</span> :=\n   <a href=\"#named-arg-binding-pattern\"><span class=\"ntref\">named-arg-binding-pattern</span></a> (<code>,</code> <a href=\"#named-arg-binding-pattern\"><span class=\"ntref\">named-arg-binding-pattern</span></a>)* [<code>,</code> <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>]\n   | <a href=\"#rest-binding-pattern\"><span class=\"ntref\">rest-binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"named-arg-binding-pattern\">named-arg-binding-pattern</span> := <a href=\"#arg-name\"><span class=\"ntref\">arg-name</span></a> <code>=</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n</pre>\n<p>\nA binding pattern may succeed or fail in matching a value. A successful match\ncauses values to be assigned to all the variables occurring the binding-pattern.\n</p>\n<p>\nA binding pattern matches a value in any of the following cases.\n</p>\n<ul>\n<li>a capture-binding-pattern always matches a value and causes the matched\nvalue to be assigned to named variable;</li>\n<li>a wildcard-binding-pattern matches a value if the value belongs to type any,\nin other words if the basic type of the value is not error; it does not cause\nany assignments to be made;</li>\n<li>a list-binding-pattern with m binding patterns matches a list with n\nmembers if m is less than or equal to n, and the i-th binding pattern matches\nthe i-th member of the list for each i in 1 to m, and either m is equal to n or\nthe list-binding-pattern includes a rest-binding-pattern; if there is a\nrest-binding-pattern <code>...v</code>, then a successful match causes a new\nlist value consisting of all members of the matched list except for the the\nfirst m values to be assigned to <code>v</code>;</li>\n<li>a mapping-binding-pattern { f<sub>1</sub>: p<sub>1</sub>, f<sub>2</sub>:\np<sub>2</sub>, ..., f<sub>n</sub>: p<sub>n</sub>, r } matches a mapping value m\nthat includes fields f<sub>1</sub>, f<sub>2</sub>, ... , f<sub>n</sub> if\np<sub>i</sub> matches the value of field f<sub>i</sub> for each i in 1 to n; if\nr is <code>...v</code> then a successful match causes a new mapping value\nconsisting of all the other fields to be assigned to <code>v</code>; a\nfield-binding-pattern consisting of just a variable-name <code>x</code> is\nequivalent to a field-binding-pattern <code>x: x</code>;\n</li>\n<li>an error-binding-pattern error ET(p<sub>m</sub>, p<sub>c</sub>,\nf<sub>1</sub> = p<sub>1</sub>, f<sub>2</sub> = p<sub>2</sub>, ..., f<sub>n</sub>\n= p<sub>n</sub>, r) matches an error value e if\n<ul>\n<li>e has a message that matches p<sub>m</sub>,</li>\n<li>if p<sub>c</sub> is present, e has a cause that matches p<sub>c</sub>,</li>\n<li>e has a detail record that has fields f<sub>1</sub>, f<sub>2</sub>, ... ,\nf<sub>n</sub> such that p<sub>i</sub> matches the value of field f<sub>i</sub>\nfor each i in 1 to n,</li>\n<li>if ET is present, the shape of e is in ET,</li>\n<li>if r is <code>...v</code>, then a successful match causes a new mapping\nvalue consisting of all fields of the detail record other than f<sub>1</sub>,\nf<sub>2</sub>, ... , f<sub>n</sub> to be assigned to <code>v</code>;</li>\n</ul>\n</li>\n</ul>\n<p>\nAll the variables in a binding-pattern must be distinct e.g. [x, x] is not\nallowed.\n</p>\n<p>\nGiven a type descriptor for every variable in a binding-pattern, there is a type\ndescriptor for the binding-pattern that will contain a value just in case that\nthe binding pattern successfully matches the value causing each variable to be\nassigned a value belonging to the type descriptor for that variable.\n</p>\n<ul>\n<li>for a capture-binding-pattern, the type descriptor is the type descriptor\nfor that variable;</li>\n<li>for a wildcard-binding-pattern, the type descriptor is any</li>\n<li>for a list-binding-pattern, the type descriptor is a tuple type descriptor;</li>\n<li>for a mapping-binding-pattern, the type descriptor is a record type\ndescriptor;</li>\n<li>for an error-binding-pattern, the type descriptor is an error type\ndescriptor.</li>\n</ul>\n\n</section>\n<section>\n<h4 id=\"section_5.9.2\">5.9.2 Typed binding patterns</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"typed-binding-pattern\">typed-binding-pattern</span> := <a href=\"#inferable-type-descriptor\"><span class=\"ntref\">inferable-type-descriptor</span></a> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n<span class=\"ntdfn\" id=\"inferable-type-descriptor\">inferable-type-descriptor</span> := <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> | <code>var</code>\n</pre>\n<p>\nA typed-binding-pattern combines a type-descriptor and a binding-pattern, and is\nused to create the variables occurring in the binding-pattern. If\n<code>var</code> is used instead of a type-descriptor, it means the type is\ninferred.\n</p>\n<p>\nThere are two ways in which a typed-binding-pattern can be used.\n</p>\n<ul>\n<li>\n<em>Single use</em>. In the language syntax, this kind of use of a\ntyped-binding-pattern is usually followed by <code>=</code> (the only case where\nit is not followed by <code>=</code> is when it follows <code>on fail</code>).\nThe typed-binding-pattern is matched once against the result of evaluating an\nexpression. When <code>var</code> is used, the type is inferred from the static\ntype of the expression (in the <code>on fail</code> case there can be multiple\nexpressions from which it is inferred); in this case, it is an error if the\nintersection of <code>error</code> and the inferred type is non-empty, the\nbinding-pattern of the typed-binding-pattern is a capture-binding-pattern, and\nthe variable referenced in the capture-binding-pattern is not used. It is an\nerror if the type-descriptor in the typed-binding-pattern is\n<code>never</code>.</li>\n<li>\n<em>Iterative use</em>. In the language syntax, this kind of use of a\ntyped-binding-pattern is followed by the <code>in</code> keyword. An iterator is\ncreated from the result of evaluating an expression, and the\ntyped-binding-pattern is matched against each value returned by the iterator.\nWhen <code>var</code> is used, the type is inferred to be T, where the static\ntype of the expression is an iterable type with value type T.</li>\n</ul>\n<p>\nThe simplest and most common form of a typed-binding-pattern is for the binding\npattern to consist of just a variable name. In this case, the variable is\nconstrained to contain only values matching the type descriptor.\n</p>\n<p>\nWhen the binding pattern is more complicated, the binding pattern must be\nconsistent with the type-descriptor, so that the type-descriptor unambiguously\ndetermines a type for each variable occurring in the binding pattern. A binding\npattern occurring in a typed-binding-pattern must also be irrefutable with\nrespect to the type of value against which it is to be matched. In other words,\nthe compiler will ensure that matching such a binding pattern against a value\nwill never fail at runtime.\n</p>\n</section>\n<section>\n<h4 id=\"section_5.9.3\">5.9.3 Variable and identifier scoping</h4>\n<p>\nFor every variable, there is place in the program that declares it. Variables\nare lexically scoped: every variable declaration has a scope which determines\nthe region of the program within which the variable can be referenced.\n</p>\n<p>\nThere are two kinds of scope: module-scope and block-scope. A variable with\nmodule-scope can be referenced anywhere within a module; if declared\n<code>public</code>, it can also be referenced from outside the module.\n</p>\n<p>\nIdentifiers with module-scope are used to identify not only variables but other\nmodule-level entities such as functions. Within module-scope, identifiers are\nseparated into three symbol spaces:\n</p>\n<ul>\n<li>the <em>main</em> symbol space includes identifiers for variables,\nconstants, types, functions and other identifiers that do not belong to any of\nthe other two symbol spaces;</li>\n<li>the <em>prefix</em> symbol space contains prefixes declared by import\ndeclarations and XML namespace declaration statements;</li>\n<li>the <em>annotation tag</em> symbol space contains annotation tags declared\nby annotation declarations.</li>\n</ul>\n<p>\nThe prefix symbol space is special in that it is associated with a source part\nrather than a module.\n</p>\n<p>\nBlock-scope is divided into symbol spaces in the same way as module-scope,\nexcept that block-scope does not have a symbol space for annotation tags, since\nannotation tags cannot be declared with block-scope.\n</p>\n<p>\nAn identifier declared with block-scope can be referenced only within a\nparticular block (always delimited with curly braces). Block-scope variables are\ncreated by a variety of different constructs, many of which use a\ntyped-binding-pattern. Parameters are treated as read-only variables with\nblock-scope.\n</p>\n<p>\nIt is not an error if an identifier is declared with block-scope and there is\nalready a declaration of the same identifier in the same symbol space with\nmodule-scope. In this case, the block-scope declaration will hide the\nmodule-scope declaration for the region where the block-scope declaration is in\nscope. However, it is a compile error if an identifier is declared with\nblock-scope and its scope overlaps with the scope of another declaration of the\nsame identifier in the same symbol space also with block-scope.\n</p>\n</section>\n</section>\n</section>\n<section>\n<h2 id=\"expressions\">6. Expressions</h2>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"expression\">expression</span> := \n   <a href=\"#literal\"><span class=\"ntref\">literal</span></a>\n   | <a href=\"#string-template-expr\"><span class=\"ntref\">string-template-expr</span></a>\n   | <a href=\"#xml-template-expr\"><span class=\"ntref\">xml-template-expr</span></a>\n   | <a href=\"#raw-template-expr\"><span class=\"ntref\">raw-template-expr</span></a>\n   | <a href=\"#structural-constructor-expr\"><span class=\"ntref\">structural-constructor-expr</span></a>\n   | <a href=\"#object-constructor-expr\"><span class=\"ntref\">object-constructor-expr</span></a>\n   | <a href=\"#new-expr\"><span class=\"ntref\">new-expr</span></a>\n   | <a href=\"#variable-reference-expr\"><span class=\"ntref\">variable-reference-expr</span></a>\n   | <a href=\"#field-access-expr\"><span class=\"ntref\">field-access-expr</span></a>\n   | <a href=\"#optional-field-access-expr\"><span class=\"ntref\">optional-field-access-expr</span></a>\n   | <a href=\"#xml-attribute-access-expr\"><span class=\"ntref\">xml-attribute-access-expr</span></a>\n   | <a href=\"#annot-access-expr\"><span class=\"ntref\">annot-access-expr</span></a>\n   | <a href=\"#member-access-expr\"><span class=\"ntref\">member-access-expr</span></a>\n   | <a href=\"#function-call-expr\"><span class=\"ntref\">function-call-expr</span></a>\n   | <a href=\"#method-call-expr\"><span class=\"ntref\">method-call-expr</span></a>\n   | <a href=\"#error-constructor-expr\"><span class=\"ntref\">error-constructor-expr</span></a>\n   | <a href=\"#anonymous-function-expr\"><span class=\"ntref\">anonymous-function-expr</span></a>\n   | <a href=\"#let-expr\"><span class=\"ntref\">let-expr</span></a>\n   | <a href=\"#type-cast-expr\"><span class=\"ntref\">type-cast-expr</span></a>\n   | <a href=\"#typeof-expr\"><span class=\"ntref\">typeof-expr</span></a>\n   | <a href=\"#unary-logical-expr\"><span class=\"ntref\">unary-logical-expr</span></a>\n   | <a href=\"#nil-lifted-expr\"><span class=\"ntref\">nil-lifted-expr</span></a>\n   | <a href=\"#range-expr\"><span class=\"ntref\">range-expr</span></a>\n   | <a href=\"#relational-expr\"><span class=\"ntref\">relational-expr</span></a>\n   | <a href=\"#is-expr\"><span class=\"ntref\">is-expr</span></a>\n   | <a href=\"#equality-expr\"><span class=\"ntref\">equality-expr</span></a>\n   | <a href=\"#logical-expr\"><span class=\"ntref\">logical-expr</span></a>\n   | <a href=\"#conditional-expr\"><span class=\"ntref\">conditional-expr</span></a>\n   | <a href=\"#checking-expr\"><span class=\"ntref\">checking-expr</span></a>\n   | <a href=\"#trap-expr\"><span class=\"ntref\">trap-expr</span></a>\n   | <a href=\"#query-expr\"><span class=\"ntref\">query-expr</span></a>\n   | <a href=\"#xml-navigate-expr\"><span class=\"ntref\">xml-navigate-expr</span></a>\n   | <a href=\"#transactional-expr\"><span class=\"ntref\">transactional-expr</span></a>\n   | <code>(</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>)</code>\n</pre>\n<p>\nFor simplicity, the expression grammar is ambiguous. The following table shows\nthe various types of expression in decreasing order of precedence, together with\nassociativity.\n</p>\n<table>\n  <tr>\n   <td><strong>Operator</strong></td>\n   <td><strong>Associativity</strong></td>\n  </tr>\n  <tr>\n   <td>\n<code>m:x</code>\n<br>\n<code>x.k</code>\n<br>\n<code>x.@a</code>\n<br>\n<code>f(x)</code>\n<br>\n<code>x.f(y)</code>\n<br>\n<code>x[y]</code>\n<br>\n<code>new T(x)</code>\n   </td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>+x</code>\n<br>\n<code>-x</code>\n<br>\n<code>~x</code>\n<br>\n<code>!x</code>\n<br>\n<code>&lt;T&gt; x</code>\n<br>\n<code>typeof x</code>\n<br>\n<code>check x</code>\n<br>\n<code>checkpanic x</code>\n   </td>\n   <td></td>\n  </tr>\n  <tr>\n   <td>\n<code>x * y</code>\n<br>\n<code>x / y</code>\n<br>\n<code>x % y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x + y</code>\n<br>\n<code>x - y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x &lt;&lt; y</code>\n<br>\n<code>x &gt;&gt; y</code>\n<br>\n<code>x &gt;&gt;&gt; y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x ... y</code>\n<br>\n<code>x ..&lt; y</code>\n   </td>\n   <td>non</td>\n  </tr>\n  <tr>\n   <td>\n<code>x &lt; y</code>\n<br>\n<code>x &gt; y</code>\n<br>\n<code>x &lt;= y</code>\n<br>\n<code>x &gt;= y</code>\n<br>\n<code>x is y</code>\n<br>\n<code>x !is y</code>\n   </td>\n   <td>non</td>\n  </tr>\n  <tr>\n   <td>\n<code>x == y</code>\n<br>\n<code>x != y</code>\n<br>\n<code>x === y</code>\n<br>\n<code>x !== y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x &amp; y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x ^ y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td>\n<code>x | y</code>\n   </td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x &amp;&amp; y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x || y</code></td>\n   <td>left</td>\n  </tr>\n  <tr>\n   <td><code>x ?: y</code></td>\n   <td>right</td>\n  </tr>\n  <tr>\n   <td><code>x ? y : z</code></td>\n   <td>right</td>\n  </tr>\n  <tr>\n   <td>\n<code>(x) =&gt; y</code>\n<br>\n<code>let x = y in z</code>\n<br>\n<code>from x in y select z</code>\n<br>\n<code>trap x</code>\n   </td>\n   <td>right</td>\n  </tr>\n\n</table>\n<section>\n<h3 id=\"section_6.1\">6.1 Expression evaluation</h3>\n<p>\nWhen the evaluation of an expression completes normally, it produces a result,\nwhich is a value. The evaluation of an expression may also complete abruptly.\nThere are two kinds of abrupt completion: check-fail and panic. With both kinds\nof abrupt completion there is an associated value, which always has basic type\nerror.\n</p>\n<p>\nThe following sections describes how each kind expression is evaluated, assuming\nthat evaluation of subexpressions complete normally. Except where explicitly\nstated to the contrary, expressions handle abrupt completion of subexpressions\nas follows. If in the course of evaluating an expression E, the evaluation of\nsome subexpression E1 completes abruptly, then then evaluation of E also\ncompletes abruptly in the same way as E1.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.2\">6.2 Static typing of expressions</h3>\n<p>\nA type is computed for every expression at compile time; this is called the\nstatic type of the expression. The compiler and runtime together guarantee that\nif the evaluation of an expression at runtime completes normally, then the\nresulting value will belong to the static type. A type is also computed for\ncheck-fail abrupt completion, which will be a (possibly empty) subtype of error;\nhowever, for panic abrupt completion, no type is computed.\n</p>\n<p>\nIt is an error if the static type of an expression is <code>never</code>, except\nin cases where the expression is one that this specification explicitly permits\nto have static type <code>never</code> and the expression occurs in a context\nwhere this specification explicitly permits an expression with static type\n<code>never</code> to occur.\n</p>\n<p>\nThe detailed rules for the static typing of expressions are quite elaborate and\nare not yet specified completely in this document.\n</p>\n\n<section>\n<h4 id=\"lax_static_typing\">6.2.1 Lax static typing</h4>\n<p>\nIn some situations it is convenient for static typing to be less strict than\nnormal. One such situation is when processing data in Ballerina using a static\ntype that is less precise than the type that the data is in fact expected to\nbelong to. For example, when the Ballerina <code>json</code> type is used for\nthe processing of data in JSON format, the Ballerina static type will not\ncapture the constraints of the particular JSON format that is been processed.\n</p>\n<p>\nBallerina supports this situation through the concept of lax static typing,\nwhich has two parts: the first part is that a type descriptor can be classified\nas lax; the second part is that particular kinds of expression can have less\nstrict static typing rules when the static type of a subexpression is described\nby a lax type descriptor. With these less strict rules, a potential type error\nthat would have been a compile-time error according to the normal strict static\ntyping rules would instead be allowed at compile-time and result in an error\nvalue at runtime; the effect is thus that some static type-checking is instead\ndone dynamically.\n</p>\n<p>\nIn this version of Ballerina, only the first step has been taken towards\nsupporting this concept. There is a fixed set of type descriptors that are\nclassified as lax: specifically <code>json</code> is lax, and\n<code>map&lt;T&gt;</code> is lax if T is lax. The only kinds of expression for\nwhich lax typing rules are specified are field-access-expr,\noptional-field-access-expr and checking-expr.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_6.2.2\">6.2.2 Contextually expected type</h4>\n<p>\nFor a context in which an expression occurs, there may be a type descriptor that\ndescribes the static type that the expression is expected to have. This is\ncalled the <em>contextually expected type</em>. For example, if a variable is\ndeclared by a type descriptor TD, then TD will be the contextually expected type\nfor the expression initializing the variable. A type descriptor must be\nresolved before it can be used to provide a contextually expected type.</p>\n<p>\nMany kinds of expression that construct values use the contextually expected\ntype to determine the type of value constructed, rather than requiring the type\nto be specified explicitly. For each such kind of expression, there is a set of\nbasic types (most often consisting of a single basic type) that the value\nconstructed by that kind of expression will always belong to. In this case, the\ncontextually expected type is narrowed by intersecting it with this set of basic\ntypes; this narrowed type is called the <em>applicable</em> contextually\nexpected type. The narrowing is performed on the type descriptor by first\nnormalizing the type descriptor into a union, where each member of the union is\nnot a union and describes shapes from a single basic type, and then eliminating\nany members of the union with the wrong basic type; if this leaves no members,\nthen it is a compile-time error; if it leaves a single member of the union, then\nthe the applicable contextually expected type is this single member, otherwise\nit is a union of the remaining members.\n</p>\n<p>\nNote the language provides a way to say that the type of a variable is to be\ninferred from the static type of the expression used to initialize the variable.\nIn this case, there is no contextually expected type for the evaluation of the\nexpression. Not having a contextually expected type is different from having a\ncontextually expected type that allows all values.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.2.3\">6.2.3 Precise and broad types</h4>\n<p>\nThere is an additional complexity relating to inferring types. Expressions in\nfact have two static types, a precise type and a broad type. Usually, the\nprecise type is used. However, in a few situations, using the precise type would\nbe inconvenient, and so Ballerina uses the broad type. In particular, the broad\ntype is used for inferring the type of an implicitly typed non-final variable.\nSimilarly, the broad type is used when it is necessary to infer the member type\nof the inherent type of a structured value.\n</p>\n<p>\nIn most cases, the precise type and the broad type of an expression are the\nsame. For a compound expression, the broad type of an expression is computed\nfrom the broad type of the sub-expressions in the same way as the precise type\nof the expression is computed from the precise type of sub-expressions.\nTherefore in most cases, there is no need to mention the distinction between\nprecise and broad types.\n</p>\n<p>\nThe most important case where the precise type and the broad type are different\nis literals. The precise type is a singleton type containing just the shape of\nthe value that the literal represents, whereas the broad type is the precise\ntype widened to contain the entire basic type of which it is a subtype. For\nexample, the precise type of the string literal <code>\"X\"</code> is the\nsingleton type <code>\"X\"</code>, but the broad type is <code>string</code>.\n</p>\n</section>\n<section>\n<h4 id=\"singleton_typing\">6.2.4 Singleton typing</h4>\n<p>\nThe specification of a particular kind of compound expression may say that the\nstatic type of the result of an expression E is a type T <em>modified by the\nusual singleton typing rules</em>. This means that when all subexpressions of\nthe compound expression have a singleton type, then the static type of E is a\nsingleton subtype of T. This subtype is computed by evaluating the expression at\ncompile-time with operands whose values belong to the corresponding singleton\ntypes.\n</p>\n</section>\n<section>\n<h4 id=\"nil_lifting\">6.2.5 Nil lifting</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"nil-lifted-expr\">nil-lifted-expr</span> := \n  <a href=\"#unary-numeric-expr\"><span class=\"ntref\">unary-numeric-expr</span></a>\n  | <a href=\"#multiplicative-expr\"><span class=\"ntref\">multiplicative-expr</span></a>\n  | <a href=\"#additive-expr\"><span class=\"ntref\">additive-expr</span></a>\n  | <a href=\"#shift-expr\"><span class=\"ntref\">shift-expr</span></a>\n  | <a href=\"#binary-bitwise-expr\"><span class=\"ntref\">binary-bitwise-expr</span></a>\n</pre>\n<p>\nA <code>nil-lifted-expr</code> supports nil lifting for its operands. This means\nthat the operators used in a <code>nil-lifted-expr</code> have two forms: an\nunderlying form and a lifted form. The underlying form of the operator is used\nwhen the static type of the subexpressions for all operands does not allow nil;\nthis form of the operator is described in the section for each kind of operator.\nThe lifted form of the operator is used when the static type of the\nsubexpressions for one or more operands does allow nil; the semantics of this\nform of the operator are derived from the underlying form as described in this\nsection.\n</p>\n<p>\nA <code>nil-lifted-expr</code> is evaluated by evaluating the subexpressions for\nevery operand. If the result of any of these evaluations is nil, then the result\nof the <code>nil-lifted-expr</code> is nil. Otherwise, the evaluation is\ncompleted in the same way as with the underlying form of the operator.\n</p>\n<p>\nThe static types of the operand subexpressions with nil removed must be valid\nfor the underlying form of the operator. The static type of the\n<code>nil-lifted-expr</code> is T<code>?</code>, where T is what the static type\nof the <code>nil-lifted-expr</code> would be if nil was removed from the static\ntype of the operand subexpressions, except that the usual <a href=\"#singleton_rules\">singleton typing</a> rules are not applied in computing\nT. (The singleton typing rules are applied to the static types before the\nremoval of nil and thus have no effect, because the lifted form of the operator\nis never applicable when all operands have singleton type.)\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_6.2.6\">6.2.6 Isolated expressions</h4>\n<p>\nBallerina defines requirements for when an expression is <em>isolated</em>. If\nan expression meets the requirements, then it is compile-time guaranteed that\nthe value of the expression will be an isolated root and will not be aliased.\n</p>\n<p>\nIf the static type of an expression is immutable, i.e. a subtype of\n<code>readonly</code>, or an isolated object, i.e. a subtype of <code>isolated\nobject {}</code>, then the expression is isolated.\n</p>\n<p>\nAlso, an expression of one of the following syntactic kinds is isolated if all\nits subexpressions are isolated (regardless of its static type):\n</p>\n<ul>\n<li><code>list-constructor-expr</code></li>\n<li><code>table-constructor-expr</code></li>\n<li><code>mapping-constructor-expr</code></li>\n<li><code>xml-template-expr</code></li>\n<li><code>raw-template-expr</code></li>\n<li><code>type-cast-expr</code></li>\n<li><code>checking-expr</code></li>\n<li><code>trap-expr</code></li>\n<li><code>conditional-expr</code></li>\n</ul>\n<p>\nThe section for each kind of expression will describe any alternative conditions\nunder which that kind of expression is also isolated.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_6.3\">6.3 Casting and conversion</h3>\n<p>\nBallerina makes a sharp distinction between type conversion and type casting.\n</p>\n<p>\nCasting a value does not change the value. Any value always belongs to multiple\ntypes. Casting means taking a value that is statically known to be of one type,\nand using it in a context that requires another type; casting checks that the\nvalue is of that other type, but does not change the value.\n</p>\n<p>\nConversion is a process that takes as input a value of one type and produces as\noutput a possibly distinct value of another type. Note that conversion does not\nmutate the input value.\n</p>\n<p>\nBallerina always requires programmers to make conversions explicit, even between\ndifferent types of number; there are no implicit conversions.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.4\">6.4 Constant expressions</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"const-expr\">const-expr</span> := \n   <a href=\"#literal\"><span class=\"ntref\">literal</span></a>\n   | <a href=\"#string-template-expr\"><span class=\"ntref\">string-template-expr</span></a>\n   | <a href=\"#xml-template-expr\"><span class=\"ntref\">xml-template-expr</span></a>\n   | <a href=\"#raw-template-expr\"><span class=\"ntref\">raw-template-expr</span></a>\n   | <a href=\"#structural-constructor-expr\"><span class=\"ntref\">structural-constructor-expr</span></a>\n   | <a href=\"#constant-reference-expr\"><span class=\"ntref\">constant-reference-expr</span></a>\n   | <a href=\"#type-cast-expr\"><span class=\"ntref\">type-cast-expr</span></a>\n   | <a href=\"#unary-logical-expr\"><span class=\"ntref\">unary-logical-expr</span></a>\n   | <a href=\"#nil-lifted-expr\"><span class=\"ntref\">nil-lifted-expr</span></a>\n   | <a href=\"#range-expr\"><span class=\"ntref\">range-expr</span></a>\n   | <a href=\"#relational-expr\"><span class=\"ntref\">relational-expr</span></a>\n   | <a href=\"#is-expr\"><span class=\"ntref\">is-expr</span></a>\n   | <a href=\"#equality-expr\"><span class=\"ntref\">equality-expr</span></a>\n   | <a href=\"#logical-expr\"><span class=\"ntref\">logical-expr</span></a>\n   | <a href=\"#conditional-expr\"><span class=\"ntref\">conditional-expr</span></a>\n   | <code>(</code> <a href=\"#const-expr\"><span class=\"ntref\">const-expr</span></a> <code>)</code>\n</pre>\n<p>\nA value resulting from the evaluation of a <code>const-expr</code> always has\nits read-only bit on.\n</p>\n<p>\nWithin a <code>const-expr</code>, any nested expression must also be a\nconst-expr.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"constant-reference-expr\">constant-reference-expr</span> := <a href=\"#variable-reference-expr\"><span class=\"ntref\">variable-reference-expr</span></a>\n</pre>\n<p>\nA <code>constant-reference-expr</code> must reference a constant defined with\n<code>module-const-decl</code>.\n</p>\n<p>\nA <code>const-expr</code> is evaluated at compile-time. Constructors called\nwithin a <code>const-expr</code> construct their values as immutable. Note that\nthe syntax of const-expr does not allow for the construction of error values.\nThe result of a <code>const-expr</code> is always immutable.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"simple-const-expr\">simple-const-expr</span> :=\n  <a href=\"#nil-literal\"><span class=\"ntref\">nil-literal</span></a>\n  | <a href=\"#boolean-literal\"><span class=\"ntref\">boolean-literal</span></a>\n  | [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a>\n  | [<a href=\"#Sign\"><span class=\"ntref\">Sign</span></a>] <a href=\"#floating-point-literal\"><span class=\"ntref\">floating-point-literal</span></a>\n  | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>\n  | <a href=\"#constant-reference-expr\"><span class=\"ntref\">constant-reference-expr</span></a>\n</pre>\n<p>\nA simple-const-expr is a restricted form of const-expr used in contexts where\nvarious forms of constructor expression would not make sense. Its semantics are\nthe same as a const-expr.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.5\">6.5 Literals</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"literal\">literal</span> :=\n   <a href=\"#nil-literal\"><span class=\"ntref\">nil-literal</span></a>\n   | <a href=\"#boolean-literal\"><span class=\"ntref\">boolean-literal</span></a>\n   | <a href=\"#numeric-literal\"><span class=\"ntref\">numeric-literal</span></a>\n   | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>\n   | <a href=\"#byte-array-literal\"><span class=\"ntref\">byte-array-literal</span></a>\n<span class=\"ntdfn\" id=\"numeric-literal\">numeric-literal</span> := <a href=\"#int-literal\"><span class=\"ntref\">int-literal</span></a> | <a href=\"#floating-point-literal\"><span class=\"ntref\">floating-point-literal</span></a>\n</pre>\n<p>\nA numeric-literal represents a value belonging to one of the basic types int,\nfloat or decimal. The basic type to which the value belongs is determined in\nthree stages.\n</p>\n<ol>\n<li>The syntactic form of numeric literal determines which of int, float and\ndecimal are candidates:\n<ul>\n<li>if the numeric-literal includes a <code>FloatTypeSuffix</code> or is a\n<code>HexFloatingPointLiteral</code>, then the the only candidate is float;</li>\n<li>if the numeric-literal includes a <code>DecimalTypeSuffix</code>, then the\nonly candidate is decimal;</li>\n<li>otherwise, if the numeric-literal is a <code>floating-point-literal</code>,\nthe candidates are float and decimal;</li>\n<li>otherwise, all three basic types are candidates.</li>\n</ul>\n</li>\n<li>Any candidate basic type N such that the intersection of N with the\ncontextually expected type is empty is eliminated, unless this would eliminate\nall candidates remaining after the first stage.</li>\n<li>From remaining candidates, the first in the order int, float, decimal is\nselected.</li>\n</ol>\n<p>\nThe precise type of a numeric-literal is the singleton type containing just the\nshape of the value that the numeric-literal represents. The broad type is\nthe basic type of which the precise type is a subset.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"byte-array-literal\">byte-array-literal</span> := <a href=\"#Base16Literal\"><span class=\"ntref\">Base16Literal</span></a> | <a href=\"#Base64Literal\"><span class=\"ntref\">Base64Literal</span></a>\n<span class=\"ntdfn\" id=\"Base16Literal\">Base16Literal</span> := <code>base16</code> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code> <a href=\"#HexGroup\"><span class=\"ntref\">HexGroup</span></a>* <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code>\n<span class=\"ntdfn\" id=\"HexGroup\">HexGroup</span> := <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#HexDigit\"><span class=\"ntref\">HexDigit</span></a>\n<span class=\"ntdfn\" id=\"Base64Literal\">Base64Literal</span> := <code>base64</code> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code> <a href=\"#Base64Group\"><span class=\"ntref\">Base64Group</span></a>* [<a href=\"#PaddedBase64Group\"><span class=\"ntref\">PaddedBase64Group</span></a>] <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <code>`</code>\n<span class=\"ntdfn\" id=\"Base64Group\">Base64Group</span> :=\n   <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a>\n<span class=\"ntdfn\" id=\"PaddedBase64Group\">PaddedBase64Group</span> :=\n   <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#PaddingChar\"><span class=\"ntref\">PaddingChar</span></a>\n   | <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#Base64Char\"><span class=\"ntref\">Base64Char</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#PaddingChar\"><span class=\"ntref\">PaddingChar</span></a> <a href=\"#WS\"><span class=\"ntref\">WS</span></a> <a href=\"#PaddingChar\"><span class=\"ntref\">PaddingChar</span></a>\n<span class=\"ntdfn\" id=\"Base64Char\">Base64Char</span> := <code>A</code> .. <code>Z</code> | <code>a</code> .. <code>z</code> | <code>0</code> .. <code>9</code> | <code>+</code> | <code>/</code>\n<span class=\"ntdfn\" id=\"PaddingChar\">PaddingChar</span> := <code>=</code>\n<span class=\"ntdfn\" id=\"WS\">WS</span> := <a href=\"#WhiteSpaceChar\"><span class=\"ntref\">WhiteSpaceChar</span></a>*\n</pre>\n<p>\nThe static type of byte-array-literal is <code>byte[N]</code>, where N is the\nnumber of bytes encoded by the Base16Literal or Base64Literal. The inherent type\nof the array value created is also <code>byte[N]</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.6\">6.6 Template expressions</h3>\n<p>\nTemplate expressions make use of strings enclosed in backticks with interpolated\nexpressions.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"BacktickString\">BacktickString</span> :=\n  <code>`</code> <a href=\"#BacktickItem\"><span class=\"ntref\">BacktickItem</span></a>* <a href=\"#Dollar\"><span class=\"ntref\">Dollar</span></a>* <code>`</code>\n<span class=\"ntdfn\" id=\"BacktickItem\">BacktickItem</span> :=\n   <a href=\"#BacktickSafeChar\"><span class=\"ntref\">BacktickSafeChar</span></a>\n   | <a href=\"#BacktickDollarsSafeChar\"><span class=\"ntref\">BacktickDollarsSafeChar</span></a>\n   | <a href=\"#Dollar\"><span class=\"ntref\">Dollar</span></a>* <a href=\"#interpolation\"><span class=\"ntref\">interpolation</span></a>\n<span class=\"ntdfn\" id=\"interpolation\">interpolation</span> := <code>${</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"BacktickSafeChar\">BacktickSafeChar</span> := ^ ( <code>`</code> | <code>$</code> )\n<span class=\"ntdfn\" id=\"BacktickDollarsSafeChar\">BacktickDollarsSafeChar</span> :=  <code>$</code>+ ^ ( <code>{</code> | <code>`</code> | <code>$</code>)\n<span class=\"ntdfn\" id=\"Dollar\">Dollar</span> := <code>$</code>\n</pre>\n\n<section>\n<h4 id=\"section_6.6.1\">6.6.1 String template expression</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"string-template-expr\">string-template-expr</span> := <code>string</code> <a href=\"#BacktickString\"><span class=\"ntref\">BacktickString</span></a>\n</pre>\n<p>\nA <code>string-template-expr</code> interpolates the results of evaluating\nexpressions into a literal string. The static type of the expression in each\ninterpolation must be a subtype of\n<code>boolean|int|float|decimal|string</code>. Within a\n<code>BacktickString</code>, every character that is not part of an\n<code>interpolation</code> is interpreted as a literal character. A\nstring-template-expr is evaluated by evaluating the expression in each\ninterpolation in the order in which they occur, and converting the result of the\neach evaluation to a string using the <a href=\"#ToString\">ToString</a> abstract\noperation with the direct style. The result of evaluating the\n<code>string-template-expr</code> is a string comprising the literal characters\nand the results of evaluating and converting the interpolations, in the order in\nwhich they occur in the <code>BacktickString</code>.\n</p>\n<p>\nThe static type of the result of the string-template-expr is\n<code>string</code>, modified by the usual <a href=\"#singleton_rules\">singleton\ntyping</a> rules.\n</p>\n<p>\nA literal <code>`</code> can be included in string template by using an\ninterpolation <code>${\"`\"}</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.6.2\">6.6.2 XML template expression</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-template-expr\">xml-template-expr</span> := <code>xml</code> <a href=\"#BacktickString\"><span class=\"ntref\">BacktickString</span></a>\n</pre>\n<p>\nAn XML template expression constructs an xml value as follows:\n</p>\n<ol>\n<li>The backtick string is parsed to produce a string of literal characters with\ninterpolated expressions</li>\n<li>The result of the previous step is parsed as XML content. More precisely, it\nis parsed using the production <code>content</code> in the W3C XML\nRecommendation. For the purposes of parsing as XML, each interpolated expression\nis interpreted as if it were an additional character allowed by the CharData and\nAttValue productions but no other. The result of this step is an XML Infoset\nconsisting of an ordered list of information items such as could occur as the\n[children] property of an element information item, except that interpolated\nexpressions may occur as Character Information Item or in the [normalized value]\nof an Attribute Information Item. Interpolated expressions are not allowed in\nthe value of a namespace attribute.</li>\n<li>This infoset is then converted to an xml value, as described in the <a href=\"#XML\">XML type</a> section, together with an ordered list of interpolated\nexpressions, and for each interpolated expression a position within the XML\nvalue at which the value of the expression is to be inserted.</li>\n<li>The static type of an expression occurring in an attribute value must be a\nsimple type and must not be nil. The static type type of an expression occurring\nin content can either be xml or a non-nil simple type.</li>\n<li>When the xml-template-expr is evaluated, the interpolated expressions are evaluated\nin the order in which they occur in the <code>BacktickString</code>, and\nconverted to strings if necessary. A new copy is made of the xml value and the\nresult of the expression evaluations are inserted into the corresponding\nposition in the newly created xml value. This xml value is the result of the\nevaluation.</li>\n</ol>\n<p>\nAn xml-template-expr occurring within a const-expr will construct an xml value\nthat has its read-only bit on.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_6.6.3\">6.6.3 Raw template expression</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"raw-template-expr\">raw-template-expr</span> := <a href=\"#BacktickString\"><span class=\"ntref\">BacktickString</span></a>\n</pre>\n<p>\nA raw-template-expr constructs an object belonging to the abstract RawTemplate\nobject type.\n</p>\n<p>\nA raw-template-expr is evaluated by\n</p>\n<ul>\n<li>constructing an array <var>v</var> whose members are the result of\nevaluating each interpolation's expression in the order in which they occur in\nthe BacktickString;</li>\n<li>constructing an object with two fields\n<ul>\n<li>an <code>insertions</code> field with value <var>v</var>\n</li>\n<li>a <code>strings</code> field consisting of a read-only array of strings\ncontaining the characters in BacktickString outside of interpolations, split at\nthe interpolation points; the length of the this array is one more than the\nlength of <var>v</var>.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe result of the raw-template-expr is the newly constructed object.\n</p>\n<p>\nFor each raw-template-expr there is a separate class, which\nis a subtype of the RawTemplate type. The objects constructed by a\nraw-template-expr belong to this class. The type of the\n<code>insertions</code> field is determined from the contextually expected type\nor the static type of the expressions in the BacktickString in the same way as\nwith a list-constructor-expr. The <code>strings</code> and\n<code>insertions</code> fields will be read-only if required by the contextually\nexpected type. The value of the <code>strings</code> field is constructed once\nby the class. The value of the <code>insertions</code> is\nconstructed once for each evaluation of the raw-template-expr.\n</p>\n\n</section>\n</section>\n\n<section>\n<h3 id=\"section_6.7\">6.7 Structural constructors</h3>\n<p>\nEach basic type of structure has its own expression syntax for constructing a\nvalue of the type.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"structural-constructor-expr\">structural-constructor-expr</span> := <a href=\"#list-constructor-expr\"><span class=\"ntref\">list-constructor-expr</span></a> | <a href=\"#table-constructor-expr\"><span class=\"ntref\">table-constructor-expr</span></a> | <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>\n</pre>\n\n<p>\nAn structural-constructor-expr occurring within a const-expr will construct a\nstructural value that has its read-only bit on.\n</p>\n\n<section>\n<h4 id=\"section_6.7.1\">6.7.1 List constructor</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"list-constructor-expr\">list-constructor-expr</span> := <code>[</code> [ <a href=\"#expr-list\"><span class=\"ntref\">expr-list</span></a> ] <code>]</code>\n<span class=\"ntdfn\" id=\"expr-list\">expr-list</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> (<code>,</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>)*\n</pre>\n<p>\nA list-constructor-expr creates a new list value. The members of the list come from evaluating each\nexpression in the expr-list in order.\n</p>\n<p>\nIf there is a contextually expected type, then the inherent type of the newly\ncreated list is derived from the applicable contextually expected type. If the\napplicable contextually expected type is a list type descriptor, then that used\nas the inherent type. If the applicable contextually expected type is a union\ntype descriptor, then any members of the union that do not contain list shapes\nof length N will be ignored, where N is the number of expressions in the\n<code>expr-list</code>; it is a compile-time error if this does not leave a\nsingle list type descriptor, which is then used as the inherent type. The static\ntype of the list-constructor-expr will be the same as the inherent type.\n</p>\n<p>\nIf there is no contextually expected type, then the inherent type will be a\ntuple-type-descriptor with a member-type-descriptor for each expression in the\nexpr-list; the type of each member-type-descriptor will be the broad type of the\ncorresponding expression in the expr-list.\n</p>\n<p>\nIf there is a contextually expected type, then the type that the inherent type\nrequires for each list member provides the contextually expected type for the\nexpression for the member; otherwise there is no contextually expected type for\nthe expressions for members.\n</p>\n<p>\nA member of a list can be filled in automatically if the <a href=\"#FillMember\">FillMember</a> abstract operation would succeed on it. The\ninherent type of a list establishes either a fixed length for the list or just a\nminimum length for the list, which may be zero. In either case, a list\nconstructor may specify only the first <var>k</var> members, provided that for\neach <var>i</var> from <var>k</var> + 1 up to the fixed length of the list, the\n<var>i</var>-th member can be filled in automatically.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_6.7.2\">6.7.2 Mapping constructor</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"mapping-constructor-expr\">mapping-constructor-expr</span> := <code>{</code> [<a href=\"#field\"><span class=\"ntref\">field</span></a> (<code>,</code> <a href=\"#field\"><span class=\"ntref\">field</span></a>)*] <code>}</code>\n<span class=\"ntdfn\" id=\"field\">field</span> := \n  <a href=\"#specific-field\"><span class=\"ntref\">specific-field</span></a>\n  | <a href=\"#computed-name-field\"><span class=\"ntref\">computed-name-field</span></a>\n  | <a href=\"#spread-field\"><span class=\"ntref\">spread-field</span></a>\n<span class=\"ntdfn\" id=\"specific-field\">specific-field</span> :=\n   [<code>readonly</code>] (<a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>) <code>:</code> <a href=\"#value-expr\"><span class=\"ntref\">value-expr</span></a>\n   | [<code>readonly</code>] <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"value-expr\">value-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"computed-name-field\">computed-name-field</span> := <code>[</code> <a href=\"#field-name-expr\"><span class=\"ntref\">field-name-expr</span></a> <code>]</code> <code>:</code> <a href=\"#value-expr\"><span class=\"ntref\">value-expr</span></a>\n<span class=\"ntdfn\" id=\"field-name-expr\">field-name-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"spread-field\">spread-field</span> := <code>...</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA mapping-constructor-expr creates a new mapping value. \n</p>\n<p>\nA specific-field specifies a single field, where the field name is known at\ncompile-time. A specific-field that consists of just a variable name\n<code><var>x</var></code> is equivalent to a field <code><var>x</var>:\n<var>x</var></code>.\n</p>\n<p>\nThe static type of the expression in a spread-field must allow only mapping\nvalues, i.e. must be a subtype of <code>map&lt;any|error&gt;</code>. All the\nfields of the mapping value that results from evaluating that expression are\nincluded in the mapping value being constructed. It is a compile-time error if\nthe static type of the expression in a spread-field allows a field that\nduplicates a specific-field or that could also occur in another spread-field.\nNote that a spread-field with an inclusive record type of <code>record { never\nx?; }</code> cannot duplicate a specific field for <code>x</code>.\n</p>\n<p>\nIf there is a contextually expected type, then the inherent type of the newly\ncreated mapping is derived from the applicable contextually expected type. If\nthe applicable contextually expected type is a mapping type descriptor, then\nthat used as the inherent type. If the applicable contextually expected type is\na union type descriptor, then any members of the union that are inconsistent\nwith the field names specified in a specific-field in the\nmapping-constructor-expr will be ignored; it is a compile-time error if this\ndoes not leave a single mapping type descriptor, which is then used as the\ninherent type. The static type of the mapping-constructor-expr will be the same\nas the inherent type.\n</p>\n<p>\nIf there is no contextually expected type, then the inherent type will be an\nexclusive-record-type-descriptor with an individual-field-descriptor for each\nspecific-field; the type of each field-descriptor will be the broad type of the\nvalue-expr in the field, unless the field is read-only in which case the type of\nthe field-descriptor will be the precise type. The static type of the expression\nin every spread-field will also be added to the inherent type. If there are\nfields specified as a computed-name-field, then there will also be a\nrecord-rest-descriptor <code>T...</code>, where <code>T</code> is the union of\nthe broad types of the value-expr in all such fields.\n</p>\n<p>\nIf a specific-field does not use a string-literal for the name of the field and\nthe inherent type descriptor is a record type descriptor, then the record type\ndescriptor must include an individual-field-descriptor for that field.\n</p>\n<p>\nIf the inherent type descriptor is a record type descriptor, a field will be\nadded to the constructed value using the default value from the type descriptor\nfor any field that is not specified explicitly in the mapping constructor and\nthat has a default value.\n</p>\n<p>\nIf there is a contextually expected type, then the type that the inherent type\nrequires for each field provides the contextually expected type for the\nvalue-expr in a field; otherwise there is no contextually expected type for the\nvalue-expr for fields. If there is a contextually expected type, the\ncontextually expected type for the expression in a spread-field is map&lt;T&gt;,\nwhere the T is the smallest type such that the inherent type is a subtype of\nmap&lt;T&gt;. The contextually expected type for a field-name-expr is string.\n</p>\n<p>\nA computed-name-field specifies a single field, where the name of the field is\nspecified by an expression enclosed in square brackets. A\nmapping-constructor-expr first constructs a mapping value without considering\nany computed-name-field. The effect of a computed-name-field is to modify the\nmember of the mapping with the specified name after the mapping has been\nconstructed. If the modification is incompatible with the inherent type, then\nthe mapping-constructor-expr will panic. The modifications are performed in the\norder in which the computed-name-fields occur in the mapping-constructor-expr.\n</p>\n<p>\nWhen the inherent type is equivalent to a map-type-descriptor, the order in\nwhich fields are added to mapping value being constructed (and thus the\niteration order of the fields) is the same as the order of the fields in the\nmapping-constructor-expr, except that all fields specified by a\ncomputed-named-field are added after all other fields.\n</p>\n<p>\nIf the applicable contextually expected type is a subtype of readonly, then the\nmapping will be constructed with its read-only bit on. If the inherent type\nmakes a specific field readonly, then that field will be constructed with its\nread-only bit on. A specific-field that starts with <code>readonly</code> will\nalso be constructed with its read-only bit on.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_6.7.3\">6.7.3 Table constructor</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"table-constructor-expr\">table-constructor-expr</span> := <code>table</code> [<a href=\"#key-specifier\"><span class=\"ntref\">key-specifier</span></a>] <code>[</code> [<a href=\"#row-list\"><span class=\"ntref\">row-list</span></a>] <code>]</code>\n<span class=\"ntdfn\" id=\"row-list\">row-list</span> := <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a> (<code>,</code> <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>)*\n</pre>\n<p>\nA table-constructor-expr creates a new table value. The members of the table\ncome from evaluating each mapping-constructor-expr in the row-list in order.\n</p>\n<p>\nFor example,\n</p>\n\n<pre>table key(email) [\n   { email: \"sanjiva@weerawarana.org\", firstName: \"Sanjiva\", lastName: \"Weerawarana\" },\n   { email: \"jjc@jclark.com\", firstName: \"James\", lastName: \"Clark\" }\n]\n</pre>\n<p>\nThe inherent type of the constructed table is a table type descriptor including\na key-specifier <code>table&lt;<var>T</var>&gt; key(<var>ks</var>)</code>, where\n<code><var>T</var></code> is the member type and <code><var>ks</var></code> is\nthe key sequence. The inherent type is determined from the contextually expected\ntype together with the table-constructor-expr. The static type of the\ntable-constructor-expr will be the same as this inherent type.\n</p>\n<p>\nIf there is a contextually expected type, then the member type of inherent type\nof the newly created table is derived from the applicable contextually expected\ntype, which must be a table-type-descriptor. If there is no contextually\nexpected type, then the member type of the inherent type is derived from the the\nstatic type of the expressions for the members: the member type will be the\nsmallest record type that is a supertype of the static types of all the\nexpressions in the row-list. It is an error if there is no contextually expected\ntype and the row-list is empty.\n</p>\n<p>\nThe key sequence of the inherent type comes from the key-specifier of applicable\ncontextually expected type or the key-specifier in the table-constructor-expr.\nIf both of these are present, then they must be the same. If neither of them are\npresent, then the key sequence is empty. The key sequence of the table value is\nthe same as that of its inherent type. The key sequence and member type must\nmeet the same consistency requirements as if they were specified together in a\n<a href=\"#tables\">table type descriptor</a>. For every field-name in the key\nsequence of the inherent type every mapping-constructor-expr in the row-list\nmust include a specific-field that has a value-expr that is a const-expr. It is\na compile-time error if two or more rows of the table have the same key value.\n</p>\n<p>\nIf there is a contextually expected type, then the type that the inherent type\nrequires for each table member provides the contextually expected type for the\nexpressions in the expr-list; otherwise there is no contextually expected type\nfor these expressions.\n</p>\n\n</section>\n</section>\n\n<section>\n<h3 id=\"section_6.8\">6.8 Object construction</h3>\n<p>\nThere are two kinds of expression that can be used to construct an object: with\nan object constructor expression, the methods and fields of the constructed\nobject are defined within the expression; with a new expression, the methods and\nfields come from a separate, named class definition.\n</p>\n\n<section>\n<h4 id=\"section_6.8.1\">6.8.1 Object constructor</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-constructor-expr\">object-constructor-expr</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#object-type-quals\"><span class=\"ntref\">object-type-quals</span></a> <code>object</code> [<a href=\"#type-reference\"><span class=\"ntref\">type-reference</span></a>] <a href=\"#object-constructor-block\"><span class=\"ntref\">object-constructor-block</span></a>\n<span class=\"ntdfn\" id=\"object-constructor-block\">object-constructor-block</span> := <code>{</code> <a href=\"#object-member\"><span class=\"ntref\">object-member</span></a>* <code>}</code>\n<span class=\"ntdfn\" id=\"object-member\">object-member</span> := <a href=\"#object-field\"><span class=\"ntref\">object-field</span></a> | <a href=\"#method-defn\"><span class=\"ntref\">method-defn</span></a> | <a href=\"#remote-method-defn\"><span class=\"ntref\">remote-method-defn</span></a> | <a href=\"#resource-method-defn\"><span class=\"ntref\">resource-method-defn</span></a>\n</pre>\n<p>\nThe resulting of evaluating an <code>object-constructor-expr</code> is an\nobject. The <code>object-constructor-expr</code> must specify\n<code>client</code> if any <code>method-defn</code> includes a\n<code>remote-qual</code>.\n</p>\n<p>\nThe annotations applying to the <code>object-constructor-expr</code> and its\nmembers are evaluated when the <code>object-constructor-expr</code> is\nevaluated. This means that every object resulting from the evaluation of an\n<code>object-constructor-expr</code> has its own type descriptor.\n</p>\n<p>\nIf there is a <code>type-reference</code>, then the referenced type is included\nin the object's type in the same was as an <code>object-type-inclusion</code>,\nand the type-ids of the constructed object are type-ids of the referenced type.\nIf there is no <code>type-reference</code>, then the applicable contextually\nexpected type T, if any, must be definite, and the type-ids of the constructed\nobject are the type-ids, if any, induced by T.\n</p>\n<p>\nThe <code>object-constructor-expr</code> is <em>implicitly read-only</em> if the\napplicable contextually expected type is a subtype of readonly or if the\n<code>type-reference</code> is present and references a type that is a subtype\nof readonly. If the <code>object-constructor-expr</code> is <em>implicitly\nread-only</em>, then the object will be constructed with its read-only bit on;\nfurthermore, in this case an <code>object-type-inclusion</code> is allowed to\ndirectly or indirectly reference a readonly class.\n</p>\n<p>\nThe <code>object-constructor-expr</code> is <em>explicitly isolated</em> if\n<code>object-type-quals</code> includes <code>isolated</code> or if the\ntype-reference is present and references an isolated object type. An\n<code>object-constructor-expr</code> that is explicitly isolated will construct\nan object with its isolated bit set.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-visibility-qual\">object-visibility-qual</span> := <code>public</code>|<code>private</code>\n</pre>\n\n<p>\nA visibility qualifier of <code>private</code> can be used within an\n<code>object-constructor-expr</code> expression; this means that the visibility\nregion consists of every method-defn-body in the object-constructor-expr.\n</p>\n\n<section>\n<h5 id=\"section_6.8.1.1\">6.8.1.1 Fields</h5>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"object-field\">object-field</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<a href=\"#object-visibility-qual\"><span class=\"ntref\">object-visibility-qual</span></a>] [<code>final</code>]\n   <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> [<code>=</code> <a href=\"#field-initializer\"><span class=\"ntref\">field-initializer</span></a>] <code>;</code>\n<span class=\"ntdfn\" id=\"field-initializer\">field-initializer</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nAn <code>object-field</code> declares and initializes a field of the object.\n</p>\n<p>\nIf a field does not specify a field-initializer, then there must be an\n<code>init</code> method and the <code>init</code> method must initialize the\nfield. The field-initializer must meet the requirements for an isolated function\nunless the <code>init</code> method is present and not declared as\n<code>isolated</code>. If the <code>object-constructor-expr</code> is implicitly\nread-only, then the contextually expected type for a field-initializer will be\nthe intersection of readonly and the type specified in the type-descriptor of\nthe object-field.\n</p>\n<p>\nIf <code>final</code> is present, then the field must be assigned to exactly\nonce, either by its initializer or in the <code>init</code> method.\n</p>\n<p>\nAn <code>object-constructor-expr</code> will construct an object with its\nread-only bit set if every object-field is declared as <code>final</code> and\nhas a type-descriptor that is a subtype of <code>readonly</code>. In this case,\nthe static type of the <code>object-constructor-expr</code> will be intersected\nwith <code>readonly</code>.\n</p>\n<p>\nAn object field is <em>isolated</em> if it is declared as <code>final</code> and\nhas a type-descriptor that is a subtype of <code>readonly</code> or\n<code>isolated object {}</code>, or if the <code>object-constructor-expr</code>\nis implicitly read-only. An <code>object-constructor-expr</code> is\n<em>implicitly isolated</em> if it is implicitly readonly or if every object\nfield is isolated. An <code>object-constructor-expr</code> that is implicitly\nisolated will construct an object with its isolated bit set. In this case, the\nstatic type of the <code>object-constructor-expr</code> will be intersected with\n<code>isolated object {}</code>. If the <code>object-constructor-expr</code> is\nexplicitly isolated, then every <code>field-initializer</code> must be an\nisolated expression and any field that is not isolated must be declared as\nprivate.\n</p>\n</section>\n\n<section>\n<h5 id=\"section_6.8.1.2\">6.8.1.2 Methods</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"method-defn\">method-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#object-visibility-qual\"><span class=\"ntref\">object-visibility-qual</span></a> <a href=\"#method-quals\"><span class=\"ntref\">method-quals</span></a>\n   <code>function</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#method-defn-body\"><span class=\"ntref\">method-defn-body</span></a>\n</pre>\n\n<p>\nA <code>method-defn</code> defines a method of an object. \n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"remote-method-defn\">remote-method-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#remote-method-quals\"><span class=\"ntref\">remote-method-quals</span></a>\n   <code>function</code> <a href=\"#remote-method-name\"><span class=\"ntref\">remote-method-name</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#method-defn-body\"><span class=\"ntref\">method-defn-body</span></a>\n</pre>\n<p>\nA <code>remote-method-defn</code> defines a remote method. This is allowed only\nwhen an <code>object-network-qual</code> is present in the\n<code>object-constructor-expr</code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"method-defn-body\">method-defn-body</span> := <a href=\"#function-defn-body\"><span class=\"ntref\">function-defn-body</span></a>\n</pre>\n<p>\nWithin a <code>method-defn-body</code>, the fields and methods of the object are\nnot implicitly in-scope; instead the variable <code>self</code> is bound to the\nobject and can be used to access fields and methods of the object. If the\n<code>object-constructor-expr</code> is explicitly isolated, then the\n<code>self</code> variable must be accessed only within the scope of a lock\nstatement, except when <code>self</code> is part of a\n<code>field-access-expr</code> of the form <code>self.<var>f</var></code>, where\n<code><var>f</var></code> is the name of an isolated field.\n</p>\n<p>\nIf <code>isolated-qual</code> is present, then the method has its isolated bit\nset and its <code>method-defn-body</code> must satisfy the requirements for an\n<a href=\"#isolated_functions\">isolated function</a>.\n</p>\n\n</section>\n\n<section>\n<h5 id=\"resources\">6.8.1.3 Resources</h5>\n\n<p>\nIn addition to remote methods, a service object can use <em>resources</em> to\nsupport network interaction. Resources support a more data-oriented style of\nnetwork interaction, which complements the RPC style supported by remote\nmethods. A service object's resources are arranged in a tree. Each resource\nexposes one or more named methods; by convention the method name\n<code>get</code> is used for retrieving the resource. A listener thus identifies\na resource method to be called using the combination of a hierarchical path,\nwhich identifies the resource, and the resource method name. A resource method\ncan also specify that a segment of the path provided by the listener should be\ntreated as a parameter. A resource method can only be invoked by a listener\nobject.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"resource-method-defn\">resource-method-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#resource-method-quals\"><span class=\"ntref\">resource-method-quals</span></a>\n   <code>function</code> <a href=\"#resource-method-name\"><span class=\"ntref\">resource-method-name</span></a> <a href=\"#resource-path\"><span class=\"ntref\">resource-path</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#method-defn-body\"><span class=\"ntref\">method-defn-body</span></a>\n<span class=\"ntdfn\" id=\"resource-method-quals\">resource-method-quals</span> :=\n   <a href=\"#resource-qual\"><span class=\"ntref\">resource-qual</span></a> <a href=\"#function-quals\"><span class=\"ntref\">function-quals</span></a>\n   | <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a> [<a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a>] <a href=\"#resource-qual\"><span class=\"ntref\">resource-qual</span></a>\n   | <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a> [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>] <a href=\"#resource-qual\"><span class=\"ntref\">resource-qual</span></a>\n   | <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a> <a href=\"#resource-qual\"><span class=\"ntref\">resource-qual</span></a> <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a>\n   | <a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a> <a href=\"#resource-qual\"><span class=\"ntref\">resource-qual</span></a> <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>\n<span class=\"ntdfn\" id=\"resource-qual\">resource-qual</span> := <code>resource</code>\n<span class=\"ntdfn\" id=\"resource-method-name\">resource-method-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"resource-path\">resource-path</span> :=\n   <a href=\"#dot-resource-path\"><span class=\"ntref\">dot-resource-path</span></a>\n   | <a href=\"#resource-path-segment\"><span class=\"ntref\">resource-path-segment</span></a> (<code>/</code> <a href=\"#resource-path-segment\"><span class=\"ntref\">resource-path-segment</span></a>)* [<code>/</code> <a href=\"#resource-path-rest-param\"><span class=\"ntref\">resource-path-rest-param</span></a>]\n   | <a href=\"#resource-path-rest-param\"><span class=\"ntref\">resource-path-rest-param</span></a>\n<span class=\"ntdfn\" id=\"dot-resource-path\">dot-resource-path</span> := <code>.</code>\n<span class=\"ntdfn\" id=\"resource-path-segment\">resource-path-segment</span> := <a href=\"#resource-path-segment-name\"><span class=\"ntref\">resource-path-segment-name</span></a> | <a href=\"#resource-path-segment-param\"><span class=\"ntref\">resource-path-segment-param</span></a>\n<span class=\"ntdfn\" id=\"resource-path-segment-name\">resource-path-segment-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"resource-path-segment-param\">resource-path-segment-param</span> := <code>[</code>[<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#param-name\"><span class=\"ntref\">param-name</span></a><code>]</code>\n<span class=\"ntdfn\" id=\"resource-path-rest-param\">resource-path-rest-param</span> := <code>[</code>[<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>...</code> <a href=\"#param-name\"><span class=\"ntref\">param-name</span></a><code>]</code>\n</pre>\n\n<p>\nA <code>resource-method-defn</code> defines a resource method. This is allowed\nonly when an <code>object-network-qual</code> of <code>service</code> is present\nin the <code>object-constructor-expr</code>. The <code>resource-path</code>\nspecifies the node in the service object's resource tree to which the method is\nattached and the <code>resource-method-name</code> specifies the method name. It\nis an error to have two <code>resource-method-defn</code>s that both have the\nsame name and have a path that refers to the same node. A\n<code>dot-resource-path</code> specifies the root of the service object's\nresource tree. In a service object's resource tree, each edge from a parent node\nto a child node has a label, which uniquely identifies the child relative to its\nsiblings. A label is either a string or one of two special values that indicate\nthat the corresponding path segment should be treated as a parameter. It is an\nerror for a parent node to have more than one edge to a child node labelled with\none of the two special values. A <code>resource-path-segment-name</code>\nspecifies a label that is a string. The two special label values come from a\n<code>resource-path-segment-param</code> and a\n<code>resource-path-rest-param</code> respectively. A parameter in a\n<code>resource-path-segment-param</code> will be bound to a value representing a\nsingle path segment; a parameter in a <code>resource-path-rest-param</code> will\nbe bound to a list representing zero or more path segments, with each member\nrepresenting a single path segment. The type of a path segment depends on the\nlistener, but the listener must be able to convert it into a string. For\nexample, in HTTP a path segment is natively a sequence of bytes, and an HTTP\nlistener could convert it into a string by decoding with UTF-8. It also depends\non the listener which types other than string it is able to convert a path\nsegment to.\n</p>\n<p>\nThe return type of a resource method must not allow values belonging to the\nfunction basic type. A resource method with a name of <code>get</code> that can\nreturn a service object represents a subservice. It is subject to the following\nrestrictions:\n</p>\n<ul>\n<li>the return type must not allow anything other that service\nobjects and errors;</li>\n<li>the resource path must not end with a <code>resource-path-rest-param</code>;</li>\n<li>the method's node must not have any child nodes.</li>\n</ul>\n<p>\nThe semantics of hierarchical resources are defined by a lookup function, which\ntakes four parameters:\n</p>\n<ul>\n<li>\n<var>m</var> is the name of the method;</li>\n<li>\n<var>p</var> is the resource path;</li>\n<li>\n<var>r</var> refers to a node in the resource tree of a service object;</li>\n<li>\n<var>v</var> is the list path segments bound so far.</li>\n</ul>\n<p>\nIt returns an error or a tuple [<var>r</var>, <var>v</var>], where\n</p>\n<ul>\n<li>\n<var>r</var> is a node in the resource tree with an m method, which is the\nmethod to be called;</li>\n<li>\n<var>v</var> is a list of path segments to be bound to the methodâs variable\nresource path parameters.</li>\n</ul>\n<p>\nThe function lookup(<var>m</var>, <var>p</var>, <var>r</var>, <var>v</var>) is\ndefined as follows:\n</p>\n<ol>\n<li>If <var>r</var> has a <code>get</code> method that can return a service\nobject, then call the <code>get</code> method of <var>r</var> using <var>v</var>\nto bind the path parameters; if the result is an error, then return that error;\notherwise, the result must be a service object. Let <var>r</var>' be the root of\nits resource tree. Return lookup(<var>m</var>, <var>p</var>, <var>r</var>',\n[]).</li>\n<li>If <var>p</var> is empty: \n<ol>\n<li>if <var>r</var> has a method <var>m</var>, then return\n[<var>r</var>,<var>v</var>];</li>\n<li>otherwise, if <var>r</var> has a child labelled as repeated variable path\nsegment and that child has a method <var>m</var>, then let <var>r</var>' be\nchild with that label and return [<var>r</var>',<var>v</var>];</li>\n<li>otherwise, return an error.</li> \n</ol>\n</li>\n<li>Let the first segment in <var>p</var> be <var>s</var> and let <var>p</var>'\nbe a list of the 2nd and subsequent members of <var>p</var>.</li>\n<li>If <var>r</var> has a child labelled with the string that results from\nconverting <var>s</var> to a string, then let <var>r</var>' be the child with\nthat label. Return lookup(<var>m</var>, <var>p</var>', <var>r</var>',\n<var>v</var>).</li>\n<li>If <var>r</var> has an edge to a child labelled as a single path segment\nparameter, then let <var>r</var>' be that child and let <var>v</var>' be the\nresult of adding <var>s</var> to the end of <var>v</var>. Return\nlookup(<var>m</var>, <var>p</var>', <var>r</var>', <var>v</var>').</li>\n<li>If <var>r</var> has an edge to a child labelled as a rest parameter and that\nchild has a method <var>m</var>, then let <var>r</var>' be that child, and let\n<var>v</var>' be the result of concatenating <var>v</var> and <var>p</var>.\nReturn [<var>r</var>',<var>v</var>'].</li>\n<li>Otherwise, return an error.</li>\n</ol>\n<p>\nThe syntax allows only the last of a resource method's path parameters to be a\nrest parameter. When a list of path segments is bound to the path parameters of\na resource method, one path segment is bound to each path parameter that is not\na rest parameter and a list of the remaining path segments is bound to the rest\nparameter, if any.\n</p>\n\n</section>\n\n<section>\n<h5 id=\"section_6.8.1.4\">6.8.1.4 Initialization</h5>\n<p>\nA <code>method-defn</code> with a <code>method-name</code> of <code>init</code>\nis used to initialize the object and is treated specially. The return type of\nthe <code>init</code> method must be a subtype of the union of error and nil,\nand must contain nil; if <code>init</code> returns an error, it means that\ninitialization of the object failed.\n</p>\n<p>\nThe parameter list of an <code>init</code> method within an\n<code>object-constructor-expr</code> must be empty.\n</p>\n<p>\nAt any point in the body of a <code>init</code> method, the compiler\ndetermines which fields are potentially uninitialized. A field is potentially\nuninitialized at some point if that field does not have an initializer and it\nis not definitely assigned at that point. It is a compile error if a\n<code>init</code> method:\n</p>\n<ul>\n<li>accesses a field at a point where it is potentially initialized, or</li>\n<li>at a point where there is any potentially uninitialized field\n<ul>\n<li>returns nil, or</li>\n<li>uses the <code>self</code> variable other than to access or modify the value of a field.</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the <code>object-constructor-expr</code> is explicitly isolated, then a field\ncan only be assigned to by an <code>assignment-stmt</code> with a right hand\nside that is an isolated expression. The requirement to access <code>self</code>\nwithin a lock statement does not apply to the <code>init</code> method.\n</p>\n<p>\nThe visibility of the <code>init</code> method cannot be <code>private</code>.\n</p>\n<p>\nAny <code>init</code> method is not part of the shape of an object, and so does\nnot affect when an object value belongs to a type. The <code>init</code> method\ncan be called in a <code>method-call-expr</code> only when the expression\npreceding the <code>.</code> is <code>self</code>.\n</p>\n<p>\nA missing <code>init</code> method is equivalent to an isolated\n<code>init</code> method with no parameters and an empty body (which will always\nreturn nil).\n</p>\n</section>\n\n</section>\n<section>\n<h4 id=\"section_6.8.2\">6.8.2 New expression</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"new-expr\">new-expr</span> := <a href=\"#explicit-new-expr\"><span class=\"ntref\">explicit-new-expr</span></a> | <a href=\"#implicit-new-expr\"><span class=\"ntref\">implicit-new-expr</span></a>\n<span class=\"ntdfn\" id=\"explicit-new-expr\">explicit-new-expr</span> := <code>new</code> <a href=\"#class-descriptor\"><span class=\"ntref\">class-descriptor</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"class-descriptor\">class-descriptor</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#stream-type-descriptor\"><span class=\"ntref\">stream-type-descriptor</span></a>\n</pre>\n<p>\nA new-expr constructs a new object or stream. The class-descriptor in an\nexplicit-new-expr must refer to a class or a stream type.\n</p>\n<p>\nWhen the class-descriptor refers to a class, the explicit-new-expr allocates\nstorage for an object of the type defined by the class and initializes it by\npassing the supplied arg-list to the <code>init</code> method defined by the\nclass. It is a compile error if the type-descriptor if the arg-list does not\nmatch the signature of the class's <code>init</code> method. If the result of\ncalling the <code>init</code> method is an error value e, then the result of\nevaluating the explicit-new-expr is e; otherwise the result is the newly\ninitialized object. The explicit-new-expr is isolated if the type of the\n<code>init</code> is isolated and the expression for every argument in the\narg-list is isolated.\n</p>\n<p>\nWhen the class-reference refers to a stream type <code>stream&lt;T,E&gt;</code>,\nthe arg-list must either be empty or be a single argument belonging to object\ntype StreamImplementor&lt;T,E?&gt;. When the arg-list is empty, the result will\nbe an empty stream (i.e. a stream whose next method returns nil). When the\narg-list evaluates to a StreamImplementor object, the result will be a stream\nthat wraps that object. The explicit-new-expr is isolated if the the arg-list is\nempty or if the expression for the single argument is isolated.\n</p>\n<p>\nAn explicit-type-expr specifying a class-descriptor T has static type T, except\nthat if T is an class type and the type of the <code>init</code> method is\nE?, where E is a subtype of error, then it has static type T|E.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"implicit-new-expr\">implicit-new-expr</span> := <code>new</code> [<code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>]\n</pre>\n<p>\nAn implicit-new-expr is equivalent to an explicit-new-expr that specifies the\napplicable contextually expected type as the class-descriptor. An\nimplicit-new-expr consisting of just <code>new</code> is equivalent to\n<code>new()</code>. It is an error if the applicable contextually expected type\nis not a class or stream type.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_6.9\">6.9 Variable reference expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"variable-reference-expr\">variable-reference-expr</span> := <a href=\"#variable-reference\"><span class=\"ntref\">variable-reference</span></a>\n<span class=\"ntdfn\" id=\"variable-reference\">variable-reference</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#xml-qualified-name\"><span class=\"ntref\">xml-qualified-name</span></a>\n<span class=\"ntdfn\" id=\"xml-qualified-name\">xml-qualified-name</span> := <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> <a href=\"#NoSpaceColon\"><span class=\"ntref\">NoSpaceColon</span></a> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA variable-reference can refer to a variable, a parameter, a constant (defined\nwith a module constant declaration), a function, a type (defined with a module\ntype definition) or a class (defined with a module class definition).\n</p>\n<p>\nWhen the variable reference has a prefix and the prefix has been declared using\nan xmlns-decl rather than an import-decl, then the result of evaluating the\nvariable-reference-expr is a string of the form:\n</p>\n<pre>\n   {<var>namespace-uri</var>}<var>local-name</var>\n</pre>\n<p>\nwhere the namespace-uri comes from xml-namespace-uri specified in the\nxmlns-decl, and the local-name comes from the identifier following the colon.\n</p>\n<p>\nIf the variable-reference references a type defined with a module type\ndefinition or a class defined with a module class definition, then the result of\nevaluating the variable-reference-expr is a typedesc value for that type or\nclass.\n</p>\n<p>\nA variable-reference-expr is isolated if it refers to an identifier bound by a\nlet-expr to an expression that is isolated.\n</p>\n<p>\nA variable-reference-expr that refers to a variable declared by a\nmodule-var-decl that includes <code>isolated</code> is only allowed within a\nlock-stmt.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.10\">6.10 Field access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"field-access-expr\">field-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>\n</pre>\n<p>\nA field-access-expr is typically used to access a field of an object or a field\nof a record. More generally, it can be used to access a member of an object or a\nmember of a mapping. The semantics depends on the static type T of expression. A\nfield-access-expr where T is a subtype of xml is interpreted as an\nxml-required-attribute-access-expr.\n</p>\n<p>\nIf T is a subtype of the object basic type, then T must have a member with name\nfield-name. The field-access-expr is evaluated by first evaluating the\nexpression to get a value <var>obj</var>. If the member is a field, then the\nresult of the expression if the value of that field of <var>obj</var> and the\nstatic type of the field-access-expr is the type of that field of T. If that\nmember is a method, then the result of the expression is a new function value\nthat when called will call the method with <code>self</code> bound to\n<var>obj</var>; the isolated bit of the new function value is set if and only if\nthe isolated bits of both <var>obj</var> and the method are set; the type\ndescriptor of the new function value will have the same annotations as the type\ndescriptor of the method.\n</p>\n<p>\nLet T' be the intersection of T and basic type mapping, let K be the singleton type\ncontaining just the string field-name, and let M be the member type for K in T'.\n</p>\n<p>\nIf the following all apply:\n</p>\n<ul>\n<li>the type descriptor for T is not lax;</li>\n<li>T is a subtype of the mapping basic type (i.e. T' is the same as T);</li>\n<li>K is not a required key type for T;</li>\n<li>the type descriptor for T includes field-name as an\nindividual-field-descriptor (or, if the type descriptor is a union, at least one\nmember of the union does so);</li>\n<li>M does not include nil;</li>\n</ul>\n<p>\nthen the field-access-expr is treated as an optional-field-access-expr.\nOtherwise, the rest of this section applies.\n</p>\n<p>\nThe compile-time requirements on the field-access-expr depend on whether the\ntype descriptor describing T is lax:\n</p>\n<ul>\n<li>if it is lax, then the only compile-time requirement is M is non-empty;</li>\n<li>if it is not lax, then T must be a subtype of the mapping basic type and K\nmust be a required key type for T.</li>\n</ul>\n<p>\nThe static type of field-access-expr is M|E, where E is empty if K is a required\nkey type and T' is a subtype of T, and error otherwise (E can only be error in\nthe lax case.) In the lax case, if M is lax, then the static type of the\nfield-access-expr is lax even if E is an error.\n</p>\n<p>\nA field-access-expr is evaluated as follows:\n</p>\n<ol>\n<li>expression is evaluated resulting in a value <var>v</var>\n</li>\n<li>if <var>v</var> has basic type error, the result is <var>v</var> (this can\nonly happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have basic type mapping, the result is a\nnew error value (this can only happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have a member whose key is field-name,\nthe result is a new error value (this can only happen in the lax case)</li>\n<li>otherwise, the result is the member of <var>v</var> whose key is\nfield-name.</li>\n</ol>\n\n</section>\n<section>\n<h3 id=\"section_6.11\">6.11 Optional field access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"optional-field-access-expr\">optional-field-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?.</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>\n</pre>\n<p>\nAn optional-field-access-expr accesses a possibly undefined mapping member,\nreturning <code>()</code> if the member does not exist.\n</p>\n<p>\nAn optional-field-access-expr where the static type of <code>expression</code> is\na subtype of xml is interpreted as an xml-optional-attribute-access-expr.\n</p>\n<p>\nLet T be the static type of expression, let T' be the intersection of T and\nbasic type mapping, let K be the singleton type containing just the string\nfield-name and let M be the member type of K in T'. The compile-time\nrequirements on the optional-field-access-expr depend on whether the type\ndescriptor describing T is lax:\n</p>\n<ul>\n<li>if it is lax, then the only compile-time requirement is that M is\nnon-empty;</li>\n<li>if it is not lax, then, in addition, T must be a subtype of the union of\n<code>()</code> and the mapping basic type, and the type descriptor for T must\ninclude <code>field-name</code> as an individual-field-descriptor (if the type\ndescriptor is a union, then this requirement must be satisfied by at least one\nmember of the union).</li>\n</ul>\n<p>\nThe static type of the optional-field-access-expr is M|N|E where\n</p>\n<ul>\n<li>N is <code>()</code> if <code>()</code> is a subtype of T or K is not a\nrequired key type for T', and empty otherwise;</li>\n<li>E is <code>error</code> if T' is not a subtype of T?, and empty otherwise (E\ncan only be error in the lax case).</li>\n</ul>\n\n<p>\nAn optional-field-access-expr is evaluated as follows:\n</p>\n<ol>\n<li>expression is evaluated resulting in a value <var>v</var>\n</li>\n<li>if <var>v</var> is <code>()</code>, the result is <code>()</code>\n</li>\n<li>otherwise, if <var>v</var> has basic type error, the result is <var>v</var>\n(this can only happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have basic type mapping, the result is a\nnew error value (this can only happen in the lax case)</li>\n<li>otherwise, if <var>v</var> does not have a member whose key is field-name,\nthe result is <code>()</code>\n</li>\n<li>otherwise, the result is the member of <var>v</var> whose key is\nfield-name.</li>\n</ol>\n\n</section>\n\n<section>\n<h3 id=\"section_6.12\">6.12 XML attribute access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-attribute-access-expr\">xml-attribute-access-expr</span> := <a href=\"#xml-required-attribute-access-expr\"><span class=\"ntref\">xml-required-attribute-access-expr</span></a> | <a href=\"#xml-optional-attribute-access-expr\"><span class=\"ntref\">xml-optional-attribute-access-expr</span></a>\n<span class=\"ntdfn\" id=\"xml-required-attribute-access-expr\">xml-required-attribute-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.</code> <a href=\"#xml-attribute-name\"><span class=\"ntref\">xml-attribute-name</span></a>\n<span class=\"ntdfn\" id=\"xml-optional-attribute-access-expr\">xml-optional-attribute-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?.</code> <a href=\"#xml-attribute-name\"><span class=\"ntref\">xml-attribute-name</span></a>\n<span class=\"ntdfn\" id=\"xml-attribute-name\">xml-attribute-name</span> := <a href=\"#xml-qualified-name\"><span class=\"ntref\">xml-qualified-name</span></a> | <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n\n<p>\nAn XML attribute access expression provides convenient access to an attribute of\nan XML element. It is a compile-time requirement that the static type of the\nexpression is a subtype of xml.\n</p>\n<p>\nA string representing the name of the attribute is computed at compile-time from\nthe xml-attribute-name. When the xml-attribute-name is an identifier without a\nprefix, the attribute name string is the identifier. When the xml-attribute-name\nhas a prefix, normally the xml-attribute-name is an xml-qualified-name, in which\nthe prefix is an xml-namespace-prefix declared using an xmlns-decl. In this\ncase, the xml-qualified-name is expanded at compile-time into an attribute name\nstring of the form\n</p>\n<pre>\n   {<var>namespace-uri</var>}<var>local-name</var>\n</pre>\n<p>\nwhere the namespace-uri comes from xml-namespace-uri specified in the\nxmlns-decl, and the local-name comes from the identifier following the colon.\n</p>\n<p>\nIt is also allowed for the xml-attribute-name to be specified as a\nqualified-identifier, in which the prefix is a module-prefix declared using an\nimport-decl. In this case the qualified-identifier must refer to a\nmodule-const-decl of type string, and the attribute name string is the value of\nthe referenced constant. This allows e.g. <code>xml:lang</code> to work.\n</p>\n<p>\nAn xml-optional-attribute-access-expr is evaluated as follows. The expression is\nevaluated resulting in an xml value <var>v</var>. If <var>v</var> is an empty\nxml value, the result is <code>()</code>. Otherwise, if <var>v</var> is not a\nsingleton element, the result is an error. Otherwise, let <var>m</var> be that\nelement's attribute map and let <var>k</var> be the attribute name string\ncomputed at compile-time from the xml-attribute-name. If <var>m</var> has a\nmember <var>s</var> with key <var>k</var>, the the result is <var>s</var>.\nOtherwise, the result is <code>()</code>.\n</p>\n<p>\nAn xml-required-attribute-access-expr is evaluated the same as an\nxml-optional-attribute-expr, except that for cases where the result of the\nxml-optional-attribute-expr would be <code>()</code>, the result of the\nxml-required-attribute-access-expr is an error.\n</p>\n<p>\nThe static type of an xml-required-attribute-access-expr is\n<code>string|error</code> The static type of an\nxml-optional-attribute-access-expr is <code>string|error|()</code>.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.13\">6.13 Annotation access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annot-access-expr\">annot-access-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.@</code> <a href=\"#annot-tag-reference\"><span class=\"ntref\">annot-tag-reference</span></a>\n</pre>\n<p>\nThe annot-tag-reference must refer to an annotation tag declared with an\nannotation declaration. The static type of expression must be a subtype of\n<code>typedesc</code>.\n</p>\n<p>\nAn <code>annot-access-expr</code> is evaluated by first evaluating\n<code>expression</code> resulting in a typedesc value <em>t</em>. If <em>t</em>\nhas an annotation with the tag referenced by <code>annot-tag-reference</code>,\nthen the result of the <code>annot-access-expr</code> is the value of that\nannotation; otherwise, the result is nil.\n</p>\n<p>\nThe static type of the <code>annot-access-expr</code> is T? where T is the type\nof the annotation tag.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.14\">6.14 Member access expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"member-access-expr\">member-access-expr</span> := <a href=\"#container-expression\"><span class=\"ntref\">container-expression</span></a> <code>[</code> (<a href=\"#key-expression\"><span class=\"ntref\">key-expression</span></a> | <a href=\"#multi-key-expression\"><span class=\"ntref\">multi-key-expression</span></a>) <code>]</code>\n<span class=\"ntdfn\" id=\"container-expression\">container-expression</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"key-expression\">key-expression</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"multi-key-expression\">multi-key-expression</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> (<code>,</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>)+\n</pre>\n<p>\nA member-access-expr accesses a member of a structured value using its key,\nor a constituent of a sequence value using its index.\n</p>\n<p>\nThe requirements on the static type of container-expression and key-expression are as\nfollows:\n</p>\n<ul>\n<li>if the static type of container-expression is a subtype of string or of xml\nor of basic type list, then the contextually expected type for key-expression is\nint and the static type of key-expression must be a subtype of int;</li>\n<li>if the static type of container-expression is a subtype of table, then the\ncontextually expected type for key-expression is <code><var>K</var></code> and\nthe static type of key-expression must be a subtype of\n<code><var>K</var></code>, where the static type of container-expression is\n<code>table&lt;<var>R</var>&gt; key&lt;<var>K</var>&gt;</code>;</li>\n<li>otherwise the static type of container-expression must be a subtype of the\nunion of nil and basic type map; in this case the contextually expected type for\nkey-expression is string and the static type of key-expression must be a subtype\nof string.</li>\n</ul>\n<p>\nA multi-key-expression is allowed only when the static type of a\ncontainer-expression is a subtype of table. A multi-key-expression\n<code>E<sub>1</sub>, E<sub>2</sub>,..., E<sub>n</sub></code> is equivalent to a\nlist-constructor-expr <code>[E<sub>1</sub>, E<sub>2</sub>,...,\nE<sub>n</sub>]</code>.\n</p>\n\n<p>\nA member-access-expr is evaluated as follows:\n</p>\n<ol>\n<li>the container-expression is evaluated to get a value <var>c</var>;</li>\n<li>the key-expression is evaluated to get a value <var>k</var>;</li>\n<li>depending on the basic type of <var>c</var>\n<ul>\n<li>if it is string, and <var>k</var> is &lt; 0 or â¥ the length of\n<var>c</var>, then the evaluation completes abruptly with a panic; otherwise,\nthe result is a string of length 1 containing the character with index\n<var>k</var> in <var>c</var>;</li>\n<li>if it is xml, and <var>k</var> is &lt; 0, then the evaluation completes\nabruptly with a panic; if <var>k</var> is â¥ the length of <var>c</var>, then\nthe result is an empty xml value; otherwise, the result is a singleton xml\nvalue containing the item with index <var>k</var> in <var>c</var>;</li>\n<li>if it is list, and <var>k</var> is &lt; 0 or â¥ the length of\n<var>c</var>, then the evaluation completes abruptly with a panic; otherwise,\nthe result is the member of <var>c</var> with index <var>k</var>;</li>\n<li>if it is table, then if <var>c</var> does not contain a member with key\n<var>k</var>, the result is <code>()</code>; otherwise, the result is the member\nof <var>c</var> with key <var>k</var>.</li>\n<li>if it is mapping, then if <var>c</var> is <code>()</code> or <var>c</var>\ndoes not contain a member with key <var>k</var>, the result is <code>()</code>;\notherwise, the result is the member of <var>c</var> with key <var>k</var>.</li>\n</ul>\n</li>\n</ol>\n<p>\nLet T the static type of container-expression. If T is a subtype of string, then\nthe static type of the member-access-expr is <a href=\"#built-in_subtypes\"><code>string:Char</code></a>, that is the subtype of\nstrings containing strings of length 1. If T is a subtype of xml&lt;M&gt;, then\nthe static type of the member-access-expr is M|E, where E is the type of the\nempty xml value. If T is a subtype of table&lt;R&gt;, then the static type of\nmember-access-expr is R?. Otherwise, let K be the static type of key-expression\nand let M be the member type of K in T; if T contains nil, or T is a subtype of\nmapping and K is an optional key type for T, then the static type of the\nmember-access-expr is M?, otherwise the static type is M.\n</p>\n\n</section>\n<section>\n<h3 id=\"function_call\">6.15 Function call expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"function-call-expr\">function-call-expr</span> := <a href=\"#function-reference\"><span class=\"ntref\">function-reference</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"function-reference\">function-reference</span> := <a href=\"#variable-reference\"><span class=\"ntref\">variable-reference</span></a>\n<span class=\"ntdfn\" id=\"arg-list\">arg-list</span> :=\n   <a href=\"#positional-args\"><span class=\"ntref\">positional-args</span></a> [<code>,</code> <a href=\"#other-args\"><span class=\"ntref\">other-args</span></a>]\n   | [<a href=\"#other-args\"><span class=\"ntref\">other-args</span></a>]\n<span class=\"ntdfn\" id=\"other-args\">other-args</span> := <a href=\"#named-args\"><span class=\"ntref\">named-args</span></a> | <a href=\"#rest-arg\"><span class=\"ntref\">rest-arg</span></a>\n</pre>\n<p>\nA function-call-expr is evaluated by constructing an argument list and passing\nthe argument list to the function referred to by the variable-name. The argument\nlist will be used to bind the parameters of the function before the body of the\nfunction is executed. If the function terminates normally, then the result of\nthe function-call-expr is the return value of the function; otherwise the\nfunction-call-expr completes abruptly with a panic. The static type of the\nfunction-call-expr is the return type of the function type; this type is\npermitted to be <code>never</code>.\n</p>\n<p>\nThe function-reference must refer to a variable with function type. The type\ndescriptor of that function type is used to construct an argument list from the\nspecified arg-list. Note that it is the type descriptor of the declared type of\nthe variable that is used for this purpose, rather than the runtime type\ndescriptor of the referenced function value. The expressions occurring in the\narg-list are evaluated in the order in which they occur in the arg-list; the\ncontextually expected type for the expression comes from the static type\nrequired for the expression as specified below.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"positional-args\">positional-args</span> := <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a> (<code>,</code> <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a>)*\n<span class=\"ntdfn\" id=\"positional-arg\">positional-arg</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe result of evaluating the <var>i</var>-th positional-arg becomes the\n<var>i</var>-th member of the argument list. The static type of the expression\nfor the <var>i</var>-th positional-arg must be a subtype of the type declared\nfor the <var>i</var>-th parameter that is not a rest-param, if there is such a\nparameter; otherwise, there must be a rest-param and the static type must be a\nsubtype of the type declared for the rest-param.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"named-args\">named-args</span> := <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a> (<code>,</code> <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a>)*\n<span class=\"ntdfn\" id=\"named-arg\">named-arg</span> := <a href=\"#arg-name\"><span class=\"ntref\">arg-name</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"arg-name\">arg-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nThe arg-name of every named-arg must be distinct. Each named-arg must correspond\nto either a parameter that is not a rest-param or to a field of an\nincluded-record-param. In the latter case, there are two possibilities.\n</p>\n<ul>\n<li>The field is described by an individual-field-descriptor with a type that is not\n<code>never</code>.</li>\n<li>The field is described by a record-rest-descriptor, either explicitly as\npart of an exclusive-record-type-descriptor or implicitly as part of an\ninclusive-record-type-descriptor. In this case:\n<ul>\n<li>for every parameter name and every individual-field-descriptor of an\nincluded-record-param with a type that is not <code>never</code>, the\nrecord-type-descriptor must include an individual-field-descriptor that has type\n<code>never</code> and is optional, and so disallows a field with that\nname;</li>\n<li>the record-type-descriptor must not include any other\nindividual-field-descriptor; and</li>\n<li>there must be no other included-record-param with a\nrecord-rest-descriptor.</li>\n</ul>\n</li>\n</ul>\n<p>\nIt is an error if there is a named-arg and a positional-arg that correspond to\nthe same parameter. If there is a named-arg or positional-arg corresponding to\nan included-record-param, it is an error for a named-arg to specify a field of\nthat included-record-param. The static type of the expression of the named-arg\nmust be a subtype of the type declared for the corresponding parameter or\nfield-descriptor.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"rest-arg\">rest-arg</span> := <code>...</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe static type of the expression in a rest-arg must be either a list type or a\nmapping type. If it is a list type, then the rest-arg is equivalent to\nspecifying each member of the list as a positional-arg. If it is a mapping type,\nthen the rest-arg is equivalent to specifying each field of the mapping as a\nnamed-arg, with the name and value of the named-arg coming from the name and\nvalue of the field. In either case, the static type of the expression must be\nsuch as to ensure that the equivalent named-args or positional-args would be\nvalid.\n</p>\n<p>\nIf there is neither a named-arg nor a positional-arg for a parameter that is not\na rest-param, then a default value is computed for the parameter, if possible;\notherwise, it is an error. Default values are computed in parameter declaration\norder.\n</p>\n<ul>\n<li>If the parameter is a required-param, it is an error.</li>\n<li>If the parameter is a defaultable-param, then the value for the parameter is\ncomputed from the default value in the function's type descriptor.\n<ul>\n<li>If the default value for a defaultable-param was specifed\nusing an expression, then it is computed by calling the closure stored in the\ntype descriptor, passing it the previous arguments in the argument list.</li>\n<li>If the default value for a defaultable-param was specified as\n<code>&lt;&gt;</code>, then the value for the parameter will be a typedesc value\ndetermined at compile-time from the contextually expected type of the\nfunction-call-expr as follows. Let the name of the parameter for which a default\nof <code>&lt;&gt;</code> was specified be <var>t</var>. Let the type of\n<var>t</var> be typedesc&lt;<var>T</var>&gt;. Let the return type descriptor for\nthe function be <var>R</var>, which will have references to <var>t</var>. Let\nthe contextually expected type for the function-call-expr be <var>C</var>. Then\nthe default value is found by unifying <var>C</var> and <var>R</var>: the\ndefault value is a typedesc value that describes the maximal type <var>S</var>,\nsuch that <var>S</var> is a subtype of <var>T</var>, and <var>R</var> with\n<var>S</var> substituted for <var>t</var> is a subtype of <var>C</var>.</li>\n</ul>\n</li>\n<li>If the parameter is an included-record-param, then a new mapping value is\nconstructed for it using its record-type-descriptor. The mapping value will have\na field for each named-arg that corresponds to a field of this\nincluded-record-param, with the name and value of the field coming from the name\nand value of the named-arg. The mapping value will also have a field for each\nindividual-field-descriptor with a default-expr for which there was no\ncorresponding named-arg. It is an error if the record-type-descriptor has an\nindividual-field-descriptor that is not optional and has no default and there is\nnot corresponding named-arg.</li>\n</ul>\n<p>\nA function-call-expr is isolated if the type of the function being called is\nisolated and the expression for every argument is isolated. In addition, a call\nto the <code>clone</code> or <code>cloneReadOnly</code> functions defined by the\nlang.value module of the lang library is always isolated.\n</p>\n<p>\nWhen there is a need to call a function value resulting from the evaluation of\nan expression, the result of the expression evaluation can be assigned to a\nvariable and then the function called by using a reference to the variable.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.16\">6.16 Method call expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"method-call-expr\">method-call-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nA <code>method-call-expr</code> either calls an object's method, calls an\nobject's field where the type of the field is a function or calls a function in\nthe lang library. The static type of the method-call-expr is the return type of\nthe function type of the function that is called; this type is permitted to be\n<code>never</code>. The evaluation of the method-call-expr starts by evaluating\n<code>expression</code> resulting in some value <var>v</var>. There is no\ncontextually expected type for <code>expression</code>.\n</p>\n<p>\nIf the static type of <code>expression</code> is a subtype of object, and the\nobject type includes a method named <code>method-name</code>, then the\n<code>method-call-expr</code> is executed by calling that method on\n<var>v</var>. The <code>arg-list</code> is used to construct an argument list\nthat is passed to the method in the same way as with a\n<code>function-call-expr</code>. A <code>method-call-expr</code> cannot be used\nto call a remote method. A remote method of a client object can be called by a\n<code>client-remote-method-call-action</code>. In this case, a method-call-expr\nis isolated if the expression preceding <code>.</code> is isolated, the\nexpression for each argument in the arg-list is isolated and the type of the\nmethod being called is isolated.\n</p>\n<p>\nOtherwise, if the static type of <code>expression</code> is a subtype of object,\nand the object type includes a field named <code>method-name</code> with a\nfunction type, then the <code>method-call-expr</code> is executed by calling the\nvalue of that field. The <code>arg-list</code> is used to construct an argument\nlist that is passed to the method in the same way as with a\n<code>function-call-expr</code>. In this case, a method-call-expr is isolated if\nthe type of the function is isolated and the expression for each argument in the\narg-list is isolated.\n</p>\n<p>\nOtherwise, the <code>method-call-expr</code> will be turned into a call to a\nfunction in the lang library <code>m:method-name(expression, arg-list)</code>,\nwhere m is an automatically created module prefix for a module lang.M of the lang\nlibrary, where M is selected as follows.\n</p>\n<ul>\n<li>If the static type of <code>expression</code> is a subtype of some basic\ntype with identifier B, and the module lang.B contains a function\n<code>method-name</code> then M is B. The identifier for a basic type is the\nreserved identifier used in type descriptors for subtypes of that basic type, as\nlisted in the <a href=\"#lang_library\">Lang library</a> section.</li>\n<li>Otherwise, M is <code>value</code>.</li>\n</ul>\n<p>\nIt is a compile-time error if the resulting function call does not satisfy all\nthe constraints that would apply if it has been written explicitly as a\n<code>function-call-expr</code>. The <code>method-call-expr</code> expression is\nisolated under the same conditions that the corresponding\n<code>function-call-expr</code> would be isolated.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.17\">6.17 Error constructor</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"error-constructor-expr\">error-constructor-expr</span> := <code>error</code> [<a href=\"#error-type-reference\"><span class=\"ntref\">error-type-reference</span></a>] <code>(</code> <a href=\"#error-arg-list\"><span class=\"ntref\">error-arg-list</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"error-arg-list\">error-arg-list</span> := <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a> [<code>,</code> <a href=\"#positional-arg\"><span class=\"ntref\">positional-arg</span></a>] (<code>,</code> <a href=\"#named-arg\"><span class=\"ntref\">named-arg</span></a>)*\n</pre>\n<p>\nAn error constructor constructs a new error value. If an error-type-reference is\nspecified, it must denote a type that is a subtype of error; the effect is the\nsame as making the contextually expected type be that specified by the\nerror-type-reference. If there is no applicable contextually expected type, then\nit is the same as if there were a contextually expected type of\n<code>error</code>.\n</p>\n<p>\nThe applicable contextually expected type E must be definite. The type-ids of\nthe constructed error value are those induced by E. Note that it is allowed for\nE to refer to an intersection-type-descriptor.\n</p>\n<p>\nThe first positional-arg is of type string and specifies the error message; the\nsecond positional-arg, if present, is of type <code>error?</code>, with a\ndefault of nil, and specifies the cause.\n</p>\n<p>\nEvaluating the error-constructor-expr constructs a new detail mapping. Each\nnamed-arg specifies a field of the error detail mapping; the static type of each\nnamed-arg must be a subtype of <code>value:Cloneable</code>. The type descriptor\nE implies a type descriptor D for the detail mapping. The arg-name of every\nnamed-arg must be specified as the field-name of an individual-field-descriptor\noccurring in D, unless there are no such field names. Fields with default\nvalues will also be added to the detail record based on D in the same way as the\nmapping-constructor-expr adds fields with default values based on the\ncontextually expected type. The contextually expected type for each named-arg is\ndetermined from D in the same way as for a mapping-constructor-expr. The detail\nmapping is constructed as immutable, with its members being the result of\napplying the ImmutableClone abstract operation to the result of evaluating each\nnamed-arg and every defaultable arg.\n</p>\n<p>\nThe stack trace in the constructed error value describes the execution stack at\nthe point where the error constructor was evaluated.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.18\">6.18 Anonymous function expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"anonymous-function-expr\">anonymous-function-expr</span> := <a href=\"#explicit-anonymous-function-expr\"><span class=\"ntref\">explicit-anonymous-function-expr</span></a> | <a href=\"#infer-anonymous-function-expr\"><span class=\"ntref\">infer-anonymous-function-expr</span></a>\n<span class=\"ntdfn\" id=\"explicit-anonymous-function-expr\">explicit-anonymous-function-expr</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#function-quals\"><span class=\"ntref\">function-quals</span></a> <code>function</code> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> (<a href=\"#block-function-body\"><span class=\"ntref\">block-function-body</span></a>|<a href=\"#expr-function-body\"><span class=\"ntref\">expr-function-body</span></a>)\n</pre>\n<p>\nEvaluating an anonymous-function-expr creates a closure, whose basic type is\nfunction. With an explicit-anonymous-function-expr, the type of the function is\nspecified explicitly as usual with a function-signature. With an\ninfer-anonymous-function-expr, the type of the function is inferred.\n</p>\n<p>\nIf block-function-body refers to a block-scope variable defined\noutside of the block-function-body, the closure will capture a reference to that\nvariable; the captured reference will refer to the same storage as the original\nreference not a copy.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"infer-anonymous-function-expr\">infer-anonymous-function-expr</span> := <a href=\"#infer-param-list\"><span class=\"ntref\">infer-param-list</span></a> <a href=\"#expr-function-body\"><span class=\"ntref\">expr-function-body</span></a>\n<span class=\"ntdfn\" id=\"infer-param-list\">infer-param-list</span> :=\n   <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n   | <code>(</code>[<a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> (<code>,</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>)*]<code>)</code>\n</pre>\n<p>\nAn infer-anonymous-function-expr can only be used in a context where a function\ntype is expected. Both the types of the parameters and whether the function type\nis <code>isolated</code> are inferred from the expected function type. The\nfunction type will be inferred to be <code>transactional</code> if the\nexpr-function-body calls any functions with a transactional type.\nThe scope of the parameters is <code>expr-function-body</code>.\nThe static type of the infer-anonymous-function-expr will be a function type\nwhose return type is the static type of the <code>expression</code> in\n<code>expr-function-body</code>. If the contextually expected type for the\n<code>anonymous-function-expr</code> is a function type with return type T, then\nthe contextually expected type for <code>expression</code> in\n<code>expr-function-body</code> is T.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_6.19\">6.19 Let expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"let-expr\">let-expr</span> := <code>let</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a> [<code>,</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a>]* <code>in</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"let-var-decl\">let-var-decl</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n\n<p>\nA let-expr binds variables and then evaluates an expression with those variables in scope.\n</p>\n<p>\nA let-expr <code>let T B = E<sub>1</sub> in E<sub>2</sub></code> is evaluated as\nfollows. E<sub>1</sub> is evaluated resulting in a value v. The typed binding\npattern T B is matched to v, causing assignments to the variables occuring in B.\nThen E<sub>2</sub> is evaluated with those variables in scope; the resulting\nvalue is the result of the let-expr.\n</p>\n<p>\nA let-expr <code>let D<sub>1</sub>, D<sub>2</sub>,...,D<sub>n</sub> in E</code>\nis transformed into <code>let D<sub>1</sub> in let D<sub>2</sub> in ... let\nD<sub>n</sub> in E</code>.\n</p>\n<p>\nThe typed-binding-pattern is used unconditionally, meaning that it is a compile\nerror if the static types do not guarantee the success of the match. If the\ntyped-binding-pattern uses <code>var</code>, then the type of the variable is\ninferred from the precise static type of the expression following\n<code>=</code>.\n</p>\n<p>\nSince expressions cannot modify variables, the variables bound in a let-var-decl\nare implicitly final. A let-expr is isolated if the expression following\n<code>in</code> is isolated; a reference in that expression to a variable bound\nby a let-var-decl will be treated as isolated if the expression initializing the\nvariable in the let-var-decl is isolated.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_6.20\">6.20 Type cast expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"type-cast-expr\">type-cast-expr</span> := <code>&lt;</code> <a href=\"#type-cast-param\"><span class=\"ntref\">type-cast-param</span></a> <code>&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"type-cast-param\">type-cast-param</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> | <a href=\"#annots\"><span class=\"ntref\">annots</span></a>\n</pre>\n<p>\nA <code>type-cast-expr</code> casts the value resulting from evaluating\n<code>expression</code> to the type described by the type-descriptor, performing\na numeric conversion if required.\n</p>\n<p>\nNormally, the parameter for a type-cast-expr includes a type-descriptor.\nHowever, it is also allowed for the parameter to consist only of annotations; in\nthis case, the only effect of the type cast is for the contextually expected\ntype for expression to be augmented with the specified annotations. The rest of\nthis subsection describes the normal case, where the type-cast-expr includes a\ntype-descriptor.\n</p>\n<p>\nA type-cast-expr is evaluated by first evaluating <code>expression</code>\nresulting in a value v. Let T be the type described by\n<code>type-descriptor</code>. If v belongs T, then the result of the\ntype-cast-expr is v. Otherwise, if T includes shapes from exactly one basic\nnumeric type N and v belongs to another basic numeric type, then let n be\nNumericConvert(N, v); if n is not an error and n belongs to T, then the result\nof the type-cast-expr is n. Otherwise, the evaluation of the type-cast-expr\ncompletes abruptly with a panic.\n</p>\n<p>\nLet T be the static type described by <code>type-descriptor</code>, and let TE\nbe the static type of <code>expression</code>. Then the static type of the\n<code>type-cast-expr</code> is the intersection of T and TE', where TE' is TE\nwith its numeric shapes transformed to take account of the possibility of the\nnumeric conversion specified in the previous paragraph.\nIt is a compile-time error to attempt to use a type cast to\n<em>cast away</em> an error: if the intersection of TE and <code>error</code> is\nnon-empty, then the intersection of T and <code>error</code> must also be\nnon-empty. A <code>checkpanic</code> expression can be used instead to assert\nthat the result of an expression will never be an error.\n</p>\n<p>\nThe contextually expected type for <code>expression</code> is the intersection\nof the contextually expected type of the <code>type-cast-expr</code> and the\ntype described by the <code>type-descriptor</code>.\n</p>\n<p>\nNote that a <code>type-cast-expr</code> of <code>&lt;readonly&gt;</code> can be\nused both to cause constructors withing the <code>expression</code> to construct\nvalues with the read-only bit on and to verify that the value resulting from\nthe evaluation of <code>expression</code> has its read-only bit on.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.21\">6.21 Typeof expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"typeof-expr\">typeof-expr</span> := <code>typeof</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe result of a <code>typeof-expr</code> is a typedesc value for the runtime\ntype of v, where v is the result of evaluating <code>expression</code>.\n</p>\n<p>\nThe runtime type of v is the narrowest type to which v belongs.\n</p>\n<ul>\n<li>When v is a simple value, the resulting typedesc will describe a type\nconsisting of a single shape, which is the shape of the value. The typedesc will\nnot have any annotations. Each evaluation of <code>typeof</code> with a simple\nvalue produces a new typedesc value.</li>\n<li>When v is a reference value, each evaluation of <code>typeof</code> with an\nidentical reference value produces an identical typedesc value. The type\ndescriptor resulting from <code>typeof</code> will be the same as the type\ndescriptor used to construct the value. For containers, this is the same as the\ninherent type; when the container is immutable, it will be a singleton type. For\nan object, this is the same as the type descriptor used with new. For an error,\nthis is the same as the type descriptor used in the functional-constructor-expr.\nAny annotations that were attached to the type descriptor used to construct the\nvalue will this be available on the constructed value.</li>\n</ul>\n<p>\nThe static type of <code>typeof-expr</code> is typedesc&lt;T&gt;, where T is the\nstatic type of <code>expression</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.22\">6.22 Unary expression</h3>\n\n<section>\n<h4 id=\"section_6.22.1\">6.22.1 Unary numeric expression</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"unary-numeric-expr\">unary-numeric-expr</span> :=\n   <code>+</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <code>-</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <code>~</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe operators occurring in a <code>unary-numeric-expr</code> have both lifted\nform, which is specified in the <a href=\"#nil_lifting\">Nil lifting</a> section,\nand an underlying form, which is specified in this section.\n</p>\n<p>\nThe unary <code>-</code> operator performs negation. The static type of the\noperand must be a number; the static type of the result is the basic type of the\nstatic type of the operand, modified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules. The semantics for each\nbasic type are as follows:\n</p>\n<ul>\n<li>int: negation for int is the same as subtraction from zero; a panic will\noccur on overflow, which happens when the operand is -2<sup>63</sup>)</li>\n<li>float, decimal: negation for floating point types corresponds to the negate\noperation as defined by IEEE 754-2008 (this is not the same as subtraction from\nzero);</li>\n</ul>\n<p>\nIf the contextually expected type for a <code>-</code> expression is T, then the\ncontextualy expected type for the operand expressions is T', where a value v is\nin T' if it belongs to int, decimal or float, and T contains a value with the\nsame basic type as v.\n</p>\n<p>\nThe unary <code>+</code> operator returns the value of its operand expression. The static\ntype of the operand must be a number, and the static type of the result is the\nsame as the static type of the operand expression, modified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules.\n</p>\n<p>\nThe <code>~</code> operator inverts the bits of its operand expression. The\nstatic type of the operand must be int, and the static type of the result is\nint, modified by the usual <a href=\"#singleton_typing\">singleton typing</a>\nrules.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_6.22.2\">6.22.2 Unary logical expression</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"unary-logical-expr\">unary-logical-expr</span> := <code>!</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe <code>!</code> operator performs logical negation. The static type of the\noperand expression must be boolean. The <code>!</code> operator returns true if\nits operand is false and false if its operand is true. The static type of the\nresult is boolean, modified by the usual <a href=\"#singleton_typing\">singleton\ntyping</a> rules.\n</p>\n</section>\n</section>\n\n<section>\n<h3 id=\"section_6.23\">6.23 Multiplicative expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"multiplicative-expr\">multiplicative-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>*</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>/</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>%</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe <code>*</code> operator performs multiplication; the <code>/</code> operator\nperforms division; the <code>%</code> operator performs remainder. These\noperators have both lifted form, which is specified in the <a href=\"#nil_lifting\">Nil lifting</a> section, and an underlying form, which is\nspecified in this section.\n</p>\n<p>\nThe static type of both operand expressions is required to be a subtype of the\nsame basic type. The following basic types are allowed:\n</p>\n<ul>\n<li>int\n<ul>\n<li>\n<code>*</code> performs integer multiplication; a panic will occur on overflow</li>\n<li>\n<code>/</code> performs integer division, with any fractional part discarded\nie with truncation towards zero; a panic will occur on division by zero or\noverflow, which happens if the first operand is -2<sup>63</sup> and the second\noperand is -1</li>\n<li>\n<code>%</code> performs integer remainder consistent with integer division,\nso that if <code><var>x</var>/<var>y</var></code> does not result in a panic,\nthen <code>(<var>x</var>/<var>y</var>)*<var>y</var> +\n(<var>x</var>%<var>y</var>)</code> is equal to <code><var>x</var></code>; a\npanic will occur if the second operand is zero; if the first operand is\n-2<sup>63</sup> and the second operand is -1, then the result is 0</li>\n</ul>\n</li>\n<li>float, decimal\n<ul>\n<li>\n<code>*</code> performs the multiplication operation with the destination\nformat being the same as the source format, as defined by IEEE 754-2008; this\nnever causes a panic to occur</li>\n<li>\n<code>/</code> performs the division operation with the destination format\nbeing the same as the source format, as defined by IEEE 754-2008; this never\ncauses a panic to occur</li>\n<li>\n<code>%</code> performs a remainder operation; the remainder is not the\nIEEE-defined remainder operation but is instead a remainder operation analogous\nto integer remainder; more precisely,\n<ul>\n<li>if <code><var>x</var></code> is NaN or <code><var>y</var></code> is NaN or\n<code><var>x</var></code> is an infinity or <code><var>y</var></code> is a zero,\nthen <code><var>x</var> % <var>y</var></code> is NaN</li>\n<li>for finite <code>x</code>, and infinite <code>y</code>, <code><var>x</var> %\n<var>y</var></code> is <code><var>x</var></code>\n</li>\n<li>for finite <code><var>x</var></code> and finite non-zero\n<code><var>y</var></code>, <code><var>x</var> % <var>y</var></code> is equal to\nthe result of rounding <code><var>x</var> - (<var>y</var> Ã <var>n</var>)</code>\nto the nearest representable value using the roundTiesToEven rounding mode,\nwhere <code><var>n</var></code> is the integer that is nearest to the\nmathematical quotient of <code><var>x</var></code> and <code><var>y</var></code>\nwithout exceeding it in magnitude; if the result is zero, then its sign is that\nof <code><var>x</var></code>\n</li>\n<li>no exceptions are thrown</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the result of a multiplicative-expr is the basic type of its\nsubexpressions, modified by the usual <a href=\"#singleton_typing\">singleton\ntyping</a> rules, except that the result type is always <code>float</code> in\nthe case where the operator is <code>/</code> and the right-hand operand is\nsingleton float <code>0.0</code>. (This is a consequence of the fact that\n<code>0.0 == -0.0</code>, but <code>1.0/0.0 != 1.0/-0.0</code>.)\n</p>\n<p>\nIf the contextually expected type for a multiplicative-expr is T, then the\ncontextualy expected type for both operand expressions is T', where a value v is\nin T' if it belongs to int, decimal or float, and T contains a value with the\nsame basic type as v.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.24\">6.24 Additive expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"additive-expr\">additive-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>+</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe <code>+</code> operator is used for both addition and concatenation; the\n<code>-</code> operator is used for subtraction. These operators have both\nlifted form, which is specified in the <a href=\"#nil_lifting\">Nil lifting</a>\nsection, and an underlying form, which is specified in this section.\n</p>\n<p>\nIt is required that either:\n</p>\n<ul>\n<li>the static type of both operand expressions is a subtype of the same basic\ntype, in which case the static type of the result will be this basic type,\nmodified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules;\nor</li>\n<li>the static type of one operand expression must be a subtype of xml and of\nthe other operand expression must be a subtype of string, in which case the\nstatic type of the result is xml.</li>\n</ul>\n<p>\nThe semantics for each basic type is as follows:\n</p>\n<ul>\n<li>int\n<ul>\n<li>\n<code>+</code> performs integer addition; a panic will occur on\noverflow</li>\n<li>\n<code>-</code> performs integer subtraction; a panic will occur on\noverflow</li>\n</ul>\n</li>\n<li>float, decimal\n<ul>\n<li>\n<code>+</code> performs the addition operation with the destination format\nbeing the same as the source format, as defined by IEEE 754-2008; this never\ncauses a panic to occur</li>\n<li>\n<code>-</code> performs the subtraction operation with the destination\nformat being the same as the source format, as defined by IEEE 754-2008; this\nnever causes a panic to occur</li>\n</ul>\n</li>\n<li>string, xml\n<ul>\n<li>if both operands are a string, then the result is a string that is the\nconcatenation of the operands</li>\n<li>if both operands are xml, then the result is a new xml value that is the\nconcatenation of the operands; this does not perform a copy on\nthe constituents of the operand values</li>\n<li>if one operand is an empty string and one is xml, then\nthe result is the xml value operand</li>\n<li>if one operand is a non-empty string and one is xml, then the string is\ntreated as if it were an xml singleton text value whose characters are the same\nas the characters of the string;</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the contextually expected type for an additive-expr is T, then the\ncontextually expected type for both operand expressions is T', where a value v is\nin T' if it belongs to int, decimal, float, string or xml and T contains a value\nwith the same basic type as v.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.25\">6.25 Shift expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"shift-expr\">shift-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&lt;&lt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;&gt;&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA shift-expr performs a bitwise shift. The shift operators have both lifted\nform, which is specified in the <a href=\"#nil_lifting\">Nil lifting</a> section,\nand an underlying form, which is specified in this section.\n</p>\n<p>\nBoth operand expressions must have static type that is a subtype of int. The\nleft hand operand is the value to be shifted; the right hand value is the shift\namount; all except the bottom 6 bits of the shift amount are masked out (as if\nby x &amp; 0x3F). Then a bitwise shift is performed depending on the operator:\n</p>\n<ul>\n<li>\n<code>&lt;&lt;</code> performs a left shift, the bits shifted in on the\nright are zero</li>\n<li>\n<code>&gt;&gt;</code> performs a signed right shift; the bits shifted in on the\nleft are the same as the most significant bit</li>\n<li>\n<code>&gt;&gt;&gt;</code> performs a unsigned right shift, the bits shifted in on the\nleft are zero</li>\n</ul>\n<p>\nIf the operator is &gt;&gt; or &gt;&gt;&gt; and the left hand operand is a\nsubtype of <code>int:Unsigned<var>K</var></code> when <code><var>K</var></code>\nis 8, 16 or 32, then the static type of the result is\n<code>int:Unsigned<var>N</var></code> where <code><var>N</var></code> is the\nsmallest such <code><var>K</var></code>; otherwise, the static type of the\nresult is <code>int</code>. In all cases the static type of the result is\nmodified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.26\">6.26 Range expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"range-expr\">range-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>...</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>..&lt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nThe result of a range-expr is a new object belonging to the object type\nIterable&lt;int,()&gt; that will iterate over a sequence of integers in increasing\norder, where the sequence includes all integers n such that\n</p>\n<ul>\n<li>the value of the first expression is less than or equal to n, and</li>\n<li>n is\n<ul>\n<li>if the operator is <code>...</code>, less than or equal to the value of the\nsecond expression</li>\n<li>if the operator is <code>..&lt;</code>, less than the value of the second\nexpression</li>\n</ul>\n</li>\n</ul>\n<p>\nIt is a compile error if the static type of either expression is not a subtype\nof int.\n</p>\n<p>\nA range-expr is designed to be used in a foreach statement, but it can be used\nelsewhere.\n</p>\n<p>\nA range-expr is always isolated.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.27\">6.27 Relational expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"relational-expr\">relational-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&lt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&lt;=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&gt;=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA relational-expr tests the relative order of two values. There must be an <a href=\"#ordering\">ordered</a> type to which the static type of both operands\nbelong. The static type of the result is boolean, modified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules.\n</p>\n<p>\nA relational-expr is evaluated by first evaluating the two expressions,\nresulting in values x and y. The result of relational-expr is true if and only\nif the result of the Compare(x,y) operation is\n</p>\n<ul>\n<li>LT, if the operator is <code>&lt;</code>\n</li>\n<li>GT, if the operator is <code>&gt;</code>\n</li>\n<li>LT or EQ, if the operator is <code>&lt;=</code>\n</li>\n<li>GT or EQ, if the operator is <code>&gt;=</code>\n</li>\n</ul>\n<p>\nand otherwise false.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.28\">6.28 Type test expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"is-expr\">is-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>is</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>!</code> <code>is</code> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>   \n</pre>\n<p>\nAn is-expr tests whether a value belongs to a type.\n</p>\n<p>\nAn is-expr is evaluated by evaluating the expression yielding a result v.\nIf the operator is <code>is</code>, then the result of the expression is true if\nv belongs to the type denoted by the type-descriptor, and otherwise false. If\nthe operator is <code>!is</code>, then the result of the expression is false if\nv belongs to the type denoted by the type-descriptor, and otherwise true.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.29\">6.29 Equality expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"equality-expr\">equality-expr</span> :=\n   <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>==</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>!=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>===</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n   | <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>!==</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nAn equality-expr tests whether two values are equal. For all four operators, it\nis a compile time error if the intersection of the static types of the operands\nis empty.\n</p>\n<p>\nThe === operator tests for exact equality. The !== operator results in the\nnegation of the result of the === operator. Two values v<sub>1</sub> and\nv<sub>2</sub> are exactly equal if they have the same basic type T and\n</p>\n<ul>\n<li>T is simple type, and  v<sub>1</sub> and v<sub>2</sub> are identical values\nwithin the possible of values allowed for T;</li>\n<li>T is a sequence type, and the length of v<sub>1</sub> is the same as the length of v<sub>2</sub> and\n<ul>\n<li>the length is 1, and either\n<ul>\n<li>v<sub>1</sub> and v<sub>2</sub> both have storage identity and that storage\nidentity is the same, or</li>\n<li>v<sub>1</sub> and v<sub>2</sub> both do not have storage identity and the\nshape of v<sub>1</sub> is the same as the shape of v<sub>2</sub>\n</li>\n</ul>\n</li>\n<li>the length is not 1, and every constituent of v<sub>1</sub> is exactly equal\nas the corresponding constituent of v<sub>2</sub>;</li>\n</ul>\n</li>\n<li>T is a structural or behavioural type, and the storage identity of\nv<sub>1</sub> is the same as the storage identity of v<sub>2</sub>.</li>\n</ul>\n<p>\nThe == operator tests for deep equality. The != operator results in the negation\nof the result of the == operator. For both == and !=, at least one of the operands must have a\nstatic type that is a subtype of anydata. Two values v1, v2 are deeply equal if\nDeepEquals(v1, v2) is true.\n</p>\n<p>\nThe static type of the result of expression is boolean; in the case of the ==\nand != operators, the static type is modified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules; in the case of the === and\n!== operators, the static type is not so modified.\n</p>\n<p>\nNote that === and == are the same for simple values except for floating point types.\n</p>\n<p>\nFor the float type, the operators differ as regards floating point zero: ==\ntreats positive and negative zero from the same basic type as equal whereas ===\ntreats them as unequal. Both == and === treat two NaN values from the same basic\ntype as equal. This means that neither of these operators correspond to\noperations defined by IEEE 754-2008, because they do not treat NaN in the\nspecial way defined for those operations.\n</p>\n<p>\nFor the decimal type, the operators differ in whether they consider the\nprecision of the value. For example, <code>1.0 == 1.00</code> is true but\n<code>1.0 === 1.00</code> is false.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_6.30\">6.30 Binary bitwise expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"binary-bitwise-expr\">binary-bitwise-expr</span> :=\n   <a href=\"#bitwise-and-expr\"><span class=\"ntref\">bitwise-and-expr</span></a>\n   | <a href=\"#bitwise-xor-expr\"><span class=\"ntref\">bitwise-xor-expr</span></a>\n   | <a href=\"#bitwise-or-expr\"><span class=\"ntref\">bitwise-or-expr</span></a>\n<span class=\"ntdfn\" id=\"bitwise-and-expr\">bitwise-and-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&amp;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"bitwise-xor-expr\">bitwise-xor-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>^</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"bitwise-or-expr\">bitwise-or-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>|</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA binary-bitwise-expr does a bitwise AND, XOR, or OR operation on its operands.\nThese operators have both lifted form, which is specified in the <a href=\"#nil_lifting\">Nil lifting</a> section, and an underlying form, which is\nspecified in this section.\n</p>\n<p>\nThe static type of both operands must be a subtype of int. The static type of\nthe result is as follows:\n</p>\n<ul>\n<li>for AND, if the type of either operand is a subtype of\n<code>int:Unsigned<var>K</var></code> when <code><var>K</var></code> is 8, 16 or\n32, then the static type of the result is <code>int:Unsigned<var>N</var></code>\nwhere <code><var>N</var></code> is the smallest such <code><var>K</var></code>;\notherwise, the static type of the result is <code>int</code>;</li>\n<li>for XOR or OR, if the type of both operands is a\nsubtype of <code>int:Unsigned<var>K</var></code> when <code><var>K</var></code>\nis 8, 16 or 32, then the static type of the result is\n<code>int:Unsigned<var>N</var></code> where <code><var>N</var></code> is the\nsmallest such <code><var>K</var></code>; otherwise, the static type of the result\nis <code>int</code>.</li>\n</ul>\n<p>\nIn all cases, the static type of the result is modified by the usual <a href=\"#singleton_typing\">singleton typing</a> rules.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_6.31\">6.31 Logical expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"logical-expr\">logical-expr</span> := <a href=\"#logical-and-expr\"><span class=\"ntref\">logical-and-expr</span></a> | <a href=\"#logical-or-expr\"><span class=\"ntref\">logical-or-expr</span></a>\n<span class=\"ntdfn\" id=\"logical-and-expr\">logical-and-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>&amp;&amp;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"logical-or-expr\">logical-or-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>||</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n\n<p>\nThe static type of each expression in a logical-expr must be a subtype of\nboolean.\n</p>\n<p>\nA logical-and-expr is evaluated as follows:\n</p>\n<ol>\n<li>the left-hand expression is evaluated, resulting in a value <var>x</var>;</li>\n<li>if <var>x</var> is <code>false</code>, then the result of the\nlogical-and-expr is <var>x</var>, and the right-hand expression is not\nevaluated;</li>\n<li>otherwise, the result of the logical-and-expr is the result of evaluating\nthe right-hand expression.</li>\n</ol>\n<p>\nA logical-or-expr is evaluated as follows:\n</p>\n<ol>\n<li>the left-hand expression is evaluated, resulting in a value <var>x</var>;</li>\n<li>if <var>x</var> is <code>true</code>, then the result of the\nlogical-or-expr is <var>x</var>, and the right-hand expression is not\nevaluated;</li>\n<li>otherwise, the result of the logical-or-expr is the result of evaluating\nthe right-hand expression.</li>\n</ol>\n\n<p>\nThe static type of the result of a logical-expr is boolean, modified by the\nusual <a href=\"#singleton_typing\">singleton typing</a> rules. Furthermore:\n</p>\n<ul>\n<li>if the expression is a logical-and-expr and the static type of left-hand\nexpression is singleton false, then the static type of the result is singleton\nfalse, regardless of the static type of the right-hand-expression;</li>\n<li>if the expression is a logical-or-expr and the static type of left-hand\nexpression is singleton true, then the static type of the result is singleton\ntrue, regardless of the static type of the right-hand-expression.</li>\n</ul>\n\n</section>\n\n<section>\n<h3 id=\"section_6.32\">6.32 Conditional expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"conditional-expr\">conditional-expr</span> :=\n  <a href=\"#ternary-conditional-expr\"><span class=\"ntref\">ternary-conditional-expr</span></a>\n  | <a href=\"#nil-conditional-expr\"><span class=\"ntref\">nil-conditional-expr</span></a>\n<span class=\"ntdfn\" id=\"ternary-conditional-expr\">ternary-conditional-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>:</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"nil-conditional-expr\">nil-conditional-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>?:</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA ternary-conditional-expr C <code>?</code> T <code>:</code> F is evaluated as\nfollows:\n</p>\n<ol>\n<li>evaluate C to get a value boolean value v;</li>\n<li>if v is true, then the result is the result of evaluating T.</li>\n<li>Otherwise, the result is the result of evaluating F.</li>\n</ol>\n<p>\nIn a ternary-conditional-expr C <code>?</code> T <code>:</code> F, the static\ntype of C must be a subtype of boolean, and the static type of the result is\ndetermined from ther static types of C, T and F as follows:\n</p>\n<ol>\n<li>if the static type of C is singleton true, then the static\ntype of the result is the static type of T;</li>\n<li>if the static type of C is singleton false, then the static\ntype of the result is the static type of F;</li>\n<li>otherwise, the static type of the result is the union of the static types of\nT and F.</li>\n</ol>\n<p>\nA nil-conditional-expr L <code>?:</code> R is evaluated as follows:\n</p>\n<ol>\n<li>evaluate L to get a value v;</li>\n<li>if v is not nil, then the result is v;</li>\n<li>otherwise, the result is the result of evaluating R.</li>\n</ol>\n<p>\nThe static type of the result of L <code>?:</code> R is determined from the\nstatic types of L and R as follows:\n</p>\n<ol>\n<li>if the static type of L is nil, then the static type of\nthe result is the static type of R;</li>\n<li>if the static type of L does not include nil, then the static type of\nthe result is the static type of L;</li>\n<li>otherwise, the static type of the result is the union of the difference of\nthe static type of L and (), and the static type of R.</li>\n</ol>\n</section>\n\n<section>\n<h3 id=\"section_6.33\">6.33 Checking expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"checking-expr\">checking-expr</span> := <a href=\"#checking-keyword\"><span class=\"ntref\">checking-keyword</span></a> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"checking-keyword\">checking-keyword</span> := <code>check</code> | <code>checkpanic</code>\n</pre>\n<p>\nEvaluates expression resulting in value v. If v has basic type error, then\n</p>\n<ul>\n<li>if the checking-keyword is <code>check</code>, then the check-expression\ncompletes abruptly with a check-fail with associated value v;</li>\n<li>if the checking-keyword is <code>checkpanic</code>, then the check-expression\ncompletes abruptly with a panic with associated value v.</li>\n</ul>\n<p>\nIf the static type of expression <code><var>Expr</var></code> is T|E, where E is\na subtype of error, then the static type of <code>check <var>Expr</var></code>\nor <code>checkpanic <var>Expr</var></code> is T. However, if:\n</p>\n<ul>\n<li>the checking-keyword is <code>check</code>,</li>\n<li>the above rules would result in a compile-time error,</li>\n<li>the static type of <code><var>Expr</var></code> is lax,</li>\n<li>T is a subtype of <code>json</code>, and</li>\n<li>there is a contextually expected type S, where S is a subtype of\n<code>()|boolean|int|float|decimal|string</code>,</li>\n</ul>\n<p>\nthen instead <code>check <var>Expr</var></code> is treated as <code>check\n<var>val</var>:ensureType(<var>Expr</var>, <var>s</var>)</code>, where\n<code><var>s</var></code> is a typedesc value representing S and\n<code><var>val</var></code> refers to the <code>value</code> module in langlib.\n</p>\n</section>\n<section>\n<h3 id=\"section_6.34\">6.34 Trap expression</h3>\n<p>\nThe trap expression stops a panic and gives access to the error value associated\nwith the panic.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"trap-expr\">trap-expr</span> := <code>trap</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>  \n<p>\nSemantics are:\n</p>\n<ul>\n<li>Evaluate <code>expression</code> resulting in value v\n<ul>\n<li>If evaluation completes abruptly with panic with associated value e, then\nresult of trap-exp is e</li>\n<li>Otherwise result of trap-expr is v</li>\n</ul>\n</li>\n<li>If type of <code>expr</code> is T, then type of <code>trap expr</code> is\nT|error. It is permitted for T to be <code>never</code>.</li>\n</ul>\n</section>\n\n<section>\n<h3 id=\"section_6.35\">6.35 Query expression</h3>\n<p>\nA query expression provides a language-integrated query feature using SQL-like\nsyntax. In this version of Ballerina, the functionality is similar to a list\ncomprehensions; future versions will provided richer functionality.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"query-expr\">query-expr</span> := [<a href=\"#query-construct-type\"><span class=\"ntref\">query-construct-type</span></a>] <a href=\"#query-pipeline\"><span class=\"ntref\">query-pipeline</span></a> <a href=\"#select-clause\"><span class=\"ntref\">select-clause</span></a> [<a href=\"#on-conflict-clause\"><span class=\"ntref\">on-conflict-clause</span></a>]\n<span class=\"ntdfn\" id=\"query-construct-type\">query-construct-type</span> :=\n  <code>table</code> <a href=\"#key-specifier\"><span class=\"ntref\">key-specifier</span></a>\n  | <code>stream</code>\n<span class=\"ntdfn\" id=\"query-pipeline\">query-pipeline</span> := <a href=\"#from-clause\"><span class=\"ntref\">from-clause</span></a> <a href=\"#intermediate-clause\"><span class=\"ntref\">intermediate-clause</span></a>*\n<span class=\"ntdfn\" id=\"intermediate-clause\">intermediate-clause</span> :=\n   <a href=\"#from-clause\"><span class=\"ntref\">from-clause</span></a>\n   | <a href=\"#where-clause\"><span class=\"ntref\">where-clause</span></a>\n   | <a href=\"#let-clause\"><span class=\"ntref\">let-clause</span></a>\n   | <a href=\"#join-clause\"><span class=\"ntref\">join-clause</span></a>\n   | <a href=\"#order-by-clause\"><span class=\"ntref\">order-by-clause</span></a>\n   | <a href=\"#limit-clause\"><span class=\"ntref\">limit-clause</span></a>\n</pre>\n<p>\nA query expression consists of a sequence of clauses. The semantics of clauses\nis specified in terms of transforming a sequence of frames, where a frame is a\nbinding of variables to values. The input to each clause is a sequence of\nframes. As each clause is executed, it iterates over its input frames and emits\noutput: the final clause, which is a <code>select</code> clause, emits output\n<em>values</em>; the other clauses emit output <em>frames</em>. When a\nquery-expr is evaluated, its clauses are executed in a pipeline by making the\nsequence of frames emitted by one clause be the input to the next clause. Each\nclause in the pipeline is executed lazily, pulling input from its preceding\nclause. The input to the first clause is a single empty frame.\n</p>\n<p>\nThe execution of a clause may complete early with an error value, in which case\nthis error value is the result of the query, except when constructing a stream.\nOtherwise, the result of evaluating a query expression is a single value, which\nis constructed from the sequence of values emitted by the last clause. The\nresult must be one of the following basic types:\n</p>\n<ul>\n<li>list - the constructed list has a member for each emitted value; every\nemitted value must beloing to type T, where T[] is the type of the constructed\nvalue</li>\n<li>table - the constructed table has a member for each emitted value; every\nemitted value must belong to type T, where table&lt;T&gt; is the type of the\nconstructed value</li>\n<li>string - the constructed string is the concatenation of the emitted values;\nevery emitted value must be of type string</li>\n<li>xml - the constructed xml value is the concatenation of the emitted values;\nevery emitted value must be of type xml</li>\n<li>stream - the stream generates the emitted values</li>\n</ul>\n<p>\nA query-expr that constructs a stream must start with the <code>stream</code>\nkeyword and is evaluated differently from a query-expr that constructs a value\nof other basic types. The clauses in the query-expr are executed lazily: clauses\nin the query-expr becomes closures, which are called as a result of next\noperations being performed on the stream. If a next operation causes the\nexecution of a clause that completes early with an error value, then the error\nvalue is returned by the next operation; the evaluation of the query-expr will\nalready have resulted in a stream value. If the next operation results in the\nevaluation of an expression within the query-expr completing abruptly with a\ncheck-fail, the associated error value will be returned as the result of the\nnext operation. If the next operation results in the evaluation of an expression\nwithin the query-expr completely abruptly with a panic, then the next operation\nwill complete abruptly with a panic.\n</p>\n<p>\nIf the query-expr starts with <code>table</code>, then the query-expr will\nconstruct a table; the key-specifier specifies the key sequence of the\nconstructed table in the same way as with a table-constructor-expr. Otherwise,\nthe applicable contextually expected type determines the basic type of the value\nconstructed. If there is no contextually expected type, then the basic type of\nthe value constructed is the basic type of expression following <code>in</code>;\nit is a compile-time error if the static type of this expression is not a\nsubtype of one of the basic types that a query expression can construct.\n</p>\n<p>\nWhen during the construction of a table, an emitted value is added as a new\nmember, it replaces any existing member with the same key value; when a new\nmember replaces an existing member, it will have the same position in the order\nof members as the existing member. This behavior may be controlled by an\n<code>on conflict</code> clause.\n</p>\n<p>\nVariables bound by the clauses of a query-pipeline are implicitly final, and\ncannot be modified.\n</p>\n\n<section>\n<h4 id=\"section_6.35.1\">6.35.1 From clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"from-clause\">from-clause</span> := <code>from</code> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>in</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>from</code> clause is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var>\n<ul>\n<li>evaluate the <code>in</code> expression with <var>f</var> in scope resulting\nin an iterable value <var>c</var>;</li>\n<li>create an Iterator object <var>i</var> from <var>c</var>\n</li>\n<li>do the following in a loop <var>L</var>\n<ul>\n<li>call <code><var>i</var>.next()</code> resulting in a value <var>r</var>;</li>\n<li>if <var>r</var> is an error, then complete execution of the from-clause\nearly with error <var>r</var>;</li>\n<li>if <var>r</var> is <code>()</code>, stop loop <var>L</var>;</li>\n<li>let <var>v</var> be <code><var>r</var>.value</code>;</li>\n<li>emit a frame consisting of <var>f</var> augmented with the variables\nresulting from binding typed-binding-pattern to <var>v</var>.</li>\n</ul>\n</li>  \n</ul>\n</li>  \n</ul>\n</section>\n\n<section>\n<h4 id=\"section_6.35.2\">6.35.2 Where clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"where-clause\">where-clause</span> := <code>where</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>where</code> clause is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var> \n<ul>\n<li>execute the <code>expression</code> with <var>f</var> in scope resulting in\nvalue <var>b</var>;</li>\n<li>if <var>b</var> is true, emit <var>f</var>.</li>\n</ul>\n</li> \n</ul>\n</section>\n\n<section>\n<h4 id=\"section_6.35.3\">6.35.3 Let clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"let-clause\">let-clause</span> := <code>let</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a> [<code>,</code> <a href=\"#let-var-decl\"><span class=\"ntref\">let-var-decl</span></a>]* \n</pre>\n<p>\nA <code>let</code> clause consisting of a single let-var-decl is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var> \n<ul>\n<li>evaluate the expression with <var>f</var> in scope resulting in a value <var>v</var>;</li>\n<li>emit a frame consisting of <var>f</var> augmented with the result of binding\ntype-binding-pattern to <var>v</var>.</li>\n</ul>\n</li> \n</ul>\n<p>\nA <code>let</code> clause with more than one <code>let-var-decl</code> is\ntransformed into multiple <code>let</code> clauses: <code>let x<sub>1</sub> =\nE<sub>1</sub>, x<sub>2</sub> = E<sub>2</sub></code> is transformed into\n<code>let x<sub>1</sub> = E<sub>1</sub> let x<sub>2</sub> =\nE<sub>2</sub></code>.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_6.35.4\">6.35.4 Join clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"join-clause\">join-clause</span> := [<code>outer</code>] <code>join</code> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>in</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#join-on-condition\"><span class=\"ntref\">join-on-condition</span></a>\n<span class=\"ntdfn\" id=\"join-on-condition\">join-on-condition</span> := <code>on</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>equals</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA join clause performs an inner or left outer equijoin.\n</p>\n<p>\nA <code>join</code> clause is executed as follows:\n</p>\n<ul>\n<li>compute a mapping for the right side of the join; during this computation\nvariable bindings from input frames are not in scope:\n<ul>\n<li>create an empty mapping <var>m</var> that maps from keys to lists of frames\n(using <a href=\"#DeepEquals\">DeepEquals</a> to compare keys);</li>\n<li>evaluate the expression following <code>in</code> resulting in an iterable\nvalue <var>c</var>;</li>\n<li>create an Iterator object <var>i</var> from <var>c</var>;</li>\n<li>do the following in a loop <var>L</var>\n<ul>\n<li>call <code><var>i</var>.next()</code> resulting in a value <var>r</var>;</li>\n<li>if <var>r</var> is an error, then complete execution of the join-clause\nearly with error <var>r</var>;</li>\n<li>if <var>r</var> is <code>()</code>, stop loop <var>L</var>;</li>\n<li>let <var>v</var> be <code><var>r</var>.value</code>;</li>\n<li>let <var>f</var> be a frame with the result of binding the\ntyped-binding-pattern to <var>v</var>;</li>\n<li>evaluate the expression to right of <code>equals</code> with <var>f</var>\nin scope resulting in a value <var>k</var>;</li>\n<li>add an entry to <var>m</var> with key <var>k</var> and and frame <var>f</var>;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>for each input frame <var>f</var>\n<ul>\n<li>evaluate the expression to the left of <code>equals</code> with frame <var>f</var>\nin scope resulting in a value <var>k</var>;</li>\n<li>let <var>fs</var> be the list of frames for key <var>k</var> in <var>m</var>;</li>\n<li>for each frame <var>f'</var> in <var>fs</var>\n<ul>\n<li>emit a frame consisting of <var>f</var> augmented with <var>f'</var>;</li>\n</ul>\n</li>\n<li>if <code>outer</code> was specified and <var>fs</var> is empty, then emit a\nsingle frame consisting of <var>f</var> augmented with a frame that binds every\nvariable occurring in typed-binding-pattern to <code>()</code>.\n</li>\n</ul>\n</li>\n</ul>\n<p>\nIn the above, if <var>c</var> evaluates to a table, and the result of evaluating\nthe expression to the right of <code>equals</code> for a member of the table\nwill always be the key value for that member of the table, then the above can be\noptimized by using the table instead of creating a new mapping.\n</p>\n<p>\nVariables bound by previous clauses are not in scope for the expression\nfollowing <code>in</code>, nor for the expression on the right of\n<code>equals</code>. Variables bound by the typed-binding-pattern are not in\nscope for the expression following <code>in</code>, nor for the expression on\nthe left of <code>equals</code>.\n</p>\n<p>\nWhen <code>outer</code> is specified, the typed-binding-pattern is treated\nspecially: the inferable-type-descriptor in the typed-binding-pattern must be\n<code>var</code>, and for each variable occurring in the typed-binding-pattern,\nif the type that would be inferred usually for the variable would be\n<var>T</var>, then the type inferred in this case will be\n<var>T</var><code>?</code>.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_6.35.5\">6.35.5 Order by clause</h4>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"order-by-clause\">order-by-clause</span> := <code>order</code> <code>by</code> <a href=\"#order-key\"><span class=\"ntref\">order-key</span></a> [<code>,</code> <a href=\"#order-key\"><span class=\"ntref\">order-key</span></a>]*\n<span class=\"ntdfn\" id=\"order-key\">order-key</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> [<a href=\"#order-direction\"><span class=\"ntref\">order-direction</span></a>]\n<span class=\"ntdfn\" id=\"order-direction\">order-direction</span> := <code>ascending</code> | <code>descending</code>\n</pre>\n<p>\nThe static type of the expression in an order-key must be an <a href=\"#ordering\">ordered</a> type. The order-direction is <code>ascending</code>\nif not explicitly specified.\n</p>\n<p>\nAn <code>order-by</code> clause is executed by constructing a list\nof entries, where each entry consists of:\n</p>\n<ul>\n<li>a frame</li>\n<li>a list of keys, one for each order-key in the order-by-clause, and</li>\n<li>an integer index</li>\n</ul>\n<p>\nIn order to define the correct ordering of the list, we first define a CompareK\noperation that compares two keys with a specified direction: CompareK(x,y,d) is\nCompareA(x,y) if d is ascending and otherwise (d is descending) is\nReverse(CompareD(x,y)), where Reverse applied to LT, EQ, GT is GT, EQ, LT\nrespectively. Now define an operation CompareKL(x,y,d) applying to two lists of\nkeys and a list of directions as follows. Let x be\n[x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>], y be\n[y<sub>1</sub>,y<sub>2</sub>,...,y<sub>n</sub>], and d be [d<sub>1</sub>,\nd<sub>2</sub>,...,d<sub>n</sub>]. Then let r be\nCompareK(x<sub>1</sub>,y<sub>1</sub>,d<sub>1</sub>). Then the result of\nCompareKL(x,y,d) is:\n</p>\n<ul>\n<li>r, if r is not EQ</li>\n<li>otherwise, EQ, if n is 1</li>\n<li>otherwise,\nCompareKL([x<sub>2</sub>,...,x<sub>n</sub>],[y<sub>2</sub>,...,y<sub>n</sub>],[d<sub>2</sub>,...,d<sub>n</sub>]).</li>\n</ul>\n<p>\nThen in a correct ordering of the list of entries when the list of directions is\nd, an entry with keys with keys x and index i is before an entry with keys y and\nindex j if CompareKL(x,y,d) is LT or if CompareKL(x,y,d) is EQ and i is less\nthan j.\n</p>\n<p>\nAn <code>order-by</code> clause is executed as follows:\n</p>\n<ul>\n<li>create an empty list <var>E</var> of entries</li>\n<li>for each input frame <var>f</var> add an entry to <var>E</var> in which\n<ul>\n<li>the frame is <var>f</var>\n</li>\n<li>the list of keys is a list of the results of evaluating each order-key's\nexpression with <var>f</var> in scope</li>\n<li>the index is the length of <var>E</var>\n</li>\n</ul>\n</li>\n<li>sort <var>E</var> so that it is ordered correctly as described above</li>\n<li>for each entry in <var>E</var>, emit the entry's frame</li>\n</ul>\n\n</section>\n<section>\n<h4 id=\"section_6.35.6\">6.35.6 Limit clause</h4>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"limit-clause\">limit-clause</span> := <code>limit</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>limit</code> clause limits the number of frames emitted by a query pipeline.\n</p>\n<p>\nA <code>limit</code> clause is executed as follows:\n</p>\n<ul>\n<li>evaluate expression resulting in a value <var>n</var>; variable bindings\nfrom input frames are not in scope for this evaluation;</li>\n<li>if <var>n</var> is less than zero, then panic;</li>\n<li>for each input frame <var>f</var>, while <var>n</var> is greater than 0\n<ul>\n<li>decrement <var>n</var>;</li>\n<li>emit <var>f</var>.</li> \n</ul>\n</li> \n</ul>\n\n<p>\nThe static type of expression must be a subtype of <code>int</code>.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_6.35.7\">6.35.7 Select clause</h4>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"select-clause\">select-clause</span> := <code>select</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA <code>select</code> clause is executed as follows:\n</p>\n<ul>\n<li>for each input frame <var>f</var> \n<ul>\n<li>evaluate the expression with <var>f</var> in scope resulting in value <var>v</var>\n</li>\n<li>emit <var>v</var>\n</li> \n</ul>\n</li> \n</ul>\n</section>\n\n<section>\n<h4 id=\"section_6.35.8\">6.35.8 On conflict clause</h4>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"on-conflict-clause\">on-conflict-clause</span> := <code>on</code> <code>conflict</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nAn <code>on conflict</code> clause is allowed only for a query expression that\nconstructs a table with a key sequence. The expression is evaluated when the\n<code>select</code> clause emits a value that conflicts with a previous value,\nin the sense that both values have the same key value in the table. The\nexpression is evaluated with the same frame in scope as the select clause that\nemitted the value that conflicts with the previous value. The static type of the\nexpression must be a subtype of <code>error?</code>. If the result of evaluating\nthe expression is an error <var>e</var>, then the result of evaluating the\nquery-expr is <var>e</var>. Otherwise, the result must be nil, and the earlier\nnew value replaces the earlier conflicting value, in the same way as if there\nnot been an <code>on conflict</code> clause.\n</p>\n<p>\nNote that the expression may have side-effects; for example, it may call a\nfunction that logs an error.\n</p>\n</section>\n\n</section>\n<section>\n<h3 id=\"section_6.36\">6.36 XML navigation expression</h3>\n<p>\nXML navigation expressions allow for convenient navigation of XML element structure,\nin a similar way to XPath.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-navigate-expr\">xml-navigate-expr</span> := <a href=\"#xml-filter-expr\"><span class=\"ntref\">xml-filter-expr</span></a> | <a href=\"#xml-step-expr\"><span class=\"ntref\">xml-step-expr</span></a>\n</pre>\n<section>\n<h4 id=\"section_6.36.1\">6.36.1 XML name pattern</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-name-pattern\">xml-name-pattern</span> := <a href=\"#xml-atomic-name-pattern\"><span class=\"ntref\">xml-atomic-name-pattern</span></a> [<code>|</code> <a href=\"#xml-atomic-name-pattern\"><span class=\"ntref\">xml-atomic-name-pattern</span></a>]*\n\n<span class=\"ntdfn\" id=\"xml-atomic-name-pattern\">xml-atomic-name-pattern</span> :=\n  <code>*</code>\n  | <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n  | <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> <a href=\"#NoSpaceColon\"><span class=\"ntref\">NoSpaceColon</span></a> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n  | <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> <a href=\"#NoSpaceColon\"><span class=\"ntref\">NoSpaceColon</span></a> <code>*</code>\n</pre>\n\n<p>\nAn XML name pattern matches a string specifying the name of an XML element.\n</p>\n<p>\nAn xml-atomic-name-pattern that is <code>*</code> matches any name.\n</p>\n<p>\nAn xml-namespace-prefix in an xml-atomic-name-pattern must be declared by an\nxmlns-decl. If there is an in-scope default namespace (declared by an\nxmlns-decl), an xml-atomic-pattern that is just an identifier specifies a\nname in that default namespace.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.36.2\">6.36.2 XML filter expression</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-filter-expr\">xml-filter-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>.&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n</pre>\n<p>\nAn xml-filter-expr selects constituents of a sequence that are elements with a\nname matching a specified name pattern. The static type of the expression must\nbe a subtype of xml. The static type of the xml-filter-expr is\n<code>xml&lt;xml:Element&gt;</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_6.36.3\">6.36.3 XML step expression</h4>\n<p>\nAn xml-step-expr provides access to the children or descendants of an element,\nsimilar to a location path in XPath.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xml-step-expr\">xml-step-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#xml-step-start\"><span class=\"ntref\">xml-step-start</span></a> <a href=\"#xml-step-extend\"><span class=\"ntref\">xml-step-extend</span></a>*\n\n<span class=\"ntdfn\" id=\"xml-step-start\">xml-step-start</span> :=\n   <a href=\"#xml-all-children-step\"><span class=\"ntref\">xml-all-children-step</span></a>\n   | <a href=\"#xml-element-children-step\"><span class=\"ntref\">xml-element-children-step</span></a>\n   | <a href=\"#xml-element-descendants-step\"><span class=\"ntref\">xml-element-descendants-step</span></a>\n<span class=\"ntdfn\" id=\"xml-all-children-step\">xml-all-children-step</span> := <code>/*</code>\n<span class=\"ntdfn\" id=\"xml-element-children-step\">xml-element-children-step</span> := <code>/&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n<span class=\"ntdfn\" id=\"xml-element-descendants-step\">xml-element-descendants-step</span> := <code>/**/&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n\n<span class=\"ntdfn\" id=\"xml-step-extend\">xml-step-extend</span> :=\n   <code>.&lt;</code> <a href=\"#xml-name-pattern\"><span class=\"ntref\">xml-name-pattern</span></a> <code>&gt;</code>\n   | <code>[</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>]</code>\n   | <code>.</code> <a href=\"#method-name\"><span class=\"ntref\">method-name</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nThe production for xml-step-expr is ambiguous with the productions for\nmember-access-expr and method-call-expr: this must be resolved by preferring the\nparse that includes as much as possible in the xml-step-expr.\n</p>\n<p>\nThe static type of the expression must be a subtype of xml.\n</p>\n<p>\nAn xml-step-expr that starts with an xml-all-children-step\n</p>\n<pre>\n   <var>E</var> /* <var>X</var>\n</pre>\n<p>\nis equivalent to\n</p>\n<pre>\n   xml:map(xml:elements(<var>E</var>), v =&gt; xml:getChildren(v) <var>X</var>)\n</pre>\n<p>\nwhere <code>v</code> is a variable name not used in <code><var>X</var></code>.\n</p>\n<p>\nAn xml-step-expr that starts with an xml-element-children-step\n</p>\n<pre>\n   <var>E</var> /&lt; <var>NP</var> &gt; <var>X</var>\n</pre>\n<p>\nis equivalent to\n</p>\n<pre>\n   xml:map(xml:elements(<var>E</var>), v =&gt; xml:getChildren(v) .&lt;<var>NP</var>&gt; <var>X</var>)\n</pre>\n<p>\nwhere <code>v</code> is a variable name not used in <code><var>X</var></code>.\n</p>\n<p>\nAn xml-step-expr that starts with an xml-element-descendants-step\n</p>\n<pre>\n   <var>E</var> /**/&lt; <var>NP</var> &gt; <var>X</var>\n</pre>\n<p>\nis equivalent to\n</p>\n<pre>\n   xml:map(xml:elements(<var>E</var>), v =&gt; xml:getDescendants(v) .&lt;<var>NP</var>&gt; <var>X</var>)\n</pre>\n<p>\nwhere <code>v</code> is a variable name not used in <code><var>X</var></code>.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_6.37\">6.37 Transactional expression</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"transactional-expr\">transactional-expr</span> := <code>transactional</code>\n</pre>\n<p>\nA <code>transactional-expr</code> evaluates to true if the expression is being\nevaluated in transaction mode and false otherwise.\n</p>\n\n</section>\n\n</section>\n<section>\n<h2 id=\"actions_statements\">7. Actions and statements</h2>\n<section>\n<h3 id=\"section_7.1\">7.1 Actions</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"action\">action</span> :=\n   <a href=\"#start-action\"><span class=\"ntref\">start-action</span></a>\n   | <a href=\"#wait-action\"><span class=\"ntref\">wait-action</span></a>\n   | <a href=\"#send-action\"><span class=\"ntref\">send-action</span></a>\n   | <a href=\"#receive-action\"><span class=\"ntref\">receive-action</span></a> \n   | <a href=\"#flush-action\"><span class=\"ntref\">flush-action</span></a>\n   | <a href=\"#client-remote-method-call-action\"><span class=\"ntref\">client-remote-method-call-action</span></a>\n   | <a href=\"#query-action\"><span class=\"ntref\">query-action</span></a>\n   | <a href=\"#type-cast-action\"><span class=\"ntref\">type-cast-action</span></a>\n   | <a href=\"#checking-action\"><span class=\"ntref\">checking-action</span></a>\n   | <a href=\"#trap-action\"><span class=\"ntref\">trap-action</span></a>\n   | <a href=\"#commit-action\"><span class=\"ntref\">commit-action</span></a>\n   | <code>(</code> <a href=\"#action\"><span class=\"ntref\">action</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"action-or-expr\">action-or-expr</span> := <a href=\"#action\"><span class=\"ntref\">action</span></a> | <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n<span class=\"ntdfn\" id=\"type-cast-action\">type-cast-action</span> := <code>&lt;</code> <a href=\"#type-cast-param\"><span class=\"ntref\">type-cast-param</span></a> <code>&gt;</code> <a href=\"#action\"><span class=\"ntref\">action</span></a>\n<span class=\"ntdfn\" id=\"checking-action\">checking-action</span> := <a href=\"#checking-keyword\"><span class=\"ntref\">checking-keyword</span></a> <a href=\"#action\"><span class=\"ntref\">action</span></a>\n<span class=\"ntdfn\" id=\"trap-action\">trap-action</span> := <code>trap</code> <a href=\"#action\"><span class=\"ntref\">action</span></a>\n</pre>\n<p>\nActions are an intermediate syntactic category between expressions and\nstatements. Actions are similar to expressions, in that they yield a value.\nHowever, an action cannot be nested inside an expression; it can only occur as\npart of a statement or nested inside other actions. This is because actions are\nshown in the sequence diagram in the graphical syntax.\n</p>\n<p>\nThe syntax for actions is defined by the above grammar and precedence rules. The\nprecedence rules are that a client-remote-method-call-action has higher\nprecedence than a checking-action or a trap-action.\n</p>\n<p>\nAn action is evaluated in the same way as an expression. Static typing for\nactions is the same as for expressions.\n</p>\n<p>\nA <code>type-cast-action</code>, <code>checking-action</code> or\n<code>trap-action</code> is evaluated in the same way as a\n<code>type-cast-expr</code>, <code>checking-expr</code> or\n<code>trap-expr</code> respectively.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_7.2\">7.2 Threads and strands</h3>\n\n<p>\nBallerina's concurrency model supports both threads and coroutines. A Ballerina\nprogram is executed on one or more threads. A thread may run on a separate core\nsimultaneously with other threads, or may be pre-emptively multitasked with\nother threads onto a single core.\n</p>\n<p>\nEach thread is divided into one or more <em>strands</em>. No two strands\nbelonging to the same thread can run simultaneously. Instead, all the strands\nbelonging to a particular thread are cooperatively multitasked. Strands within\nthe same thread thus behave as coroutines relative to each other. A strand\nenables cooperative multitasking by <em>yielding</em>. When a strand yields,\nthe runtime scheduler may suspend execution of the strand, and switch its thread\nto executing another strand. The following actions cause a strand to yield:\n</p>\n<ul>\n<li>worker-receive-action</li>\n<li>wait-action</li>\n<li>flush-action</li>\n<li>sync-send-action</li>\n</ul>\n<p>\nIn addition, any function with an external-function-body can potentially yield;\nit should only do so if it performs a system call that would block or calls a\nBallerina function that itself yields. The `sleep` function in\n<code>lang.runtime</code> will make the strand yield. Other functions in the\nlang library do not themselves yield, although if they call a function passed as\nan argument, that function may result in yielding.\n</p>\n<p>\nThere are two language constructs whose execution causes the creation of new\nstrands: named-worker-decl and start-action. These constructs may use\nannotations to indicate that the newly created strand should be in a separate\nthread from the current strand. In the absence of such annotations, the new\nstrand must be part of the same thread as the current strand.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_7.3\">7.3 Function bodies</h3>\n\n<section>\n<h4 id=\"section_7.3.1\">7.3.1 Function parameters</h4>\n<p>\nBefore the block-function-body of a function-defn is executed, the parameters\ndeclared in the function-signature of the function-defn are initialized from the\nargument list that was constructed by the function-call-expr. The non-rest\nparameters are initialized from the arguments in the argument list in order. The\nconformance of the argument list to the param-list declared for the function\nensures that each parameter will be initialized to a value that belongs to the\ndeclared type of the parameter. If there is a rest-param, then that is a\ninitialized to a newly created list containing the remaining arguments in the\nargument-list; the inherent type of this list will be T[] where T is the type of\nthe rest-param. The conformance of the argument list ensures that the members of\nthis list will belong to type T.\n</p>\n<p>\nThe parameters are in scope for the block-function-body. They are implicitly\nfinal: they can be read but not modified.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_7.3.2\">7.3.2 Workers</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"block-function-body\">block-function-body</span> :=\n   <code>{</code> [<a href=\"#default-worker-init\"><span class=\"ntref\">default-worker-init</span></a> <a href=\"#named-worker-decl\"><span class=\"ntref\">named-worker-decl</span></a>+] <a href=\"#default-worker\"><span class=\"ntref\">default-worker</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"default-worker-init\">default-worker-init</span> := <a href=\"#statement\"><span class=\"ntref\">statement</span></a>*\n<span class=\"ntdfn\" id=\"default-worker\">default-worker</span> := <a href=\"#statement\"><span class=\"ntref\">statement</span></a>*\n<span class=\"ntdfn\" id=\"named-worker-decl\">named-worker-decl</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<a href=\"#transactional-qual\"><span class=\"ntref\">transactional-qual</span></a>] <code>worker</code> <a href=\"#worker-name\"><span class=\"ntref\">worker-name</span></a> <a href=\"#return-type-descriptor\"><span class=\"ntref\">return-type-descriptor</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n<span class=\"ntdfn\" id=\"worker-name\">worker-name</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nA worker represents a single strand of a function invocation. A statement\nis always executed in the context of a current worker. A worker is in one of\nthree states: active, inactive or terminated. When a worker is in the\nterminated state, it has a termination value. A worker terminates either\nnormally or abnormally. An abnormal termination results from a panic, and in\nthis case the termination value is always an error. If the termination value of\na normal termination is an error, then the worker is said to have terminated\nwith failure; otherwise the worker is said to have terminated with success. Note\nthat an error termination value resulting from a normal termination is\ndistinguished from an error termination value resulting from an abnormal\ntermination.\n</p>\n<p>\nA function always has a single default worker, which is unnamed. The strand for\na function's default worker is the same as the strand of the worker on which\nfunction was called. When a function is called, the current worker becomes\ninactive, and a default worker for the called function is started. When the\ndefault worker terminates, the function returns to its caller, and the caller's\nworker is reactivated. Thus only one worker in each strand is active at any\ngiven time. If a function's default worker terminates normally, then its\ntermination value provides the return value of the function. If a function's\ndefault worker terminates abnormally, then the evaluation of the function call\nexpression completes abruptly with a panic and the worker's termination value\nprovides the associated value for the abrupt completion of the function call.\nThe function's return type is the same as the return type of the function's\ndefault worker.\n</p>\n<p>\nA function also has zero or more named workers. Each named worker runs on its\nown new strand. The termination of a function is independent of the termination\nof its named workers. The termination of a named worker does not automatically\nresult in the termination of its function. When a function's default worker\nterminates, causing the function to terminate, the function does not\nautomatically wait for the termination of its named workers.\n</p>\n<p>\nA named worker has a return type. If the worker terminates normally, the\ntermination value will belong to the return type. If the return type of a worker\nis not specified, it defaults to nil as for functions.\n</p>\n<p>\nA named-worker is a transactional scope only if it is declared as\n<code>transactional</code>. This is allowed only if the block-function-body is a\ntransactional scope, i.e. if it is the body of a function declared as\n<code>transactional</code>.\n</p>\n<p>\nWhen a function has named workers, the function's default worker executes in\nthree stages, as follows:\n</p>\n<ol>\n<li>The statements in default-worker-init are executed.</li>\n<li>All the named workers are started. Each named worker executes its\nstatement-block on its strand.</li>\n<li>The statements in default-worker are executed. This happens without waiting\nfor the termination of the named workers started in stage 2.</li>\n</ol>\n<p>\nParameters and variables declared in default-worker-init are in scope within\nnamed workers, whereas variables declared in default-worker are not.\n</p>\n<p>\nThe execution of a worker's statements may result in the execution of a\nstatement that causes the worker to terminate. For example, a return statement\ncauses the worker to terminate. If this does not happen, then the worker\nterminates as soon as it has finished executing its statements. In this case,\nthe worker terminates normally, and the termination value is nil. In other\nwords, falling off the end of a worker is equivalent to <code>return;</code>,\nwhich is in turn equivalent to <code>return ();</code>.\n</p>\n<p>\nThe scope of a worker-name in a named-worker-decl that is part of a\nblock-function-body is the entire block-function-body with the exception of the\ndefault-worker-init. When a worker-name is in scope, it can be used in a\nvariable-reference-expr. The result of evaluating such a variable reference is a\nfuture value that refers to the value to be returned by that named worker. The\nstatic type of the result is future&lt;T&gt;, where T is the return type of the\nworker.\n</p>\n<p>\nA strand can initiate a wait on another strand by using a wait-action with a\nvalue of type future. Only one wait on a strand can succeed; this wait receives\nthe value returned by the strand. Any other waits on that strand fail. It is a\ncompile-time error if for any named worker it is possible for the name of that\nworker to be evaluated as a variable-reference more than once for any execution\nof that worker. This ensures that wait operations that use just a worker-name to\nidentify the strand to wait on cannot fail at runtime.\n</p>\n<p>\nIn the above, function includes method, and function call includes method call.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_7.3.3\">7.3.3 Expression-bodied functions</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"expr-function-body\">expr-function-body</span> := <code>=&gt;</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n\n<p>\nAn expr-function-body is used for an expression-bodied function, that is a\nfunction whose body is specified by an expression. An expr-function-body of the\nform <code>=&gt; <var>E</var></code> is short for a block-function-body <code>{\nreturn <var>E</var>}</code>.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_7.3.4\">7.3.4 External functions</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"external-function-body\">external-function-body</span> := <code>=</code> [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>external</code> \n</pre>\n\n<p>\nAn <code>external-function-body</code> means that the implementation of the\nfunction is not provided in the Ballerina source module. A function-defn-body\nwith a function-signature that is dependently-typed must be an\nexternal-function-body.\n</p>\n\n</section>\n<section>\n<h4 id=\"isolated_functions\">7.3.5 Isolated functions</h4>\n<p>\nThe body of a function or method declared as <code>isolated</code> must meet the\nfollowing requirements.\n</p>\n<ul>\n<li>Only isolated functions can be called:\n<ul>\n<li>in a function-call-expr, the function-reference must refer to a function\nwhose static type is isolated;</li>\n<li>in a method-call-expr, the method-name must refer to a method or\nfunction whose static type is isolated;</li>\n<li>in a new-expr or object-constructor-expr, the init method that is called\nmust be declared as isolated (a missing init method is equivalent is implicitly\nisolated).</li>\n</ul>\n</li>\n<li>Non-isolated module-level state can only be read in two cases, specifically\na variable-reference can refer to an an identifier declared by a\nmodule-var-decl or listener-decl only if:\n<ul>\n<li>the identifier is declared by a module-var-decl that includes\n<code>final</code> or <code>configurable</code> but does not include\n<code>isolated</code>, or is declared by a listener-decl or a service-decl,\nand</li>\n<li>the static type of the variable is a subtype of <code>isolated object\n{}</code> or of <code>readonly</code> (which will always be the case if the\nidentifier is declared as <code>configurable</code>).</li>\n</ul>\n</li>\n<li>Non-isolated module-level state cannot be mutated: an identifier in a\nvariable-reference-lvexpr or in a capture-binding-pattern in a\ndestructuring-assignment-stmt must not refer to a variable defined by a\nmodule-var-decl that does not include <code>isolated</code>.</li>\n<li>Captured variables are restricted as follows: if the body is part of an\nanonymous-function-expr, then any captured variable references must refer to\nvariables that are both final (either explicitly or implicitly) and have a\nstatic type that is a subtype of <code>readonly|isolated object {}</code>.</li>\n<li>New workers cannot be started: the following constructs are not allowed\n<ul>\n<li>named-worker-decl</li>\n<li>fork-stmt</li>\n<li>start-action</li>\n</ul>\n</li>\n</ul>\n<p>\nIf an isolated function has an <code>external-function-body</code>, then the\nabove requirements also apply to the external implementation as regards its\naccess to the mutable state of the Ballerina program, in the sense that it must\nonly access the mutable state that is reachable from the parameters passed to\nthe function. In addition, the function should have well-defined behaviour if it\nis called concurrently on multiple strands.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_7.4\">7.4 Statements</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"statement\">statement</span> := \n   <a href=\"#action-stmt\"><span class=\"ntref\">action-stmt</span></a>\n   | <a href=\"#local-var-decl-stmt\"><span class=\"ntref\">local-var-decl-stmt</span></a>\n   | <a href=\"#xmlns-decl-stmt\"><span class=\"ntref\">xmlns-decl-stmt</span></a>\n   | <a href=\"#assignment-stmt\"><span class=\"ntref\">assignment-stmt</span></a>\n   | <a href=\"#compound-assignment-stmt\"><span class=\"ntref\">compound-assignment-stmt</span></a>\n   | <a href=\"#destructuring-assignment-stmt\"><span class=\"ntref\">destructuring-assignment-stmt</span></a>\n   | <a href=\"#call-stmt\"><span class=\"ntref\">call-stmt</span></a>\n   | <a href=\"#if-else-stmt\"><span class=\"ntref\">if-else-stmt</span></a>\n   | <a href=\"#regular-compound-stmt\"><span class=\"ntref\">regular-compound-stmt</span></a>\n   | <a href=\"#continue-stmt\"><span class=\"ntref\">continue-stmt</span></a>\n   | <a href=\"#break-stmt\"><span class=\"ntref\">break-stmt</span></a>\n   | <a href=\"#stmt-with-on-fail\"><span class=\"ntref\">stmt-with-on-fail</span></a>\n   | <a href=\"#fail-stmt\"><span class=\"ntref\">fail-stmt</span></a>\n   | <a href=\"#retry-stmt\"><span class=\"ntref\">retry-stmt</span></a>\n   | <a href=\"#transaction-stmt\"><span class=\"ntref\">transaction-stmt</span></a>\n   | <a href=\"#retry-transaction-stmt\"><span class=\"ntref\">retry-transaction-stmt</span></a>\n   | <a href=\"#rollback-stmt\"><span class=\"ntref\">rollback-stmt</span></a>\n   | <a href=\"#panic-stmt\"><span class=\"ntref\">panic-stmt</span></a>\n   | <a href=\"#return-stmt\"><span class=\"ntref\">return-stmt</span></a>\n   | <a href=\"#fork-stmt\"><span class=\"ntref\">fork-stmt</span></a>\n</pre>\n\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"regular-compound-stmt\">regular-compound-stmt</span> :=\n  <a href=\"#do-stmt\"><span class=\"ntref\">do-stmt</span></a>\n  | <a href=\"#match-stmt\"><span class=\"ntref\">match-stmt</span></a>\n  | <a href=\"#foreach-stmt\"><span class=\"ntref\">foreach-stmt</span></a>\n  | <a href=\"#while-stmt\"><span class=\"ntref\">while-stmt</span></a>\n  | <a href=\"#lock-stmt\"><span class=\"ntref\">lock-stmt</span></a>\n</pre>\n<p>\nA <code>regular-compound-stmt</code> can be combined with an\n<code>on-fail-clause</code> to make a <code>stmt-with-on-fail</code>.\n</p>\n\n<section>\n<h4 id=\"section_7.4.1\">7.4.1 Statement execution</h4>\n<p>\nThe execution of a statement completes in one of three ways:\n</p>\n<ul>\n<li>it may complete normally;</li>\n<li>it may complete by terminating the current worker; or</li>\n<li>it may complete by transferring control within the same worker.</li>\n</ul>\n<p>\nWhen the execution of a statement involves the evaluation of an action or an\nexpression, and that evaluation completes abruptly, then, except where\nexplicitly stated to the contrary, the execution of the statement completes as\nfollows.\n</p>\n<ul>\n<li>If the abrupt completion is a check-fail with associated value e, then\ncontrol flow is transferred as if by a <code>fail-stmt</code> with an expression\nthat evaluates to e.</li>\n<li>If the abrupt completion is a panic with associated value e, then the\ncurrent worker is terminated as if by a <code>panic-stmt</code> with an\nexpression that evaluates to e.</li>\n</ul>\n<p>\nThe following sections describe for each kind of statement any other cases in\nwhich the execution of that kind of statement does not completely normally.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_7.4.2\">7.4.2 Statement blocks</h4>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"statement-block\">statement-block</span> := <code>{</code> <a href=\"#statement\"><span class=\"ntref\">statement</span></a>* <code>}</code>\n</pre>\n<p>\nA <code>statement-block</code> is executed by executing its\n<code>statement</code>s sequentially. This means that when the execution of one\n<code>statement</code> completes normally, the immediately following\n<code>statement</code> is executed. However, when the executon\n<code>statement</code> does not complete normally, then none of the following\n<code>statement</code>s in the <code>statement-block</code> are executed. The\nexecution of the <code>statement-block</code> completes normally if and only if\nthe execution of all of its <code>statement</code>s completes normally.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_7.4.3\">7.4.3 Unreachability</h4>\n<p>\nA statement is <em>reachable</em> if the analysis described in this section\ndetermines that there is a possibility that the statement will be executed. It\nis a compile error if a <code>statement</code> is not reachable.\n</p>\n<p>\nThe analysis proceeds by determining recursively for each statement whether it\nis possible for the statement to complete normally, assuming that the statement\nis reachable. Each <code>statement</code> in a <code>statement-block</code>\nafter the first <code>statement</code> is reachable only if it is possible for\nall of the preceding <code>statement</code>s to complete normally.\n</p>\n<p>\nWhen the execution of a statement or a transfer of control is conditional on the\nresult of evaluating an expression, then the analysis assumes that it is\npossible for the statement to be executed or control to be transferred, unless\nthe static type of the expression makes it impossible. Similarly, when the\nevaluation of a subexpression is conditional on the result of previously\nevaluating another subexpression, then the analysis assumes that the second\nevaluation is possible unles the static type of the first subexpression makes it\nimpossible.\n</p>\n</section>\n\n</section>\n\n\n<section>\n<h3 id=\"section_7.5\">7.5 Fork statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"fork-stmt\">fork-stmt</span> := <code>fork</code> <code>{</code> <a href=\"#named-worker-decl\"><span class=\"ntref\">named-worker-decl</span></a>+ <code>}</code>\n</pre>\n<p>\nThe fork statement starts one or more named workers, which run in parallel with\neach other, each in its own new strand.\n</p>\n<p>\nVariables and parameters in scope for the fork-stmt remain in scope within the\nworkers (similar to the situation with parameters and workers in a function\nbody).\n</p>\n<p>\nThe scope of the worker-name in a named-worker-decl that is part of a fork-stmt\nconsists of both other workers in the same fork-stmt and the block containing\nthe fork-stmt starting from the point immediately after the fork-stmt. Within\nits scope, the worker-name can be used in a variable-reference-expr in the same\nway as the worker-name of a named-worker-decl that is part of a\nblock-function-body.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.6\">7.6 Start action</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"start-action\">start-action</span> := [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] <code>start</code> (<a href=\"#function-call-expr\"><span class=\"ntref\">function-call-expr</span></a>|<a href=\"#method-call-expr\"><span class=\"ntref\">method-call-expr</span></a>|<a href=\"#client-remote-method-call-action\"><span class=\"ntref\">client-remote-method-call-action</span></a>)\n</pre>\n\n<p>\nThe keyword <code>start</code> causes the following function or method\ninvocation to be executed on a new strand. The arguments for the function or\nmethod call are evaluation on the current strand. A start-action returns a value\nof basic type future immediately. If the static type of the call expression or\naction <code><var>C</var></code> is T, then the static type of <code>start\n<var>C</var></code> is future&lt;T&gt;; it is permitted for T to be\n<code>never</code>.\n</p>\n\n\n</section>\n<section>\n<h3 id=\"section_7.7\">7.7 Wait action</h3>\n<p>\nA wait-action waits for one or more strands to terminate, and gives access to\ntheir termination values.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"wait-action\">wait-action</span> :=\n   <a href=\"#single-wait-action\"><span class=\"ntref\">single-wait-action</span></a>\n   | <a href=\"#multiple-wait-action\"><span class=\"ntref\">multiple-wait-action</span></a>\n   | <a href=\"#alternate-wait-action\"><span class=\"ntref\">alternate-wait-action</span></a>\n\n<span class=\"ntdfn\" id=\"wait-future-expr\">wait-future-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <em>but not</em> <a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>\n</pre>\n<p>\nA wait-future-expr is used by a wait-action to refer to the worker to be waited\nfor. Its static type must be future&lt;T&gt; for some T. As elsewhere, a\nwait-future-expr can use an in-scope worker-name in a variable-reference-expr to\nrefer to named worker.\n</p>\n<p>\nEvaluation of a wait-action performs a wait operation on the future value that\nresults from evaluating a wait-future-expr. This wait operation may complete\nnormally or abruptly. The wait operation initiates a wait for the strand that\nthe future refers to. If the wait fails, then the wait operation completes\nnormally and the result is an error. If the wait succeeds, and the strand\ncompleted normally, then the wait operation completes normally, and the result\nis the termination value of the strand. If the wait succeeds, but the strand\ncompleted abnormally, then the wait operation completes abruptly with a panic\nand the associated value is the termination value of the strand.\n</p>\n<p>\nIn addition to a static type, a wait-future-expr has a compile-time <em>eventual\ntype</em>. If a wait-future-expr is a variable-reference-expr referring to the\nworker-name of a named worker with return type T, then the eventual type of the\nwait-future-expr is T. Otherwise, the eventual of a wait-future-expr with static\ntype future&lt;T&gt; is T|error. The result of a wait operation that completes\nnormally will belong to the eventual type of the wait-future-expr, since the\ncompiler ensures that a wait for a wait-future-expr that is a variable reference\nto a named worker cannot fail.\n</p>\n<p>\nNote that it is only possible to wait for a named worker, which will start its\nown strand. It is not possible to wait for a function's default worker, which\nruns on an existing strand.\n</p>\n<p>\nA mapping-constructor-expr is not recognized as a wait-future-expr (it would not\ntype-check in any case).\n</p>\n<section>\n<h4 id=\"section_7.7.1\">7.7.1 Single wait action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"single-wait-action\">single-wait-action</span> := <code>wait</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a>\n</pre>\n<p>\nA single-wait-action waits for a single future.\n</p>\n<p>\nA single-wait-action is evaluated by first evaluating wait-future-expr resulting\nin a value f of basic type future; the single-wait-action then performs a wait\noperation on f.\n</p>\n<p>\nThe static type of the single-wait-action is the eventual type of the\nwait-future-expr.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.7.2\">7.7.2 Multiple wait action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"multiple-wait-action\">multiple-wait-action</span> := <code>wait</code> <code>{</code> <a href=\"#wait-field\"><span class=\"ntref\">wait-field</span></a> (<code>,</code> <a href=\"#wait-field\"><span class=\"ntref\">wait-field</span></a>)* <code>}</code>\n<span class=\"ntdfn\" id=\"wait-field\">wait-field</span> :=\n  <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n  | <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a>\n</pre>\n<p>\nA multiple-wait-action waits for multiple futures, returning the result as a\nrecord.\n</p>\n<p>\nA wait-field that is a variable-name <code>v</code> is equivalent to a\nwait-field <code>v: v</code>, where <code>v</code> must be the name of an\nin-scope named worker.\n</p>\n<p>\nA multiple-wait-action is evaluated by evaluating each wait-future-expr\nresulting in a value of type future for each wait-field. The\nmultiple-wait-action then performs a wait operation on all of these futures. If\nall the wait operations complete normally, then it constructs a record with a\nfield for each wait-field, whose name is the field-name and whose value is the\nresult of the wait operation. If any of the wait operations complete abruptly,\nthen the multiple-wait-action completes abruptly.\n</p>\n<p>\nThe static type of the multiple-wait-action is a record where the static type of\neach field is the eventual type of the corresponding wait-future-expr.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.7.3\">7.7.3 Alternate wait action </h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"alternate-wait-action\">alternate-wait-action</span> := <code>wait</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a> (<code>|</code> <a href=\"#wait-future-expr\"><span class=\"ntref\">wait-future-expr</span></a>)+\n</pre>\n<p>\nAn alternate-wait-action waits for one of multiple futures to terminate.\n</p>\n<p>\nAn alternate-wait-action is evaluated by first evaluating each wait-future-expr,\nresulting in a set of future values. The alternate-wait-action then performs a\nwait operation on all of these members of this set. As soon as one of the wait\noperations completes normally with a non-error value v, the\nalternate-wait-action completes normally with result v. If all of the wait\noperations complete normally with an error, then it completes normally with\nresult e, where e is the result of the last wait operation to complete. If any\nof the wait operations completely abruptly before the alternate-wait-action\ncompletes, then the alternate-wait-action completes abruptly.\n</p>\n<p>\nThe static type of the alternate-wait-action is the union of the eventual type\nof all of its wait-future-exprs.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_7.8\">7.8 Worker message passing</h3>\n<p>\nMessages can be sent between workers.\n</p>\n<p>\nSends and receives are matched up at compile-time. This allows the connection\nbetween the send and the receive to be shown in the sequence diagram. It is also\nguarantees that any sent message will be received, provided that neither the\nsending nor the receiving worker terminate abnormally or with an error.\n</p>\n<p>\nMessages can only be sent between workers that are peers of each other. A\nfunction's default worker and its named workers are peers of each other. The\nworkers created in a fork-stmt are also peers of each other. The workers created\nin a fork-stmt are not peers of a function's default worker nor of its named\nworkers.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"peer-worker\">peer-worker</span> := <a href=\"#worker-name\"><span class=\"ntref\">worker-name</span></a> | <code>function</code>\n</pre>\n<p>\nA worker-name refers to a worker named in a named-worker-decl, which must be in\nscope; <code>function</code> refers to the function's default worker. The\nreferenced worker must be a peer worker.\n</p>\n<p>\nEach worker maintains a separate logical queue for each peer worker to which it\nsends messages; a sending worker sends a message by adding it to the queue; a\nreceiving worker receives a message by removing it from the sending worker's\nqueue for that worker; messages are removed in the order in which they were\nadded to the queue.\n</p>\n<section>\n<h4 id=\"section_7.8.1\">7.8.1 Send action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"send-action\">send-action</span> := <a href=\"#sync-send-action\"><span class=\"ntref\">sync-send-action</span></a> | <a href=\"#async-send-action\"><span class=\"ntref\">async-send-action</span></a>\n<span class=\"ntdfn\" id=\"sync-send-action\">sync-send-action</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-&gt;&gt;</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n<span class=\"ntdfn\" id=\"async-send-action\">async-send-action</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-&gt;</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a> <code>;</code>\n</pre>\n<p>\nA send-action sends a message to the worker that is identified by peer-worker. A\nsend-action starts by evaluating the expression, resulting in a value\n<code><var>v</var></code>; the Clone abstract operation is then applied to\n<code><var>v</var></code> resulting in value <code><var>c</var></code>. This\nvalue <code><var>c</var></code> is added to the message queue maintained by the\nsending worker for messages to be sent to the sending worker;this queue\ncontinues to exist even if the receiving worker has already terminated.\n</p>\n<p>\nFor each send-action S, the compiler determines a unique corresponding\nreceive-action R, such that a message sent by S will be received by R, unless\nR's worker has terminated abnormally or with failure. It is a compile-time error\nif this cannot be done. The compiler determines a <em>failure type</em> for the\ncorresponding receive-action. If the receive-action was not executed and its\nworker terminated normally, then the termination value of the worker will belong\nto the failure type. The failure type will be a (possibly empty) subtype of\nerror.\n</p>\n<p>\nThe difference between async-send-action and sync-send-action is in what happens\nafter the message is added to the queue. The evaluation of async-send-action\ncompletes immediately after this, and the result is always <code>()</code>. A\nsubsequent flush action can be used to check whether the message was received.\nWith sync-send-action, evaluation waits until the receiving worker either\nexecutes a receive action that receives the queued message or terminates. The\nevaluation of sync-send-action completes as follows:\n</p>\n<ul>\n<li>if the queued message was received, then normally with result nil;</li>\n<li>otherwise\n<ul>\n<li>if the receiving worker terminated with failure, then normally with the\nresult being the the termination value of the receiving worker, which will be an\nerror;</li>\n<li>if the receiving worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the receiving worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the sync-send-action is F|() where F is the failure type of\nthe corresponding receive action. If F is empty, then this static type will be\nequivalent to ().\n</p>\n<p>\nThe static type of the <code>expression</code> must be a subtype of\n<code>value:Cloneable</code>. The contextually expected type used to interpret\n<code>expression</code> is the contextually expected type from the corresponding\nreceive-action.\n</p>\n<p>\nIf the receive-action corresponding to an async-send-action has a non-empty\nfailure type, then it is a compile-time error unless it can be determined that a\nsync-send-action or a flush-action will be executed before the sending worker\nterminates with success.\n</p>\n<p>\nIf a worker W is about to terminate normally and there are messages still to be\nsent in a queue (which must be the result of executing an async-send-action), then\nthe worker waits until the messages have been received or some receiving worker\nterminates. If a receiving worker R terminates without the message being\nreceived, R must have terminated abnormally, because the rule in the preceding\nparagraph. In this case, W terminates abnormally and W will use R's termination\nvalue as its termination value.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.8.2\">7.8.2 Receive action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"receive-action\">receive-action</span> := <a href=\"#single-receive-action\"><span class=\"ntref\">single-receive-action</span></a> | <a href=\"#multiple-receive-action\"><span class=\"ntref\">multiple-receive-action</span></a>\n</pre>\n<section>\n<h5 id=\"section_7.8.2.1\">7.8.2.1 Single receive action</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"single-receive-action\">single-receive-action</span> := <code>&lt;-</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n</pre>\n<p>\nA single-receive-action receives a message from a single worker.\n</p>\n<p>\nFor each single-receive-action R receiving from worker W, the compiler\ndetermines a <em>corresponding send set</em>. The corresponding send set S is a\nset of send actions in W, such that\n</p>\n<ul>\n<li>in any execution of W that terminates successfully, exactly one member of S\nis executed and is executed once only</li>\n<li>if R is evaluated, it will receive the single message sent by a member of S,\nunless W has terminated abnormally or with failure.</li>\n</ul>\n<p>\nThe compiler terminates a failure type for the corresponding send set. If no\nmember of the corresponding send set was evaluated and the sending worker\nterminated normally, then the termination value of the sending worker will\nbelong to the failure type. The failure type will be a (possibly empty) subtype\nof error.\n</p>\n<p>\nA single-receive-action is evaluated by waiting until there is a message\navailable in the queue or the sending worker terminates.  The evaluation of\nsingle-receive-action completes as follows:\n</p>\n<ul>\n<li>if a message becomes available in the queue, then the first available\nmessage is removed and the evaluation completes normally with the result being\nthat message;</li>\n<li>otherwise\n<ul>\n<li>if the sending worker terminated with failure, then normally with the result\nbeing the the termination value of the sending worker, which will be an error;</li>\n<li>if the sending worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the sending worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nThe static type of the single-receive-action is T|F where T is the union of the\nstatic type of the expressions in the corresponding send set and F is the\nfailure type of the corresponding send set.\n</p>\n</section>\n<section>\n<h5 id=\"section_7.8.2.2\">7.8.2.2 Multiple receive action</h5>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"multiple-receive-action\">multiple-receive-action</span> :=\n   <code>&lt;-</code>  <code>{</code> <a href=\"#receive-field\"><span class=\"ntref\">receive-field</span></a> (<code>,</code> <a href=\"#receive-field\"><span class=\"ntref\">receive-field</span></a>)* <code>}</code>\n<span class=\"ntdfn\" id=\"receive-field\">receive-field</span> :=\n   <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n   | <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>\n</pre>\n<p>\nA multiple-receive-action receives a message from multiple workers.\n</p>\n<p>\nA peer-worker can occur at most once in a multiple-receive-action.\n</p>\n<p>\nA receive-field consisting of a peer-worker <code>W</code> is equivalent to a\nfield <code>W:W</code>.\n</p>\n<p>\nThe compiler determines a corresponding send set for each receive field, in the\nsame way as for a single-receive-action. A multiple-receive-action is evaluated\nby waiting until there is a message available in the queue for every\npeer-worker.  If any of the peer workers W terminate before a message becomes\navailable, then the evaluation of the multiple-receive-action completes as\nfollows\n</p>\n<ul>\n<li>if the sending worker terminated with failure, then normally with the result\nbeing the the termination value of the sending worker, which will be an error;</li>\n<li>if the sending worker terminated abnormally, then abruptly with a panic,\nwith the associated value being the termination value of the sending worker.</li>\n</ul>\n<p>\nOtherwise, the result of the evaluation of multiple-receive-action completes by\nremoving the first message from each queue and constructing a record with one\nfield for each receive-field, where the value of the record is the message\nreceived.\n</p>\n<p>\nThe contextually expected typed for the multiple-receive-action determines a\ncontextually expected type for each receive-field, in the same way as for a\nmapping constructor. The contextually expected type for each receive-field\nprovides the contextually expected type for the expression in each member of the\ncorresponding send set.\n</p>\n<p>\nThe static type of multiple-receive-action is R|F where\n</p>\n<ul>\n<li>R is a record type, where R is determined in the same way as for a mapping\nconstructor, where the static type of each field comes from the union of the\nstatic types of the expressions in each member of the corresponding send set and\nthe contextually expected type is the contextually expected type of the\nmultiple-receive-action</li>\n<li>F is the union of the failure types for the corresponding send set for each\nreceive-field</li>\n</ul>\n</section>\n</section>\n<section>\n<h4 id=\"section_7.8.3\">7.8.3 Flush action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"flush-action\">flush-action</span> := <code>flush</code> [<a href=\"#peer-worker\"><span class=\"ntref\">peer-worker</span></a>]\n</pre>\n<p>\nIf peer-worker is specified, then flush waits until the queue of messages to be\nreceived by peer-worker is empty or until the peer-worker terminates.\n</p>\n<p>\nSend-receive correspondence for async-send-action implies that the queue will\neventually become empty, unless the peer-worker terminates abnormally or with\nfailure. The evaluation of flush-action completes as follows:\n</p>\n<ul>\n<li>if the queue of messages is empty, then normally with result nil;</li>\n<li>otherwise\n<ul>\n<li>if the peer-worker terminated with failure, then normally with the result\nbeing the the termination value of the peer-worker, which will be an error;</li>\n<li>if the peer-worker terminated abnormally, then abruptly with a panic, with\nthe associated value being the termination value of the peer-worker.</li>\n</ul>\n</li>\n</ul>\n<p>\nIf the flush-action has a preceding async-send-action without any intervening\nsync-send-action or other flush-action, then the static type of the flush-action\nis F|(), where F is the failure type of the receive-action corresponding to that\nasync-send-action. Otherwise, the static type of the flush-action is nil.\n</p>\n<p>\nIf peer-worker is omitted, then the flush-action flushes the queues to all other\nworkers. In this case, the static type will be the union of the static type of\nflush on each worker separately.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.8.4\">7.8.4 Send-receive correspondence</h4>\n<p>\nThis section provides further details about how compile-time correspondence is\nestablished between sends and receive. This is based on the concept of the index\nof a message in its queue: a message has index n in its queue if it is the nth\nmessage added to the queue during the current execution of the worker.\n</p>\n<ul>\n<li>A send action/statement has index i in its queue if the message that it adds\nto the queue is always the i-th message added to the queue during the execution\nof its worker. It is a compile time error if a send statement or action does not\nhave an index in its queue.</li>\n<li>A receive action has index i in a queue if any message that it removes from\nthe queue is always the i-th message removed from the queue during the execution\nof its worker. It is a compile time error if a receive action does not have an\nindex in each of its queues.</li>\n<li>A send action/statement and a receive action correspond if they have the\nsame index in a queue.</li>\n<li>It is a compile time error if two or more receive actions have the same\nindex in a queue.</li>\n<li>A send action/statement is in the same send set as another send\naction/statement if they have the same index in a queue. It is allowed for a\nsend set to have more than one member.</li>\n<li>The maximum index that a receive action has in a queue must be the same as\nthe maximum index that a send action or statement has in that queue.</li>\n<li>It is a compile time error if it is possible for a worker to terminate with\nsuccess before it has executed all its receive actions.</li>\n<li>It is a compile time error if it is possible for a worker to terminate with\nsuccess before it has executed one member from every send set.</li>\n</ul>\n</section>\n</section>\n\n<section>\n<h3 id=\"section_7.9\">7.9 Outbound network interaction</h3>\n\n<p>\nA client object is a stub that allows a worker to send network messages to a\nremote system according to some protocol. A local variable declared with client\nobject type will be depicted as a lifeline in the function's sequence diagram.\nThe remote methods of the client object correspond to distinct network messages\ndefined by the protocol for the role played by the client object. The return\nvalue of a remote method represents the protocol's response. A\nclient-remote-method-call-action is depicted as a horizontal arrow from the\nworker lifeline to the client object lifeline.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"client-remote-method-call-action\">client-remote-method-call-action</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>-&gt;</code> <a href=\"#remote-method-name\"><span class=\"ntref\">remote-method-name</span></a> <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code>\n</pre>\n<p>\nCalls a remote method of a client object. This works the same as a method call\nexpression, except that it is used for a client object method with the\n<code>remote</code> qualifier.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_7.10\">7.10 Query action</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"query-action\">query-action</span> := <a href=\"#query-pipeline\"><span class=\"ntref\">query-pipeline</span></a> <a href=\"#do-clause\"><span class=\"ntref\">do-clause</span></a>\n<span class=\"ntdfn\" id=\"do-clause\">do-clause</span> := <code>do</code> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n<p>\nThe clauses in the query-pipeline of query-action are executed in the same way\nas the clauses in the query-pipeline of a query-expr.\n</p>\n<p>\nThe query-action is executed as follows. For each input frame <var>f</var>\nemitted by the query-pipeline, execute the statement-block with <var>f</var> in\nscope. If a clause in the query-pipeline completes early with error\n<var>e</var>, the result of the query-action is <var>e</var>. Otherwise, the\nresult of the query-action is nil.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_7.11\">7.11 Local variable declaration statements</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"local-var-decl-stmt\">local-var-decl-stmt</span> :=\n   <a href=\"#local-init-var-decl-stmt\"><span class=\"ntref\">local-init-var-decl-stmt</span></a>\n   | <a href=\"#local-no-init-var-decl-stmt\"><span class=\"ntref\">local-no-init-var-decl-stmt</span></a>\n<span class=\"ntdfn\" id=\"local-init-var-decl-stmt\">local-init-var-decl-stmt</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<code>final</code>] <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>=</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n</pre>\n<p>\nA <code>local-var-decl-stmt</code> is used to declare variables with a scope\nthat is local to the block in which they occur.\n</p>\n<p>\nThe scope of variables declared in a <code>local-var-decl-stmt</code> starts\nimmediately after the statement and continues to the end of the statement block\nin which it occurs.\n</p>\n<p>\nA local-init-var-decl-stmt is executed by evaluating the action-or-expr\nresulting in a value, and then matching the typed-binding-pattern to the value,\ncausing assignments to the variables occurring in the typed-binding-pattern. The\ntyped-binding-pattern is used unconditionally, meaning that it is a compile\nerror if the static types do not guarantee the success of the match. If the\ntyped-binding-pattern uses <code>var</code>, then the type of the variables is\ninferred from the static type of the action-or-expr; if the\nlocal-init-var-decl-stmt includes final, the precise type is used, and otherwise\nthe broad type is used. If the typed-binding-pattern specifies a\ntype-descriptor, then that type-descriptor provides the contextually expected\ntype for action-or-expr.\n</p>\n<p>\nIf <code>final</code> is specified, then the variables declared must not be\nassigned to outside the local-init-var-decl-stmt.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"local-no-init-var-decl-stmt\">local-no-init-var-decl-stmt</span> :=\n   [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>] [<code>final</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a> <code>;</code>\n</pre>\n<p>\nA local variable declared <code>local-no-init-var-decl-stmt</code> must be\ndefinitely assigned at each point that the variable is referenced. This means\nthat the compiler must be able to verify that the local variable will have been\nassigned before that point. If <code>final</code> is specified, then the\nvariable must not be assigned more than once. The <code>type-descriptor</code>\nmust not be <code>never</code>.\n</p>\n</section>\n<section>\n<h3 id=\"conditional_variable_type_narrowing\">7.12 Conditional variable type narrowing</h3>\n<p>\nUsually the type of a reference to a variable is determined by the variable's\ndeclaration, either explicitly specified by a type descriptor or inferred from\nthe static type of the initializer. However, the language also recognizes two\nkinds of case where the way a local variable or parameter is used means that is\nknown at compile-time that within a particular region of code the value of the\nvariable will belong to a type that is narrower than the declared type. In these\ncases, references to the variable within particular regions of code will have a\nstatic type that is narrower that the variable type. One kind of case, which is\ndescribed in this section, is when a variable is used in a boolean expression in\na conditional context. This is sometimes called <em>occurrence typing</em>. The\nother kind of case is when a variable is used in a match statement; this is\ndescribed in the <a href=\"#match_statement\">Match statement</a> section.\n</p>\n<p>\nType narrowing makes use of the <em>read-only difference</em> between two types,\nwhich is defined as follows. We use the notation T\nâ<sub><em>ro</em></sub> S for the read-only difference of T and S. T\nâ<sub><em>ro</em></sub> S is computed separately for each uniform type.\nLet T<sup>U</sup> be the subset of T belonging to uniform type U, i.e. the\nintersection of T and U. For a uniform type U that is immutable, T<sup>U</sup>\nâ<sub><em>ro</em></sub> S<sup>U</sup> is the same as T<sup>U</sup> -\nS<sup>U</sup> (set difference); for a uniform type U that is mutable,\nT<sup>U</sup> â<sub><em>ro</em></sub> S<sup>U</sup> is empty if\nT<sup>U</sup> is a subset of S<sup>U</sup>, and T<sup>U</sup> otherwise. T\nâ<sub><em>ro</em></sub> S is the union for every uniform type U of\nT<sup>U</sup> â<sub><em>ro</em></sub> S<sup>U</sup>. This definition of\nread-only difference ensures that if a value x belongs to T but not does not\nbelong to S, then x belongs to T â<sub><em>ro</em></sub> S.\n</p>\n<p>\nGiven an expression E with static type boolean, and a variable x with static\ntype Tx, we define how to determine\n</p>\n<ul>\n<li>a narrowed type for x implied by truth of E, and</li>\n<li>a narrowed type for x implied by falsity of E.</li>\n</ul>\n<p>\nbased on the syntactic form of E as follows.\n</p>\n<ul>\n<li>If E has the form x <code>is</code> T, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of Tx and\nT</li>\n<li>the narrowed type for x implied by falsity of E is Tx\nâ<sub><em>ro</em></sub> T</li>\n</ul>\n</li>\n<li>If E has the form x <code>==</code> E<sub>1</sub> or E<sub>1</sub>\n<code>==</code> x where the static type of E<sub>1</sub> is an expression whose\nstatic type is a singleton simple type T<sub>1</sub>, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of Tx and\nT<sub>1</sub>\n</li>\n<li>the narrowed type for x implied by falsity of E is Tx\nâ<sub><em>ro</em></sub> T<sub>1</sub>\n</li>\n</ul>\n</li>\n<li>If E has the form x <code>!=</code> E<sub>1</sub> or E<sub>1</sub>\n<code>!=</code> x where the static type of E<sub>1</sub> is an expression whose\nstatic type is a singleton simple type T<sub>1</sub>, then\n<ul>\n<li>the narrowed type for x implied by truth of E is Tx\nâ<sub><em>ro</em></sub> T<sub>1</sub>\n</li>\n<li>the narrowed type for x implied by falsity of E is the intersection of Tx\nand T<sub>1</sub>\n</li>\n</ul>\n</li>\n<li>If E has the form <code>!</code>E<sub>1</sub>, then\n<ul>\n<li>the narrowed type for x implied by truth of E is the narrowed type for x\nimplied by falsity of E<sub>1</sub>\n</li>\n<li>the narrowed type for x implied by falsity of E is the narrowed type for x\nimplied by truth of E<sub>1</sub>\n</li>\n</ul>\n</li>\n<li>If E has the form E<sub>1</sub> <code>&amp;&amp;</code> E<sub>2</sub>\n<ul>\n<li>the narrowed type for x implied by truth of E is the intersection of\nT<sub>1</sub> and T<sub>2</sub>, where T<sub>1</sub> is the narrowed type for x\nimplied by the truth of T<sub>1</sub> and T<sub>2</sub> is the narrowed type for\nx implied by the truth of T<sub>2</sub>\n</li>\n<li>the narrowed type for x implied by falsity of E is\nT<sub>1</sub>|T<sub>2</sub>, where T<sub>1</sub> is the narrowed type for x\nimplied by the falsity of E<sub>1</sub>, and T<sub>2</sub> is the intersection\nof T<sub>3</sub> and T<sub>4</sub>, where T<sub>3</sub> is the narrowed type for\nx implied by the truth of E<sub>1</sub> and T<sub>4</sub> is the narrowed type\nfor x implied by the falsity of E<sub>2</sub>\n</li>\n</ul>\n</li>\n<li>If E has the form E<sub>1</sub> <code>||</code> E<sub>2</sub>, then\n<ul>\n<li>the narrowed type for x implied by truth of E is\nT<sub>1</sub>|T<sub>2</sub>, where T<sub>1</sub> is the narrowed type for x\nimplied by the truth of E<sub>1</sub>, and T<sub>2</sub> is the intersection of\nT<sub>3</sub> and T<sub>4</sub>, where T<sub>3</sub> is the narrowed type for x\nimplied by the falsity of E<sub>1</sub> and T<sub>4</sub> is the narrowed type\nfor x implied by the truth of E<sub>2</sub>\n</li>\n<li>the narrowed type for x implied by falsity of E is the intersection of\nT<sub>1</sub> and T<sub>2</sub>, where T<sub>1</sub> is narrowed type for x\nimplied by the falsity of E<sub>1</sub> and T<sub>2</sub> is the narrowed type\nfor x implied by the falsity of E<sub>2</sub>\n</li>\n</ul>\n</li>\n<li>If E has any other form, then\n<ul>\n<li>the narrowed type for x implied by the truth of E is Tx</li>\n<li>the narrowed type for x implied by the falsity of E is Tx</li>\n</ul>\n</li>\n</ul>\n<p>\nNarrowed types implied by the truth or falsity of an expression apply to regions\nof code as follows:\n</p>\n<ul>\n<li>in an expression E<sub>1</sub> <code>||</code> E<sub>2</sub>, the narrowed\ntypes implied by the falsity of E<sub>1</sub> apply within E<sub>2</sub>\n</li>\n<li>in an expression E<sub>1</sub> <code>&amp;&amp;</code> E<sub>2</sub>, the\nnarrowed types implied by the truth of E<sub>1</sub> apply within\nE<sub>2</sub>\n</li>\n<li>in an expression E<sub>1</sub> <code>?</code> E<sub>2</sub> <code>:</code>\nE<sub>3</sub>, the narrowed types implied by the truth of E<sub>1</sub> apply\nwithin E<sub>2</sub> and the narrowed types implied by the falsity of\nE<sub>1</sub> apply within E<sub>3</sub>\n</li>\n<li>in a statement <code>if</code> E<sub>1</sub> B<sub>1</sub> <code>else</code>\nB<sub>2</sub>, the narrowed types implied by the truth of E<sub>1</sub> apply\nwithin B<sub>1</sub> and the narrowed types implied by the falsity of\nE<sub>1</sub> apply within B<sub>2</sub>\n</li>\n<li>in a statement <code>while</code> E B, the narrowed types implied by the truth of E\napply with B</li>\n<li>in a match-clause P <code>if</code> E <code>=&gt;</code> B, the narrowed types\nimplied by the truth of E apply within B</li>\n<li>in a query-expr or query-action, the narrowed types implied by the truth of\nthe expression in a where-clause apply within all following clauses in that\nquery-expr or query-action</li>\n</ul>\n<p>\nGiven a statement or statement-block S, and a variable x that is in-scope for S\nand has static type Tx, we define how to determine a narrowed type for x implied\nby the normal completion of S as follows.\n</p>\n<ul>\n<li>When it is not possible for S to complete normally, then the narrowed type for x implied by the normal completion of S is never (the empty type).</li>\n<li>If S has the form <code>{</code> S<sub>1</sub> S<sub>2</sub> ...\nS<sub>n</sub> <code>}</code>, then the narrowed type for x implied by the normal\ncompletion of S is the narrowed type for x implied by the normal completion of\nS<sub>n</sub>.</li>\n<li>If S has the form <code>do</code> B, the narrowed type for x implied by the\nnormal completion of S is the narrowed type for x implied by the normal\ncompletion of B.</li>\n<li>If S has the form <code>if</code> E B<sub>1</sub> <code>else</code>\nB<sub>2</sub>, the narrowed type for x implied by the normal completion of S is\nthe union of T<sub>1</sub> and T<sub>2</sub>, where T<sub>1</sub> is the\nnarrowed type for x implied by the normal completion of B<sub>1</sub> and\nT<sub>2</sub> is the narrowed type for x implied by the normal completion of\nB<sub>2</sub>. (The truth or falsity of E may imply a narrowed type for x that\napplies in B<sub>1</sub> or B<sub>2</sub>, which may affect the narrowed type\nfor x implied by the normal completion of B<sub>1</sub> or B<sub>2</sub>.)</li>\n<li>Otherwise, the narrowed type for x implied by the completion of S is Tx.</li>\n</ul>\n<p>\nThe narrowed types implied by the normal completion of a statement are applied\nwithin a statement-block as follows: in a statement-block <code>{</code>\nS<sub>1</sub> S<sub>2</sub> ... Sn <code>}</code>, for each i in 2,..., n, the\nnarrowed types implied by the normal completion of S<sub>i - 1</sub> apply to\nS<sub>i</sub>.\n</p>\n<p>\nIn the above rules, a if-else-stmt without an <code>else</code> clause is\ntreated as if it had an <code>else</code> followed by an empty statement-block,\nand <code>else if</code> clause is treated like a nested if-else-stmt.\n</p>\n<p>\nA narrowed type for a variable x implied by an expression in which x occurs\nceases to apply in a region of code where there is a possibility at runtime that\nx has been assigned to since the evaluation of the expression. It is an error if\nthis results in the type of a variable reference being affected by assignments\nthat lexically follow the variable reference. Specifically, when a variable x is\nnarrowed outside a while-stmt, foreach-stmt or query-action S, an assignment to\nx within S must not result in the possibility of x having being assigned to when\nthe statement-block of S completes normally or when a continue-stmt is executed.\n</p>\n\n</section>\n<section>\n<h3 id=\"XML_namespace_declaration_statement\">7.13 XML namespace declaration statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"xmlns-decl-stmt\">xmlns-decl-stmt</span> := <a href=\"#xmlns-decl\"><span class=\"ntref\">xmlns-decl</span></a>\n<span class=\"ntdfn\" id=\"xmlns-decl\">xmlns-decl</span> := <code>xmlns</code> <a href=\"#xml-namespace-uri\"><span class=\"ntref\">xml-namespace-uri</span></a> [ <code>as</code> <a href=\"#xml-namespace-prefix\"><span class=\"ntref\">xml-namespace-prefix</span></a> ] <code>;</code>\n<span class=\"ntdfn\" id=\"xml-namespace-uri\">xml-namespace-uri</span> := <a href=\"#simple-const-expr\"><span class=\"ntref\">simple-const-expr</span></a>\n<span class=\"ntdfn\" id=\"xml-namespace-prefix\">xml-namespace-prefix</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nAn <code>xmlns-decl</code> is used to declare a XML namespace. If there is\nan <code>xml-namespace-prefix</code>, then the in-scope namespaces that are used\nto perform namespace processing on an <code>xml-template-expr</code> will include a\nbinding of that prefix to the specified <code>xml-namespace-uri</code>;\notherwise the in-scope namespaces will include a default namespace with the\nspecified <code>xml-namespace-uri</code>.\n</p>\n<p>\nAn <code>xml-namespace-prefix</code> declared by an <code>xmlns-decl</code>\nis in the same symbol space as a <code>module-prefix</code> declared by an\n<code>import-decl</code>. This symbol space is distinct from a module's main\nsymbol space used by other declarations. An <code>xmlns-decl</code> in a\n<code>xmlns-decl-stmt</code> declares the prefix within the scope of the current\nblock.\n</p>\n<p>\nThe prefix <code>xmlns</code> is predeclared as\n<code>http://www.w3.org/2000/xmlns/</code> and cannot be redeclared.\n</p>\n<p>\nThe static type of the <code>simple-const-expr</code> must be a subtype of\nstring.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.14\">7.14 Assignment</h3>\n\n<p>\nThere are three kinds of assignment statement:\n</p>\n<ul>\n<li>an ordinary assignment statement, which is usually called simply an\nassignment statement,</li>\n<li>a compound assignment statement, and</li>\n<li>a destructuring assignment statement.</li>\n</ul>\n<p>\nThe first two of these build on the concept of an <em>lvalue</em>, whereas the\nlast one builds on the concept of a binding pattern.\n</p>\n\n<section>\n<h4 id=\"section_7.14.1\">7.14.1 Lvalues</h4>\n\n<p>\nAn lvalue is what the left hand side of an assignment evaluates to. An lvalue\nrefers to a storage location which is one of the following:\n</p>\n<ul>\n<li>a variable;</li>\n<li>a specific named field of an object;</li>\n<li>the member of a structured value having a specific out-of-line key, which\nwill be either an integer or a string according as the structured value is a\nlist or a mapping.</li>\n</ul>\n<p>\nNote that an lvalue cannot refer to a member of a table.\n</p>\n\n<p>\nAn lvalue that is both defined and initialized refers to a storage location that\nholds a value:\n</p>\n<ul>\n<li>an lvalue referring to a variable is always defined but may be\nuninitialized;</li>\n<li>an lvalue referring to a specific named field of an object is always defined\nbut may not be initialized until the <code>init</code> method returns</li>\n<li>an lvalue referring to member of a structured value having a specific key is\nundefined if the structured value does not have a member with that key; if such an\nlvalue is defined, it is also initialized; note that an lvalue always refers to\na structured value that is already constructed.</li>\n</ul>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"lvexpr\">lvexpr</span> :=\n   <a href=\"#variable-reference-lvexpr\"><span class=\"ntref\">variable-reference-lvexpr</span></a>\n   | <a href=\"#field-access-lvexpr\"><span class=\"ntref\">field-access-lvexpr</span></a>\n   | <a href=\"#member-access-lvexpr\"><span class=\"ntref\">member-access-lvexpr</span></a>\n</pre>\n\n<p>\nThe left hand side of an assignment is syntactically a restricted type of\nexpression, called an lvexpr. When the evaluation of an lvexpr completes\nnormally, its result is an lvalue. The evaluation of an lvexpr can also complete\nabruptly, with a panic or check-fail, just as with the evaluation of an\nexpression.\n</p>\n<p>\nThe compiler determines a static type for each lvexpr just as it does for\nexpressions, but the meaning is slightly different. For an lvexpr L to have\nstatic type T means that if the runtime evaluation of L completes normally\nresulting in an lvalue x, then if x is defined and initialized, it refers to a\nstorage location that holds a value belonging to type T. In addition to a type,\nthe compiler determines for each lvexpr whether it is potentially undefined and\nwhether it is potentially uninitialized.\n</p>\n<p>\nAn lvalue supports three operations: store, read and filling-read.\n</p>\n<p>\nThe fundamental operation on an lvalue is to store a value in the storage\nlocation it refers to. This operation does not required the lvalue to be defined\nor initialized; a successful store operation on an undefined lvalue will result\nin the addition of a member to the structured value; a store on an uninitialized lvalue\nwill initialize it. When an lvalue refers to a variable, it is possible to\ndetermine at compile-time whether the store of a value is permissible based on\nthe declaration of the variable and the static type of the value to be stored.\nHowever, when the lvalue refers to a member of a structured value, this is not in\ngeneral possible for three reasons.\n</p>\n<ol>\n<li>The guarantee provided by an lvalue having a static type T is not that the\nreferenced storage location can hold every value that belongs to type T; rather\nthe guarantee is that every value that the referenced storage location can hold\nbelongs to type T. This is because structured types are covariant in their\nmember types. The values that the storage location can actually hold are\ndetermined by the inherent type of the structured value.</li>\n<li>The member may not be defined and the inherent type of the structured value may not\nallow a member with that specific key. The permissible keys of a structured value can\nbe constrained by closed record types, fixed-length array types, and tuple types\n(with any rest descriptor).</li>\n<li>The structured value may be immutable. The static type of an lvalue referring to a\nmember of a structured value makes no guaranteees that the structured value is not immutable.</li>\n</ol>\n<p>\nThe first of these reasons also applies to lvalues that refer to fields of\nobjects. Accordingly, stores to lvalues other than lvalues that refer to\nvariables must be verified at runtime to ensure that they are not impermissible\nfor any of the above three reasons. An attempt to perform an impermissible store\nresults in a panic at runtime.\n</p>\n<p>\nList values maintain the invariant that there is a unique integer n, the length\nof the list, such that a member k of the list is defined if and only if k is a\nnon-negative integer less than n. When a store is performed on an lvalue\nreferring to a member k of a list value and the length of the list is n and k is\n&gt; n, then each member with index i for each â¤ i &lt; k is filled in, by\nusing the FillMember abstract operation. The FillMember abstract operation may\nfail; in particular it will fail if the list is a fixed-length array. If the\nFillMember operation fails, then the attempt to store will panic.\n</p>\n<p>\nAn lvalue also allows a read operation, which is used by the compound assignment\nstatement. Unlike a store operation, a read operation cannot result in a runtime\npanic. A read operation cannot be performed on an lvalue that is undefined or\nuninitialized.\n</p>\n<p>\nFinally, a lvalue supports a filling-read operation, which is used to support\nchained assignment. A filling-read is performed only an lvalue with a static\ntype that is a structured type. It differs from a read operation only when it is\nperformed on a potentially undefined lvalue. If the lvalue is undefined at\nruntime, then the filling-read will use the FillMember abstract operation on the\nmember that the lvalue refers to. If the FillMember operation fails, then the\nfilling-read panics. Unlike the read operation, the filling-read operation can\nbe performed on an undefined lvalue; it cannot, however, be performed on an\nuninitialized lvalue.\n</p>\n<p>\nThe evaluation of an lvexpr is specified in terms of the evaluation of its\nsubexpressions, the evaluation of its sub-lvexprs, and store and\nfilling-read operations on lvalues. If any of these result in a panic, then\nthe evaluation of the lvexpr completes abruptly with a panic.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"variable-reference-lvexpr\">variable-reference-lvexpr</span> := <a href=\"#variable-reference\"><span class=\"ntref\">variable-reference</span></a>\n</pre>\n<p>\nThe result of evaluating variable-reference-lvexpr is an lvalue referring to a\nvariable. Its static type is the declared or inferred type of the variable. The\nlvexpr is potentially uninitialized if it is possible for execution to have\nreached this point without initializing the referenced variable.\n</p>\n<p>\nA variable-reference-lvexpr that refers to a variable declared by a\nmodule-var-decl that includes <code>isolated</code> is only allowed within a\nlock-stmt.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"field-access-lvexpr\">field-access-lvexpr</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <code>.</code> <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a>\n</pre>\n\n<p>\nThe static type of lvexpr must be either a subtype of the mapping basic type\nor a subtype of the object basic type.\n</p>\n<p>\nIn the case where the static type of lvexpr is a subtype of the object basic\ntype, the object type must have a field with the specified name, and the\nresulting lvalue refers to that object field.\n</p>\n<p>\nIn the case where the static type of lvexpr is a subtype of the mapping basic\ntype, the semantics are as follows.\n</p>\n<ul>\n<li>The following requirements apply at compile time: the type of lvexpr must\ninclude mapping shapes that have the specified field-name; type descriptor for\nlvexpr must include <code>field-name</code> as an individual-field-descriptor (if\nlvexpr is a union, then this requirement applies to every member of the union);\nlvexpr must not be potentially uninitialized, but may be potentially\nundefined.</li>\n<li>\nIt is evaluated as follows:\n<ol>\n<li>evaluate lvexpr to get lvalue <var>lv</var>;</li>\n<li>perform a filling-read operation on <var>lv</var> to get mapping value\n<var>m</var>;</li>\n<li>the result is an lvalue referring to the member of <var>m</var> with the\nspecified field-name.</li>\n</ol>\n</li>\n<li>The static type of the field-access-expr is the member type for the key type\nK in T, where T is the static type of the lvexpr and K is the singleton string\ntype containing the field-name; the field-access-expr is potentially undefined\nif K is an optional key type for T.</li>\n</ul>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"member-access-lvexpr\">member-access-lvexpr</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <code>[</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>]</code>\n</pre>\n<p>\nThe static type of lvexpr must be either a subtype of the mapping basic type or\na subtype of the list basic type. In the former case, the contextually expected\ntype of expression must be string and it is an error if the static type of\nexpression is not string; in the latter case, the contextually expected type of\nexpression must be int and it is an error if the static type of expression is\nnot int.\n</p>\n<p>\nIt is evaluated as follows:\n</p>\n<ol>\n<li>evaluate expression to get a string or int <var>k</var>;</li>\n<li>evaluate lvexpr to get lvalue <var>lv</var>;</li>\n<li>perform a filling-read operation on <var>lv</var> to get a list or mapping value\n<var>v</var>;</li>\n<li>the result is an lvalue referring to the member of <var>c</var> with key\n<var>k</var>.</li>\n</ol>\n<p>\nThe static type of the member-access-lvexpr is the member type for the key type K\nin T, where T is the static type of the lvexpr and K is the static type type of\nexpression; the member-access-lvexpr is potentially undefined if K is an optional\nkey type for T.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_7.14.2\">7.14.2 Assignment statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"assignment-stmt\">assignment-stmt</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <code>=</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n</pre>\n<p>\nThe static type of action-or-expr must be a subtype of the static type of\nlvexpr. The static type of lvexpr provides the contextually expected type for\naction-or-expr. It is not an error for lvexpr to be potentially undefined or\npotentially uninitialized.\n</p>\n<p>\nIt is executed at as follows:\n</p>\n<ol>\n<li>execute action-or-expr to get a value <var>v</var>;</li>\n<li>evaluate lvexpr to get an lvalue <var>lv</var>;</li>\n<li>perform the store operation of <var>lv</var> with value <var>v</var>.</li>\n</ol>\n\n</section>\n<section>\n<h4 id=\"section_7.14.3\">7.14.3 Compound assignment statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"compound-assignment-stmt\">compound-assignment-stmt</span> := <a href=\"#lvexpr\"><span class=\"ntref\">lvexpr</span></a> <a href=\"#CompoundAssignmentOperator\"><span class=\"ntref\">CompoundAssignmentOperator</span></a> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"CompoundAssignmentOperator\">CompoundAssignmentOperator</span> := <a href=\"#BinaryOperator\"><span class=\"ntref\">BinaryOperator</span></a> <code>=</code>\n<span class=\"ntdfn\" id=\"BinaryOperator\">BinaryOperator</span> := <code>+</code> | <code>-</code> | <code>*</code> | <code>/</code> | <code>&amp;</code> | <code>|</code> | <code>^</code> | <code>&lt;&lt;</code> | <code>&gt;&gt;</code> | <code>&gt;&gt;&gt;</code>\n</pre>\n<p>\nIt is a compile error if lvexpr is potentially undefined unless the static type\nof lvexpr is a subtype of the list basic type. It is a compile error if lvexpr\nis potentially uninitialized.\n</p>\n<p>\nLet T1 be the static type of lvexpr, and let T2 be the static type of\naction-expr. Let E be an expression E1 BinaryOperator E2, where E1 has type T1\nand E2 has type T2. E must be valid according to the static typing rules\napplicable to the underlying form of the BinaryOperator (not the lifted form\ndescribed in the <a href=\"#nil_lifting\">Nil lifting</a> section). Let T be the\nstatic type of E according to those rules. It is a compile error if T is not a\nsubtype of T1.\n</p>\n<p>\nA compound-assignment-stmt is executed as follows:\n</p>\n<ol>\n<li>execute action-or-expr to get a value <var>v2</var>;</li>\n<li>evaluate lvexpr to get an lvalue <var>lv</var>;</li>\n<li>if <var>lv</var> is undefined, panic (<var>lv</var> must refer to an\nundefined member of a list)</li>\n<li>perform the read operation on <var>lv</var> to get a value\n<var>v1</var>\n</li>\n<li>perform the operation specified by BinaryOperator on operands <var>v1</var>\nand <var>v2</var>, resulting in a value <var>v3</var>\n</li>\n<li>perform the store operation on <var>lv</var> with value <var>v3</var>.</li>\n</ol>\n\n</section>\n<section>\n<h4 id=\"section_7.14.4\">7.14.4 Destructuring assignment statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"destructuring-assignment-stmt\">destructuring-assignment-stmt</span> :=\n   <a href=\"#binding-pattern-not-variable-reference\"><span class=\"ntref\">binding-pattern-not-variable-reference</span></a> <code>=</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"binding-pattern-not-variable-reference\">binding-pattern-not-variable-reference</span> :=\n   <a href=\"#wildcard-binding-pattern\"><span class=\"ntref\">wildcard-binding-pattern</span></a>\n   | <a href=\"#list-binding-pattern\"><span class=\"ntref\">list-binding-pattern</span></a>\n   | <a href=\"#mapping-binding-pattern\"><span class=\"ntref\">mapping-binding-pattern</span></a>\n   | <a href=\"#error-binding-pattern\"><span class=\"ntref\">error-binding-pattern</span></a>\n</pre>\n<p>\nA destructuring assignment is executed by evaluating the action-or-expr\nresulting in a value v, and then matching the binding pattern to v, causing\nassignments to the variables occurring in the binding pattern.\n</p>\n<p>\nThe binding-pattern has a static type implied by the static type of the\nvariables occurring in it. The static type of action-or-expr must be a subtype\nof this type.\n</p>\n<p>\nA binding pattern within a destructuring assignment must not refer to a variable\ndeclared by a module-var-decl that includes <code>isolated</code>.\n</p>\n<p>\nNote that a destucturing-assignment-stmt with a wildcard-binding-pattern can\nbe used to ensure that a a variable has been narrowed as expected.\n</p>\n<pre>\ntype T X|Y|Z;\nfunction foo(T v) {\n   if v is X {\n       handleX(v);\n   }\n   else if v is Y {\n       handleY(v);\n   }\n   else {\n     Z _ = v;\n     handleOther(v);\n   }\n}\n</pre>\n<p>\nIf <code>T</code> is subsequently modified to add another possibility in\naddition to <code>X</code>, <code>Y</code> and <code>Z</code>, then\n<code>foo</code> will get a compile error.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_7.15\">7.15 Action statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"action-stmt\">action-stmt</span> := <a href=\"#action\"><span class=\"ntref\">action</span></a> <code>;</code>\n</pre>\n<p>\nAn action-stmt is a statement that is executed by evaluating an action and\ndiscarding the resulting value, which must be nil. It is a compile-time error if\nthe static type of an action in an action-stmt is not nil.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.16\">7.16 Call statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"call-stmt\">call-stmt</span> := <a href=\"#call-expr\"><span class=\"ntref\">call-expr</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"call-expr\">call-expr</span> :=\n   <a href=\"#function-call-expr\"><span class=\"ntref\">function-call-expr</span></a>\n   | <a href=\"#method-call-expr\"><span class=\"ntref\">method-call-expr</span></a>\n   | <a href=\"#checking-keyword\"><span class=\"ntref\">checking-keyword</span></a> <a href=\"#call-expr\"><span class=\"ntref\">call-expr</span></a>\n</pre>\n<p>\nA call-stmt is executed by evaluating call-expr as an expression and discarding\nthe resulting value, which must be nil. The static type of the call-expr in an\ncall-stmt must be either <code>()</code> or <code>never</code>. If it is\n<code>never</code>, then it is possible for the call-stmt to complete normally.\n\n</p>\n</section>\n<section>\n<h3 id=\"section_7.17\">7.17 Conditional statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"if-else-stmt\">if-else-stmt</span> :=\n   <code>if</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a> \n   [ <code>else</code> <code>if</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a> ]* \n   [ <code>else</code> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a> ]\n</pre>\n<p>\nThe if-else statement is used for conditional execution.\n</p>\n<p>\nThe static type of the expression following <code>if</code> must be boolean.\nWhen an expression is true then the corresponding statement block is executed\nand the if statement completes. If no expression is true then, if the else block\nis present, the corresponding statement block is executed.\n</p>\n</section>\n<section>\n<h3 id=\"section_7.18\">7.18 Do statement</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"do-stmt\">do-stmt</span> := <code>do</code> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n<p>\nA <code>do-stmt</code> is executed by executing its\n<code>statement-block</code>.\n</p>\n</section>\n<section>\n<h3 id=\"match_statement\">7.19 Match statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-stmt\">match-stmt</span> := <code>match</code> <a href=\"#match-target\"><span class=\"ntref\">match-target</span></a> <code>{</code> <a href=\"#match-clause\"><span class=\"ntref\">match-clause</span></a>+ <code>}</code>\n<span class=\"ntdfn\" id=\"match-target\">match-target</span> := <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a>\n<span class=\"ntdfn\" id=\"match-clause\">match-clause</span> :=\n  <a href=\"#match-pattern-list\"><span class=\"ntref\">match-pattern-list</span></a> [<a href=\"#match-guard\"><span class=\"ntref\">match-guard</span></a>] <code>=&gt;</code> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n<span class=\"ntdfn\" id=\"match-guard\">match-guard</span> := <code>if</code> <a href=\"#match-guard-expr\"><span class=\"ntref\">match-guard-expr</span></a>\n</pre>\n<p>\nA match statement selects a statement block to execute based on which patterns a\nvalue matches.\n</p>\n<p>\nA match-stmt is executed as follows:\n</p>\n<ol>\n<li>the match-target is evaluated resulting in some value v, called the\n<em>target value</em>;</li>\n<li>for each match-clause in order:\n<ol>\n<li>a match of match-pattern-list against v is attempted</li>\n<li>if the attempted match fails, the execution of the match-stmt continues to\nthe next match-clause</li>\n<li>if the attempted match succeeds, then the variables in match-pattern are\ncreated</li>\n<li>if there is a match-guard, then the expression in match-guard is executed\nresulting in a value b</li>\n<li>if b is false, then the execution of the match-stmt continues to the next\nmatch-clause</li>\n<li>otherwise, the statement-block in the match-clause is executed</li>\n<li>execution of the match-stmt completes</li>\n</ol>\n</li>\n</ol>\n<p>\nThe scope of any variables created in a match-pattern-list of a match-clause is\nboth the match-guard, if any, and the statement-block in that match-clause. The\nstatic type of the expression in match-guard must be a subtype of boolean.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-guard-expr\">match-guard-expr</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a>\n</pre>\n<p>\nA match-guard-expr must not include a <code>function-call-expr</code> or\n<code>method-call-expr</code> unless either\n</p>\n<ul>\n<li>the static type of the <code>action-or-expr</code> following\n<code>match</code> is a subtype of <code>readonly</code>; or</li>\n<li>the function or method being called is <code>isolated</code> and the static\ntype of every argument to the function or method is a subtype of\n<code>readonly</code>; in the case of a method-call-expr, the static type of the\nobject whose method is being called must also be a subtype of\n<code>readonly</code>.</li>\n</ul>\n\n<section>\n<h4 id=\"section_7.19.1\">7.19.1 Match patterns</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-pattern-list\">match-pattern-list</span> := \n  <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a> (<code>|</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>)*\n</pre>\n<p>\nA match-pattern-list can be matched against a value. An attempted match can\nsucceed or fail. A match-pattern-list is matched against a value by attempting\nto match each match-pattern until a match succeeds.\n</p>\n<p>\nAll the match-patterns in a given match-pattern-list must bind the same set of\nvariables.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"match-pattern\">match-pattern</span> :=\n  <code>var</code> <a href=\"#binding-pattern\"><span class=\"ntref\">binding-pattern</span></a>\n   | <a href=\"#wildcard-match-pattern\"><span class=\"ntref\">wildcard-match-pattern</span></a>\n   | <a href=\"#const-pattern\"><span class=\"ntref\">const-pattern</span></a>\n   | <a href=\"#list-match-pattern\"><span class=\"ntref\">list-match-pattern</span></a>\n   | <a href=\"#mapping-match-pattern\"><span class=\"ntref\">mapping-match-pattern</span></a>\n   | <a href=\"#error-match-pattern\"><span class=\"ntref\">error-match-pattern</span></a>\n</pre>\n<p>\nA match-pattern combines the destructuring done by a binding-pattern with the\nability to match a constant value.\n</p>\n<p>\nNote that an identifier can be interpreted in two different ways within a\nmatch-pattern:\n</p>\n<ul>\n<li>in the scope of a <code>var</code>, an identifier names a variable which is\nto be bound to a part of the matched value when a pattern match succeeds;</li>\n<li>outside the scope of a var, an identifier references a constant that a value\nmust match for the pattern match to succeed.</li>\n</ul>\n<p>\nA match-pattern must be linear: a variable that is to be bound cannot occur more\nthan once in a match-pattern.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"const-pattern\">const-pattern</span> := <a href=\"#simple-const-expr\"><span class=\"ntref\">simple-const-expr</span></a>\n</pre>\n<p>\nA const-pattern denotes a single value. Matching a const-pattern denoting a\nvalue p against a value v succeeds if DeepEquals(p,v) is true. The static type\nof the simple-const-expr in a const-pattern must be a subtype of anydata.\nSuccessfully matching a const-pattern does not cause any variables to be\ncreated.\n</p>\n<p>\nMatching a wildcard-match-pattern against a value succeeds if the value belongs to\ntype any, in other words if the basic type of the value is not error.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"wildcard-match-pattern\">wildcard-match-pattern</span> := <code>_</code>\n<span class=\"ntdfn\" id=\"list-match-pattern\">list-match-pattern</span> := <code>[</code> <a href=\"#list-member-match-patterns\"><span class=\"ntref\">list-member-match-patterns</span></a> <code>]</code>\n<span class=\"ntdfn\" id=\"list-member-match-patterns\">list-member-match-patterns</span> :=\n   <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a> (<code>,</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>)* [<code>,</code> <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>]\n   | [ <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a> ]\n<span class=\"ntdfn\" id=\"mapping-match-pattern\">mapping-match-pattern</span> := <code>{</code> <a href=\"#field-match-patterns\"><span class=\"ntref\">field-match-patterns</span></a> <code>}</code>\n<span class=\"ntdfn\" id=\"field-match-patterns\">field-match-patterns</span> :=\n   <a href=\"#field-match-pattern\"><span class=\"ntref\">field-match-pattern</span></a> (<code>,</code> <a href=\"#field-match-pattern\"><span class=\"ntref\">field-match-pattern</span></a>)* [<code>,</code> <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>]\n   | [ <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a> ] \n<span class=\"ntdfn\" id=\"field-match-pattern\">field-match-pattern</span> := <a href=\"#field-name\"><span class=\"ntref\">field-name</span></a> <code>:</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>\n<span class=\"ntdfn\" id=\"rest-match-pattern\">rest-match-pattern</span> := <code>...</code> <code>var</code> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"error-match-pattern\">error-match-pattern</span> := <code>error</code> [<a href=\"#error-type-reference\"><span class=\"ntref\">error-type-reference</span></a>] <code>(</code> <a href=\"#error-arg-list-match-pattern\"><span class=\"ntref\">error-arg-list-match-pattern</span></a> <code>)</code>\n<span class=\"ntdfn\" id=\"error-arg-list-match-pattern\">error-arg-list-match-pattern</span> :=\n   <a href=\"#error-message-match-pattern\"><span class=\"ntref\">error-message-match-pattern</span></a> [<code>,</code> <a href=\"#error-cause-match-pattern\"><span class=\"ntref\">error-cause-match-pattern</span></a>] [<code>,</code> <a href=\"#error-field-match-patterns\"><span class=\"ntref\">error-field-match-patterns</span></a>]\n   | [<a href=\"#error-field-match-patterns\"><span class=\"ntref\">error-field-match-patterns</span></a>]\n<span class=\"ntdfn\" id=\"error-message-match-pattern\">error-message-match-pattern</span> := <a href=\"#simple-match-pattern\"><span class=\"ntref\">simple-match-pattern</span></a>\n<span class=\"ntdfn\" id=\"error-cause-match-pattern\">error-cause-match-pattern</span> := <a href=\"#simple-match-pattern\"><span class=\"ntref\">simple-match-pattern</span></a> | <a href=\"#error-match-pattern\"><span class=\"ntref\">error-match-pattern</span></a>\n<span class=\"ntdfn\" id=\"simple-match-pattern\">simple-match-pattern</span> :=\n   <a href=\"#wildcard-match-pattern\"><span class=\"ntref\">wildcard-match-pattern</span></a>\n   | <a href=\"#const-pattern\"><span class=\"ntref\">const-pattern</span></a>\n   | <code>var</code> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a>\n<span class=\"ntdfn\" id=\"error-field-match-patterns\">error-field-match-patterns</span> :=\n   <a href=\"#named-arg-match-pattern\"><span class=\"ntref\">named-arg-match-pattern</span></a> (<code>,</code> <a href=\"#named-arg-match-pattern\"><span class=\"ntref\">named-arg-match-pattern</span></a>)* [<code>,</code> <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>]\n   | <a href=\"#rest-match-pattern\"><span class=\"ntref\">rest-match-pattern</span></a>\n<span class=\"ntdfn\" id=\"named-arg-match-pattern\">named-arg-match-pattern</span> := <a href=\"#arg-name\"><span class=\"ntref\">arg-name</span></a> <code>=</code> <a href=\"#match-pattern\"><span class=\"ntref\">match-pattern</span></a>\n</pre>\n\n<p>\nMatching a <code>mapping-match-pattern</code> against a mapping value succeeds\nif and only every <code>field-match-pattern</code> matches against a field of\nthe value. The variable in the <code>rest-match-pattern</code>, if specified, is\nbound to a new mapping that contains just the fields for which that did not\nmatch a <code>field-match-pattern</code>.\n</p>\n<p>\nFor every match pattern, there is a set of shapes that the pattern matches. The\ntype corresponding to the match pattern is the type containing these shapes. The\nvalue matches the pattern if and only if it looks like the type. A mutable value\nthus can match the pattern without belonging to the corresponding type. However,\nan immutable value that matches the pattern will always belong to the type.\nIn particular, for the match of an <code>error-match-pattern</code> with an\n<code>error-type-reference</code> against an error value to succeed, the\nerror value must belong to the referenced error type.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_7.19.2\">7.19.2 Match clause reachability and narrowing</h4>\n<p>\nThis section uses the <em>read-only intersection</em> between two types, which\nis defined analogously to the read-only difference used for conditional variable\ntype narrowing as follows. We use the notation T &amp;<sub>ro</sub> S for the\nread-only intersection of T and S. T &amp;<sub>ro</sub> S is computed separately\nfor each uniform type. Let T<sup>U</sup> be the subset of T belonging to uniform\ntype U, i.e. the intersection of T and U. For a uniform type U that is\nimmutable, T<sup>U</sup> &amp;<sub>ro</sub> S<sup>U</sup> is the same as\nT<sup>U</sup> &amp; S<sup>U</sup>; for a uniform type U that is mutable,\nT<sup>U</sup> &amp;<sub>ro</sub> S<sup>U</sup> is empty if T<sup>U</sup> &amp;\nS<sup>U</sup> is empty, and T<sup>U</sup> otherwise. T &amp;<sub>ro</sub> S is\nthe union for every uniform type U of T<sup>U</sup> &amp;<sub>ro</sub>\nS<sup>U</sup>. Note that the read-only intersection operation is not\ncommutative.\n</p>\n<p>\nA <code>match-clause</code> is defined to be <em>unguarded</em> if it does not\nhave a <code>match-guard</code> or if the static type of the expression in the\n<code>match-guard</code> is singleton true.\n</p>\n<p>\nFor each <code>match-clause</code> C, we can compute a type L that the target\nvalue must <em>look like</em> if the <code>statement-block</code> of C is\nexecuted. L is computed as the difference of a positive type P and negative type\nN, where\n</p>\n<ul>\n<li>P is the union of the types corresponding to the match patterns in the\n<code>match-pattern-list</code> of C, and</li>\n<li>N is the union of the types corresponding to the match patterns in the\n<code>match-pattern-list</code> of every unguarded <code>match-clause</code>\nthat precedes C.</li>\n</ul>\n<p>\nLet T be the static type of the <code>match-target</code>. If the intersection\nof T and L is empty, then it is not possible for the\n<code>match-pattern-list</code> of C to match, and accordingly the statements in\nthe statement-block of C are not reachable. If the <code>match-target</code> is\na <code>variable-reference</code>, then the type of the referenced variable is\nnarrowed to T &amp;<sub>ro</sub> L within the <code>match-guard</code>, if any,\nand the <code>statement-block</code> of C. If there is a\n<code>match-guard</code>, then the type narrowing described in <a href=\"#conditional_variable_type_narrowing\">Conditional variable type\nnarrowing</a> is in addition applied to the <code>statement-block</code>\n</p>\n<p>\nA <code>match-stmt</code> is <em>exhaustive</em> if and only if the static type\nof the <code>match-target</code> is a subtype of union of the type corresponding\nto the match patterns of the <code>match-pattern-list</code> of every unguarded\nmatch clause. A <code>match-stmt</code> that is exhaustive can complete normally\nonly if at least one of its <code>statement-block</code>s can complete normally.\n</p>\n</section>\n</section>\n<section>\n<h3 id=\"section_7.20\">7.20 Loops</h3>\n<section>\n<h4 id=\"section_7.20.1\">7.20.1 Foreach statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"foreach-stmt\">foreach-stmt</span> :=\n   <code>foreach</code> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>in</code> <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n<p>\nA foreach statement iterates over an iterable value, executing a statement block\nonce for each value in the iterable value's iteration sequence. The static type\nof action-or-expr must be an iterable type with an iteration completion type of\nnil.\n</p>\n<p>\nThe scope of any variables created in typed-binding-pattern is statement-block. These\nvariables are implicitly final.\n</p>\n<p>\nIn more detail, a foreach statement executes as follows:\n</p>\n<ol>\n<li>evaluate the action-or-expr resulting in a value c</li>\n<li>create an iterator object i from c as follows\n<ol>\n<li>if c is a basic type that is iterable, then i is the result of calling\nc.iterator()</li>\n<li>if c is an object and c belongs to Iterable&lt;T,()&gt; for some T, then i is the\nresult of calling c.iterator()</li>\n</ol>\n</li>\n<li>call i.next() resulting in a value n</li>\n<li>if n is nil, then the execution of the foreach statement completes normally</li>\n<li>match typed-binding-pattern to n.value causing assignments to any variables\nthat were created in typed-binding-pattern</li>\n<li>execute statement-block with the variable bindings from step 5 in scope; in the\ncourse of so doing\n<ol>\n<li>the execution of a break-stmt causes execution of the foreach statement to\ncomplete normally</li>\n<li>the execution of a continue-stmt causes a transfer of control to step 3</li>\n</ol>\n</li>\n<li>go back to step 3</li>\n</ol>\n<p>\nIn step 2, the compiler will give an error if the static type of expression is\nnot suitable for 2a or 2b.\n</p>\n<p>\nIn step 5, the typed-binding-pattern is used unconditionally, and the compiler\nwill check that the static types guarantee that the match will succeed. If the\ntyped-binding-pattern uses var, then the type will be inferred from the type of\n<code>action-or-expr</code>.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.20.2\">7.20.2 While statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"while-stmt\">while-stmt</span> := <code>while</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n<p>\nA while statement repeatedly executes a statement block so long as a\nboolean-valued expression evaluates to true.\n</p>\n<p>\nIn more detail, a while statement executes as follows:\n</p>\n<ol>\n<li>evaluate expression;</li>\n<li>if expression evaluates to false, terminate execution of the while\nstatement;</li>\n<li>execute statement-block; in the course of so doing\n<ol>\n<li>the execution of a break-stmt results in the execution of the\nwhile statement completing normally</li>\n<li>the execution of a continue-stmt causes a transfer of control to\nstep 1</li>\n</ol>\n</li>\n<li>go back to step 1.</li>\n</ol>\n<p>\nThe static type of <code>expression</code> must be a subtype of boolean.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.20.3\">7.20.3 Continue statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"continue-stmt\">continue-stmt</span> := <code>continue</code> <code>;</code>\n</pre>\n<p>\nA continue statement is only allowed if it is lexically within a while-stmt or a\nforeach-stmt. Execution a continue statement results in a transfer of control\nthat causes the execution of the outermost statement-block in the nearest\nenclosing while-stmt or foreach-stmt to complete normally.\n</p>\n</section>\n<section>\n<h4 id=\"section_7.20.4\">7.20.4 Break statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"break-stmt\">break-stmt</span> := <code>break</code> <code>;</code>\n</pre>\n<p>\nA break statement is only allowed if it is lexically within a while-stmt or a\nforeach-stmt. Execution of a break statement results in a transfer of control\nthat causes the execution of nearest enclosing while-stmt or foreach-stmt to\ncomplete normally.\n</p>\n</section>\n</section>\n\n<section>\n<h3 id=\"lock_statement\">7.21 Lock statement</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"lock-stmt\">lock-stmt</span> := <code>lock</code> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n\n<p>\nA lock-stmt executing in the context of some strand must execute its statement-block\nin such a way that the effect on the state of the program is consistent with the\nexecution of the statement-block not being interleaved with the execution of a\nlock-stmt on any other strand.\n</p>\n<p>\nA naive implementation can simply acquire a single, program-wide, recursive mutex\nbefore executing a lock statement, and release the mutex after completing the\nexecution of the lock statement. A more sophisticated implementation can perform\ncompile-time analysis to infer a more fine-grained locking strategy that will\nhave the same effects as the naive implementation.\n</p>\n<p>\nIt is not allowed to start a new strand within a lock. More precisely, when a\nstrand has started but not yet completed the execution of a lock-stmt, the\nexecution of a named-worker-decl or a start-action on that strand will result in\na panic. It is a compile-time error for a named-worker-decl or start-action to\noccur lexically within a lock-stmt. The compiler may also give a compile-time\nerror if a function definition contains a named-worker-decl or start-action, and\nthere is a function call lexically within the lock-stmt that might result\ndirectly or indirectly in a call to that defined function.\n</p>\n<p>\nThere are two cases where a variable is restricted to be used only within a\nlock statement:\n</p>\n<ul>\n<li>when the variable is an isolated module-level variable; since isolated\nmodule-level variables are not allowed to be public, this restriction applies to\nall functions in the module;</li>\n<li>when the variable is <code>self</code> within an isolated object and\n<code>self</code> occurs in a field-access-expr <code>self.<var>x</var></code>,\nunless the field <code><var>x</var></code> is isolated; since non-isolated\nfields are required to be private, this restriction applies only to the object's\nmethods.</li>\n</ul>\n<p>\nWhen a lock statement contains one of the above two cases of restricted variable\nusage, the lock statement is subject to the following additional requirements,\nwhich maintain the invariant that the restricted variable is an isolated root.\n</p>\n<ul>\n<li>Only one such variable can occur in the lock statement.</li>\n<li>A function or method can be called in the lock statement only if the type of\nthe function is isolated.</li>\n<li>Transferring values out of the lock statement is constrained: the expression\nfollowing a return statement must be an isolated expression; an assignment to a\nvariable defined outside the lock statement is allowed only if left-hand side is\njust a variable name and the right hand side is an isolated expression. An\nassignment to the restricted variable is not subject to this constraint.\n</li>\n<li>Transferring values into the lock statement is constrained: a\nvariable-reference-expr within the lock statement that refers to a variable or\nparameter defined outside the lock statement is allowed only if the\nvariable-reference-expr occurs within an expression that is isolated. A\nvariable-reference-expr that refers to the restricted variable is not subject to\nthis constraint. Within a non-isolated object, <code>self</code> behaves like a\nparameter.\n</li>\n</ul>\n\n</section>\n\n<section>\n<h3 id=\"section_7.22\">7.22 Fail and retry</h3>\n<p>\nThe execution of a statement can fail either as the result of <code>check</code>\nexpression or action, or from an explicit <code>fail</code> statement. When\nexecution of a statement fails, control flow transfers to the nearest lexically\nenclosing failure-handling statement. The failure handling statements are\nstmt-with-on-fail, retry-stmt, transaction-stmt and retry-transaction-stmt. If\nthere is no such statement, it terminates the current worker normally. Note that\nfailure is completely distinct from panic.\n</p>\n<p>\nWhen execution fails there is an associated error value, which is passed to the\nfailure-handling statement if there is one. If there is no failure-handling\nstatement, then the error value becomes the return value of the worker. The\npossible failure control flows are known at compile-time, as are the types of\nthe associated error values. For every statement, the type of the error value\nassociated with a failure causing control to transfer out of the block is\ndetermined at compile-time. This is in contrast with panics, for which the type\nof associated error value is not known at compile-time.\n</p>\n\n<section>\n<h4 id=\"section_7.22.1\">7.22.1 Fail statement</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"fail-stmt\">fail-stmt</span> := <code>fail</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>;</code>\n</pre>\n<p>\nExecuting a fail-stmt will cause control flow to transfer to the nearest\nlexically enclosing failure handling statement.\n</p>\n<p>\nThe static type of the expression must be a subtype of error. Execution of the\nfail-stmt evaluates the expression; the resulting error value is passed to the\nfailure handling statement or becomes the termination value of the current\nworker.\n</p>\n\n</section>\n<section>\n<h4 id=\"section_7.22.2\">7.22.2 On fail clause</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"stmt-with-on-fail\">stmt-with-on-fail</span> := <a href=\"#regular-compound-stmt\"><span class=\"ntref\">regular-compound-stmt</span></a> <a href=\"#on-fail-clause\"><span class=\"ntref\">on-fail-clause</span></a>\n<span class=\"ntdfn\" id=\"on-fail-clause\">on-fail-clause</span> := <code>on</code> <code>fail</code> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n<p>\nA <code>stmt-with-on-fail</code> is executed by executing the\n<code>regular-compound-stmt</code>. A <code>check</code> expression or action,\nor a <code>fail</code> statement may cause control to transfer to the\n<code>on-fail-cause</code>. In this case, the <code>typed-binding-pattern</code>\nis matched to the associated error value, binding the variables occurring within\nthe <code>typed-binding-pattern</code>; the <code>statement-block</code> is then\nexecuted with these bindings in scope. Otherwise, the\n<code>on-fail-clause</code> is not executed.\n</p>\n<p>\nThe static type of the associated error value is determined from the static type\nof the relevant <code>check</code> expressions and actions, and\n<code>fail</code> statements. It is a compile error unless the match of the\n<code>typed-binding-pattern</code> with the associated error value is guaranteed\nto succeed by the static type of the associated error value.\n</p>\n</section>\n\n<section>\n<h4 id=\"section_7.22.3\">7.22.3 Retry statement</h4>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"retry-stmt\">retry-stmt</span> := <code>retry</code> <a href=\"#retry-spec\"><span class=\"ntref\">retry-spec</span></a> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n<span class=\"ntdfn\" id=\"retry-spec\">retry-spec</span> := [<a href=\"#type-parameter\"><span class=\"ntref\">type-parameter</span></a>] [ <code>(</code> <a href=\"#arg-list\"><span class=\"ntref\">arg-list</span></a> <code>)</code> ]\n</pre>\n<p>\nThe type-parameter in a retry-spec specifies a class, which must be a subtype of\nRetryManager&lt;F&gt;, where F is the failure type of the statement-block; this\nimplies that the parameter type of the class's shouldRetry method must be a\nsupertype of F. The arg-list in a retry-spec specifies parameters to be passed\nto the class's <code>init</code> method; as with <code>new</code>, the arg-list\ncan be omitted if the class's <code>init</code> method has no required\narguments.\n</p>\n<p>\nA retry-stmt is executed as follows:\n</p>\n<ol>\n<li>Create an object r of type RetryManager by calling <code>new T(A)</code>,\nwhere T and A are the type-descriptor in the type-parameter and the arg-list\nrespectively.</li>\n<li>Execute the statement-block.</li>\n<li>If the execution failed with associated error e, then call\n<code>r.shouldRetry(e)</code>. If the result is true, go back to the previous\nstep. If the result is false, then continue with the fail.</li>\n</ol>\n<p>\nIf the type-parameter is omitted, it defaults to\n<code>DefaultRetryManager</code> defined in langlib error module.\n</p>\n\n</section>\n\n</section>\n\n<section>\n<h3 id=\"transactions\">7.23 Transactions</h3>\n\n<p>\nBallerina provides language support for distributed transactions. A global\ntransaction consists of one or more transaction branches, where a branch\ncorresponds to work done by a single strand of a Ballerina program that is part\nof the global transaction. Every transaction branch is uniquely identified by an\nXID, which consists of an identifier of the global transaction and an identifier\nof a branch with the global transaction.\n</p>\n<p>\nAt runtime, there is a mapping from each strand to a transaction stack, which is\na stack of transaction branches. A strand is in <em>transaction mode</em>, if\nits transaction stack is non-empty; the top of a strand's transaction stack is\nthe current transaction branch for that strand.\n</p>\n<p>\nStatic checking is based on the idea of a transactional scope: this is a lexical\nregion of the program where it is known that at runtime the strand executing the\nregion will always be in transactional mode. A function with the\n<code>transactional</code> qualifier can only be called in a transactional\nscope; this includes function calls using <code>start</code>.\n</p>\n<p>\nA running instance of a Ballerina program includes a transaction manager. This\nmay run in the same process as the Ballerina program or in a separate process.\nIt should not be connected over an unreliable network. The transaction manager\nof a program is responsible for managing the transaction branches of all the\nprogram's strands.\n</p>\n<p>\nWhen a global transaction involves multiple Ballerina programs, there must be a\nnetwork protocol that allows that transaction managers for each Ballerina\nprogram to communicate. The protocol must also allow a remote method or resource\nmethod on a service object to be informed of the global transaction, if any, to\nwhich it belongs. When a listener object determines that a remote method or\nresource method of a service object is to be a part of a global transaction\nmanager, then it will create a new transaction branch, join it to the global\ntransaction and push that on the transaction stack for the strand on which the\nmethod is called; if the method is declared as <code>transactional</code>, the\nlistener will not call the method unless it can do this. Similarly, the protocol\nmust allow a remote method on a client object that is called in transaction mode\nto send information about the global transaction of which it is part; if the\nmethod is declared as <code>transactional</code>, then as usual the method can\nonly be called in transaction mode; it also implies that the client object\nimplementation is transaction-aware, and that the recipient of the message sent\nby the remote method must join the global transaction. A global transaction can\ncombine Ballerina programs with programs written in other programming languages\nprovided they agree on this network protocol.\n</p>\n<p>\nA strand in transaction mode can register commit or rollback handlers with the\ntransaction manager; the handlers are functions which will be called by the\ntransaction manager when the decision has been made whether to commit or\nrollback the global transaction to which the current transaction branch belongs.\n</p>\n<p>\nNote that internal storage in Ballerina is not transactional. Rolling back a\ntransaction does <em>not</em> automatically restore the mutable values are\nvariables to their state when the transaction started. It is up to the\nprogrammer to do this using commit or rollback handlers.\n</p>\n<p>\nWhen a new strand is created by a named-worker-decl that includes a\n<code>transactional</code> qualifier or by using <code>start</code> to call a\nfunction with a <code>transactional</code> qualifier, a new transaction branch\nwill be created and joined to the global transaction; this transaction branch\nwill be pushed onto transaction stack for the newly created strand.\n</p>\n<p>\nBallerina also has the concept that a transaction may be part of a sequence of\nretries, where the last transaction can complete with either a rollback or\ncommit, and the preceding transactions all completed with a rollback.\n</p>\n\n<section>\n<h4 id=\"section_7.23.1\">7.23.1 Transaction manager</h4>\n\n<p>\nThe semantics of Ballerina's transactional language features are defined in\nterms of the following abstract operations on the transaction manager. These\noperations cover only the interface between the application and the transaction\nmanager, not the interface between the resource manager and the application.\nThese operations are all performed by a Ballerina program in the context of a\nstrand. The transaction manager supports additional operations, which are\ndefined in the langlib transaction module.\n</p>\n\n<section>\n<h5 id=\"section_7.23.1.1\">7.23.1.1 Begin operation</h5>\n<p>\nThe Begin operation starts a global transaction and pushes a transaction branch\nfor the new global transaction onto the current strand's transaction stack. This\ntransaction branch is the initiating branch of the global transaction. The\ncurrent strand will be in transaction mode.\n</p>\n<p>\nThe Begin operation has an optional parameter that contains information about\nthe previous transactions in a sequence of retries.\n</p>\n</section>\n\n<section>\n<h5 id=\"section_7.23.1.2\">7.23.1.2 Commit operation</h5>\n<p>\nThe Commit operation is only called in transaction mode, and when the current\ntransaction branch is the initiating branch of a global transaction. The Commit\noperation always removes the topmost transaction branch from the strand's transaction\nstack. The Commit operation initiates a commit of the global transaction that\nthe current transaction branch belongs to.\n</p>\n<p>\nWhen the commit is initiated, the transaction manager runs a two-phase commit\nprotocol if necessary. First, it requests each participant to prepare to commit\nand waits for the participants to respond. There are two possibilities. If it\nreceives a response from each participant that it is prepared to commit, then\nthe transaction manager will make a decision to commit. If it receives a\nresponse from any participant that it cannot commit or it gives up waiting for a\nresponse from any participant, then the transaction manager will make a decision\nto rollback; in this case, it will create an error value for the cause of the\nrollback.\n</p>\n<p>\nOnce the transaction manager has made a decision whether to commit, it calls the\nhandlers that were registered with it for for the branches of the global\ntransaction that it is managing; the commit handlers are called if the decision\nwas to commit and the rollback handlers are called if the decision was to\nrollback. The error value for the cause of the rollback will be passed as an\nargument to the call of each rollback handler. At this point, the Commit\noperation can return. The transaction manager will also communicate its decision\nto the transaction's participants, which will result in them running commit or\nrollback handlers for their branches.\n</p>\n<p>\nThe Commit operation has an optional parameter which is a RetryManager object or\nnil, which defaults to nil. If this parameter is non-nil and the decision is to\nrollback, then the transaction manager will call the RetryManager object's\nshouldRetry method, record the result and then pass it as the willRetry\nparameter to any rollback handlers.\n</p>\n<p>\nIf the transaction manager decided to rollback, then the Commit operation\nreturns the error value for the reason for the rollback. Otherwise, it returns\nnil.\n</p>\n\n</section>\n\n<section>\n<h5 id=\"section_7.23.1.3\">7.23.1.3 Rollback operation</h5>\n<p>\nThe Rollback operation is only called in transaction mode, and when the current\ntransaction branch is the initiating branch of a global transaction. The\nRollback operation always removes the topmost transaction from the strand's\ntransaction stack. The Rollback operations initiates a commit of the global\ntransaction that the current transaction branch belongs to. The transaction\nmanager calls the rollback handlers that were registered with it for the\nbranches of the global transaction that it is managing. The Rollback operation\nhas a parameter which is either an error value or nil; this is passed as an\nargument to any rollback handlers.\n</p>\n<p>\nThe Rollback operation also has an optional parameter which is a RetryManager object\nor nil, which defaults to nil. If this parameter is non-nil, then the\ntransaction manager will call the RetryManager object's shouldRetry method,\nrecord the result and then pass it as the willRetry parameter to any rollback\nhandlers.\n</p>\n\n</section>\n</section>\n\n<section>\n<h4 id=\"section_7.23.2\">7.23.2 Transaction statement</h4>\n\n<p>\nA transaction is performed using a transaction statement. The semantics of the\ntransaction statement guarantees that every transaction manager Begin operation\nwill be paired with a Rollback or Commit operation.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"transaction-stmt\">transaction-stmt</span> := <code>transaction</code> <a href=\"#statement-block\"><span class=\"ntref\">statement-block</span></a>\n</pre>\n<p>\nThe statement-block must contain at least one commit-action. In addition, the\ncompiler must be able to verify that any exit out of the statement-block that is\nneither a panic nor a fail will have executed a commit-action or\nrollback-stmt.\n</p>\n<p>\nA transaction-stmt is executed as follows:\n</p>\n<ul>\n<li>Perform the transaction Begin() operation.</li>\n<li>Execute the statement-block. While executing the statement-block, any panic\ndoes not immediately terminate the current worker; rather control is transferred\nback to the transaction-stmt, so that the transaction-stmt can handle it as\ndescribed in the next step.</li>\n<li>If the new transaction that was begun is still the current transaction, then\nthe statement-block must have failed or panicked. In this case, perform a\nRollback(e) operation, where e is the error associated with the fail or panic,\nand then continue with the fail or panic.</li>\n</ul>\n<p>\nThe statement-block of a transaction-stmt is a transactional scope, except for\nany statements that could potentially be executed after the execution of a\ncommit-action or rollback-stmt.\n</p>\n<p>\nIt is an error for a transactional-stmt to appear in a transactional scope.\nHowever, it is not an error if the current strand is in transaction mode when a\ntransaction-stmt is executed: in this case, the Begin() operation performed by\nthe transaction-stmt will, as usual, start a new transaction, which will be\ncompletely independent of any existing transactions.\n</p>\n</section>\n\n\n<section>\n<h4 id=\"section_7.23.3\">7.23.3 Retry transaction statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"retry-transaction-stmt\">retry-transaction-stmt</span> := <code>retry</code> <a href=\"#retry-spec\"><span class=\"ntref\">retry-spec</span></a> <a href=\"#transaction-stmt\"><span class=\"ntref\">transaction-stmt</span></a>\n</pre>\n<p>\nA retry-transaction-stmt is the same as a retry-stmt containing a\ntransaction-stmt, except as follows.\n</p>\n<ul>\n<li>When a transaction is retried, information about the previous transaction is\npassed as a parameter to the Begin() operation.</li>\n<li>If the transaction committed successfully, but the statement-block of the\ntransaction-stmt failed, then the transaction-stmt will not be retried.</li>\n<li>The RetryManager is passed as a parameter to the Commit() and Rollback()\noperations and the shouldRetry method is then called by those operations, so\nthat the result is available to the rollback handlers. The transaction manager\nrecords the result of calling shouldRetry, and this is used to determine whether\nto retry.</li>\n</ul>\n</section>\n\n<section>\n<h4 id=\"section_7.23.4\">7.23.4 Commit action</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"commit-action\">commit-action</span> := <code>commit</code>\n</pre>\n<p>\nA <code>commit-action</code> is only allowed if it is lexically within the\n<code>statement-block</code> of a <code>transaction-stmt.</code>\n</p>\n<p>\nEvaluating the <code>commit-action</code> performs the transaction manager\nCommit() operation; the result of this operation is the result of the\n<code>commit-action</code>. The type of the result is\n<code>transaction:Error?</code>. Note that the commit action does not alter the\nflow of control.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_7.23.5\">7.23.5 Rollback statement</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"rollback-stmt\">rollback-stmt</span> := <code>rollback</code> [<a href=\"#expression\"><span class=\"ntref\">expression</span></a>] <code>;</code>\n</pre>\n<p>\nA <code>rollback-stmt</code> is only allowed if it is lexically within the\n<code>statement-block</code> of a <code>transaction-stmt.</code>\n</p>\n<p>\nThe <code>rollback-stmt</code> performs the transaction manager Rollback(e)\noperation, where e is the result of executing the <code>expression</code>, if\npresent, and nil otherwise. Note that like the commit action, the rollback\nstatement does not alter the flow of control.\n</p>\n\n</section>\n\n</section>\n<section>\n<h3 id=\"section_7.24\">7.24 Panic statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"panic-stmt\">panic-stmt</span> := <code>panic</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>;</code>\n</pre>\n<p>\nA panic statement terminates the current worker abnormally. The result of\nevaluating <code>expression</code> provides the termination value of the worker.\n</p>\n<p>\nThe static type of <code>expression</code> must be a subtype of error.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_7.25\">7.25 Return statement</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"return-stmt\">return-stmt</span> := <code>return</code> [ <a href=\"#action-or-expr\"><span class=\"ntref\">action-or-expr</span></a> ] <code>;</code>\n</pre>\n<p>\nA return statement terminates the current worker normally.The result of\nevaluating the action-or-expr provides the termination value of the worker. If\naction-or-expr is omitted, then the termination value is nil.\n</p>\n</section>\n\n\n</section>\n<section>\n<h2 id=\"module_level\">8. Module-level declarations</h2>\n<p>\nEach source part in a Ballerina module must match the production\n<code>module-part</code>.\n</p>\n<p>\nThe import declarations must come before other declarations; apart from this,\nthe order of the definitions and declarations at the top-level of a module is\nnot constrained.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-part\">module-part</span> := <a href=\"#import-decl\"><span class=\"ntref\">import-decl</span></a>* <a href=\"#other-decl\"><span class=\"ntref\">other-decl</span></a>*\n<span class=\"ntdfn\" id=\"other-decl\">other-decl</span> :=\n   <a href=\"#listener-decl\"><span class=\"ntref\">listener-decl</span></a>\n   | <a href=\"#service-decl\"><span class=\"ntref\">service-decl</span></a>\n   | <a href=\"#function-defn\"><span class=\"ntref\">function-defn</span></a>\n   | <a href=\"#module-type-defn\"><span class=\"ntref\">module-type-defn</span></a>\n   | <a href=\"#module-class-defn\"><span class=\"ntref\">module-class-defn</span></a>\n   | <a href=\"#module-var-decl\"><span class=\"ntref\">module-var-decl</span></a>\n   | <a href=\"#module-const-decl\"><span class=\"ntref\">module-const-decl</span></a>\n   | <a href=\"#module-enum-decl\"><span class=\"ntref\">module-enum-decl</span></a>\n   | <a href=\"#module-xmlns-decl\"><span class=\"ntref\">module-xmlns-decl</span></a>\n   | <a href=\"#annotation-decl\"><span class=\"ntref\">annotation-decl</span></a>\n</pre>\n<section>\n<h3 id=\"section_8.1\">8.1 Import declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"import-decl\">import-decl</span> := <code>import</code> [<a href=\"#org-name\"><span class=\"ntref\">org-name</span></a> <code>/</code>] <a href=\"#module-name\"><span class=\"ntref\">module-name</span></a> [<code>as</code> <a href=\"#import-prefix\"><span class=\"ntref\">import-prefix</span></a>] <code>;</code>\n<span class=\"ntdfn\" id=\"import-prefix\">import-prefix</span> := <a href=\"#module-prefix\"><span class=\"ntref\">module-prefix</span></a> | <code>_</code>\n<span class=\"ntdfn\" id=\"module-prefix\">module-prefix</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> | <a href=\"#predeclared-prefix\"><span class=\"ntref\">predeclared-prefix</span></a>\n<span class=\"ntdfn\" id=\"org-name\">org-name</span> := <a href=\"#import-identifier\"><span class=\"ntref\">import-identifier</span></a>\n<span class=\"ntdfn\" id=\"module-name\">module-name</span> := <a href=\"#import-identifier\"><span class=\"ntref\">import-identifier</span></a> (<code>.</code> <a href=\"#import-identifier\"><span class=\"ntref\">import-identifier</span></a>)*\n<span class=\"ntdfn\" id=\"import-identifier\">import-identifier</span> := <a href=\"#RestrictedIdentifier\"><span class=\"ntref\">RestrictedIdentifier</span></a>\n\n<span class=\"ntdfn\" id=\"qualified-identifier\">qualified-identifier</span> := <a href=\"#module-prefix\"><span class=\"ntref\">module-prefix</span></a> <a href=\"#NoSpaceColon\"><span class=\"ntref\">NoSpaceColon</span></a> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nIf org-name is omitted, it is defaulted from the organization of the importing\nmodule.\n</p>\n<p>\nA <code>module-prefix</code> is a name that is used locally within the source of\na module to refer to another module. A <code>module-prefix</code> in a\nqualified-identifier must refer to a <code>module-prefix</code> specified in an\nimport-declaration in the same source part.\n</p>\n<p>\nAn import-prefix of <code>_</code> causes the module to be imported without\nmaking its symbols available via a module-prefix. In this case, the effect of\nimporting the module will be just to cause the module to be included in the\nprogram and initialized. It is an error for a source-part to import a module\nusing a module-prefix and then not to use that module-prefix.\n</p>\n<p>\nA <code>module-prefix</code> declared by an <code>import-decl</code> is in the\nsame symbol space as a <code>xmlns-namespace-prefix</code> declared by an\n<code>xmlns-decl</code>. This symbol space is distinct from a module's main\nsymbol space used by other declarations.\n</p>\n<p>\nIt is an error for a module to directly or indirectly import itself. In other\nwords, the directed graph of module imports must be acyclic.\n</p>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"predeclared-prefix\">predeclared-prefix</span> :=\n   <code>boolean</code>\n   | <code>decimal</code>\n   | <code>error</code>\n   | <code>float</code>\n   | <code>future</code>\n   | <code>int</code>\n   | <code>map</code>\n   | <code>object</code>\n   | <code>stream</code>\n   | <code>string</code>\n   | <code>table</code>\n   | <code>transaction</code>\n   | <code>typedesc</code>\n   | <code>xml</code>\n</pre>\n<p>\nA reserved keyword <code><var>t</var></code> that is a predeclared-prefix is\npredeclared as referring to the <code>lang.<var>t</var></code> lang library\nmodule, but this can be overridden by an import-decl that imports a module using\nthat prefix. A predeclared-prefix can be used as a module-prefix without using a\nQuotedIdentifier.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_8.2\">8.2 Module and program execution</h3>\n<p>\nA Ballerina program consists of one or more modules; one of these modules is\ndistinguished as the <em>root</em> module. The source code for a module uses\nimport declarations to identify the modules on which it depends directly. At\ncompile-time, a root module is specified, and the modules comprising the program\nare inferred to be those that the root module imports directly or indirectly.\nThe directed graph of module imports must be acyclic.\n</p>\n<p>\nProgram execution may terminate successfully or unsuccessfully. Unsuccessful\nprogram termination returns an error value. Program execution consists of two\nconsecutive phases: an initialization phase and a listening phase.\n</p>\n<p>\nModule initialization is performed by calling an initialization function, which\nis synthesized by the compiler for each module. Module initialization can fail,\nin which case the initialization function returns an error value. The\ninitialization phase of program execution consists of initializing each of the\nprogram's modules. If the initialization of a module is unsuccessful, then\nprogram execution immediately terminates unsuccessfully, returning the error\nvalue returned by the initialization function.\n</p>\n<p>\nThe initialization of a program's modules is ordered so that a module will not\nbe initialized until all of the modules on which it depends have been\ninitialized. (Such an ordering will always be possible, since the graph of\nmodule imports is required to be acyclic.) The order in which modules are\ninitialized follows the order in which modules are imported so far as is\nconsistent with the previous constraint.\n</p>\n<p>\nA module's initialization function performs expression evaluation so as to\ninitialize the identifiers declared in the module's declarations; if evaluation\nof an expression completes abruptly, then the module initialization function\nimmediately returns the error value associated with the abrupt completion. If a\nmodule defines a function named <code>init</code>, then a module's\ninitialization function will end by calling this function; if it terminates\nabruptly or returns an error, then the module's initialization function will\nreturn an error value. Note that the <code>init</code> function of the root\nmodule will be the last function called during a program's initialization phase.\n</p>\n<p>\nThis specification does not define any mechanism for processing the program\ncommand-line arguments typically provided by an operating system. The Ballerina\nstandard library provides a function to retrieve these command-line arguments.\nIn addition, the Ballerina platform provides a convenient mechanism for\nprocessing these arguments. This works by generating a new command-line\nprocessing module from the specified root module. The <code>init</code>\nfunction of the generated module retrieves the command-line arguments, parses\nthem, and calls a public function of the specified root module (typically the\n<code>main</code> function). The parsing of the command-line arguments is\ncontrolled by the declared parameter types, annotations and names of the public\nfunctions. The generated module, which imports the specified root module,\nbecomes the new root module.\n</p>\n<p>\nA configuration is supplied as input to program execution. A\n<em>configuration</em> consists of mapping from names of configurable\nmodule-level variables to values. The values in a configuration always belong to\nthe type <code>anydata&amp;readonly</code>. The value for a variable in the\nconfiguration is used during module initialization to initialize the variable\ninstead of the value specified in the module. A configurable module-level\nvariable may require that a configuration include a value for it. Except for\nthis requirement, a configuration may be empty. Before initializing any module,\nthe initialization phase must check that there is a value of the correct type\nsupplied for every configurable module-level variable that requires\nconfiguration. If not, the module initialization phase terminates unsuccessfull.\n</p>\n<p>\nIf the initialization phase of program execution completes successfully, then\nexecution proceeds to the listening phase, which is described in the next\nsection. The termination of the listening phase, which may be successful or\nunsuccessful, terminates the program execution.\n</p>\n</section>\n\n<section>\n<h3 id=\"listeners_and_services\">8.3 Listeners and services</h3>\n\n<p>\nService objects support network interaction using remote methods and resource\nmethods. Listeners provide the interface between the network and service\nobjects. A listener object receives network messages from a remote process\naccording to some protocol and translates the received messages into calls on\nthe remote and resource methods of service objects that have been attached to\nthe listener object. It is up to the listener object to determine how this\ntranslation happens; the type of the listener object constrains the type of a\nservice that can be attached to the listener. (This constraint cannot yet be\nfully expressed by Ballerina's type system.)\n</p>\n<p>\nA service object's remote or resource method uses its return value to indicate\nto the listener what further handling of the network message is needed. An error\nreturn value is used to indicate that the method encountered some sort of error\nin handling the network message. When a service object is returned, it means\nthat the listener should use that service object to further handle the network\nmessage. When no further handling is needed, the return value should be nil.\n</p>\n<p>\nThe return value can also be used to supply a response to the network message.\nThis has the limitation that the method cannot control what happens if there is\nan error in sending a response. It also has the limitation that it cannot handle\ncomplex message exchange patterns, although returning multiple responses to a\nsingle request can be modelled by returning a stream. A listener object can\navoid these limitations by passing a client object as a parameter to the service\nobject's remote or resource method; the service object then makes calls on the\nremote methods of the client object in order to send a response back to the\nclient.\n</p>\n<p>\nThe methods defined by the Listener object type allow for the\nmanagement of the lifecycle of a listener object and its attached services. A\nlistener declaration registers a listener object with a module, so that it can\nbe managed by the module. The runtime state of each module includes a list of\nlistener objects that have been registered with the module. A listener object\nthat has been registered with a module is called a <em>module listener</em>\n</p>\n<p>\nIf at the start of the listening phase of program execution there are no module\nlisteners, then the listening phase immediately terminates successfully.\nOtherwise, the <code>start</code> method of each module listener is called; if\nany of these calls returns an error value, then the listening phase terminates\nunsuccessfully with this error value as its return value.\n</p>\n<p>\nThe listening phase of program execution continues until either the program\nexplicitly exits, by calling a standard library function, or the user explicitly\nrequests the termination of the program using an implementation-dependent\noperating system facility (such as a signal on a POSIX system). In the latter\ncase, the <code>gracefulStop</code> or <code>immediateStop</code> method of\neach registered listener will be called before termination.\n</p>\n\n<section>\n<h4 id=\"section_8.3.1\">8.3.1 Listener declaration</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"listener-decl\">listener-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>listener</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a> <code>=</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a> <code>;</code>\n</pre>\n<p>\nA <code>listener-decl</code> declares a module listener. A module listener\ndeclares a variable in a similar way to a final variable declaration, but the\ntype of the variable is always a subtype of the Listener object type,\nand it has the additional semantic of registering the variable's value with the\nmodule as a listener. As with a variable declared in a final variable\ndeclaration, the variable can be referenced by a variable-reference, but cannot\nbe assigned to. A module may have multiple multiple listeners.\n</p>\n<p>\nWhen a listener-decl is initialized as part of module initialization, its\nexpression is evaluated. If expression evaluation completes abruptly or the\nresult of the expression is an error, then module initialization fails.\nOtherwise the variable is initialized with the result of the evaluation.\n</p>\n<p>\nIf the type-descriptor is present, it specifies the static type of the variable.\nThe static type of <code>expression</code> must be equivalent to a union L|E,\nwhere L is a listener object type and E is subtype of error, which may be\n<code>never</code>; if the type-descriptor is not present, then L is used as the\nstatic type of the variable.\n</p>\n\n</section>\n\n<section>\n<h4 id=\"section_8.3.2\">8.3.2 Service declaration</h4>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"service-decl\">service-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>]\n   <code>service</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] [<a href=\"#attach-point\"><span class=\"ntref\">attach-point</span></a>] <code>on</code> <a href=\"#expression-list\"><span class=\"ntref\">expression-list</span></a> <a href=\"#object-constructor-block\"><span class=\"ntref\">object-constructor-block</span></a>\n<span class=\"ntdfn\" id=\"attach-point\">attach-point</span> := <a href=\"#absolute-resource-path\"><span class=\"ntref\">absolute-resource-path</span></a> | <a href=\"#string-literal\"><span class=\"ntref\">string-literal</span></a>\n<span class=\"ntdfn\" id=\"absolute-resource-path\">absolute-resource-path</span> :=\n   <a href=\"#root-resource-path\"><span class=\"ntref\">root-resource-path</span></a>\n   | (<code>/</code> <a href=\"#resource-path-segment-name\"><span class=\"ntref\">resource-path-segment-name</span></a>)+\n<span class=\"ntdfn\" id=\"root-resource-path\">root-resource-path</span> := <code>/</code>\n\n<span class=\"ntdfn\" id=\"expression-list\">expression-list</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> (<code>,</code> <a href=\"#expression\"><span class=\"ntref\">expression</span></a>)*\n</pre>\n<p>\nA <code>service-decl</code> creates a service object and attaches it to one or more\nlisteners. \n</p>\n<p>\nThe static type S for the constructed service object is specified by the\ntype-descriptor if present, and otherwise is the union of a type inferred from\neach expression in the expression list as follows. Each expression in the\nexpression-list must have a type Listener&lt;T,A&gt;|E where T is a subtype of\n<code>service object {}</code>, A is a subtype of\n<code>string[]|string|()</code> and E is a subtype of <code>error</code>; the\ninferred type is T. The object-constructor-block has the same semantics as in an\nobject-constructor-expr with a <code>service</code> qualifier and a\ntype-reference that refers to S. If the service-decl includes\n<code>isolated</code>, then it is equivalent to an object-constructor-expr with\nan <code>isolated</code> qualifier as well as a <code>service</code> qualifier.\n</p>\n<p>\nThe <code>attach-point</code> determines the second argument passed to the\n<code>attach</code> method: if the <code>attach-point</code> is absent, then the\nargument is nil; if it is a <code>string-literal</code>, then the argument is a\nstring; otherwise, it is an <code>absolute-resource-path</code> and the argument\nis an array of strings, with one string for each\n<code>resource-path-segment-name</code>. Attaching service objects\n<var>s</var><sub>1</sub>,...,<var>s</var><sub><var>n</var></sub> with absolute\nresource paths <var>p</var><sub>1</sub>,...,<var>p</var><sub><var>n</var></sub>\nis equivalent to attaching a single service object with <var>n</var>\n<code>get</code> resource methods to <code>/</code>, where the <var>i</var>-th\nresource method has a path <var>p</var><sub>i</sub> (an\n<code>absolute-resource-path</code> is turned into a\n<code>relative-resource-path</code> with the same\n<code>resource-path-segment-name</code>s) and returns\n<var>s</var><sub><var>i</var></sub>.\n</p>\n<p>\nA service-decl is initialized as part of module initialization as follows. The\nobject-constructor-block is evaluated as in an object-constructor-expr resulting\nin a service object <code><var>s</var></code>. Then for each expression in\nexpression-list:\n</p>\n<ol>\n<li>the expression is evaluated resulting in a value which is either an error or\nan object <code><var>obj</var></code> belonging to a listener object type;</li>\n<li>if it is an error, module initialization fails;</li>\n<li>otherwise, <code><var>obj</var></code> is registered as a module listener\n(registering the same object multiple times is the same as registering it\nonce);</li>\n<li>\n<code><var>s</var></code> is then attached to <code><var>obj</var></code>\nusing <code><var>obj</var></code>'s <code>attach</code> method;</li>\n<li>if the call to <code>attach</code> fails, then module initialization\nfails.</li>\n</ol>\n</section>\n\n<section>\n<h4 id=\"section_8.3.3\">8.3.3 Isolated inference</h4>\n\n<p>\nA listener object can use the isolated bit of a service object and of a service\nobject's remote method to determine whether it is safe to make concurrent calls\nto the remote object or the remote method.\n</p>\n<p>\nThe compiler may infer that a service object or a service object's remote method\nis isolated even it is not explicitly declared as such. In doing so, it analyzes\na module to determine whether there is a set of declarations and definitions in\nthe module, where each of them is a <code>service-decl</code>,\n<code>module-var-decl</code>, <code>module-class-defn</code>\n<code>function-defn</code> or <code>method-defn</code>, and none of them\nexplicitly specified an <code>isolated</code> qualifier, such that if all them\nexplicitly specified an <code>isolated</code> qualifier, then they all would\nmeet the requirements for <a href=\"#isolated_functions\">isolated functions</a>\nand isolated objects. If so, then the isolated bit of values resulting from them\nis set in the same way as if <code>isolated</code> qualifiers had been\nexplicitly specified.\n</p>\n<p>\nThis inference is purely an optimization to improve service concurrency and is\nsubject to two constraints. First, any inferences do not affect the static types\nvisible to other modules. Second, anything explicitly declared as\n<code>isolated</code> must satisfy the requirements of this specification\nwithout without relying on inference.\n</p>\n\n</section>\n</section>\n\n<section>\n<h3 id=\"section_8.4\">8.4 Function definition</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"function-defn\">function-defn</span> := \n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <a href=\"#function-quals\"><span class=\"ntref\">function-quals</span></a>\n   <code>function</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <a href=\"#function-signature\"><span class=\"ntref\">function-signature</span></a> <a href=\"#function-defn-body\"><span class=\"ntref\">function-defn-body</span></a>\n<span class=\"ntdfn\" id=\"function-defn-body\">function-defn-body</span> :=\n   <a href=\"#block-function-body\"><span class=\"ntref\">block-function-body</span></a>\n   | <a href=\"#expr-function-body\"><span class=\"ntref\">expr-function-body</span></a> <code>;</code>\n   | <a href=\"#external-function-body\"><span class=\"ntref\">external-function-body</span></a> <code>;</code>\n</pre>\n<p>\nIf a module has a function-defn with an identifier of <code>init</code>, it is\ncalled called automatically by the system at the end of the initialization of\nthat module; if this call returns an error, then initialization of the module\nfails. The following special requirements apply to the <code>init</code>\nfunction of a module: it must not be declared <code>public</code>; its return\ntype must both be a subtype of <code>error?</code> and contain <code>()</code>;\nit must have no parameters.\n</p>\n<p>\nIf the function-quals includes <code>transactional</code>, then\nexpr-function-body and the block-function-body are transactional scopes.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_8.5\">8.5 Module type definition</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-type-defn\">module-type-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>type</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <code>;</code>\n</pre>\n\n<p>\nA module-type-defn binds the identifier to the specified type descriptor. The\nbinding is in the main symbol space. The type-descriptor is resolved as part of\nmodule initialization.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_8.6\">8.6 Module class definition</h3>\n<p>\nA class is a type descriptor that in addition to describing an object type also\ndefines a way to construct an object belonging to the type; in particular, it\nprovides the method definitions that are associated with the object when it is\nconstructed.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-class-defn\">module-class-defn</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <a href=\"#class-type-quals\"><span class=\"ntref\">class-type-quals</span></a> <code>class</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <code>{</code>\n      <a href=\"#class-member\"><span class=\"ntref\">class-member</span></a>*\n  <code>}</code>\n<span class=\"ntdfn\" id=\"class-type-quals\">class-type-quals</span> := (<code>distinct</code> | <code>readonly</code> | <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a> | <a href=\"#object-network-qual\"><span class=\"ntref\">object-network-qual</span></a>)*\n<span class=\"ntdfn\" id=\"class-member\">class-member</span> :=\n   <a href=\"#object-field\"><span class=\"ntref\">object-field</span></a>\n   | <a href=\"#method-defn\"><span class=\"ntref\">method-defn</span></a>\n   | <a href=\"#remote-method-defn\"><span class=\"ntref\">remote-method-defn</span></a>\n   | <a href=\"#resource-method-defn\"><span class=\"ntref\">resource-method-defn</span></a>\n   | <a href=\"#object-type-inclusion\"><span class=\"ntref\">object-type-inclusion</span></a>\n</pre>\n<p>\nIt is an error for a keyword to appear more than once in\n<code>class-type-quals</code>.\n</p>\n<p>\nAs in an object constructor expression, a visibility qualifier of\n<code>private</code> can be used within a class definition; this means that the\nvisibility region consists of all method definitions in the class definition. If\nclass has private fields or methods, then it is not possible to define another\nobject type descriptor that is a subtype of the class's type.\n</p>\n<p>\nIf <code>class-type-quals</code> contains <code>readonly</code>, then an object\nconstructed using the class will have its read-only bit set; the effective type\nof each field is thus the intersection of the specified type and\n<code>readonly</code>; furthermore, an object shape belongs to the class's type\nonly if its read-only bit is set.\n</p>\n<p>\nIf <code>class-type-quals</code> contains <code>isolated</code>, then the\ndefined object type is an isolated type, and an object constructed using the\ntype will have its isolated bit set. An <code>object-field</code> or\n<code>method-defn</code> occurring as a <code>class-member</code> in an isolated\nclass is subject to same requirements as when it occurs as an\n<code>object-member</code> in an <code>object-constructor-expr</code> that is\nexplicitly isolated.\n</p>\n<p>\nIf an <code>object-type-inclusion</code> references a type-descriptor that is a\nclass, then only the type of the class is included: the definitions of the\nmethods and any initializers for the fields are not included. If a class uses an\nobject-type-inclusion to include an object type T, then each method declared in\nT must be defined in the class using a <code>method-defn</code> with the same\nvisibility. If T has a method or field with module-level visibility, then C must\nbe in the same module. If the class is readonly (i.e.\n<code>class-type-quals</code> includes <code>readonly</code>), then an\n<code>object-type-inclusion</code> in the class is allowed to directly or\nindirectly reference a <code>readonly</code> class or <code>readonly</code> type\ndescriptor.\n</p>\n<p>\nIf <code>class-type-quals</code> contains <code>distinct</code>, then the\nprimary type-id of the class will the type-id of that occurrence of\n<code>distinct</code>, and the secondary type-ids will be the union of the\ntype-ids of the included object types. If <code>class-type-quals</code> does not\ncontain <code>distinct</code>, then the type-ids of the class come from the\nincluded object types in the same way as with an object type descriptor.\n</p>\n<p>\nAn object of a class is initialized by:\n</p>\n<ol>\n<li>allocating storage for the object</li>\n<li>initializing each field with its initializer, if it has one</li>\n<li>initializing the methods of the object using the class's method definitions</li>\n<li>calling the class's <code>init</code> method, if there is one</li>\n</ol>\n<p>\nThe parameter list of an <code>init</code> method within an\n<code>module-class-defn</code> is not required to be empty, unlike within an\n<code>object-constructor-expr</code>.\n</p>\n\n</section>\n\n<section>\n<h3 id=\"section_8.7\">8.7 Module variable declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-var-decl\">module-var-decl</span> := <a href=\"#module-init-var-decl\"><span class=\"ntref\">module-init-var-decl</span></a> | <a href=\"#module-no-init-var-decl\"><span class=\"ntref\">module-no-init-var-decl</span></a>\n</pre>\n<p>\nA module-var-decl declares a variable. The scope of variables declared in a\nmodule-var-decl is the entire module. The variable may be initialized in the\ndeclaration or within the module's <code>init</code> function. If\n<code>final</code> is specified, then it is not allowed to assign to the\nvariable after it is initialized.\n</p>\n<pre class=\"grammar\">\n<span class=\"ntdfn\" id=\"module-init-var-decl\">module-init-var-decl</span> := <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<code>public</code>] <a href=\"#module-init-var-quals\"><span class=\"ntref\">module-init-var-quals</span></a> <a href=\"#typed-binding-pattern\"><span class=\"ntref\">typed-binding-pattern</span></a> <code>=</code> <a href=\"#module-var-init\"><span class=\"ntref\">module-var-init</span></a> <code>;</code>\n<span class=\"ntdfn\" id=\"module-init-var-quals\">module-init-var-quals</span> := (<code>final</code> | <a href=\"#isolated-qual\"><span class=\"ntref\">isolated-qual</span></a>)* | <code>configurable</code>\n<span class=\"ntdfn\" id=\"module-var-init\">module-var-init</span> := <a href=\"#expression\"><span class=\"ntref\">expression</span></a> | <code>?</code>\n</pre>\n<p>\nA module-init-var-decl declares and initializes a variable. It is an error for a\nkeyword to appear more than once in <code>module-init-var-quals</code>. If the\ntyped-binding-pattern uses <code>var</code>, then the type of the variables is\ninferred from the static type of <code>expression</code>; if the module-var-decl\nincludes <code>final</code> or <code>configurable</code>, the precise type is\nused, and otherwise the broad type is used. If the typed-binding-pattern\nspecifies a type-descriptor, then that type-descriptor provides the contextually\nexpected type for action-or-expr.\n</p>\n<p>\nIf the module-init-var-decl includes <code>public</code>, then the\ntyped-binding-pattern must not use <code>var</code>.\n</p>\n<p>\nIf a module-init-var-decl includes an isolated-qual, then the variable declared\nis isolated. In this case, <code>public</code> must not be specified, the\nbinding-pattern in the typed-binding-pattern must be just a variable-name, and\nthe expression must be an isolated expression. A variable declared as an\nisolated variable can be accessed only within a lock-stmt. When an isolated-qual\noccurs in a position where the grammar would allow it to be parsed as part of\nmodule-init-var-quals or typed-binding-pattern, the former parse is used.\n</p>\n<p>\nIf <code>configurable</code> is specified, then the initializer specified in the\nmodule-var-init may be overridden at the time of module initialization by a\nvalue supplied when the program is run. If such a value is supplied, then the\nexpression in the module-var-init is not evaluated and the variable is\ninitialized with the supplied value instead. A module-var-init of <code>?</code>\nis allowed only when <code>configurable</code> is specified and means that a\nconfigurable value must be supplied for this variable. If\n<code>configurable</code> is specified, then the typed-binding-pattern must use\nan explicit type-descriptor rather than <code>var</code> and the binding-pattern\nmust be just a variable-name. The type specified by the type-descriptor must be\na subtype of <code>anydata</code>. A variable declared as\n<code>configurable</code> is implicitly final, and cannot be assigned to outside\nthe declaration. The static type of a variable declared as\n<code>configurable</code> is implicitly <code>readonly</code>: the type\nspecified in the type-descriptor is intersected with <code>readonly</code>. A\nconfigurable variable can thus always be referenced within an isolated function.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-no-init-var-decl\">module-no-init-var-decl</span> := <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> [<code>public</code>] [<code>final</code>] <a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a> <a href=\"#variable-name\"><span class=\"ntref\">variable-name</span></a> <code>;</code>\n</pre>\n<p>\nA module variable declared with <code>module-no-init-var-decl</code> must be\ninitialized in the module's <code>init</code> function. It must be definitely\nassigned at each point that the variable is referenced. If <code>final</code> is\nspecified, then the variable must not be assigned more than once. The\n<code>type-descriptor</code> must not be <code>never</code>.\n</p>\n\n</section>\n<section>\n<h3 id=\"section_8.8\">8.8 Module constant declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-const-decl\">module-const-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>const</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <code>=</code> <a href=\"#const-expr\"><span class=\"ntref\">const-expr</span></a> <code>;</code>\n</pre>\n<p>\nA module-const-decl declares a compile-time constant. A compile-time constant is\nan named immutable value, known at compile-time. A compile-time constant can be\nused like a variable, and can also be referenced in contexts that require a\nvalue that is known at compile-time, such as in a type-descriptor or in a\nmatch-pattern.\n</p>\n<p>\nThe type of the constant is the intersection of <code>readonly</code> and the\nsingleton type containing just the shape of the value named by the constant. The\ntype of the constant determines the static type of a variable-reference-expr\nthat references this constant.\n</p>\n<p>\nIf type-descriptor is present, then it provides the contextually expected type\nfor the interpretation of const-expr. It is a compile-time error if the static\ntype of const-expr is not a subtype of that type. The type-descriptor must\nspecify a type that is a subtype of anydata and must not be <code>never</code>.\nNote that the type-descriptor does not specify the type of the constant,\nalthough the type of the constant will all be a subtype of the type specified by\nthe type-descriptor.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_8.9\">8.9 Module enumeration declaration</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-enum-decl\">module-enum-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] <code>enum</code> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> <code>{</code> <a href=\"#enum-member\"><span class=\"ntref\">enum-member</span></a> (<code>,</code> <a href=\"#enum-member\"><span class=\"ntref\">enum-member</span></a>)* <code>}</code>\n<span class=\"ntdfn\" id=\"enum-member\">enum-member</span> := <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a> <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a> [<code>=</code> <a href=\"#const-expr\"><span class=\"ntref\">const-expr</span></a>]\n</pre>\n<p>\nA module-enum-decl provides a convenient syntax for declaring a union of string constants.\n</p>\n<p>\nEach enum-member is defined as compile-time constant in the same way as if it\nhad been defined using a module-const-decl. The result of evaluating the\nconst-expr must be a string. If the const-expr is omitted, it defaults to be the\nsame as the identifier.\n</p>\n<p>\nThe identifier is defined as a type in the same was as if it had been defined by\na module-type-defn, with the type-descriptor being the union of the constants\ndefined by the members.\n</p>\n<p>\nIf the module-enum-decl is public, then both the type and the constants are public.\n</p>\n<p>\nSo for example:\n</p>\n<pre>\npublic enum Color {\n  RED,\n  GREEN,\n  BLUE\n}\n</pre>\n<p>\nis exactly equivalent to:\n</p>\n<pre>\npublic const RED = \"RED\";\npublic const GREEN = \"GREEN\";\npublic const BLUE = \"BLUE\";\npublic type Color RED|GREEN|BLUE;\n</pre>\n</section>\n\n<section>\n<h3 id=\"section_8.10\">8.10 Module XML namespace declaration</h3>\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"module-xmlns-decl\">module-xmlns-decl</span> := <a href=\"#xmlns-decl\"><span class=\"ntref\">xmlns-decl</span></a>\n</pre>\n\n<p>\nA <code>module-xmlns-decl</code> declares an XML namespace prefix with module\nscope. It applies only to the source part in which it occurs, as with an\nimport-decl.\n</p>\n<p>\nThe semantics of xmlns-decl are described in the <a href=\"#XML_namespace_declaration_statement\">XML namespace declaration\nstatement</a> section.\n</p>\n\n</section>\n\n</section>\n<section>\n<h2 id=\"metadata\">9. Metadata</h2>\n<p>\nBallerina allows metadata to be attached to a construct by specifying the\nmetadata before the construct.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"metadata\">metadata</span> := [<a href=\"#DocumentationString\"><span class=\"ntref\">DocumentationString</span></a>] [<a href=\"#annots\"><span class=\"ntref\">annots</span></a>]\n</pre>\n<p>\nThere are two forms of metadata: documentation and annotations.\n</p>\n<section>\n<h3 id=\"section_9.1\">9.1 Annotations</h3>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annots\">annots</span> := <a href=\"#annotation\"><span class=\"ntref\">annotation</span></a>+\n<span class=\"ntdfn\" id=\"annotation\">annotation</span> := <code>@</code> <a href=\"#annot-tag-reference\"><span class=\"ntref\">annot-tag-reference</span></a> <a href=\"#annot-value\"><span class=\"ntref\">annot-value</span></a>\n</pre>\n<p>\nAnnotations provide structured metadata about a particular construct. Multiple\nannotations can be applied to a single construct. An annotation consists of a\ntag and a value.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annotation-decl\">annotation-decl</span> :=\n   <a href=\"#metadata\"><span class=\"ntref\">metadata</span></a>\n   [<code>public</code>] [<code>const</code>] <code>annotation</code> [<a href=\"#type-descriptor\"><span class=\"ntref\">type-descriptor</span></a>] <a href=\"#annot-tag\"><span class=\"ntref\">annot-tag</span></a> \n   [<code>on</code> <a href=\"#annot-attach-points\"><span class=\"ntref\">annot-attach-points</span></a>] <code>;</code>\n<span class=\"ntdfn\" id=\"annot-tag\">annot-tag</span> := <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n</pre>\n<p>\nAn annotation-decl declares an annotation tag. Annotations tags are in a\nseparate symbol space and cannot conflict with other module level declarations\nand definitions. The annotation tag symbol space is also distinct from the\nsymbol space used by module prefixes and XML namespace prefixes.\n</p>\n<p>\nThe type-descriptor specifies the type of the annotation tag. The type must be a\nsubtype of one of the following three types: <code>true</code>,\n<code>map&lt;value:Cloneable&gt;</code>,\n<code>map&lt;value:Cloneable&gt;[]</code>. If the type-descriptor is omitted,\nthen the type is <code>true</code>.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annot-tag-reference\">annot-tag-reference</span> := <a href=\"#qualified-identifier\"><span class=\"ntref\">qualified-identifier</span></a> | <a href=\"#identifier\"><span class=\"ntref\">identifier</span></a>\n<span class=\"ntdfn\" id=\"annot-value\">annot-value</span> := [<a href=\"#mapping-constructor-expr\"><span class=\"ntref\">mapping-constructor-expr</span></a>]\n</pre>\n<p>\nAn annot-tag-reference in an annotation must refer to an annot-tag declared in\nan annotation declaration. When an annot-tag-reference is a\nqualified-identifier, then the module-prefix of the qualified-identifier is\nresolved using import declarations into a reference to a module, and that module\nmust contain an annotation-decl with the same identifier. An annot-tag-reference\nthat is an identifier rather than a qualified-identifier does <em>not</em> refer\nto an annotation defined within the same module. Rather the compilation\nenvironment determines which identifiers can occur as an\nannotation-tag-reference, and for each such identifier which module defines that\nannotation tag.\n</p>\n<p>\nEach annotation has a value. For every construct that has an annotation with a\nparticular tag, there is also an <em>effective value</em> for that annotation\ntag, which is constructed from the values of all annotations with that tag that\nwere attached to that construct. The effective value belongs to the type\ndeclared for the annotation tag. The type of the annotation tag determines the\ntype of the annotation value and whether multiple annotations with the same tag\non a single construct are allowed. For an annotation tag declared with type T,\nif T is M[] for some type mapping type M, then the type of the annotation value\nis M, multiple annotations are allowed, and the effective value is an array of\nthe values for each annotation; otherwise the type of the annotation value is T,\nmultiple annotations are not allowed, the effective value is the value of the\nsingle annotation.\n</p>\n<p>\nIf the type of the annotation value is <code>true</code>, then a\nmapping-constructor-expr is not allowed, and the annotation value is\n<code>true</code>. Otherwise the type of the annotation value must be a mapping\ntype M; if a mapping-constructor-expr is not specified, then it defaults to\n<code>{ }</code>; the mapping-constructor-expr must have static type M and the\nannotation value is the result of evaluating the mapping-constructor-expr with M\nas the contextually expected type.\n</p>\n<p>\nIf the annotation-decl for a tag specifies <code>const</code>, then a\nmapping-constructor-expr in annotations with that tag must be a const-expr and\nis evaluated at compile-time with the semantics of a const-expr. Otherwise, the\nmapping-constructor-expr is evaluated when the annotation is evaluated and the\nImmutableClone abstract operation is applied to the result.\n</p>\n<p>\nAn annotation applied to a module-level declaration is evaluated when the module\nis initialized. An annotation applied to a service constructor is evaluated when\nthe service constructor is evaluated. An annotation occurring within a type\ndescriptor is evaluated when the type descriptor is resolved.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"annot-attach-points\">annot-attach-points</span> := <a href=\"#annot-attach-point\"><span class=\"ntref\">annot-attach-point</span></a> (<code>,</code> <a href=\"#annot-attach-point\"><span class=\"ntref\">annot-attach-point</span></a>)*\n<span class=\"ntdfn\" id=\"annot-attach-point\">annot-attach-point</span> :=\n   <a href=\"#dual-attach-point\"><span class=\"ntref\">dual-attach-point</span></a>\n   | <a href=\"#source-only-attach-point\"><span class=\"ntref\">source-only-attach-point</span></a>\n<span class=\"ntdfn\" id=\"dual-attach-point\">dual-attach-point</span> := [<code>source</code>] <a href=\"#dual-attach-point-ident\"><span class=\"ntref\">dual-attach-point-ident</span></a>\n<span class=\"ntdfn\" id=\"dual-attach-point-ident\">dual-attach-point-ident</span> :=\n   <code>type</code>\n   | <code>class</code>\n   | [<code>object</code>|<code>service</code> <code>remote</code>] <code>function</code>\n   | <code>parameter</code>\n   | <code>return</code>\n   | <code>service</code>\n   | [<code>object</code>|<code>record</code>] <code>field</code>\n<span class=\"ntdfn\" id=\"source-only-attach-point\">source-only-attach-point</span> := <code>source</code> <a href=\"#source-only-attach-point-ident\"><span class=\"ntref\">source-only-attach-point-ident</span></a>\n<span class=\"ntdfn\" id=\"source-only-attach-point-ident\">source-only-attach-point-ident</span> :=\n   <code>annotation</code>\n   | <code>external</code>\n   | <code>var</code>\n   | <code>const</code>\n   | <code>listener</code>\n   | <code>worker</code>\n</pre>\n<p>\nThe <code>annot-attach-points</code> specify the constructs to which an\nannotation can be attached.\n</p>\n<p>\nWhen an attachment point is prefixed with <code>source</code>, then the\nannotation is attached to a fragment of the source rather than to any runtime\nvalue, and thus is not available at runtime. If any of the attachment points\nspecify <code>source</code>, the annotation-decl must specify\n<code>const</code>.\n</p>\n<p>\nWhen an attachment point is not prefixed with source, then the annotation is\naccessible at runtime by applying the annotation access operator to a typedesc\nvalue.\n</p>\n<p>\nThe available attachment points are described in the following table.\n</p>\n<table>\n  <tr>\n   <td><strong>Attachment point name</strong></td>\n   <td><strong>Syntactic attachment point(s)</strong></td>\n   <td><strong>Attached to which type descriptor at runtime</strong></td>\n  </tr>\n  <tr>\n   <td>type</td>\n   <td>module-type-defn, module-enum-decl, type-cast-expr</td>\n   <td>defined type</td>\n  </tr>\n  <tr>\n   <td>class</td>\n   <td>module-class-defn</td>\n   <td>defined type (which will be type of objects constructed using this class)</td>\n  </tr>\n  <tr>\n   <td>function</td>\n   <td>function-defn, method-decl, method-defn, anonymous-function-expr</td>\n   <td>type of function</td>\n  </tr>\n  <tr>\n   <td>object function</td>\n   <td>method-decl, method-defn</td>\n   <td>type of function</td>\n  </tr>\n  <tr>\n   <td>service remote function</td>\n   <td>method-defn with remote qualifier on service object</td>\n   <td>type of function, on service value</td>\n  </tr>\n  <tr>\n   <td>return</td>\n   <td>return-type-descriptor</td>\n   <td>indirectly to type of function</td>\n  </tr>\n  <tr>\n   <td>parameter</td>\n   <td>required-param, defaultable-param, included-record-param, rest-param</td>\n   <td>indirectly to type of function</td>\n  </tr>\n  <tr>\n   <td>service</td>\n   <td>service-decl, object-constructor-expr with service qualifier</td>\n   <td>type of service</td>\n  </tr>\n  <tr>\n   <td>field</td>\n   <td>individual-field-descriptor, object-field-descriptor</td>\n   <td>type of mapping or object</td>\n  </tr>\n  <tr>\n   <td>object field</td>\n   <td>object-field-descriptor, object-field</td>\n   <td>type of object</td>\n  </tr>\n  <tr>\n   <td>record field</td>\n   <td>individual-field-descriptor</td>\n   <td>type of mapping</td>\n  </tr>\n  <tr>\n   <td>listener</td>\n   <td>listener-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>var</td>\n   <td>module-var-decl, local-var-decl-stmt, let-var-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>const</td>\n   <td>module-const-decl, enum-member</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>annotation</td>\n   <td>annotation-decl</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>external</td>\n   <td>external-function-body</td>\n   <td>none</td>\n  </tr>\n  <tr>\n   <td>worker</td>\n   <td>named-worker-decl, start-action</td>\n   <td>none</td>\n  </tr>\n</table>\n</section>\n<section>\n<h3 id=\"section_9.2\">9.2 Documentation</h3>\n<p>\nA documentation string is an item of metadata that can be associated with\nmodule-level Ballerina constructs and with method declarations. The purpose of\nthe documentation strings for a module is to enable a programmer to use the\nmodule. Information not useful for this purpose should be provided in in\ncomments.\n</p>\n<p>\nA documentation string has the format of one or more lines each of which has a\n<code>#</code> optionally preceded by blank space.\n</p>\n<p>\nThe documentation statement is used to document various Ballerina constructs.\n</p>\n\n<pre class=\"grammar\"><span class=\"ntdfn\" id=\"DocumentationString\">DocumentationString</span> := <a href=\"#DocumentationLine\"><span class=\"ntref\">DocumentationLine</span></a> +\n<span class=\"ntdfn\" id=\"DocumentationLine\">DocumentationLine</span> := <a href=\"#BlankSpace\"><span class=\"ntref\">BlankSpace</span></a>* <code>#</code> [<a href=\"#Space\"><span class=\"ntref\">Space</span></a>] <a href=\"#DocumentationContent\"><span class=\"ntref\">DocumentationContent</span></a>\n<span class=\"ntdfn\" id=\"DocumentationContent\">DocumentationContent</span> := (^ 0xA)* 0xA\n<span class=\"ntdfn\" id=\"BlankSpace\">BlankSpace</span> := <a href=\"#Tab\"><span class=\"ntref\">Tab</span></a> | <a href=\"#Space\"><span class=\"ntref\">Space</span></a>\n<span class=\"ntdfn\" id=\"Space\">Space</span> := 0x20\n<span class=\"ntdfn\" id=\"Tab\">Tab</span> := 0x9\n</pre>\n<p>\nA <code>DocumentationString</code> is recognized only at the beginning of a\nline. The content of a documentation string is the concatenation of the\n<code>DocumentationContent</code> of each <code>DocumentationLine</code> in the\n<code>DocumentationString</code>. Note that a single space following the # is\nnot treated as part of the DocumentationContent.\n</p>\n<p>\nThe content of a <code>DocumentationString</code> is parsed as Ballerina\nFlavored Markdown (BFM). BFM is also used for a separate per-module\ndocumentation file, conventionally called <code>Module.md</code>.\n</p>\n</section>\n<section>\n<h3 id=\"section_9.3\">9.3 Ballerina Flavored Markdown</h3>\n<p>\nBallerina Flavored Markdown is GitHub Flavored Markdown, with some additional\nconventions.\n</p>\n<p>\nIn the documentation string attached to a function or method, there must be\ndocumentation for each parameter, and for the return value if the return value\nis not nil. The documentation for the parameters and a return value must consist\nof a Markdown list, where each list item must have the form <code>ident -\ndoc</code>, where ident is either the parameter name or return, and doc is the\ndocumentation of that parameter or of the return value.\n</p>\n<p>\nThe documentation for an object must contain a list of fields rather than\nparameters. Private fields should not be included in the list.\n</p>\n<p>\nBFM also provides conventions for referring to Ballerina-defined names from\nwithin documentation strings in a source file. An identifier in backticks\n<code>`X`</code>, when preceded by one of the following words:\n</p>\n<ul>\n<li><code>type</code></li>\n<li><code>service</code></li>\n<li><code>variable</code></li>\n<li><code>var</code></li>\n<li><code>annotation</code></li>\n<li><code>module</code></li>\n<li><code>function</code></li>\n<li><code>parameter</code></li>\n</ul>\n<p>\nis assumed to be a reference to a Ballerina-defined name of the type indicated\nby the word. In the case of <code>parameter</code>, the name must be unqualified\nand be the name of a parameter of the function to which the documentation string\nis attached. For other cases, if the name is unqualified it must refer to a\npublic name of the appropriate type in the source file's module; if it is a\nqualified name M:X, then the source file must have imported M, and X must refer\nto a public name of an appropriate type in M. BFM also recognizes\n<code>`f()`</code> as an alternative to <code>function `f`</code>. In both\ncases, f can have any of the following forms (where `m` is a module import, `x` is a\nfunction name, `T` is an object type name, and `y` is a method name):\n</p>\n\n<pre>    x()\n    m:x()\n    T.y()\n    m:T.y()\n</pre>\n<p>\nExample\n</p>\n\n<pre>    # Adds parameter `x` and parameter `y`\n    # + x - one thing to be added\n    # + y - another thing to be added\n    # + return - the sum of them\n    function add (int x, int y) returns int { return x + y; }\n</pre>\n\n<p>\nThe Ballerina platform may define additional conventions, in particular relating\nto headings with particular content. For example, a heading with a content of\n<code>Deprecated</code> can be used to provide information about the deprecation\nof the name to which the documentation string is attached.\n</p>\n\n</section>\n</section>\n<section>\n<h2 id=\"lang_library\">10. Lang library</h2>\n\n<p>\nModules in the <code>ballerina</code> organization with a module name starting\nwith <code>lang.</code> are reserved for use by this specification. These\nmodules are called the <em>lang library</em>.\n</p>\n\n<section>\n<h3 id=\"section_10.1\">10.1 Generic types</h3>\n<p>\nModules in the lang library can make use generic typing. Since generic typing\nhas not yet been added to Ballerina, the source code for the modules use an\nannotation to describe generic typing as follows. When a module type definition\nhas a <code>@typeParam</code> annotation, it means that this type serves as a\ntype parameter when it is used in a function definition: all uses of the type\nparameter in a function definition refer to the same type; the definition of the\ntype is an upper bound on the type parameter. A parameter of a function\ndefinition can be annotated with an <code>@isolatedParam</code> annotation; this\nis allowed when the function is declared as isolated and the type of the\nparameter is a function type; the meaning is that when the function is called in\na context that requires it to be isolated, then the argument supplied for the\nparameter must also be isolated. In effect, the function is parameterized with\nthe isolated qualifier.\n</p>\n<p>\n<strong>Note</strong> We plan to provide full support for generic types in\na future version of this specification.\n</p>\n</section>\n\n<section>\n<h3 id=\"built-in_subtypes\">10.2 Built-in subtypes</h3>\n<p>\nA module in the lang library can provide types that are <em>built-in</em> in the\nsense that their meaning is defined by this specification. Each such built-in\ntype is a subtype of a single basic type; a built-in type that is a subtype of a\nbasic type <code><var>B</var></code> is provided by the module\n<code>lang.<var>B</var></code>.\n</p>\n<p>\nThe built-types provided by lang library modules are described in the following\ntable.\n</p>\n\n<table>\n<tr>\n<th>Basic type</th>\n<th>Type name</th>\n<th>Criteria for <em>v</em> to belong to type</th>\n</tr>\n<tr>\n<td rowspan=\"6\">int</td>\n<td>Unsigned8</td>\n<td>0 â¤ <em>v</em> â¤ 255</td>\n</tr>\n<tr>\n<td>Signed8</td>\n<td>-128 â¤ <em>v</em> â¤ 127</td>\n</tr>\n<tr>\n<td>Unsigned16</td>\n<td>0 â¤ <em>v</em> â¤ 65,535</td>\n</tr>\n<tr>\n<td>Signed16</td>\n<td>-32,768 â¤ <em>v</em> â¤ 32,767</td>\n</tr>\n<tr>\n<td>Unsigned32</td>\n<td>0 â¤ <em>v</em> â¤ 4,294,967,295</td>\n</tr>\n<tr>\n<td>Signed32</td>\n<td>-2,147,483,648 â¤ <em>v</em> â¤ 2,147,483,647</td>\n</tr>\n<tr>\n<td>string</td>\n<td>Char</td>\n<td>\n<em>v</em> has length 1</td>\n</tr>\n<tr>\n<td rowspan=\"4\">xml</td>\n<td>Element</td>\n<td>\n<em>v</em> is an element singleton</td>\n</tr>\n<tr>\n<td>ProcessingInstruction</td>\n<td>\n<em>v</em> is a processing instruction singleton</td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>\n<em>v</em> is a comment singleton</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>\n<em>v</em> is either the empty xml value or a text singleton</td>\n</tr>\n</table>\n<p>\nEach built-in type has a type definition in the module that provides it. The\ntype descriptor of the type definition is the corresponding basic type. The type\ndefinition has a <code>@builtinSubtype</code> annotation, which indicates that\nthe meaning of the type name is built-in, as specified in the above table,\nrather than coming from its type descriptor. It is an error to use the\n<code>@builtinSubtype</code> annotation except in a lang library module.\n</p>\n<p>\nSo, for example, the <code>lang.int</code> module would include the definition:\n</p>\n<pre>\n@builtinSubtype\ntype Signed32 int;\n</pre>\n<p>\nSemantically, these types behave like a predefined type that can be referenced\nby an unqualified name, such as <code>byte</code>. Syntactically, these types\nare referenced by a <code>type-reference</code> in the same way as if their\ndefinitions were not built-in. A built-in type <code>T</code> which is a subtype\nof basic type <code>B</code> can be referenced by a type-reference\n<code>M:T</code>, where <code>M</code> is a module-prefix referring to module\n<code>ballerina/lang.B</code>.\n</p>\n<p>\nFor convenience, this specification refers to the built-in subtype T provided by\nthe module for basic type B as B:T. For example, in this specification\n<code>int:Signed32</code> refers to the <code>Signed32</code> built-in subtype\nof <code>int</code>, which is provided by the <code>lang.int</code> module.\n</p>\n<p>\nThe <code>int:Unsigned8</code> type is equivalent to the predefined\n<code>byte</code> type.\n</p>\n</section>\n\n<section>\n<h3 id=\"section_10.3\">10.3 Lang library modules</h3>\n<p>\nThe lang library consists of the following modules. With the exception of the\n<code>lang.value</code>, <code>lang.transaction</code> and\n<code>lang.runtime</code> modules, each corresponds to a basic type.\n</p>\n\n<section>\n<h4 id=\"lang.array\">10.3.1 <code>lang.array</code> module</h4>\n\n<p>The <code>lang.array</code> module corresponds to basic type list.</p>\n\n<pre class=\"langlib\">\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type any|error;\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type1 any|error;\n\n# A type parameter that is a subtype of `anydata|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype AnydataType anydata;\n\n# Returns the number of members of an array.\n#\n# + arr - the array\n# + return - number of members in `arr`\npublic isolated function length((any|error)[] arr) returns int = external;\n\n# Returns an iterator over an array.\n#\n# + arr - the array\n# + return - a new iterator object that will iterate over the members of `arr`.\npublic isolated function iterator(Type[] arr) returns object {\n    public isolated function next() returns record {|\n        Type value;\n    |}?;\n} = external;\n\n# Returns a new array consisting of index and member pairs.\n#\n# + arr - the array\n# + return - array of index, member pairs\npublic isolated function enumerate(Type[] arr) returns [int, Type][] = external;\n\n\n# Applies a function to each member of an array and returns an array of the results.\n#\n# + arr - the array\n# + func - a function to apply to each member\n# + return - new array containing result of applying `func` to each member of `arr` in order\npublic isolated function 'map(Type[] arr, @isolatedParam function(Type val) returns Type1 func) returns Type1[] = external;\n\n# Applies a function to each member of an array.\n# The function `func` is applied to each member of array `arr` in order.\n#\n# + arr - the array\n# + func - a function to apply to each member\npublic isolated function forEach(Type[] arr, @isolatedParam function(Type val) returns () func) returns () = external;\n\n# Selects the members from an array for which a function returns true.\n#\n# + arr - the array\n# + func - a predicate to apply to each member to test whether it should be selected\n# + return - new array only containing members of `arr` for which `func` evaluates to true\npublic isolated function filter(Type[] arr, @isolatedParam function(Type val) returns boolean func) returns Type[] = external;\n\n# Combines the members of an array using a combining function.\n# The combining function takes the combined value so far and a member of the array,\n# and returns a new combined value.\n#\n# + arr - the array\n# + func - combining function\n# + initial - initial value for the first argument of combining function `func`\n# + return - result of combining the members of `arr` using `func`\n#\n# For example\n# ```\n# reduce([1, 2, 3], function (int total, int n) returns int { return total + n; }, 0)\n# ```\n# is the same as `sum(1, 2, 3)`.\npublic isolated function reduce(Type[] arr, @isolatedParam function(Type1 accum, Type val) returns Type1 func, Type1 initial) returns Type1 = external;\n\n# Returns a slice of an array.\n#\n# + arr - the array\n# + startIndex - index of first member to include in the slice\n# + endIndex - index of first member not to include in the slice\n# + return - new array containing members of `arr` with index &gt;= `startIndex` and &lt; `endIndex` \npublic isolated function slice(Type[] arr, int startIndex, int endIndex = arr.length()) returns Type[] = external;\n\n# Removes a member of an array.\n#\n# + arr - the array\n# + index - index of member to be removed from `arr`\n# + return - the member of `arr` that was at `index`\n# This removes the member of `arr` with index `index` and returns it.\n# It panics if there is no such member.\npublic isolated function remove(Type[] arr, int index) returns Type = external;\n\n# Removes all members of an array.\n# + arr - the array\n# Panics if any member cannot be removed.\npublic isolated function removeAll((any|error)[] arr) returns () = external;\n\n# Changes the length of an array.\n# \n# + arr - the array of which to change the length\n# + length - new length\n# `setLength(arr, 0)` is equivalent to `removeAll(arr)`.\npublic isolated function setLength((any|error)[] arr, int length) returns () = external;\n\n# Returns the index of first member of `arr` that is equal to `val` if there is one.\n# Returns `()` if not found.\n# Equality is tested using `==`.\n#\n# + arr - the array\n# + val - member to search for\n# + startIndex - index to start the search from\n# + return - index of the member if found, else `()`\npublic isolated function indexOf(AnydataType[] arr, AnydataType val, int startIndex = 0) returns int? = external;\n\n# Returns the index of last member of `arr` that is equal to `val` if there is one.\n# Returns `()` if not found.\n# Equality is tested using `==`.\n#\n# + arr - the array\n# + val - member to search for\n# + startIndex - index to start searching backwards from\n# + return - index of the member if found, else `()`\npublic isolated function lastIndexOf(AnydataType[] arr, AnydataType val, int startIndex = arr.length() - 1) returns int? = external;\n\n# Reverses the order of the members of an array.\n#\n# + arr - the array to be reversed\n# + return - new array with the members of `arr` in reverse order\npublic isolated function reverse(Type[] arr) returns Type[] = external;\n\n# Direction for `sort` function.\npublic enum SortDirection {\n   ASCENDING = \"ascending\",\n   DESCENDING = \"descending\"\n}\n\n# A type of which any ordered type must be a subtype.\n# Whether a type is an ordered type cannot be defined in\n# terms of being a subtype of a type, so being a subtype\n# of `OrderedType` is a necessary but not sufficient condition\n# for a type to be an ordered type.\npublic type OrderedType ()|boolean|int|float|decimal|string|OrderedType[];\n\n# Sorts an array.\n# If the member type of the array is not sorted, then the `key` function\n# must be specified.\n# Sorting works the same as with the `sort` clause of query expressions.\n#\n# + arr - the array to be sorted; \n# + direction - direction in which to sort\n# + key - function that returns a key to use to sort the members\n# + return - new array consisting of the members of `arr` in sorted order\npublic isolated function sort(Type[] arr, SortDirection direction = ASCENDING,\n        (isolated function(Type val) returns OrderedType)? key = ()) returns Type[] = external;\n\n\n# Removes and returns the last member of an array.\n# The array must not be empty.\n#\n# + arr - the array\n# + return - removed member\npublic isolated function pop(Type[] arr) returns Type = external;\n\n# Adds values to the end of an array.\n#\n# + arr - the array\n# + vals - values to add to the end of the array\npublic isolated function push(Type[] arr, Type... vals) returns () = external;\n\n\n# Removes and returns first member of an array.\n# The array must not be empty.\n#\n# + arr - the array\n# + return - the value that was the first member of the array\npublic isolated function shift(Type[] arr) returns Type = external;\n\n# Adds values to the start of an array.\n# The values newly added to the array will be in the same order\n# as they are in `vals`.\n# \n# + arr - the array\n# + vals - values to add to the start of the array\npublic isolated function unshift(Type[] arr, Type... vals) returns () = external;\n\n\n# Returns the string that is the Base64 representation of an array of bytes.\n# The representation is the same as used by a Ballerina Base64Literal.\n# The result will contain only characters  `A..Z`, `a..z`, `0..9`, `+`, `/` and `=`.\n# There will be no whitespace in the returned string.\n#\n# + arr - the array\n# + return - Base64 string representation\npublic isolated function toBase64(byte[] arr) returns string = external;\n\n# Returns the byte array that a string represents in Base64.\n# `str` must consist of the characters `A..Z`, `a..z`, `0..9`, `+`, `/`, `=`\n# and whitespace as allowed by a Ballerina Base64Literal.\n#\n# + str - Base64 string representation\n# + return - the byte array or error\npublic isolated function fromBase64(string str) returns byte[]|error = external;\n\n# Returns the string that is the Base16 representation of an array of bytes.\n# The representation is the same as used by a Ballerina Base16Literal.\n# The result will contain only characters  `0..9`, `a..f`.\n# There will be no whitespace in the returned string.\n#\n# + arr - the array\n# + return - Base16 string representation\npublic isolated function toBase16(byte[] arr) returns string = external;\n\n# Returns the byte array that a string represents in Base16.\n# `str` must consist of the characters `0..9`, `A..F`, `a..f`\n# and whitespace as allowed by a Ballerina Base16Literal.\n#\n# + str - Base16 string representation\n# + return - the byte array or error\npublic isolated function fromBase16(string str) returns byte[]|error = external;\n\n# Returns a stream of the members of an array.\n#\n# + arr - the array\n# + returns - stream of members of the array\n# The returned stream will use an iterator over `arr` and\n# will therefore handle mutation of `arr` in the same way\n# as an iterator does.\n# Theutation of the `arr`\npublic isolated function toStream(T[] arr) returns stream&lt;T,()&gt; = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.boolean\">10.3.2 <code>lang.boolean</code> module</h4>\n\n<p>The <code>lang.boolean</code> module corresponds to basic type boolean.</p>\n\n<pre class=\"langlib\">\n\n# Converts a string to a boolean.\n# Returns the boolean of which `s` is a string representation.\n# The accepted representations are `true`, `false`\n# (in any combination of lower- and upper-case),\n# and also `1` for true and `0` for `false`.\n# This is the inverse of `value:toString` applied to a `boolean`.\n#\n# + s - string representing a boolean value\n# + return - boolean that `s` represents, or an error if there is no such boolean\npublic isolated function fromString(string s) returns boolean|error = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.decimal\">10.3.3 <code>lang.decimal</code> module</h4>\n\n<p>The <code>lang.decimal</code> module corresponds to basic type decimal.</p>\n\n<pre class=\"langlib\">\n\n# Sum of zero or more decimal values.\n#\n# + xs - decimal values to sum\n# + return - sum of all the `xs`; 0 if `xs` is empty\npublic isolated function sum(decimal... xs) returns decimal = external;\n\n# Maximum of one or more decimal values.\n#\n# + x - first decimal value\n# + xs - other decimal values\n# + return - maximum value of `x` and all the `xs`\npublic isolated function max(decimal x, decimal... xs) returns decimal = external;\n\n# Minimum of one or more decimal values\n#\n# + x - first decimal value\n# + xs - other decimal values\n# + return - minimum value of `x` and all the `xs`.\npublic isolated function min(decimal x, decimal... xs) returns decimal = external;\n\n# IEEE abs operation.\n#\n# + x - decimal value to operate on\n# + return - absolute value of `x`\npublic isolated function abs(decimal x) returns decimal = external;\n\n# Round a decimal to the closest integral value.\n# Returns the decimal value that is a mathematical integer and closest to `x`.\n# If there are two such values, choose the one that is even\n# (this is the round-to-nearest rounding mode, which is the default for IEEE\n# and for Ballerina).\n# Same as Java Math.rint method\n# Same as .NET Math.Round method\n# IEEE 754 roundToIntegralTiesToEven operation\n# Note that `&lt;int&gt;x` is the same as `&lt;int&gt;x.round()`\n#\n# + x - decimal value to operate on\n# + return - closest decimal value to `x` that is a mathematical integer\npublic isolated function round(decimal x) returns decimal = external;\n\n# Rounds a decimal down to the closest integral value.\n#\n# + x - decimal value to operate on\n# + return - largest (closest to +â) decimal value not greater than `x` that is a mathematical integer.\npublic isolated function floor(decimal x) returns decimal = external;\n\n# Rounds a decimal up to the closest integral value.\n#\n# + x - decimal value to operate on\n# + return - smallest (closest to -â) decimal value not less than `x` that is a mathematical integer\npublic isolated function ceiling(decimal x) returns decimal = external;\n\n# Return the decimal value represented by `s`.\n# `s` must follow the syntax of DecimalFloatingPointNumber as defined by the Ballerina specification\n# with the following modifications\n# - the DecimalFloatingPointLiteral may have a leading `+` or `-` sign\n# - a FloatingPointTypeSuffix is not allowed\n# This is the inverse of `value:toString` applied to an `decimal`.\n#\n# + s - string representation of a decimal\n# + return - decimal representation of the argument or error\npublic isolated function fromString(string s) returns decimal|error = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.error\">10.3.4 <code>lang.error</code> module</h4>\n\n<p>The <code>lang.error</code> module corresponds to basic type error.</p>\n\n<pre class=\"langlib\">\n\n\n# Type for value that can be cloned.\n# This is the same as in lang.value, but is copied here to avoid a dependency.\n\ntype Cloneable readonly|xml|Cloneable[]|map&lt;Cloneable&gt;|table&lt;map&lt;Cloneable&gt;&gt;;\n\n# The type to which error detail records must belong.\npublic type Detail record {|\n   Cloneable...;\n|};\n\n# A type parameter that is a subtype of error `Detail` record type.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype DetailType Detail;\n\n# Returns the error's message.\n#\n# + e - the error value\n# + return - error message\npublic isolated function message(error e) returns string = external;\n\n# Returns the error's cause.\n#\n# + e - the error value\n# + return - error cause\npublic isolated function cause(error e) returns error? = external;\n\n# Returns the error's detail record.\n# The returned value will be immutable.\n# + e - the error value\n# + return - error detail value\npublic isolated function detail(error&lt;DetailType&gt; e) returns readonly &amp; DetailType = external;\n\n# Type representing a stack frame.\n# A call stack is represented as an array of stack frames.\n# This type is also present in lang.runtime to avoid a dependency.\npublic type StackFrame readonly &amp; object {\n   # Returns a string representing this StackFrame.\n   # This must not contain any newline characters.\n   # + return - a string\n   public isolated function toString() returns string;\n};\n\n# Returns an array representing an error's stack trace.\n#\n# + e - the error value\n# + return - an array representing the stack trace of the error value\n# The first member of the array represents the top of the call stack.\npublic isolated function stackTrace(error e) returns StackFrame[] = external;\n\n# Converts an error to a string.\n#\n# + e - the error to be converted to a string\n# + return - a string resulting from the conversion\n#\n# The details of the conversion are specified by the ToString abstract operation\n# defined in the Ballerina Language Specification, using the direct style.\npublic isolated function toString(error e) returns string = external;\n\n# Converts an error to a string that describes the value in Ballerina syntax.\n# + e - the error to be converted to a string\n# + return - a string resulting from the conversion\n#\n# The details of the conversion are specified by the ToString abstract operation\n# defined in the Ballerina Language Specification, using the expression style.\npublic isolated function toBalString(error e) returns string = external;\n\n# A type of error which can be retried.\npublic type Retriable distinct error;\n\n# The RetryManager used by default.\npublic class DefaultRetryManager {\n   private int count;\n   public function init(int count = 3) {\n     this.count = count;\n   }\n   public function shouldRetry(error e) returns boolean {\n      if e is Retriable &amp;&amp; count &gt;  0 {\n         count -= 1;\n         return true;\n      }\n      else {\n         return false;\n      }\n   }\n}\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.float\">10.3.5 <code>lang.float</code> module</h4>\n\n<p>The <code>lang.float</code> module corresponds to basic type float.</p>\n\n<pre class=\"langlib\">\n\n\n# The number Ï\npublic const float PI = 3.141592653589793;\n# Euler's number\npublic const float E =  2.718281828459045;\n# IEEE not-a-number value\npublic const float NaN = 0.0/0.0;\n\n# IEEE positive infinity\npublic const float Infinity = 1.0/0.0;\n\n# Tests whether a float is finite.\n# Exactly one of isFinite, isInfinite and IsNaN will be true for any float value\n#\n# + x - the float to be tested\n# + return - true if `x` is finite, i.e. neither NaN nor +â nor -â\npublic isolated function isFinite(float x) returns boolean = external;\n\n# Tests whether a float is infinite.\n# Exactly one of isFinite, isInfinite and IsNaN will be true for any float value\n#\n# + x - the float to be tested\n# + return - true if `x` is either +â or -â\npublic isolated function isInfinite(float x) returns boolean = external;\n\n# Tests whether a float is NaN.\n# Exactly one of isFinite, isInfinite and IsNaN will be true for any float value.\n#\n# + x - the float to be tested\n# + return - true if `x` is NaN\npublic isolated function isNaN(float x) returns boolean = external;\n\n# Sum of zero or more float values.\n# Result is NaN if any arg is NaN\n#\n# + xs - float values to sum\n# + return - sum of all the `xs`, +0.0 if `xs` is empty\npublic isolated function sum(float... xs) returns float = external;\n\n# Maximum of zero or more float values.\n# Result is -â if no args\n# NaN if any arg is NaN\n#\n# + xs - float values to operate on\n# + return - maximum value of all the `xs`\npublic isolated function max(float... xs) returns float = external;\n\n# Minimum of zero or more float values.\n# Result is +â if no args\n# Result is NaN if any arg is NaN\n#\n# + xs - float values to operate on\n# + return - minimum value of all the `xs`\npublic isolated function min(float... xs) returns float = external;\n\n# IEEE abs operation.\n#\n# + x - float value to operate on\n# + return - absolute value of `x`\npublic isolated function abs(float x) returns float = external;\n\n# Round a float value to the closest integral value.\n# Returns the float value that is a mathematical integer and closest to `x`.\n# If there are two such values, choose the one that is even\n# (this is the round-to-nearest rounding mode, which is the default for IEEE and for Ballerina).\n# Same as Java Math.rint method\n# Same as .NET Math.Round method\n# IEEE roundToIntegralTiesToEven operation\n# Note that `&lt;int&gt;x` is the same as `&lt;int&gt;x.round()`\n#\n# + x - float value to operate on\n# + return - closest float value to `x` that is a mathematical integer\npublic isolated function round(float x) returns float = external;\n\n# Rounds a float down to the closest integral value.\n#\n# + x - float value to operate on\n# + return - largest (closest to +â) float value not greater than `x` that is a mathematical integer.\npublic isolated function floor(float x) returns float = external;\n\n# Rounds a float up to the closest integral value.\n#\n# + x - float value to operate on\n# + return - smallest (closest to -â) decimal value not less than `x` that is a mathematical integer\npublic isolated function ceiling(float x) returns float = external;\n\n# Returns the square root of a float value.\n# Corresponds to IEEE squareRoot operation.\n#\n# + x - float value to operate on\n# + return - square root of `x`\npublic isolated function sqrt(float x) returns float = external;\n\n# Returns the cube root of a float value.\n# Corresponds to IEEE rootn(x, 3) operation.\n#\n# + x - float value to operate on\n# + return - cube root of `x`\npublic isolated function cbrt(float x) returns float = external;\n\n# Raises one float value to the power of another float values.\n# Corresponds to IEEE pow(x, y) operation.\n#\n# + x - base value\n# + y - the exponent\n# + return - `x` raised to the power of `y`\npublic isolated function pow(float x, float y) returns float = external;\n\n# Returns the natural logarithm of a float value\n# Corresponds to IEEE log operation.\n#\n# + x - float value to operate on\n# + return - natural logarithm of `x`\npublic isolated function log(float x) returns float = external;\n\n# Returns the base 10 logarithm of a float value.\n# Corresponds to IEEE log10 operation.\n#\n# + x - float value to operate on\n# + return - base 10 logarithm of `x`\npublic isolated function log10(float x) returns float = external;\n\n# Raises Euler's number to a power.\n# Corresponds to IEEE exp operation.\n#\n# + x - float value to operate on\n# + return - Euler's number raised to the power `x`\npublic isolated function exp(float x) returns float = external;\n\n# Returns the sine of a float value.\n# Corresponds to IEEE sin operation.\n#\n# + x - float value, specifying an angle in radians\n# + return - the sine of `x`\npublic isolated function sin(float x) returns float = external;\n\n# Returns the cosine of a float value.\n# Corresponds to IEEE cos operation.\n#\n# + x - float value, specifying an angle in radians\n# + return - the cosine of `x`\npublic isolated function cos(float x) returns float = external;\n\n# Returns the tangent of a float value.\n# Corresponds to IEEE tan operation\n#\n# + x - float value, specifying an angle in radians\n# + return - the tangent of `x`\npublic isolated function tan(float x) returns float = external;\n\n# Returns the arccosine of a float value.\n# Corresponds to IEEE acos operation\n#\n# + x - float value to operate on\n# + return - the arccosine of `x` in radians\npublic isolated function acos(float x) returns float = external;\n\n# Returns the arctangent of a float value.\n# Corresponds to IEEE atan operation.\n#\n# + x - float value to operate on\n# + return - the arctangent of `x` in radians\npublic isolated function atan(float x) returns float = external;\n\n# Returns the arcsine of a float value.\n# Corresponds to IEEE asin operation.\n#\n# + x - float value to operate on\n# + return - the arcsine of `x` in radians\npublic isolated function asin(float x) returns float = external;\n\n# Performs the 2-argument arctangent operation.\n# Corresponds IEEE atan2(y, x) operation.\n#\n# + y - the y-coordinate\n# + x - the x-coordinate\n# + return - the angle in radians from the positive x-axis to the point\n#   whose Cartesian coordinates are `(x, y)`\npublic isolated function atan2(float y, float x) returns float = external;\n\n# Returns the hyperbolic sine of a float value.\n# Corresponds to IEEE sinh operation.\n#\n# + x - float value to operate on\n# + return - hyperbolic sine of `x`\npublic isolated function sinh(float x) returns float = external;\n\n# Returns the hyperbolic cosine of a float value.\n# Corresponds to IEEE cosh operation.\n#\n# + x - float value to operate on\n# + return - hyperbolic cosine of `x`\npublic isolated function cosh(float x) returns float = external;\n\n# Returns the hyperbolic tangent of a float value.\n# Corresponds to IEEE tanh operation.\n#\n# + x - float value to operate on\n# + return - hyperbolic tangent of `x`\npublic isolated function tanh(float x) returns float = external;\n\n# Return the float value represented by `s`.\n# `s` must follow the syntax of DecimalFloatingPointNumber as defined by the Ballerina specification\n# with the following modifications\n# - the DecimalFloatingPointNumber may have a leading `+` or `-` sign\n# - `NaN` is allowed\n# - `Infinity` is allowed with an optional leading `+` or `-` sign\n# - a FloatingPointTypeSuffix is not allowed\n# This is the inverse of `value:toString` applied to an `float`.\n#\n# + s - string representation of a float\n# + return - float value or error\npublic isolated function fromString(string s) returns float|error = external;\n\n# Returns a string that represents `x` as a hexadecimal floating point number.\n# The returned string will comply to the grammar of HexFloatingPointLiteral\n# in the Ballerina spec with the following modifications:\n# - it will have a leading `-` sign if negative\n# - positive infinity will be represented by `Infinity`\n# - negative infinity will be represented by `-Infinity`\n# - NaN will be represented by `NaN`\n# The representation includes `0x` for finite numbers.\n#\n# + x - float value\n# + return - hexadecimal floating point hex string representation\npublic isolated function toHexString(float x) returns string = external;\n\n# Return the float value represented by `s`.\n# `s` must follow the syntax of HexFloatingPointLiteral as defined by the Ballerina specification\n# with the following modifications\n# - the HexFloatingPointLiteral may have a leading `+` or `-` sign\n# - `NaN` is allowed\n# - `Infinity` is allowed with an optional leading `+` or `-` sign\n#\n# + s - hexadecimal floating point hex string representation\n# + return - float value or error\npublic isolated function fromHexString(string s) returns float|error = external;\n\n# Returns IEEE 64-bit binary floating point format representation of `x` as an int.\n#\n# + x - float value\n# + return - `x` bit pattern as an int\npublic isolated function toBitsInt(float x) returns int = external;\n\n# Returns the float that is represented in IEEE 64-bit floating point by `x`.\n# All bit patterns that IEEE defines to be NaNs will all be mapped to the single float NaN value.\n#\n# + x - int value\n# + return - `x` bit pattern as a float\npublic isolated function fromBitsInt(int x) returns float = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.future\">10.3.6 <code>lang.future</code> module</h4>\n\n<p>The <code>lang.future</code> module corresponds to basic type future.</p>\n\n<pre class=\"langlib\">\n\n# Requests cancellation of a future.\n# + f - the future to be cancelled\n# This sets the cancellation flag in the strand corresponding to `f`.\n# Each time that a strand yields, it will check the cancellation flag\n# and terminate abnormally if the flag is set.\npublic isolated function cancel(future f) returns () = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.int\">10.3.7 <code>lang.int</code> module</h4>\n\n<p>The <code>lang.int</code> module corresponds to basic type int.</p>\n\n<pre class=\"langlib\">\n\n# Built-in subtype that allows signed integers that can be represented in 32 bits using two's complement.\n# This allows an int between -2^31 and 2^31 - 1 inclusive.\n# i.e. between -2,147,483,648 and 2,147,483,647 inclusive.\n@builtinSubtype\npublic type Signed32 int;\n\n# Built-in subtype that allows non-negative integers that can be represented in 16 bits using two's complement.\n# This allows an int between -2^15 and 2^15 - 1 inclusive.\n# i.e. between -32,768 and 32,767 inclusive.\n@builtinSubtype\npublic type Signed16 int;\n\n# Built-in subtype that allows non-negative integers that can be represented in 8 bits using two's complement.\n# This allows an int between -2^7 and 2^7 - 1 inclusive.\n# i.e. between -128 and 127 inclusive.\n@builtinSubtype\npublic type Signed8 int;\n\n# Built-in subtype that allows non-negative integers that can be represented in 32 bits.\n# This allows an int between 0 and 2^32 - 1 inclusive,\n# i.e. between 0 and 4,294,967,295 inclusive.\n@builtinSubtype\npublic type Unsigned32 int;\n\n# Built-in subtype that allows non-negative integers that can be represented in 16 bits.\n# This allows an int between 0 and 2^16 - 1 inclusive,\n# i.e. between 0 and 65,535 inclusive.\n@builtinSubtype\npublic type Unsigned16 int;\n\n# Built-in subtype that allows non-negative integers that can be represented in 8 bits.\n# This allows an int between 0 and 2^8 - 1 inclusive,\n# i.e. between 0 and 255 inclusive.\n# This is the same as `byte`.\n@builtinSubtype\npublic type Unsigned8 int;\n\n# Maximum value of type `int`.\npublic const MAX_VALUE = 9223372036854775807;\n# Minimum value of type `int`.\npublic const MIN_VALUE = -9223372036854775807 - 1; // -9223372036854775808 would overflow\n# Maximum value of type `Signed32`.\npublic const SIGNED32_MAX_VALUE = 2147483647;\n# Minimum value of type `Signed32`.\npublic const SIGNED32_MIN_VALUE = -2147483648;\n# Maximum value of type `Signed16`.\npublic const SIGNED16_MAX_VALUE = 32767;\n# Minimum value of type `Signed16`.\npublic const SIGNED16_MIN_VALUE = -32768;\n# Maximum value of type `Signed8`.\npublic const SIGNED8_MAX_VALUE = 127;\n# Minimum value of type `Signed8`.\npublic const SIGNED8_MIN_VALUE = -128;\n# Maximum value of type `Unsigned32`.\npublic const UNSIGNED32_MAX_VALUE = 4294967295;\n# Maximum value of type `Unsigned16`.\npublic const UNSIGNED16_MAX_VALUE = 65535;\n# Maximum value of type `Unsigned8`.\npublic const UNSIGNED8_MAX_VALUE = 255;\n\n\n# Returns absolute value of an int.\n#\n# + n - int value to be operated on\n# + return - absolute value of `n`\npublic isolated function abs(int n) returns int = external;\n\n# Returns sum of zero or more int values.\n#\n# + ns - int values to sum\n# + return - sum of all the `ns`; 0 is `ns` is empty\npublic isolated function sum(int... ns) returns int = external;\n\n# Maximum of one or more int values.\n#\n# + n - first int value\n# + ns - other int values\n# + return - maximum value of value of `x` and all the `xs`\npublic isolated function max(int n, int... ns) returns int = external;\n\n# Minimum of one or more int values\n#\n# + n - first int value\n# + ns - other int values\n# + return - minimum value of `n` and all the `ns`\npublic isolated function min(int n, int... ns) returns int = external;\n\n# Returns the integer that `s` represents in decimal.\n# Returns error if `s` is not the decimal representation of an integer.\n# The first character may be `+` or `-`.\n# This is the inverse of `value:toString` applied to an `int`.\n#\n# + s - string representation of a integer value\n# + return - int representation of the argument or error\npublic isolated function fromString(string s) returns int|error = external;\n\n# Returns representation of `n` as hexdecimal string.\n# There is no `0x` prefix. Lowercase letters a-f are used.\n# Negative numbers will have a `-` prefix. No sign for\n# non-negative numbers.\n#\n# + n - int value\n# + return - hexadecimal string representation of int value\npublic isolated function toHexString(int n) returns string = external;\n\n# Returns the integer that `s` represents in hexadecimal.\n# Both uppercase A-F and lowercase a-f are allowed.\n# It may start with an optional `+` or `-` sign.\n# No `0x` or `0X` prefix is allowed.\n# Returns an error if the `s` is not in an allowed format.\n#\n# + s - hexadecimal string representation of int value\n# + return - int value or error\npublic isolated function fromHexString(string s) returns int|error = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.map\">10.3.8 <code>lang.map</code> module</h4>\n\n<p>The <code>lang.map</code> module corresponds to basic type mapping.</p>\n\n<pre class=\"langlib\">\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type any|error;\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type1 any|error;\n\n# Returns number of members of a map.\n#\n# + m - the map\n# + return - number of members in `m`\npublic isolated function length(map&lt;any|error&gt; m) returns int = external;\n\n# Returns an iterator over a map.\n# The iterator will iterate over the members of the map not the keys.\n# The `entries` function can be used to iterate over the keys and members together.\n# The `keys` function can be used to iterator over just the keys.\n# \n# + m - the map\n# + return - a new iterator object that will iterate over the members of `m`\npublic isolated function iterator(map&lt;Type&gt; m) returns object {\n    public isolated function next() returns record {|\n        Type value;\n    |}?;\n} = external;\n\n# Returns the member of map `m` with key `k`.\n# This for use in a case where it is known that the map has a specific key,\n# and accordingly panics if `m` does not have a member with key `k`.\n#\n# + m - the map\n# + k - the key\n# + return - member with key `k`\npublic isolated function get(map&lt;Type&gt; m, string k) returns Type = external;\n\n# Returns a map containing [key, member] pair as the value for each key.\n#\n# + m - the map\n# + return - a new map of [key, member] pairs\npublic isolated function entries(map&lt;Type&gt; m) returns map&lt;[string, Type]&gt; = external;\n\n\n# Applies a function each member of a map and returns a map of the result.\n# The resulting map will have the same keys as the argument map.\n#\n# + m - the map\n# + func - a function to apply to each member\n# + return - new map containing result of applying function `func` to each member\npublic isolated function 'map(map&lt;Type&gt; m, @isolatedParam function(Type val) returns Type1 func) returns map&lt;Type1&gt; = external;\n\n# Applies a function to each member of a map.\n# The function `func` is applied to each member of `m`.\n#\n# + m - the map\n# + func - a function to apply to each member\npublic isolated function forEach(map&lt;Type&gt; m, @isolatedParam function(Type val) returns () func) returns () = external;\n\n# Selects the members from a map for which a function returns true.\n#\n# + m - the map\n# + func - a predicate to apply to each element to test whether it should be included\n# + return - new map containing members for which `func` evaluates to true\npublic isolated function filter(map&lt;Type&gt; m, @isolatedParam function(Type val) returns boolean func) returns map&lt;Type&gt; = external;\n\n# Combines the members of a map using a combining function.\n# The combining function takes the combined value so far and a member of the map,\n# and returns a new combined value.\n#\n# + m - the map\n# + func - combining function\n# + initial - initial value for the first argument of combining function `func`\n# + return - result of combining the members of `m` using `func`\npublic isolated function reduce(map&lt;Type&gt; m, @isolatedParam function(Type1 accum, Type val) returns Type1 func, Type1 initial) returns Type1 = external;\n\n# Removes a member of a map.\n#\n# + m - the map\n# + k - the key\n# + return - the member of `m` that had key `k`\n# This removes the member of `m` with key `k` and returns it.\n# It panics if there is no such member.\npublic isolated function remove(map&lt;Type&gt; m, string k) returns Type = external;\n\n# Removes a member of a map with a given key, if the map has member with the key.\n#\n# + m - the map\n# + k - the key\n# + return - the member of `m` that had key `k`, or `()` if `m` does not have a key `k`\n# If `m` has a member with key `k`, it removes and returns it;\n# otherwise it returns `()`.\npublic isolated function removeIfHasKey(map&lt;Type&gt; m, string k) returns Type? = external;\n\n# Removes all members of a map.\n# This panics if any member cannot be removed.\n#\n# + m - the map\npublic isolated function removeAll(map&lt;any|error&gt; m) returns () = external;\n\n# Tests whether m has a member with key `k`.\n#\n# + m - the map\n# + k - the key\n# + return - true if m has a member with key `k`\npublic isolated function hasKey(map&lt;Type&gt; m, string k) returns boolean = external;\n\n# Returns a list of all the keys of map `m`.\n#\n# + m - the map\n# + return - a new list of all keys\npublic isolated function keys(map&lt;any|error&gt; m) returns string[] = external;\n\n# Returns a list of all the members of a map.\n#\n# + m - the map\n# + return - an array whose members are the members of `m`\npublic isolated function toArray(map&lt;Type&gt; m) returns Type[] = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.object\">10.3.9 <code>lang.object</code> module</h4>\n\n<p>The <code>lang.object</code> module corresponds to basic type object.</p>\n\n<pre class=\"langlib\">\n\n# Distinct Iterable type.\n# An object can make itself iterable by using `*object:Iterable;`,\n# and then defining an `iterator` method.\npublic type Iterable distinct object {\n    # Create a new iterator.\n    #\n    # + return - a new iterator object\n    public function iterator() returns object {\n        public function next() returns record {| any|error value; |}|error?;\n    };\n};\n\n# Distinct RawTemplate type.\n# A raw template expression constructs an object belonging to this type.\npublic type RawTemplate distinct object {\n    # An array of the strings containing the characters in BacktickString\n    # outside of interpolations, split at the interpolation points.\n    # The length of this array is one greater than\n    # the length of the `insertions` array.\n    public (readonly &amp; string[]) strings;\n    # An array containing the results of evaluating the\n    # interpolations in the BacktickString.\n    public (any|error)[] insertions;\n};\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.stream\">10.3.10 <code>lang.stream</code> module</h4>\n\n<p>The <code>lang.stream</code> module corresponds to basic type stream.</p>\n\n<pre class=\"langlib\">\n\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type any|error;\n\n# A type parameter that is a subtype of `error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype ErrorType error;\n\n# A type parameter that is a subtype of `error?`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n# This represents the result type of an iterator.\n@typeParam\ntype CompletionType error?;\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type1 any|error;\n\n# Returns an iterator over a stream.\n#\n# + stm - the stream\n# + return - a new iterator object that will iterate over the members of `stm`.\npublic isolated function iterator(stream&lt;Type,CompletionType&gt; stm) returns object {\n    public isolated function next() returns record {|\n        Type value;\n    |}|CompletionType;\n} = external;\n\n# Returns the next member of the stream.\n#\n# + stm - the stream\n# + return - a record containing the next member of the stream, if there is one, or,\n#   otherwise, the completion value\npublic isolated function next(stream&lt;Type,CompletionType&gt; stm) returns record {|\n        Type value;\n    |}|CompletionType = external;\n\n# Closes a stream.\n# This releases any system resources being used by the stream.\n# Closing a stream that has already been closed has no effect and returns `()`.\n#\n# + stm - the stream to close\n# + return - () if the close completed successfully, otherwise an error\npublic isolated function close(stream&lt;Type,CompletionType&gt; stm) returns CompletionType? = external;\n\n\n# Applies a function to each member of a stream and returns a stream of the results.\n#\n# + stm - the stream\n# + func - a function to apply to each member\n# + return - new stream containing result of applying `func` to each member of `stm` in order\npublic isolated function 'map(stream&lt;Type,CompletionType&gt; stm, @isolatedParam function(Type val) returns Type1 func)\n   returns stream&lt;Type1,CompletionType&gt; = external;\n\n# Applies a function to each member of a stream.\n# The function `func` is applied to each member of stream `stm` in order.\n#\n# + stm - the stream\n# + func - a function to apply to each member\npublic isolated function forEach(stream&lt;Type,CompletionType&gt; stm, @isolatedParam function(Type val) returns () func) returns CompletionType = external;\n\n# Selects the members from a stream for which a function returns true.\n#\n# + stm - the stream\n# + func - a predicate to apply to each member to test whether it should be selected\n# + return - new stream only containing members of `stm` for which `func` evaluates to true\npublic isolated function filter(stream&lt;Type,CompletionType&gt; stm, @isolatedParam function(Type val) returns boolean func)\n   returns stream&lt;Type,CompletionType&gt; = external;\n\n# Combines the members of a stream using a combining function.\n# The combining function takes the combined value so far and a member of the stream,\n# and returns a new combined value.\n#\n# + stm - the stream\n# + func - combining function\n# + initial - initial value for the first argument of combining function `func`\n# + return - result of combining the members of `stm` using `func`\npublic isolated function reduce(stream&lt;Type,ErrorType?&gt; stm, @isolatedParam function(Type1 accum, Type val) returns Type1 func, Type1 initial)\n   returns Type1|ErrorType = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.string\">10.3.11 <code>lang.string</code> module</h4>\n\n<p>The <code>lang.string</code> module corresponds to basic type string.</p>\n\n<pre class=\"langlib\">\n\n# Built-in subtype of string containing strings of length 1.\n@builtinSubtype\ntype Char string;\n\n# Returns the length of the string.\n#\n# + str - the string\n# + return - the number of characters (code points) in `str`\npublic isolated function length(string str) returns int = external;\n\n# Returns an iterator over the string.\n# The iterator will yield the substrings of length 1 in order.\n#\n# + str - the string to be iterated over\n# + return - a new iterator object\npublic isolated function iterator(string str) returns object {\n    public isolated function next() returns record {| Char value; |}?;\n} = external;\n\n# Concatenates zero or more strings.\n#\n# + strs - strings to be concatenated\n# + return - concatenation of all of the `strs`; empty string if `strs` is empty\npublic isolated function concat(string... strs) returns string = external;\n\n# Returns the code point of a character in a string.\n#\n# + str - the string\n# + index - an index in `str`\n# + return - the Unicode code point of the character at `index` in `str`\npublic isolated function getCodePoint(string str, int index) returns int = external;\n\n# Returns a substring of a string.\n#\n# + str - source string.\n# + startIndex - the starting index, inclusive\n# + endIndex - the ending index, exclusive\n# + return - substring consisting of characters with index &gt;= startIndex and &lt; endIndex\npublic isolated function substring(string str, int startIndex, int endIndex = str.length()) returns string = external;\n\n# Lexicographically compares strings using their Unicode code points.\n# This orders strings in a consistent and well-defined way,\n# but the ordering will often not be consistent with cultural expectations\n# for sorted order.\n#\n# + str1 - the first string to be compared\n# + str2 - the second string to be compared\n# + return - an int that is less than, equal to or greater than zero,\n#    according as `str1` is less than, equal to or greater than `str2`\npublic isolated function codePointCompare(string str1, string str2) returns int = external;\n\n# Joins zero or more strings together with a separator.\n#\n# + separator - separator string\n# + strs - strings to be joined\n# + return - a string consisting of all of `strs` concatenated in order\n#     with `separator` in between them\npublic isolated function 'join(string separator, string... strs) returns string = external;\n\n# Finds the first occurrence of one string in another string.\n#\n# + str - the string in which to search\n# + substr - the string to search for\n# + startIndex - index to start searching from\n# + return - index of the first occurrence of `substr` in `str` that is &gt;= `startIndex`,\n#    or `()` if there is no such occurrence\npublic isolated function indexOf(string str, string substr, int startIndex = 0) returns int? = external;\n\n# Finds the last occurrence of one string in another string.\n#\n# + str - the string in which to search\n# + substr - the string to search for\n# + startIndex - index to start searching backwards from\n# + return - index of the last occurrence of `substr` in `str` that is &lt;= `startIndex`,\n#    or `()` if there is no such occurrence\npublic isolated function lastIndexOf(string str, string substr, int startIndex = str.length() - substr.length()) returns int? = external;\n\n# Tests whether a string includes another string.\n#\n# + str - the string in which to search\n# + substr - the string to search for\n# + startIndex - index to start searching from\n# + return - `true` if there is an occurrence of `substr` in `str` at an index &gt;= `startIndex`,\n#    or `false` otherwise\npublic isolated function includes(string str, string substr, int startIndex = 0) returns boolean = external;\n\n# Tests whether a string starts with another string.\n#\n# + str - the string to be tested\n# + substr - the starting string\n# + return - true if `str` starts with `substr`; false otherwise\npublic isolated function startsWith(string str, string substr) returns boolean = external;\n\n# Tests whether a string ends with another string.\n#\n# + str - the string to be tested\n# + substr - the ending string\n# + return - true if `str` ends with `substr`; false otherwise\npublic isolated function endsWith(string str, string substr) returns boolean = external;\n\n\n# Converts occurrences of A-Z to a-z.\n# Other characters are left unchanged.\n#\n# + str - the string to be converted\n# + return - `str` with any occurrences of A-Z converted to a-z\npublic isolated function toLowerAscii(string str) returns string = external;\n\n# Converts occurrences of a-z to A-Z.\n# Other characters are left unchanged.\n#\n# + str - the string to be converted\n# + return - `str` with any occurrences of a-z converted to A-Z\npublic isolated function toUpperAscii(string str) returns string = external;\n\n\n# Tests whether two strings are the same, ignoring the case of ASCII characters.\n# A character in the range a-z is treated the same as the corresponding character in the range A-Z.\n#\n# + str1 - the first string to be compared\n# + str2 - the second string to be compared\n# + return - true if `str1` is the same as `str2`, treating upper-case and lower-case\n# ASCII letters as the same; false, otherwise\npublic isolated function equalsIgnoreCaseAscii(string str1, string str2) returns boolean = external;\n\n# Removes ASCII white space characters from the start and end of a string.\n# The ASCII white space characters are 0x9...0xD, 0x20.\n#\n# + str - the string\n# + return - `str` with leading or trailing ASCII white space characters removed\npublic isolated function trim(string str) returns string = external;\n\n# Represents `str` as an array of bytes using UTF-8.\n#\n# + str - the string\n# + return - UTF-8 byte array\npublic isolated function toBytes(string str) returns byte[] = external;\n\n# Constructs a string from its UTF-8 representation in `bytes`.\n#\n# + bytes - UTF-8 byte array\n# + return - `bytes` converted to string or error\npublic isolated function fromBytes(byte[] bytes) returns string|error = external;\n\n# Converts a string to an array of code points.\n#\n# + str - the string\n# + return - an array with a code point for each character of `str`\npublic isolated function toCodePointInts(string str) returns int[] = external;\n\n# Converts a single character string to a code point.\n#\n# + ch - a single character string\n# + return - the code point of `ch`\npublic isolated function toCodePointInt(Char ch) returns int = external;\n\n# Constructs a string from an array of code points.\n# An int is a valid code point if it is in the range 0 to 0x10FFFF inclusive,\n# but not in the range 0xD800 or 0xDFFF inclusive.\n#\n# + codePoints - an array of ints, each specifying a code point\n# + return - a string with a character for each code point in `codePoints`; or an error\n# if any member of `codePoints` is not a valid code point\npublic isolated function fromCodePointInts(int[] codePoints) returns string|error = external;\n\n# Constructs a single character string from a code point.\n# An int is a valid code point if it is in the range 0 to 0x10FFFF inclusive,\n# but not in the range 0xD800 or 0xDFFF inclusive.\n#\n# + codePoint - an int specifying a code point\n# + return - a single character string whose code point is `codePoint`; or an error\n# if `codePoint` is not a valid code point\npublic isolated function fromCodePointInt(int codePoint) returns Char|error = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.table\">10.3.12 <code>lang.table</code> module</h4>\n\n<p>The <code>lang.table</code> module corresponds to basic type table.</p>\n\n<pre class=\"langlib\">\n\n# A type parameter that is a subtype of `any|error`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype Type any|error;\n\n# A type parameter that is a subtype of `map&lt;any|error&gt;`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype MapType map&lt;any|error&gt;;\n\n# A type parameter that is a subtype of `map&lt;any|error&gt;`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype MapType1 map&lt;any|error&gt;;\n\n# A type parameter that is a subtype of `anydata`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype KeyType anydata;\n\n# Returns number of members of a table.\n#\n# + t - the table\n# + return - number of members in `t`\npublic isolated function length(table&lt;map&lt;any|error&gt;&gt; t) returns int = external;\n\n# Returns an iterator over a table.\n# The iterator will iterate over the members of the table not the keys.\n# The `entries` function can be used to iterate over the keys and members together.\n# The `keys` function can be used to iterator over just the keys.\n# \n# + t - the table\n# + return - a new iterator object that will iterate over the members of `t`\npublic isolated function iterator(table&lt;MapType&gt; t) returns object {\n    public isolated function next() returns record {|\n        MapType value;\n    |}?;\n} = external;\n\n# Returns the member of table `t` with key `k`.\n# This for use in a case where it is known that the table has a specific key,\n# and accordingly panics if `t` does not have a member with key `k`.\n#\n# + t - the table\n# + k - the key\n# + return - member with key `k`\npublic isolated function get(table&lt;MapType&gt; key&lt;KeyType&gt; t, KeyType k) returns MapType = external;\n\n# Adds a member `val` to table `t`, replacing any member with the same key value.\n# If `val` replaces an existing member, it will have the same position\n# in the order of the members as the existing member;\n# otherwise, it will be added as the last member.\n# It panics if `val` is inconsistent with the inherent type of `t`.\npublic isolated function put(table&lt;MapType&gt; t, MapType val) = external;\n\n# Adds a member `val` to table `t`.\n# It will be added as the last member.\n# It panics if `val` has the same key as an existing member of `t`,\n# or if `val` is inconsistent with the inherent type of `t`.\npublic isolated function add(table&lt;MapType&gt; t, MapType val) = external;\n\n\n# Applies a function each member of a table and returns a table of the result.\n#\n# + t - the table\n# + func - a function to apply to each member\n# + return - new table containing result of applying function `func` to each member\npublic isolated function map(table&lt;MapType&gt; t, @isolatedParam function(MapType val) returns MapType1 func)\n   returns table&lt;MapType1&gt; key&lt;never&gt; = external;\n\n# Applies a function to each member of a table.\n# The function `func` is applied to each member of `t`.\n#\n# + t - the table\n# + func - a function to apply to each member\npublic isolated function forEach(table&lt;MapType&gt; t, @isolatedParam function(MapType val) returns () func) returns () = external;\n\n# Selects the members from a table for which a function returns true.\n# The resulting table will have the same keys as the argument table.\n#\n# + t - the table\n# + func - a predicate to apply to each member to test whether it should be included\n# + return - new table containing members for which `func` evaluates to true\npublic isolated function filter(table&lt;MapType&gt; key&lt;KeyType&gt; t, @isolatedParam function(MapType val) returns boolean func)\n   returns table&lt;MapType&gt; key&lt;KeyType&gt; = external;\n\n# Combines the members of a table using a combining function.\n# The combining function takes the combined value so far and a member of the table,\n# and returns a new combined value.\n#\n# + t - the table\n# + func - combining function\n# + initial - initial value for the first argument of combining function `func`\n# + return - result of combining the members of `t` using `func`\npublic isolated function reduce(table&lt;MapType&gt; t, @isolatedParam function(Type accum, MapType val) returns Type func, Type initial) returns Type = external;\n\n# Removes a member of a table.\n#\n# + t - the table\n# + k - the key\n# + return - the member of `t` that had key `k`\n# This removed the member of `t` with key `k` and returns it.\n# It panics if there is no such member.\npublic isolated function remove(table&lt;MapType&gt; key&lt;KeyType&gt; t, KeyType k) returns MapType = external;\n\n# Removes a member of a table with a given key, if the table has member with the key.\n#\n# + t - the table\n# + k - the key\n# + return - the member of `t` that had key `k`, or `()` if `t` does not have a key `k`\n# If `t` has a member with key `k`, it removes and returns it;\n# otherwise it returns `()`.\npublic isolated function removeIfHasKey(table&lt;MapType&gt; key&lt;KeyType&gt; t, KeyType k) returns MapType? = external;\n\n# Removes all members of a table.\n# This panics if any member cannot be removed.\n#\n# + t - the table\npublic isolated function removeAll(table&lt;map&lt;any|error&gt;&gt; t) returns () = external;\n\n# Tests whether `t` has a member with key `k`.\n#\n# + t - the table\n# + k - the key\n# + return - true if `t` has a member with key `k`\npublic isolated function hasKey(table&lt;MapType&gt; key&lt;KeyType&gt; t, KeyType k) returns boolean = external;\n\n# Returns a list of all the keys of table `t`.\n#\n# + t - the table\n# + return - a new list of all keys\npublic isolated function keys(table&lt;map&lt;any|error&gt;&gt; key&lt;KeyType&gt; t) returns KeyType[] = external;\n\n# Returns a list of all the members of a table.\n#\n# + t - the table\n# + return - an array whose members are the members of `t`\npublic isolated function toArray(table&lt;MapType&gt; t) returns MapType[] = external;\n\n# Returns the next available integer key.\n# + t - the table with a key of type int\n# + return - an integer not yet used as a key\n# This is maximum used key value + 1, or 0 if no key used\n# XXX should it be 0, if the maximum used key value is &lt; 0?\n# Provides similar functionality to auto-increment\npublic isolated function nextKey(table&lt;map&lt;any|error&gt;&gt; key&lt;int&gt; t) returns int = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.typedesc\">10.3.13 <code>lang.typedesc</code> module</h4>\n\n<p>The <code>lang.typedesc</code> module corresponds to basic type typedesc.</p>\n\n<pre class=\"langlib\">\n\n# A record representing an identifier for a module.\n# This uniquely identifies a module within a program.\npublic type ModuleId readonly &amp; record {|\n    # the organization\n    string organization;\n    # the module name\n    string name;\n    # platform-specified parts of the identifier\n    string[] platformParts;\n|};\n\n# A record representing a type-id.\n# A type-id uniquely identifies an occurrence of a distinct type descriptor\n# within a program.\npublic type TypeId readonly &amp; record {|\n    # An identifier for the module.\n    ModuleId moduleId;\n    # An identifier within the module identified by `moduleId`.\n    # If it is a string, then it is the name of a type defined in the module.\n    # If it is an integer, then it is compiler-generated.\n    (string|int) localId;\n|};\n\n# Returns the type-ids induced by a typedesc value.\n# + t - the typedesc\n# + primaryOnly - if true, only the primary type-ids will be returned; otherwise,\n    all type-ids will be returned\n# + return - an array containing the type-ids induced by `t` or nil if `t` is not definite\npublic isolated function typeIds(typedesc t, boolean primaryOnly = false) returns readonly &amp; TypeId[]?\n    = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.xml\">10.3.14 <code>lang.xml</code> module</h4>\n\n<p>The <code>lang.xml</code> module corresponds to basic type xml.</p>\n\n<pre class=\"langlib\">\n\n# The namespace URI bound to the `xml` prefix.\npublic const string XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n# The namespace URI bound to the `xmlns` prefix.\npublic const string XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n# The expanded name of the `xml:space` attribute.\npublic const string space = \"{http://www.w3.org/XML/1998/namespace}space\";\n# The expanded name of the `xml:lang` attribute.\npublic const string lang = \"{http://www.w3.org/XML/1998/namespace}lang\";\n# The expanded name of the `xml:base` attribute.\npublic const string base = \"{http://www.w3.org/XML/1998/namespace}base\";\n\n# Type for singleton elements.\n# Built-in subtype of xml.\n@builtinSubtype\npublic type Element xml;\n\n# Type for singleton processing instructions.\n# Built-in subtype of xml.\n@builtinSubtype\npublic type ProcessingInstruction xml;\n\n# Type for singleton comments.\n# Built-in subtype of xml.\n@builtinSubtype\npublic type Comment xml;\n\n# Type for zero or more text characters.\n# Built-in subtype of xml.\n# Adjacent xml text items are automatically concatenated,\n# so an xml sequence belongs to this type if it is a singleton test sequence\n# or the empty sequence.\n@builtinSubtype\npublic type Text xml;\n\n# Returns number of xml items in `x`.\n#\n# + x - xml item\n# + return - number of XML items in `x`\npublic isolated function length(xml x) returns int = external;\n\n# A type parameter that is a subtype of any singleton or empty xml sequence.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype ItemType Element|Comment|ProcessingInstruction|Text;\n# A type parameter that is a subtype of `xml`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype XmlType xml;\n\n# Returns an iterator over the xml items of `x`\n#\n# + x - xml sequence to iterate over\n# + return - iterator object\n# Each item is represented by an xml singleton.\npublic isolated function iterator(xml&lt;ItemType&gt; x) returns object {\n    public isolated function next() returns record {| ItemType value; |}?;\n} = external;\n\n# Returns the item of `x` with index `i`.\n# This differs from `x[i]` in that it panics if\n# `x` does not have an item with index `i`.\n#\n# + x - the xml sequence \n# + i - the index\n# + return - the item with index `i` in `x`\npublic isolated function get(xml&lt;ItemType&gt; x, int i) returns ItemType = external;\n\n# Concatenates xml and string values.\n#\n# + xs - xml or string items to concatenate\n# + return - an xml sequence that is the concatenation of all the `xs`;\n#    an empty xml sequence if the `xs` are empty\npublic isolated function concat((xml|string)... xs) returns xml = external;\n\n# Returns a string giving the expanded name of `elem`.\n#\n# + elem - xml element\n# + return - element name\npublic isolated function getName(Element elem) returns string = external;\n\n# Change the name of element `elem` to `xName`.\n#\n# + elem - xml element\n# + xName - new expanded name\npublic isolated function setName(Element elem, string xName) = external;\n\n# Returns the map representing the attributes of `elem`.\n# This includes namespace attributes.\n# The keys in the map are the expanded names of the attributes.\n#\n# + x - xml element\n# + return - attributes of `x`\npublic isolated function getAttributes(Element x) returns map&lt;string&gt; = external;\n\n# Returns the children of `elem`.\n#\n# + elem - xml element\n# + return - children of `elem`\npublic isolated function getChildren(Element elem) returns xml = external;\n\n# Sets the children of `elem` to `children`.\n# This panics if it would result in the element structure\n# becoming cyclic.\n#\n# + elem - xml element\n# + children - xml or string to set as children\npublic isolated function setChildren(Element elem, xml|string children) = external;\n\n# Returns the descendants of `elem`.\n#\n# + elem - xml element\n# + return - descendants of `elem`\n# The descendants of an element are the children of the element\n# together with, for each of those children that is an element,\n# the descendants of that element, ordered so that\n# each element immediately precedes all its descendants.\n# The order of the items in the returned sequence will thus correspond\n# to the order in which the first character of the representation\n# of the item would occur in the representation of the element in XML syntax.\npublic isolated function getDescendants(Element elem) returns xml = external;\n\n# Returns a string with the character data of an xml value.\n# + x - the xml value\n# + return - a string consisting of all the character data of `x`\n# The character data of an xml value is as follows:\n# * the character data of a text item is a string with one character for each\n#     character information item represented by the text item;\n# * the character data of an element item is the character data of its children;\n# * the character data of a comment item is the empty string;\n# * the character data of a processing instruction item is the empty string;\n# * the character data of an empty xml sequence is the empty string;\n# * the character data of the concatenation of two xml sequences x1 and x2 is the\n#    concatenation of the character data of x1 and the character data of x2.\npublic isolated function data(xml x) returns string = external;\n\n# Returns the target part of the processing instruction.\n#\n# + x - xml processing instruction item\n# + return - target part of `x`\npublic isolated function getTarget(ProcessingInstruction x) returns string = external;\n\n# Returns the content of a processing instruction or comment item.\n#\n# + x - xml item\n# + return - the content of `x`\npublic isolated function getContent(ProcessingInstruction|Comment x) returns string = external;\n\n# Creates a new xml element item.\n#\n# + name - the name of the new element\n# + attributes - the attributes of the new element\n# + children - the children of the new element\n# + return - an xml sequence consisting of only a new xml element with name `name`,\n#   attributes `attributes`, and children `children`\n# The element's attribute map is a newly created map, into which any attributes specified\n# by the `attributes` map are copied.\npublic isolated function createElement(string name, map&lt;string&gt; attributes = {}, xml children = xml``)\n    returns Element = external;\n\n# Creates a new xml processing instruction item.\n#\n# + target - the target part of the processing instruction to be constructed\n# + content - the content part of the processing instruction to be constructed\n# + return - an xml sequence consisting of a processing instruction with target `target`\n#     and content `content`\npublic isolated function createProcessingInstruction(string target, string content)\n    returns ProcessingInstruction = external;\n\n# Creates a new xml comment item.\n#\n# + content - the content of the comment to be constructed.\n# + return - an xml sequence consisting of a comment with content `content`\npublic isolated function createComment(string content) returns Comment = external;\n\n# Constructs an xml value of type Text.\n# + data - the character data of the Text item\n# + return - an xml sequence that is either empty or consists of one text item\n# The returned xml value will be empty when the length of `data` is zero.\npublic isolated function createText(string data) returns Text = external;\n\n# Returns a subsequence of an xml value.\n#\n# + x - the xml value\n# + startIndex - start index, inclusive\n# + endIndex - end index, exclusive\n# + return - a subsequence of `x` consisting of items with index &gt;= startIndex and &lt; endIndex\npublic isolated function slice(xml&lt;ItemType&gt; x, int startIndex, int endIndex = x.length())\n    returns xml&lt;ItemType&gt; = external;\n\n# Strips the insignificant parts of the an xml value.\n# This first transforms the xml value by leaving out any constituent\n# item that is a comment or processing instruction. It then\n# transforms this value by leaving out any constituent item that\n# is a text item that consists entirely of whitespace, where whitespace\n# is as defined by the S production of XML 1.0.\n#\n# + x - the xml value\n# + return - `x` transformed by leaving out insignificant items\npublic isolated function strip(xml x) returns xml = external;\n\n# Selects elements from an xml value.\n# If `nm` is `()`, selects all elements;\n# otherwise, selects only elements whose expanded name is `nm`.\n# \n# + x - the xml value\n# + nm - the expanded name of the elements to be selected, or `()` for all elements\n# + return - an xml sequence consisting of all the element items in `x` whose expanded name is `nm`,\n#  or, if `nm` is `()`, all element items in `x`\npublic isolated function elements(xml x, string? nm = ()) returns xml&lt;Element&gt; = external;\n\n# Returns the children of elements in an xml value.\n# When `x` is of type Element, it is equivalent to `getChildren`.\n# + x - xml value\n# + return - xml sequence containing the children of each element x concatenated in order\n# This is equivalent to `elements(x).map(getChildren)`.\npublic isolated function children(xml x) returns xml = external;\n\n# Selects element children of an xml value\n# + x - the xml value\n# + nm - the expanded name of the elements to be selected, or `()` for all elements\n# + return - an xml sequence consisting of child elements of elements in `x`; if `nm`\n#  is `()`, returns a sequence of all such elements;\n#  otherwise, include only elements whose expanded name is `nm`\n# This is equivalent to `children(x).elements(nm)`.\npublic isolated function elementChildren(xml x, string? nm = ()) returns xml&lt;Element&gt; = external;\n\n# Selects text items from an xml value.\n# + x - the xml value\n# return - an xml sequence consisting of the concatentation of the text items in `x`\npublic isolated function text(xml x) returns Text = external;\n\n\n# Applies a function to each item in an xml sequence, and returns an xml sequence of the results.\n# Each item is represented as a singleton value.\n#\n# + x - the xml value\n# + func - a function to apply to each child or `item`\n# + return - new xml value containing result of applying function `func` to each child or `item`\npublic isolated function map(xml&lt;ItemType&gt; x, @isolatedParam function(ItemType item) returns XmlType func)\n    returns xml&lt;XmlType&gt; = external;\n\n# Applies a function to each item in an xml sequence.\n# Each item is represented as a singleton value.\n#\n# + x - the xml value\n# + func - a function to apply to each item in `x`\npublic isolated function forEach(xml&lt;ItemType&gt; x, @isolatedParam function(ItemType item) returns () func)\n    = external;\n\n# Selects the items from an xml sequence for which a function returns true.\n# Each item is represented as a singleton value.\n#\n# + x - xml value\n# + func - a predicate to apply to each item to test whether it should be selected\n# + return - new xml sequence containing items in `x` for which `func` evaluates to true\npublic isolated function filter(xml&lt;ItemType&gt; x, @isolatedParam function(ItemType item) returns boolean func)\n    returns xml = external;\n\n# Constructs an xml value from a string.\n# This parses the string using the `content` production of the\n# XML 1.0 Recommendation.\n#\n# + s - a string in XML format\n# + return - xml value resulting from parsing `s`, or an error\npublic isolated function fromString(string s) returns xml|error = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.transaction\">10.3.15 <code>lang.transaction</code> module</h4>\n\n<p>The <code>lang.transaction</code> module supports transactions.</p>\n\n<pre class=\"langlib\">\n\n\n# Type of error returned by commit action.\ntype Error distinct error;\n\n# Information about a transaction that does not change\n# after the transaction is started.\ntype Info readonly &amp; record {|\n   # Unique identifier for the transaction branch\n   byte[] xid;\n   # The number of previous attempts in a sequence of retries\n   int retryNumber;\n   # Information about the previous attempt in a sequence of retries.\n   # This will be `()` if the `retryNumber` is 0.\n   Info? prevAttempt;\n   # The time at which the transaction was started.\n   Timestamp startTime;\n|};\n\n# An instant in time.\npublic type Timestamp readonly &amp; object {\n    # Returns milliseconds since 1970-01-01T00:00:00Z, not including leap seconds\n    public function toMillisecondsInt() returns int;\n    # Returns a string representation of the timestamp in ISO 8601 format\n    public function toString() returns string;\n};\n\n# Returns information about the current transaction\npublic transactional isolated function info() returns Info = external;\n\n# Returns information about the transaction with\n# the specified xid.\npublic isolated function getInfo(byte[] xid) returns Info? = external;\n\n# Prevents the global transaction from committing successfully.\n# This ask the transaction manager that when it makes the decision\n# whether to commit or rollback, it should decide to rollback.\n#\n# + error - the error that caused the rollback or `()`, if there is none\npublic transactional isolated function setRollbackOnly(error? e) = external;\n\n# Tells whether it is known that the transaction will be rolled back.\n# + return - true if it is known that the transaction manager will,\n# when it makes the decision whether to commit or rollback, decide\n# to rollback\npublic transactional isolated function getRollbackOnly() returns boolean = external;\n\n# Associates some data with the current transaction branch.\npublic transactional isolated function setData(readonly data) = external;\n\n# Retrieves data associated with the current transaction branch.\n# The data is set using `setData`.\n# + return - the data, or `()` if no data has been set.\npublic transactional isolated function getData() returns readonly = external;\n\n# Type of a commit handler function.\n# + info - information about the transaction being committed\npublic type CommitHandler isolated function(Info info);\n\n# Type of a rollback handler function.\n# + info - information about the transaction being committed\n# + cause - an error describing the cause of the rollback, if there is\n# + willRetry - true if the transaction will be retried, false otherwise\npublic type RollbackHandler isolated function(Info info, error? cause, boolean willRetry);\n\n# Adds a handler to be called if and when the global transaction commits.\n#\n# + handler - the function to be called on commit\npublic transactional isolated function onCommit(CommitHandler handler) = external;\n\n# Adds a handler to be called if and when the global transaction rolls back.\n#\n# + handler - the function to be called on rollback\npublic transactional isolated function onRollback(RollbackHandler handler) = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.runtime\">10.3.16 <code>lang.runtime</code> module</h4>\n\n<p>The <code>lang.runtime</code> module provides functions related to the\nlanguage runtime that are not specific to a particular basic type.</p>\n\n<pre class=\"langlib\">\n\n# Sleep for `seconds`.\n# + seconds - a decimal giving the length of time to sleep in seconds\n# The function will do nothing for the specified period of time before returning.\n# This will cause the current strand to yield.\npublic isolated function sleep(decimal seconds) = external; \n\n# A listener that is dynamically registered with a module.\npublic type DynamicListener object {\n   public function start() returns error?;\n   public function gracefulStop() returns error?;\n   public function immediateStop() returns error?;\n};\n\n# Register a listener object with a module.\n# + listener - the listener object to be registered\n# The listener becomes a module listener of the module from which this\n# function is called.\npublic isolated function registerListener(DynamicListener listener) = external;\n\n# Deregister a listener from a module.\n# + listener - the listener object to be unregistered\n# The `listener` ceases to be a module listener of the module from\n# which this function is called.\npublic isolated function deregisterListener(DynamicListener listener) = external;\n\n\n# Type representing a stack frame.\n# A call stack is represented as an array of stack frames.\n# This type is also present in lang.error to avoid a dependency.\npublic type StackFrame readonly &amp; object {\n   # Returns a string representing this StackFrame.\n   # This must not contain any newline characters.\n   # + return - a string\n   public function toString() returns string;\n};\n\n# Return a stack trace for the current call stack.\n# + return - an array representing the current call stack\n# The first member of the array represents the top of the call stack.\npublic isolated function getStackTrace() returns StackFrame[] = external;\n</pre>\n\n</section>\n\n<section>\n<h4 id=\"lang.value\">10.3.17 <code>lang.value</code> module</h4>\n\n<p>The <code>lang.value</code> module provides functions that work on values of\nmore than one basic type..</p>\n\n<pre class=\"langlib\">\n\n# The type of value to which `clone` and `cloneReadOnly` can be applied.\npublic type Cloneable readonly|xml|Cloneable[]|map&lt;Cloneable&gt;|table&lt;map&lt;Cloneable&gt;&gt;;\n\n# A type parameter that is a subtype of `Cloneable`.\n# Has the special semantic that when used in a declaration\n# all uses in the declaration must refer to same type.\n@typeParam\ntype CloneableType Cloneable;\n\n# Returns a clone of `v`.\n# A clone is a deep copy that does not copy immutable subtrees.\n# A clone can therefore safely be used concurrently with the original.\n# It corresponds to the Clone(v) abstract operation,\n# defined in the Ballerina Language Specification.\n#\n# + v - source value\n# + return - clone of `v`\npublic isolated function clone(CloneableType v) returns CloneableType = external;\n\n# Returns a clone of `v` that is read-only, i.e. immutable.\n# It corresponds to the ImmutableClone(v) abstract operation,\n# defined in the Ballerina Language Specification.\n#\n# + v - source value\n# + return - immutable clone of `v`\npublic isolated function cloneReadOnly(CloneableType v) returns CloneableType &amp; readonly = external;\n\n# Constructs a value with a specified type by cloning another value.\n# + v - the value to be cloned\n# + t - the type for the cloned to be constructed\n# + return - a new value that belongs to type `t`, or an error if this cannot be done\n# \n# When `v` is a structural value, the inherent type of the value to be constructed\n# comes from `t`. When `t` is a union, it must be possible to determine which\n# member of the union to use for the inherent type by following the same rules\n# that are used by list constructor expressions and mapping constructor expressions\n# with the contextually expected type. If not, then an error is returned.\n# The `cloneWithType` operation is recursively applied to each member of `v` using\n# the type descriptor that the inherent type requires for that member.\n# \n# Like the Clone abstract operation, this does a deep copy, but differs in\n# the following respects:\n# - the inherent type of any structural values constructed comes from the specified\n#   type descriptor rather than the value being constructed\n# - the read-only bit of values and fields comes from the specified type descriptor\n# - the graph structure of `v` is not preserved; the result will always be a tree;\n#   an error will be returned if `v` has cycles\n# - immutable structural values are copied rather than being returned as is\n# - numeric values can be converted using the NumericConvert abstract operation\n# - if a record type descriptor specifies default values, these will be used\n#   to supply any missing members\npublic isolated function cloneWithType(anydata v, typedesc&lt;anydata&gt; t = &lt;&gt;) returns t|error = external;\n\n# Safely casts a value to a type.\n# This casts a value to a type in the same way as a type cast expression,\n# but returns an error if the cast cannot be done, rather than panicking.\n# + v - the value to be cast\n# + t - a typedesc for the type to which to cast it\n# return - `v` cast to the type described by `t`, or an error, if the cast cannot be done\npublic isolated function ensureType(any|error v, typedesc&lt;any&gt; t = &lt;&gt;) returns t|error = external;\n\n# Performs a direct conversion of a value to a string.\n# The conversion is direct in the sense that when applied to a value that is already\n# a string it leaves the value unchanged.\n#\n# + v - the value to be converted to a string\n# + return - a string resulting from the conversion\n#\n# The details of the conversion are specified by the ToString abstract operation\n# defined in the Ballerina Language Specification, using the direct style.\npublic isolated function toString(any v) returns string = external;\n\n# Converts a value to a string that describes the value in Ballerina syntax.\n# + v - the value to be converted to a string\n# + return - a string resulting from the conversion\n#\n# If `v` is anydata and does not have cycles, then the result will\n# conform to the grammar for a Ballerina expression and when evaluated\n# will result in a value that is == to v.\n#\n# The details of the conversion are specified by the ToString abstract operation\n# defined in the Ballerina Language Specification, using the expression style.\npublic isolated function toBalString(any v) returns string = external;\n\n# Parses and evaluates a subset of Ballerina expression syntax.\n# + s - the string to be parsed and evaluated\n# return - the result of evaluating the parsed expression, or\n# an error if the string cannot be parsed\n# The subset of Ballerina expression syntax supported is that produced\n# by toBalString when applied to an anydata value.\npublic isolated function fromBalString(string s) returns anydata|error = external;\n\n\n# Converts a value of type `anydata` to `json`.\n# This does a deep copy of `v` converting values that do\n# not belong to json into values that do.\n# A value of type `xml` is converted into a string as if\n# by the `toString` function.\n# A value of type `table` is converted into a list of\n# mappings one for each row.\n# The inherent type of arrays in the return value will be\n# `json[]` and of mappings will be `map&lt;json&gt;`.\n# A new copy is made of all structural values, including\n# immutable values.\n#\n# + v - anydata value\n# + return - representation of `v` as value of type json\n# This panics if `v` has cycles.\npublic isolated function toJson(anydata v) returns json = external;\n\n# Returns the string that represents `v` in JSON format.\n# `v` is first converted to `json` as if by the `toJson` function.\n#\n# + v - anydata value\n# + return - string representation of `v` converted to `json`\npublic isolated function toJsonString(anydata v) returns string = external;\n\n# Parses a string in JSON format and returns the the value that it represents.\n# Numbers in the JSON string are converted into Ballerina values of type\n# decimal except in the following two cases:\n# if the JSON number starts with `-` and is numerically equal to zero, then it is\n# converted into float value of `-0.0`;\n# otherwise, if the JSON number is syntactically an integer and is in the range representable\n# by a Ballerina int, then it is converted into a Ballerina int.\n# A JSON number is considered syntactically an integer if it contains neither\n# a decimal point nor an exponent.\n# \n# Returns an error if the string cannot be parsed.\n#\n# + str - string in JSON format\n# + return - `str` parsed to json or error\npublic isolated function fromJsonString(string str) returns json|error = external;\n\n# Subtype of `json` that allows only float numbers.\npublic type JsonFloat ()|boolean|string|float|JsonFloat[]|map&lt;JsonFloat&gt;;\n\n# Parses a string in JSON format, using float to represent numbers.\n# Returns an error if the string cannot be parsed.\n#\n# + str - string in JSON format\n# + return - `str` parsed to json or error\npublic isolated function fromJsonFloatString(string str) returns JsonFloat|error = external;\n\n# Subtype of `json` that allows only decimal numbers.\npublic type JsonDecimal ()|boolean|string|decimal|JsonDecimal[]|map&lt;JsonDecimal&gt;;\n\n# Parses a string in JSON format, using decimal to represent numbers.\n# Returns an error if the string cannot be parsed.\n#\n# + str - string in JSON format\n# + return - `str` parsed to json or error\npublic isolated function fromJsonDecimalString(string str) returns JsonDecimal|error = external;\n\n# Converts a value of type json to a user-specified type.\n# This works the same as `cloneWithType`,\n# except that it also does the inverse of the conversions done by `toJson`.\n#\n# + v - json value\n# + t - type to convert to\n# + return - value belonging to type `t` or error if this cannot be done\npublic isolated function fromJsonWithType(json v, typedesc&lt;anydata&gt; t = &lt;&gt;)\n    returns t|error = external;\n\n# Converts a string in JSON format to a user-specified type.\n# This is a combination of `fromJsonString` followed by\n# `fromJsonWithType`.\n# + str - string in JSON format\n# + t - type to convert to\n# + return - value belonging to type `t` or error if this cannot be done\npublic isolated function fromJsonStringWithType(string str, typedesc&lt;anydata&gt; t = &lt;&gt;)\n    returns t|error = external;\n    \n# Merges two json values.\n#\n# + j1 - json value\n# + j2 - json value\n# + return - the merge of `j1` with `j2` or an error if the merge fails\n#\n# The merge of `j1` with `j2` is defined as follows:\n# - if `j1` is `()`, then the result is `j2`\n# - if `j2` is `()`, then the result is `j1`\n# - if `j1` is a mapping and `j2` is a mapping, then for each entry [k, j] in j2,\n#   set `j1[k]` to the merge of `j1[k]` with `j`\n#     - if `j1[k]` is undefined, then set `j1[k]` to `j`\n#     - if any merge fails, then the merge of `j1` with `j2` fails\n#     - otherwise, the result is `j1`.\n# - otherwise, the merge fails\n# If the merge fails, then `j1` is unchanged.\npublic isolated function mergeJson(json j1, json j2) returns json|error = external;\n</pre>\n\n</section>\n\n</section>\n\n</section>\n<section class=\"appendix\">\n<h2 id=\"references\">A. References</h2>\n<ul>\n<li>Unicode</li>\n<li>XML</li>\n<li>JSON</li>\n<li>RFC 3629 UTF-8</li>\n<li>IEEE 754-2008</li>\n<li>GitHub Markdown</li>\n</ul>\n</section>\n<section class=\"appendix\">\n<h2 id=\"changes\">B. Changes since previous releases</h2>\n<section>\n<h3 id=\"section_B.1\">B.1 Summary of changes from 2021R1 to 2022R1</h3>\n<ol>\n<li>Maps are required to preserve insertion order.</li>\n<li>The static typing rules for <code>==</code> and <code>!=</code> have been\nrelaxed to require only one operand to be <code>anydata</code>.</li>\n<li>The identifiers of organizations and modules refererenced in import\ndeclarations are restricted to ASCII alpha-numberic characters with underscores\nseparating words.</li>\n<li>Floating pointer literals are not allowed to end with a trailing dot.</li>\n<li>No white space is allowed within a qualified name.</li>\n<li>Add the <code>!is</code> operator.</li>\n<li>Allow <code>null</code> as a type descriptor.</li>\n<li>An object type is not allowed to include a class with private members.</li>\n<li>Conditional variable type narrowing from the condition of a while statement\nis applied to the body of a while statement.</li>\n<li>Conditional variable type narrowing is now done for a <code>where</code> clause in a\nquery expression or action.</li>\n<li>A function call is only allowed with an expression in a match-guard when\nthere is no possibility that it can mutate the value being matched.</li>\n<li>The interpretation of multiple dimensions in an array-type-descriptor has\nbeen changed to make the order of dimensions in the type-descriptor consistent\nwith the order of dimensions in an expression that accesses the array.</li>\n<li>The static type of an expression now has singleton type when all its\nsubexpressions have singleton type.</li>\n<li>Unreachable statements are now an error.</li>\n<li>Conditional variable type narrowing is now smarter. In particular, the types\nof variables can be narrowed in statements following an <code>if</code>\nstatement that contains <code>return</code>.</li>\n<li>Variable type narrowing in a match statement has been improved to work\nbetter for types that are partially readonly.</li>\n<li>Many expressions now perform nil lifting.</li>\n<li>The rules for determining the basic type of a numeric literal have been\nrevised to work better in the case where the contextually expected type allows\ntwo of the three possible numeric basic types.</li>\n<li>Restrictions have been introduced on assigning within a loop to a variable\nwhose type has been narrowed outside the loop.</li>\n<li>Optional fields can be accessed using the <code>.</code> operator as well as\nthe <code>?.</code> operator, when the type of the accessed field does not allow\nnil.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.2\">B.2 Summary of changes from 2020R1 to 2021R1</h3>\n<ol>\n<li>There has been a major change to how objects works. All object type\ndescriptors are what was previously called <em>abstract</em>: they declare\nmethods but do not define them. Objects are now created either by using an\nobject constructor expression, which includes method definitions, or by applying\n<code>new</code> to the name of a class defined by a class definition. The\nmethods and fields of an object are in a single symbol space. Classes and\nobject constructors can declare fields as final.</li>\n<li>Services have become service objects that work in a similar way to client\nobjects; resource methods on service objects have become remote methods. Remote\nmethods are in a separate symbol space from regular methods. There is a new\nconcept for resource methods.</li>\n<li>The <code>readonly</code> type has been added. Fields of records can also be\ndeclared as <code>readonly</code>.</li>\n<li>Functions, objects and module-level variables can be declared as\n<code>isolated</code>; this works in conjunction with <code>readonly</code> to\nsupport concurrency safety.</li>\n<li>Module-level variables can be public, provided they are not isolated.</li>\n<li>Intersection types have been added.</li>\n<li>Distinct types have been added; these provide the functionality of nominal\ntypes with the framework of a structural type system.</li>\n<li>The error type has been revised to take advantage of distinct types. Instead\nan error value having a reason string for categorizing the error and separate\nmessage string in the detail record, an error value has a message string in the\nerror and distinct types are used for categorizing. The cause has also moved\nfrom the detail record into the error value.</li>\n<li>The syntax for an error constructor that uses a user-defined type name now\nincludes the <code>error</code> keyword before the type name.</li>\n<li>Language-defined abstract object types now make use of distinct types,\ninstead of using names prefixed with double underscore.</li>\n<li>The <code>__init</code> method of object and the <code>__init</code> function\nof modules have been renamed to <code>init</code>.</li>\n<li>Module variables can be initialized in the module's <code>init</code>\nfunction.</li>\n<li>The table type has been redesigned to be more consistent with other\nstructural types and no longer has preview status.</li>\n<li>Enum declarations have been added.</li>\n<li>The return type of a function with an external body can depend on the value\nof a parameter of typedesc type, which can be defaulted from the contextually\nexpected type.</li>\n<li>Query expressions support some new clauses: <code>join</code> clause,\n<code>order by</code> clause, <code>limit</code> clause and <code>on\nconflict</code> clause.</li>\n<li>The relational operators (<code>&lt; &lt;= &gt; &gt;=</code>) have been\nextended to apply to more than just numeric types.</li>\n<li>Raw template expressions have been added.</li>\n<li>The ability to specify the visibility of parameter names has been removed: a\nparameter can always be specified by name as well as position; a parameter\ncannot be declared as <code>public</code>.</li>\n<li>Local type definitions have been removed.</li>\n<li>The <code>fail</code> statement has been added, along with a <code>on\nfail</code> clause for compound statements. If a <code>check</code> expression\nor action fails, it behaves like a <code>fail</code> statement rather than a\n<code>return</code> statement.</li>\n<li>The language has a concept of configurability: module level variables can be\nspecified to be <code>configurable</code>, which allows their initial values to\nbe specified at runtime.</li>\n<li>An import declaration can no longer specify a version.</li>\n<li>The stream type no longer has Preview status.</li>\n<li>Module prefixes for the langlib modules that correspond to keywords are\npredeclared.</li>\n<li>Backslash escapes can be used in identifiers without needing an initial\nsingle quote.</li>\n<li>Language support for transactions has been added.</li>\n<li>The <code>error&lt;*&gt;</code> feature has been removed, because it does\nnot work well with distinct error types.</li>\n<li>In message passing between workers, the function's default worker is now\nreferenced using the <code>function</code> keyword rather than the\n<code>default</code> keyword.</li>\n<li>Make <code>trap</code> expression have lower precedence.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.3\">B.3 Summary of changes from 2019R3 to 2020R1</h3>\n<ol>\n<li>Query expressions and query actions have been added. This is the first stage\nof language-integrated query.</li>\n<li>The stream basic type has been added.</li>\n<li>Let expressions have been added.</li>\n<li>The XML design has been refined and no longer has Preview status.\n<ul>\n<li>The various kinds of xml item (e.g. element and text) are subtypes of the\n<code>xml</code> type.</li>\n<li>The <code>xml</code> type can have a type parameter specifying the item\ntypes.</li>\n<li>Iteration over xml values exposes characters as text items rather than strings</li>\n<li>Adjacent characters in XML content are chunked into a single text item.</li>\n<li>The meaning of <code>===</code> for xml has changed.</li>\n<li>The item of an xml sequence value x with index i can be accessed using an\nexpression x[i].</li>\n<li>The syntax <code>x@</code> for accessing the attributes of an XML element has\nbeen removed.</li>\n</ul>\n</li>\n<li>The <code>lock</code> statement has been added.</li>\n<li>When a list constructor or mapping constructor is used without a\ncontextually expected type, we now infer a tuple or record type rather than an\narray or map type.</li>\n<li>The syntax for Unicode escapes in strings has changed from\n<code>\\u[<em>CodePoint</em>]</code> to <code>\\u{<em>CodePoint</em>}</code> so as\nto align with ECMAScript. Although this is an incompatible change, the previous\nsyntax was not implemented.</li>\n<li>The <code>never</code> type has been added.</li>\n<li>Lang library modules can now provide built-in subtypes of existing basic\ntypes.</li>\n<li>There is a lang.boolean lang lib module.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.4\">B.4 Summary of changes from 2019R2 to 2019R3</h3>\n<ol>\n<li>An import declaration can use <code>as _</code> to include a module in the\nprogram without using its symbols.</li>\n<li>The specification of experimental features has been moved to a separate\ndocument.</li>\n<li>A wait-action can result in an error value when applied to a future that is\nnot a named worker.</li>\n</ol>\n</section>\n\n<section>\n<h3 id=\"section_B.5\">B.5 Summary of changes from 2019R1 to 2019R2</h3>\n<ol>\n<li>The concept of a built-in method has been replaced by the concept of a lang\nlibrary. A method call on a value of non-object type is now treated as a\nconvenient syntax for a call to a function in a module of the lang library. The\ndesign of the many of the existing built-in methods has been changed to fit in\nwith this. There are many functions in the lang library that were not previously\navailable as built-in methods.</li>\n<li>A mapping value is now iterable as a sequence of its members (like list),\nrather than as a sequence of key-value pairs. The <code>entries</code> lang library\nfunction allows it to be iterated as a sequence of key-value pairs.</li>\n<li>The basic type <code>handle</code> has been added.</li>\n<li>The <code>table&lt;T&gt;</code> type descriptor shorthand has been brought\nback.</li>\n<li>There is now a variation on <code>check</code> called\n<code>checkpanic</code>, which panics rather than returns on error.</li>\n<li>A range-expr now returns an object belonging to the Iterable abstract object\ntype, rather than a list.</li>\n<li>The decimal type now uses a simplified subset of IEEE 754-2008 decimal\nfloating point.</li>\n<li>The status of XML-related features has been changed to preview.</li>\n<li>The ability to define a method outside the object type has been\nremoved.</li>\n<li>The UnfrozenClone operation has been removed.</li>\n<li>The Freeze operation has been replaced by the ImmutableClone operation.</li>\n<li>The semantics of field access, member access and assignment are now\nfully specified.</li>\n<li>A <code>?.</code> operator has been added for access to optional fields.</li>\n<li>A type-cast-expr can include annotations.</li>\n<li>The error detail record must belong to type Detail defined in the lang\nlibrary.</li>\n<li>The compile-time requirement that the inherent type of a variable-length\nlist must allow members to be filled-in has been removed; this is instead caught\nat run-time.</li>\n<li>Parameter names now have public or module-level visibility, which determines\nwhen a function call can use the parameter name to specify an argument.</li>\n<li>A type descriptor <code>record { }</code> is open to <code>anydata</code>\nrather than <code>anydata|error</code>.</li>\n<li>Calls using <code>start</code> are treated as actions, and so are not\nallowed within expressions.</li>\n<li>There is a new syntax for allowing arbitrary strings as identifiers to\nreplace the old delimited identifier syntax <code>^\"<var>s</var>\"</code>.</li>\n</ol>\n\n</section>\n<section>\n<h3 id=\"section_B.6\">B.6 Summary of changes from 0.990 to 2019R1</h3>\n<p>\nThe specification has switched to a new versioning scheme. The <var>n</var>-th\nversion of the specification released in year 20<var>xy</var> will be labelled\n20<var>xy</var>R<var>n</var>.\n</p>\n<ol>\n<li>Tuples types now use square brackets, rather than parentheses, as do tuple\nbinding patterns and tuple match patterns. Array constructors and tuple\nconstructors are now unified into list constructors, which use square brackets.\nTuple types can have zero members or one member, and can use <code>T...</code>\nsyntax allow trailing members of a specified type.</li>\n<li>The way that record type descriptors express openness has changed. Instead\nof the <code>!...</code> syntax, there are two flavours of record type\ndescriptor, which use different delimiters: <code>record {| |}</code> allows any\nmapping that has exclusively the specified fields, whereas <code>record {\n}</code> allows any mapping that includes the specified fields; the former can\nuse the <code>T...</code> syntax, whereas the latter cannot. The\n<code>!...</code> is no longer allowed for record binding patterns and record\nmatch patterns.</li>\n<li>The syntax for an array with an array length that is inferred has changed\nfrom <code>T[!...]</code> to <code>T[*]</code>.</li>\n<li>A type descriptor of <code>error&lt;*&gt;</code> can be used to specify an\nerror type whose subtype is inferred.</li>\n<li>A new expression can no longer be used to create values of structural types;\nit is only allowed for objects.</li>\n<li>Symbolic string literals <code>'ident</code> have been removed (compile time\nconstants provide a more convenient approach).</li>\n<li>\n<code>untaint</code> expression has been removed (this will be handled by\nannotations instead).</li>\n<li>The syntax for named arguments in a function call has reverted to\n<code>arg=</code> from <code>arg:</code>, since the latter caused syntactic\nambiguities.</li>\n<li>The syntax for error constructors specifies fields of the error detail\nseparately as named arguments, rather than specifying the error detail as a\nsingle argument; the syntax for binding patterns and match patterns for error\nvalues has also changed accordingly.</li>\n<li>The error reason argument can be omitted from an error constructor if it\ncan be determined from the contextually expected type.</li>\n<li>The syntax for annotation declarations has been revised; the places where\nannotations are allowed has been revised to match the possible attachment\npoints.</li>\n<li>An <code>.@</code> binary operator has been added for accessing annotations\nat runtime.</li>\n<li>A unary <code>typeof</code> operator has been added.</li>\n<li>The <code>typedesc</code> type now takes an optional type parameter.</li>\n<li>The type parameters for <code>future</code> and <code>stream</code> are now\noptional.</li>\n<li>The syntax for a function with an external implementation has changed to use\n<code>=external</code> in place of the curly braces.</li>\n<li>A numeric literal can use a suffix of <code>d</code> or <code>f</code> to\nindicate that it represents a value belonging to the decimal or float type\nrespectively.</li>\n<li>Record type descriptors may now specify a default value for fields.</li>\n<li>Providing a default value for a parameter no longer affects whether a function\ncall must supply the argument for that parameter positionally or by name. Instead\nthe argument for any parameter can be supplied either positionally or by name.\nTo avoid ambiguity, all arguments specified positionally must be specified before\narguments specified by name.</li>\n<li>Expressions specifying the default value for function parameters are not\ncompile time constants, and are evaluated each time they are used to supply a\nmissing argument.</li>\n<li>In the argument list of a function or method call, positional arguments are\nnow required to be specified before named arguments.</li>\n<li>Types may now be defined within a block.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.7\">B.7 Summary of changes from 0.980 to 0.990</h3>\n<p>\n<strong>Structural types and values</strong>\n</p>\n<ol>\n<li>Concepts relating to typing of mutable structural values have been changed\nin order to make type system sound.</li>\n<li>The <code>match</code> statement has been redesigned.</li>\n<li>The <code>but</code> expression has been removed.</li>\n<li>The <code>is</code> expression for dynamic type testing has been added.</li>\n<li>The type-cast-expr &lt;T&gt;E now performs unsafe type casts.The only\nconversions it performs are numeric conversions.</li>\n<li>The <code>anydata</code> type has been added, which is a union of simple and\nstructural types.</li>\n<li>Records are now by default open to <code>anydata|error</code>, rather than\n<code>any</code>.</li>\n<li>Type parameters for built-in types (map, stream, future), which previously\ndefaulted to any, are now required.</li>\n<li>The type parameter for json (e.g. json&lt;T&gt;) is not allowed any more.</li>\n<li>Type for table columns are restricted to subtype of anydata|error.</li>\n<li>There are now two flavors of equality operator: == and != for deep equality\n(which is allowed only for <code>anydata</code>), and ===  and !== for exact\nequality.</li>\n<li>There is a built-in clone operation for performing a deep copy on values of\ntype anydata.</li>\n<li>There is a built-in freeze operation for making structural values deeply\nimmutable.</li>\n<li>Compile-time constants (which are always a subtype of anydata and frozen)\nhave been added.</li>\n<li>Singleton types have been generalized: any compile-time constant can be made\ninto a singleton value.</li>\n<li>Variables can be declared final, with a similar semantic to Java.</li>\n<li>Errors are now immutable.</li>\n<li>Module variables are not allowed to be public: only compile-time constants\ncan be public.</li>\n</ol>\n<p>\n<strong>Error handling</strong>\n</p>\n<ol>\n<li>The <code>any</code> type no longer includes <code>error</code>.</li>\n<li>\n<code>check</code> is now an expression.</li>\n<li>Exceptions have been replaced by panics\n<ol>\n<li>the <code>throw</code> statement has been replaced by the <code>panic</code>\nstatement</li>\n<li>the<code> try</code> statement has been replaced by the <code>trap</code>\nexpression</li>\n</ol>\n</li>\n<li>Object constructors (which could not return errors) have been replaced by\n<code>__init</code> methods (which can return errors).</li>\n</ol>\n<p>\n<strong>Concurrency</strong>\n</p>\n<ol>\n<li>Workers in functions have been redesigned. In particular, workers now have a\nreturn value.</li>\n<li>The <code>done</code> statement has been removed.</li>\n<li>The fork/join statement has been redesigned.</li>\n<li>A syntactic category between expression and statement, called action, has\nbeen added.</li>\n<li>A synchronous message send action has been added.</li>\n<li>A flush action has been added to flush asynchronously sent messages.</li>\n<li>A wait action has been added to wait for a worker and get its return value.</li>\n<li>Futures have been unified with workers. A future&lt;T&gt; represents a value to\nbe returned by a named worker.</li>\n<li>Error handling of message send/receive has been redesigned.</li>\n</ol>\n<p>\n<strong>Endpoints and services</strong>\n</p>\n<ol>\n<li>Client endpoints have been replaced by client objects, and actions on client\nendpoints have been replaced by remote methods on client objects. Remote methods\nare called using a remote method call action, which replaces the action\ninvocation statement.</li>\n<li>Module endpoint declaration has been replaced by module listener\ndeclaration, which uses the Listener built-in object type.</li>\n<li>The service type has been added as a new basic type of behavioral value,\ntogether with service constructor expressions for creating service values.</li>\n<li>Module service definitions have been redesigned.</li>\n</ol>\n<p>\n<strong>Miscellaneous changes</strong>\n</p>\n<ol>\n<li>Public/private visibility qualifiers must be repeated on an outside method\ndefinition.</li>\n</ol>\n</section>\n<section>\n<h3 id=\"section_B.8\">B.8 Summary of changes from 0.970 to 0.980</h3>\n<ol>\n<li>The decimal type has been added.</li>\n<li>There are no longer any implicit numeric conversions.</li>\n<li>The type of a numeric literal can be inferred from the context.</li>\n<li>The error type is now a distinct basic type.</li>\n<li>The byte type has been added as a predefined subtype of int; blobs have been\nreplaced by arrays of bytes.</li>\n<li>The syntax of string templates and xml literals has been revised and\nharmonized.</li>\n<li>The syntax of anonymous functions has been revised to provide two\nalternative syntaxes: a full syntax similar to normal function definitions and a\nmore convenient arrow syntax for when the function body is an expression.</li>\n<li>The cases of a match statement are required to be exhaustive.</li>\n<li>The + operator is specified to do string and xml concatenation as well as\naddition.</li>\n<li>Bitwise operators have been added (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>,\n<code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>,\n<code>~</code>) rather than = after the argument name.</li>\n<li>In a function call or method call, named arguments have changed to use\n<code>:</code>\n</li>\n<li>A statement with <code>check</code> always handles an error by returning it,\nnot by throwing it.</li>\n<li>\n<code>check</code> is allowed in compound assignment statements.</li>\n<li>Method names are now looked up differently from field names; values of types\nother than objects can now have built-in methods.</li>\n<li>The <code>lengthof</code> unary expression has been removed; the length\nbuilt-in method can be used instead.</li>\n<li>The semantics of &lt;T&gt;expr have been specified.</li>\n<li>The value space for tuples and arrays is now unified, in the same way as the\nvalue space for records and maps was unified. This means that tuples are now\nmutable. Array types can now have a length.</li>\n<li>The <code>next</code> keyword has been changed to <code>continue</code>.</li>\n<li>The syntax and semantics of destructuring is now done in a consistent way\nfor the but expression, the match statement, the foreach statement,\ndestructuring assignment statements and variable declarations.</li>\n<li>The implied initial value is not used as a default initializer in variable\ndeclarations. A local variable whose declaration omits the initializer must be\ninitialized by an assignment before it is used. A global variable declaration\nmust always have an initializer. A new expression can be used with any reference\ntype that has an implicit initial value.</li>\n<li>Postfix increment and decrement statements have been removed.</li>\n<li>The <code>...</code> and <code>..&lt;</code> operators have been added for\ncreating integer ranges; this replaces the foreach statement's special treatment\nof integer ranges.</li>\n<li>An object type can be declared to be abstract, meaning it cannot be used\nwith <code>new</code>.</li>\n<li>By default,  a record type now allows extra fields other than those\nexplicitly mentioned; <code>T...</code> requires extra fields to be of type T\nand <code>!...</code> disallows extra fields.</li>\n<li>In a mapping constructor, an expression can be used for the field name by\nenclosing the expression in square brackets (as in ECMAScript).</li>\n<li>Integer arithmetic operations are specified to throw an exception on\noverflow.</li>\n<li>The syntax for documentation strings has changed.</li>\n<li>The deprecated construct has been removed (data related to deprecation will\nbe provided by an annotation; documentation related to deprecation will be part\nof the documentation string).</li>\n<li>The order of fields, methods and constructors in object types is no longer\nconstrained.</li>\n<li>A function or method can be defined as <code>extern</code>. The\n<code>native</code> keyword has been removed.</li>\n</ol>\n</section>\n</section>\n<section class=\"appendix\">\n<h2 id=\"planned_future_functionality\">C. Planned future functionality</h2>\n\n<p>\nThe vision for the Ballerina language includes a range of functionality\nthat is not yet included in this specification.\n</p>\n\n<ul>\n<li>\n<em>Security</em> will combine language and platform features to make\nprograms secure by default.</li>\n<li>\n<em>Date/time basic types</em> will provide one or more basic types related\nto date and time.</li>\n<li>\n<em>Event stream processing</em> will build on the <code>stream</code> type\nto allow queries over timestamped sequences of events</li>\n<li>\n<em>Generic types</em> will provide types that can be instantiated with one\nor more type parameters.</li>\n<li>\n<em>Flexible message passing</em> will support patterns of communication\nbetween workers/strands, where the number of messages is not fixed and/or\nworkers are not peers.</li>\n<li>\n<em>Long-running processes</em> will allow the execution of a program to be\nautomatically suspended and then later resumed upon the occurrence of particular\nexternal events.</li>\n<li>\n<em>Reliable messaging</em> will allow for sending messages across the\nnetwork with some guarantees about reliability.</li>\n</ul>\n\n<p>\n<a href=\"https://github.com/ballerina-platform/ballerina-spec/blob/master/lang/proposals/README.md\">Proposals</a>\nfor new language features relating to this and other functionality are\nmaintained in the specification's GitHub repository.\n</p>\n\n</section>\n\n<section class=\"appendix\">\n<h2 id=\"contributors\">D. Other contributors</h2>\n<p>\nThe following contributed to establishing the design principles of the language:\n</p>\n<ul>\n<li>Frank Leymann, <a href=\"mailto:frank.leymann@iaas.uni-stuttgart.de\">frank.leymann@iaas.uni-stuttgart.de</a>\n</li>\n<li>Srinath Perera, <a href=\"mailto:srinath@wso2.com\">srinath@wso2.com</a>\n</li>\n<li>Kasun Indrasiri, <a href=\"mailto:kasun@wso2.com\">kasun@wso2.com</a>\n</li>\n</ul>\n<p>\nThe following also contributed to the language in a variety of ways (in\nalphabetical order):\n</p>\n<ul>\n<li>Shafreen Anfar, <a href=\"mailto:shafreen@wso2.com\">shafreen@wso2.com</a>\n</li>\n<li>Afkham Azeez, <a href=\"mailto:azeez@wso2.com\">azeez@wso2.com</a>\n</li>\n<li>Anjana Fernando, <a href=\"mailto:anjana@wso2.com\">anjana@wso2.com</a>\n</li>\n<li>Chanaka Fernando, <a href=\"mailto:chanakaf@wso2.com\">chanakaf@wso2.com</a>\n</li>\n<li>Joseph Fonseka, <a href=\"mailto:joseph@wso2.com\">joseph@wso2.com</a>\n</li>\n<li>Paul Fremantle, <a href=\"mailto:paul@wso2.com\">paul@wso2.com</a>\n</li>\n<li>Antony Hosking, <a href=\"mailto:antony.hosking@anu.edu.au\">antony.hosking@anu.edu.au</a>\n</li>\n<li>Tyler Jewell, <a href=\"mailto:tylerjewell@gmail.com\">tylerjewell@gmail.com</a>\n</li>\n<li>Anupama Pathirage, <a href=\"mailto:anupama@wso2.com\">anupama@wso2.com</a>\n</li>\n<li>Manuranga Perera, <a href=\"mailto:manu@wso2.com\">manu@wso2.com</a>\n</li>\n<li>Supun Thilina Sethunga, <a href=\"mailto:supuns@wso2.com\">supuns@wso2.com</a>\n</li>\n<li>Sriskandarajah Suhothayan, <a href=\"mailto:suho@wso2.com\">suho@wso2.com</a>\n</li>\n<li>Isuru Udana, <a href=\"mailto:isuruu@wso2.com\">isuruu@wso2.com</a>\n</li>\n<li>Rajith Lanka Vitharana, <a href=\"mailto:rajithv@wso2.com\">rajithv@wso2.com</a>\n</li>\n<li>Mohanadarshan Vivekanandalingam, <a href=\"mailto:mohan@wso2.com\">mohan@wso2.com</a>\n</li>\n<li>Lakmal Warusawithana, <a href=\"mailto:lakmal@wso2.com\">lakmal@wso2.com</a>\n</li>\n<li>Ayoma Wijethunga, <a href=\"mailto:ayoma@wso2.com\">ayoma@wso2.com</a>\n</li>\n</ul>\n</section>\n</body>\n</html>\n"},"__N_SSG":true}