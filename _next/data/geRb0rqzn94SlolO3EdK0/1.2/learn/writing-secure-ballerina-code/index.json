{"pageProps":{"frontmatter":{},"content":"<!DOCTYPE html>\n<html class=\"no-js\">\n   <head>\n      <meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n<meta name=\"description\" content=\"Check out the different security features and controls available within the Ballerina programming language and follow the guidelines on writing secure Ballerina programs.\" />\n\n<meta name=\"author\" content=\"WSO2, Inc.\">\n\n<meta name=\"keywords\" content=\"ballerina, programming language, security, secure ballerina code\" />\n\n<link rel=\"shortcut icon\" href=\"/img/favicon.ico\">\n<title>Writing Secure Ballerina Code</title>\n<!-- Global site tag (gtag.js) - Google Analytics -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-92163714-2\"></script>\n<!--FB-->\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"og:title\" content=\"Ballerina - Writing Secure Ballerina Code\" />\n\n<meta property=\"og:description\" content=\"Check out the different security features and controls available within the Ballerina programming language and follow the guidelines on writing secure Ballerina programs.\" />\n\n \n<meta property=\"og:image\" itemprop=\"image\" content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\" />\n\n\n<!-- <meta name=\"twitter:image:width\" content=\"610\"> -->\n<!--LINKED IN  -->\n<meta property='og:title' content=\"Ballerina\"/>\n<meta property='og:image' content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\n\"/>\n<meta property='og:description' itemprop=\"image\" content=\"Check out the different security features and controls available within the Ballerina programming language and follow the guidelines on writing secure Ballerina programs.\"/>\n\n<!--TWITTER-->\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta name=\"twitter:site\" content=\"@ballerinalang\">\n<meta name=\"twitter:creator\" content=\"@ballerinalang\">\n<meta name=\"twitter:title\" content=\"Ballerina\"> \n<meta name=\"twitter:card\" content=\"summary_large_image\"> \n\n<meta property=\"twitter:description\" content=\"Check out the different security features and controls available within the Ballerina programming language and follow the guidelines on writing secure Ballerina programs.\" />\n\n<meta name=\"twitter:image\" content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\n \">\n\n<meta property=\"twitter:text:description\" content=\"Check out the different security features and controls available within the Ballerina programming language and follow the guidelines on writing secure Ballerina programs.\" />\n\n<meta property='twitter:image' content=\"https://ballerina.io/img/ballerina-swan-lake-sm-banner-general.png\"/>\n\n\n<script>\n   window.dataLayer = window.dataLayer || [];\n   function gtag() {\n       dataLayer.push(arguments);\n   }\n   gtag('js', new Date());\n   gtag('config', 'UA-92163714-2');\n</script>\n<!-- Google Tag Manager -->\n<script>\n   (function(w, d, s, l, i) {\n       w[l] = w[l] || [];\n       w[l].push({\n           'gtm.start': new Date().getTime(),\n           event: 'gtm.js'\n       });\n       var f = d.getElementsByTagName(s)[0],\n           j = d.createElement(s),\n           dl = l != 'dataLayer' ? '&l=' + l : '';\n       j.async = true;\n       j.src =\n           'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n       f.parentNode.insertBefore(j, f);\n   })(window, document, 'script', 'dataLayer', 'GTM-PSL2TX4');\n</script>\n<!-- End Google Tag Manager -->\n<script src=\"/js/moment-2.22.0/moment.min.js\"></script>\n<script src=\"/js/latest-jquery.js\"></script>\n<script>\n   var base_url = \"\";\n</script>\n<link rel=\"stylesheet\" href=\"/css/latest-bootstrap.css\">\n<!-- Optional theme -->\n<link rel=\"stylesheet\" href=\"/css/latest-bootstrap-theme.css\">\n<!-- Latest compiled and minified JavaScript -->\n<script src=\"/js/latest-bootstrap.js\"></script>\n<!-- Fonts -->\n<link href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i&display=swap\" rel=\"stylesheet\">\n\n<!-- \n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://use.typekit.net/son4ymv.css\"> -->\n\n\n\n\n<!-- <link rel=\"stylesheet\" href=\"./js/vs/editor/editor.main.css\">-->\n<!-- <link rel=\"stylesheet\" href=\"https://use.typekit.net/son4ymv.css\" /> -->\n<!-- <link rel=\"stylesheet\" href=\"/css/theme.css\" type=\"text/css\" />\n<link rel=\"stylesheet\" href=\"/css/theme_extra.css\" type=\"text/css\" /> -->\n<!-- <script type=\"text/javascript\" src=\"/js/highlight.pack.js\"></script> -->\n\n<link rel=\"stylesheet\" href=\"/css/prism.css\">\n\n<script src=\"/js/ballerina-common.js?100\"></script>\n<script src=\"/js/handlebars/4.7.6/handlebars.js\"></script>\n<link rel=\"stylesheet\" href=\"/css/ballerina-io.css\">\n<script>\n   // Current page data\n   var mkdocs_page_name = '\"Home\"'.replace(/^\"|\"$/g, '');\n   var mkdocs_page_input_path = '\"index.md\"'.replace(/^\"|\"$/g, '');\n   var mkdocs_page_url = '\"/\"'.replace(/^\"|\"$/g, '');\n   \n   var releaseNoteFilename = 'RELEASE_NOTE.html';\n\n   var nightly_download_url = 'https://product-dist.ballerina.io/nightly';\n   var dev_download_url = 'https://product-dist.ballerina.io/dev';\n   var base_download_url = 'https://dist.ballerina.io/downloads';\n   \n   var base_releasenote_url = ''.concat('/downloads/1.2.x-release-notes');\n   var base_swanlake_releasenote_url = ''.concat('/downloads/swan-lake-release-notes');\n</script>\n\n<link href=\"/css/prism.css\" rel=\"stylesheet\" />\n\n      <link rel=\"stylesheet\" href=\"/css/ballerina-io-docs.css?200618\">\n      <link rel=\"stylesheet\" href=\"/css/ballerina-io-learn-v2.css\">\n   \n      \n   \n      \n\n      <link href=\"/css/abixTreeList.css\" rel=\"stylesheet\">\n\n   </head>\n   <body class=\"cBallerina-io\" id=\"top\">\n      <style>\n    .cVersionChangeBanner{\n    color: #000000;\n    background-color: #fcdf4a !important;\n    width: 100%;\n    display: inline-block;\n    padding: 10px 0px;\n    text-align: center;\n    font-weight: 500;\n    font-size: 20px;\n    transition : all 0.3s;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    height: 50px;\n    z-index: 9;\n    }\n    .cInfoBannerLink{\n        color: #000000;\n        text-decoration: underline;\n    }\n    .cInfoBannerLink:hover{\n        color: #545454 !important;\n        text-decoration: underline !important;\n    }\n    .cBallerina-io-Gray-row {\n       padding-top: 70px !important;\n    }\n    @media only screen and (max-width: 992px) {\n        .cBallerina-io-Gray-row {\n       padding-top: 140px !important;\n    }\n\n    #noscript-warning{\n        position: relative;\n    text-align: center;\n    padding: 7px 15px;\n    background-color: #57595d;\n    color: #fff;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    }\n</style>\n<noscript>\n    <div id=\"noscript-warning\">Ballerina works best with JavaScript enabled.</div>\n</noscript>\n     <div class=\"cVersionChangeBanner\">\n        This documentation is for Ballerina 1.2.0. <a href=\"https://ballerina.io/learn/\" class=\"cInfoBannerLink\">View documentation for the latest release</a>.\n    </div>\n<div class=\"row cBallerina-io-Nav\" id=\"iMainNavigation\" style=\"top:50px\">\n\n    <div class=\"container\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n            <nav class=\"navbar\">\n                <div>\n                    <div class=\"navbar-header\">\n                        <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\"\n                            data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                            <span class=\"sr-only\">&#9776</span>\n                            <span class=\"icon-bar\"></span>\n                            <span class=\"icon-bar\"></span>\n                            <span class=\"icon-bar\"></span>\n                        </button>\n                        <a class=\"cMobileLogo\" href=\"/\"><img src=\"/img/ballerina-logo.svg\" alt=\"Ballerina\" /></a>\n                    </div>\n                    <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                        <ul class=\"nav navbar-nav cTopNav\">\n                            <li class=\"toctree-l1\" id=\"playli\"><a class=\"cBioTopLink\" href=\"/downloads/\">Download</a>\n                            </li>\n                            <li class=\"toctree-l1\" id=\"playli\"><a class=\"cBioTopLink\" href=\"https://play.ballerina.io/\"\n                                    target=\"_blank\">Playground</a>\n                            </li>\n                            <li class=\"active toctree-l1\" id=\"learnli\"><a class=\"cBioTopLink\" href=\"/learn\">Learn</a>\n                            </li>\n                            <!--<li class=\"active toctree-l1\" id=\"eventsli\"><a class=\"cBioTopLink\" href=\"/learn/events\">Events</a>\n                            </li>-->\n                            <li class=\"toctree-l1\"><a class=\"cBioTopLink\" href=\"https://central.ballerina.io/\"\n                                    target=\"_blank\">Central</a></li>\n                            <li class=\"toctree-l1\" id=\"openli\"><a class=\"cBioTopLink\" href=\"/community\">Community</a>\n                            </li>\n                            <li class=\"toctree-l1\" id=\"helpli\"><a class=\"cBioTopLink\"\n                                    href=\"https://blog.ballerina.io\">Blog</a>\n                            </li>\n                            <li class=\"cVersionItem\">\n                                <div class=\"cVersionContainer\">\n                                    <!-- <lable class=\"cVlable\">Version</lable> -->\n                                    <select name=\"versions\" id=\"versions\" class=\"select-css\">\n                                        <option value=\"swan-lake\" data-value=\"latest\">Swan Lake</option>\n                                        <option value=\"1.2\">v1.2</option>\n                                        <option value=\"1.1\">v1.1</option>\n                                        <option value=\"1.0\">v1.0</option>\n\n                                    </select>\n                                </div>\n                            </li>\n                            <li class=\"cSearchMenu\">\n                               \n                                <!-- at the end of the HEAD -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css\"\n/>\n<style>\n  .algolia-search-cont {\n    margin-top: -10px;\n  }\n  .algolia-search-wrap {\n    display: flex;\n    align-items: center;\n  }\n  .algolia-search-cont .search-icon {\n    margin-right: 10px;\n  }\n  .algolia-search-cont .algolia-search-box {\n    border: none;\n    background-image: none;\n    background-color: transparent;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n    outline: none;\n  }\n</style>\n<div class=\"algolia-search-cont\">\n  <div class=\"algolia-search-wrap form-control\">\n    <span\n      class=\"glyphicon glyphicon-search search-icon\"\n      aria-hidden=\"true\"\n    ></span>\n    <input\n      autocapitalize=\"off\"\n      autocomplete=\"off\"\n      autocorrect=\"off\"\n      placeholder=\"Search...\"\n      role=\"textbox\"\n      spellcheck=\"false\"\n      type=\"text\"\n      value=\"\"\n      class=\"algolia-search-box\"\n      id=\"algolia-search-box\"\n    />\n  </div>\n</div>\n\n<!-- at the end of the BODY -->\n<script\n  type=\"text/javascript\"\n  src=\"https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js\"\n></script>\n<script type=\"text/javascript\">\n  docsearch({\n    apiKey: \"6a63d4bcf6378ddf3f8724185ddcf626\",\n    indexName: \"ballerina\",\n    inputSelector: \"#algolia-search-box\",\n    debug: false, // Set debug to true if you want to inspect the dropdown\n  });\n</script>\n\n                                <!-- <form class=\"cSearch-form-inline\"><input id=\"searchTxt\" class=\"form-control-field\"\n                                        type=\"search\" placeholder=\"Search\" aria-label=\"Search\"><a id=\"searchBtn\"\n                                        href=\"#\" class=\"cSearchButton\"><img src=\"/img/search.svg\" /></a></form> -->\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    </div>\n</div>\n\n      <div class=\"row cBallerina-io-Gray-row\">\n         <div class=\"container\">\n            <div class=\"row\">\n               <div class=\"col-xs-12 col-sm-12 col-md-3 col-lg-3 cBallerina-io-Home-Middle-col\">\n                  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- Then we build the nav bar. -->\n<nav class=\"cLeftNavContainer\">\n   <ul class=\"cMainLeftNav\">\n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Setting up Ballerina</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/installing-ballerina/\">- Installing Ballerina</a></li> -->\n            <li><a href=\"/1.2/learn/installing-ballerina/\">Installing Ballerina</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/setting-up-visual-studio-code/\">- Setting up Visual Studio Code</a></li> -->\n            <li><a href=\"/1.2/learn/setting-up-visual-studio-code/\">Setting up Visual Studio Code</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/setting-up-intellij-idea/\">- Setting up IntelliJ IDEA</a></li> -->\n            <li><a href=\"/1.2/learn/setting-up-intellij-idea/\">Setting up IntelliJ IDEA</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Ballerina CLI Tools</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/using-the-cli-tools/\">- Using the CLI Tools</a></li> -->\n            <li><a href=\"/1.2/learn/using-the-cli-tools/\">Using the CLI Tools</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/keeping-ballerina-up-to-date\">- Keeping Ballerina Up To Date</a></li> -->\n            <li><a href=\"/1.2/learn/keeping-ballerina-up-to-date\">Keeping Ballerina Up To Date</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/using-the-openapi-tools/\">- Using the OpenAPI Tools</a></li> -->\n            <li><a href=\"/1.2/learn/using-the-openapi-tools/\">Using the OpenAPI Tools</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/generating-ballerina-code-for-protocol-buffer-definitions\">- Generating Ballerina Code for Protocol Buffer Definitions</a></li> -->\n            <li><a href=\"/1.2/learn/generating-ballerina-code-for-protocol-buffer-definitions\">Generating Ballerina Code for Protocol Buffer Definitions</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Code Organization</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/structuring-ballerina-code/\">- Structuring Ballerina Code</a></li> -->\n            <li><a href=\"/1.2/learn/structuring-ballerina-code/\">Structuring Ballerina Code</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/documenting-ballerina-code/\">- Documenting Ballerina Code</a></li> -->\n            <li><a href=\"/1.2/learn/documenting-ballerina-code/\">Documenting Ballerina Code</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/coding-conventions/\">- Coding Conventions</a></li> -->\n            <li><a href=\"/1.2/learn/coding-conventions/\">Coding Conventions</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/running-ballerina-code/\">- Running Ballerina Code</a></li> -->\n            <li><a href=\"/1.2/learn/running-ballerina-code/\">Running Ballerina Code</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/publishing-modules-to-ballerina-central\">- Publishing Modules to Ballerina Central</a></li> -->\n            <li><a href=\"/1.2/learn/publishing-modules-to-ballerina-central\">Publishing Modules to Ballerina Central</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Deployment</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/deployment/docker/\">- Docker</a></li> -->\n            <li><a href=\"/1.2/learn/deployment/docker/\">Docker</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/deployment/kubernetes/\">- Kubernetes</a></li> -->\n            <li><a href=\"/1.2/learn/deployment/kubernetes/\">Kubernetes</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/deployment/aws-lambda/\">- AWS Lambda</a></li> -->\n            <li><a href=\"/1.2/learn/deployment/aws-lambda/\">AWS Lambda</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/deployment/azure-functions/\">- Azure Functions</a></li> -->\n            <li><a href=\"/1.2/learn/deployment/azure-functions/\">Azure Functions</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Observability</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/observing-ballerina-code\">- Observing Ballerina Code</a></li> -->\n            <li><a href=\"/1.2/learn/observing-ballerina-code\">Observing Ballerina Code</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Interoperability</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/calling-java-code-from-ballerina/\">- Calling Java Code from Ballerina</a></li> -->\n            <li><a href=\"/1.2/learn/calling-java-code-from-ballerina/\">Calling Java Code from Ballerina</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Security</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/writing-secure-ballerina-code\">- Writing Secure Ballerina Code</a></li> -->\n            <li class=\"current-sub\"><a href=\"/1.2/learn/writing-secure-ballerina-code\">Writing Secure Ballerina Code</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Testing Ballerina Code</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/testing-ballerina-code/testing-quick-start\">- Quick Start</a></li> -->\n            <li><a href=\"/1.2/learn/testing-ballerina-code/testing-quick-start\">Quick Start</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/testing-ballerina-code/writing-tests\">- Writing Tests</a></li> -->\n            <li><a href=\"/1.2/learn/testing-ballerina-code/writing-tests\">Writing Tests</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/testing-ballerina-code/mocking\">- Mocking</a></li> -->\n            <li><a href=\"/1.2/learn/testing-ballerina-code/mocking\">Mocking</a></li>\n            \n            <!-- <li  ><a href=\"/1.2/learn/testing-ballerina-code/executing-tests\">- Executing Tests</a></li> -->\n            <li><a href=\"/1.2/learn/testing-ballerina-code/executing-tests\">Executing Tests</a></li>\n            \n         </ul>\n      </li>\n      \n      \n      \n      <!-- We have to declare it 'null' to ensure it doesn't propagate. -->\n      <!--  -->\n      \n      \n      \n      <li class=\"sub-menu cTopicURL\">\n         <div class=\"cLeftMenuLink cTopiAtag\">Extending Ballerina</div>\n         <ul class=\"sub-ul\">\n            \n            <!--  -->\n            \n            \n            \n            <!-- <li  ><a href=\"/1.2/learn/extending-with-compiler-extensions\">- Extending with Compiler Extensions</a></li> -->\n            <li><a href=\"/1.2/learn/extending-with-compiler-extensions\">Extending with Compiler Extensions</a></li>\n            \n         </ul>\n      </li>\n      \n      \n   </ul>\n</nav>\n\n               </div>\n               <div class=\"col-xs-12 col-sm-12 col-md-9 col-lg-9 cBallerina-io-Home-Middle-col\">\n                  <div class=\"col-xs-12 col-sm-12\" style=\"padding: 0;\">\n                     <div class=\"col-md-12 col-lg-12 cBallerina-io-breadcrumbs\">\n                        <nav class=\"breadcrumbs bootstrap hidden-sm-down\"\n  >\n  <ul id=\"breadcrumb-list\" class=\" cBalleinaBreadcrumbs list-unstyled  wy-breadcrumbs\" vocab=\"http://schema.org/\"\n    typeof=\"BreadcrumbList\">\n\n\n    \n    <li><a href=\"/\">Home</a></li>\n    \n    \n    <li>/</li>\n    <li><a\n        href=\"/1.2/\">1.2</a>\n    </li>\n    \n    \n    \n    <li>/</li>\n    <li><a\n        href=\"/1.2/learn/\">Learn</a>\n    </li>\n    \n    \n    \n    <li>/</li> Writing Secure Ballerina Code\n    \n    \n\n  </ul>\n</nav>\n<style type=\"text/css\">\n  .cBalleinaBreadcrumbs li {\n    margin-right: 10px;\n  }\n</style>\n                        <div class=\"cVersionContainer\"></div>\n                     </div>\n                     <!-- <div class=\"col-md-12 col-lg-2 cBallerina-io-breadcrumbs cGitLink\">\n                        \n                     </div> -->\n                  </div>\n                  <div class=\"cBlallerina-io-docs-content-container cPositionRelative\">\n                     <div class=\"wy-nav-content\">\n                        <div class=\"rst-content\">\n                           <div role=\"main\">\n                              <div class=\"section\">\n\n\n                                 <div class=\"col-xs-11 col-md-11 col-lg-11 cNoPadding\">\n                                    <h1>Writing Secure Ballerina Code</h1>\n                                 </div>\n                                 <!-- <div class=\"col-xs-1 col-md-1 col-lg-1 cNoPadding cGithubContainer\">\n                                    <a class=\"icon icon-github\" target=\"_blank\" href=\"https://www.github.com/ballerina-platform/ballerina-dev-website/blob/master/1.2/learn/writing-secure-ballerina-code.md\"></a>\n                                 </div> -->\n                                 <div class=\"col-xs-12 col-md-12 col-lg-12 cNoPadding\">\n                                    <p>The sections below include information on the different security features and controls available within Ballerina. Also, they provide guidelines on writing secure Ballerina programs.</p>\n                                    <div class=\"cBallerinaTocContainer\" id=\"table-of-content\">\n                                       <ul id=\"tree\">\n  <li><a href=\"#secure-by-design\">Secure by Design</a>\n    <ul>\n      <li><a href=\"#ensuring-security-of-ballerina-standard-libraries\">Ensuring Security of Ballerina Standard Libraries</a></li>\n      <li><a href=\"#securely-using-tainted-data-with-security-sensitive-parameters\">Securely Using Tainted Data with Security-Sensitive Parameters</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#securing-passwords-and-secrets\">Securing Passwords and Secrets</a></li>\n  <li><a href=\"#authentication-and-authorization\">Authentication and Authorization</a>\n    <ul>\n      <li><a href=\"#inbound-authentication-and-authorization\">Inbound Authentication and Authorization</a>\n        <ul>\n          <li><a href=\"#inbound-advanced-use-cases\">Inbound Advanced Use Cases</a>\n            <ul>\n              <li><a href=\"#using-multiple-auth-handlers\">Using Multiple Auth Handlers</a></li>\n              <li><a href=\"#using-multiple-scopes\">Using Multiple Scopes</a></li>\n              <li><a href=\"#per-resource-and-per-service-customization\">Per-Resource and Per-Service Customization</a></li>\n              <li><a href=\"#implementing-inbound-custom-authentication-mechanism\">Implementing Inbound Custom Authentication Mechanism</a></li>\n              <li><a href=\"#disable-https-enforcement\">Disable HTTPS Enforcement</a></li>\n              <li><a href=\"#modify-authorization-or-authentication-filter-index\">Modify Authorization or Authentication Filter Index</a></li>\n            </ul>\n          </li>\n          <li><a href=\"#jwt-inbound-authentication-and-authorization\">JWT Inbound Authentication and Authorization</a></li>\n          <li><a href=\"#oauth2-inbound-authentication-and-authorization\">OAuth2 Inbound Authentication and Authorization</a></li>\n          <li><a href=\"#ldap-inbound-authentication-and-authorization\">LDAP Inbound Authentication and Authorization</a></li>\n          <li><a href=\"#basic-auth-inbound-authentication-and-authorization\">Basic Auth Inbound Authentication and Authorization</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#outbound-authentication-and-authorization\">Outbound Authentication and Authorization</a>\n        <ul>\n          <li><a href=\"#outbound-advanced-use-cases\">Outbound Advanced Use Cases</a>\n            <ul>\n              <li><a href=\"#implementing-outbound-custom-authentication-mechanism\">Implementing Outbound Custom Authentication Mechanism</a></li>\n            </ul>\n          </li>\n          <li><a href=\"#jwt-outbound-authentication\">JWT Outbound Authentication</a></li>\n          <li><a href=\"#oauth2-outbound-authentication\">OAuth2 Outbound Authentication</a>\n            <ul>\n              <li><a href=\"#client-credentials-grant-type\">Client Credentials Grant Type</a></li>\n              <li><a href=\"#password-grant-type\">Password Grant Type</a></li>\n              <li><a href=\"#direct-token-mode\">Direct Token Mode</a></li>\n            </ul>\n          </li>\n          <li><a href=\"#basic-auth-outbound-authentication\">Basic Auth Outbound Authentication</a></li>\n          <li><a href=\"#token-propagation-for-outbound-authentication\">Token Propagation for Outbound Authentication</a>\n            <ul>\n              <li><a href=\"#example-one\">Example One</a></li>\n              <li><a href=\"#example-two\">Example Two</a></li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n                                    </div>\n                                    <h2 id=\"secure-by-design\">Secure by Design</h2>\n\n<p>This approach makes it unnecessary for developers to review best practice coding lists that itemize how to avoid security vulnerabilities. The Ballerina compiler ensures that Ballerina programs do not introduce security vulnerabilities.</p>\n\n<p>A taint analysis mechanism is used to achieve this.</p>\n\n<p>Parameters in function calls can be designated as security-sensitive. The compiler will generate an error if you pass untrusted data (tainted data) into a security-sensitive parameter:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tainted value passed to sensitive parameter 'sqlQuery'\n</code></pre></div></div>\n\n<p>We require developers to explicitly mark all values passed into security-sensitive parameters as ‘trusted’. This explicit check forces developers and code reviewers to verify that the values being passed into the parameter are not vulnerable to a security violation.</p>\n\n<p>Ballerina standard library makes sure untrusted data cannot be used with security-sensitive parameters such as SQL queries, file paths, file name, permission flags, request URLs and configuration keys preventing vulnerabilities including:</p>\n\n<ul>\n  <li>SQL Injection</li>\n  <li>Path Manipulation</li>\n  <li>File Manipulation</li>\n  <li>Unauthorized File Access</li>\n  <li>Unvalidated Redirect (Open Redirect)</li>\n</ul>\n\n<h3 id=\"ensuring-security-of-ballerina-standard-libraries\">Ensuring Security of Ballerina Standard Libraries</h3>\n\n<p>Security-sensitive functions and remote methods of Ballerina standard libraries are annotated with the <code class=\"language-plaintext highlighter-rouge\">@untainted</code> parameter annotation. This denotes that untrusted (tainted) data should not be passed to the parameter.</p>\n\n<p>For example, the <code class=\"language-plaintext highlighter-rouge\">sqlQuery</code> parameter of the <code class=\"language-plaintext highlighter-rouge\">ballerinax/java.jdbc</code> <code class=\"language-plaintext highlighter-rouge\">select</code> remote method is annotated as <code class=\"language-plaintext highlighter-rouge\">@untainted</code>.</p>\n\n<pre><code class=\"language-ballerina\">public remote function select(@untainted string sqlQuery, \n                              typedesc&lt;record{}&gt;? recordType, \n                              Param... parameters) \n                        returns @tainted table&lt;record {}&gt;|Error\n</code></pre>\n\n<p>The following example constructs an SQL query with a tainted argument:</p>\n\n<pre><code class=\"language-ballerina\">import ballerinax/java.jdbc;\n\ntype ResultStudent record {\n    string name;\n};\n\npublic function main(string... args) {\n\n    jdbc:Client testDB = new({\n        url: \"jdbc:mysql://localhost:3306/testdb\",\n        username: \"test\",\n        password: \"test\",\n        poolOptions: { maximumPoolSize: 5 },\n        dbOptions: { useSSL: false }\n    });\n\n   // Construct student ID based on user input.\n   string studentId = \"S_\" + args[0];\n\n   // Execute select query using the untrusted (tainted) student ID\n   var dt = testDB-&gt;select(\"SELECT NAME FROM STUDENT WHERE ID = \" + studentId,\n                           ResultStudent);\n   testDB.stop();\n}\n</code></pre>\n\n<p>The Ballerina compiler will generate an error:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tainted value passed to sensitive parameter 'sqlQuery'\n</code></pre></div></div>\n\n<p>In order to compile, the program is modified to use query parameters:</p>\n\n<pre><code class=\"language-ballerina\">jdbc:Parameter paramId = {sqlType:jdbc:TYPE_VARCHAR, value:studentId};\nvar dt = testDB-&gt;select(\"SELECT NAME FROM STUDENT WHERE ID = ?\", ResultStudent,\n                        paramId);\n</code></pre>\n\n<p>Command-line arguments passed to Ballerina programs and inputs received through service resources are considered as tainted. Additionally, return values of certain functions are marked with the <code class=\"language-plaintext highlighter-rouge\">@tainted</code> annotation to denote that the resulting value should be considered untrusted data.</p>\n\n<p>For example, the <code class=\"language-plaintext highlighter-rouge\">select</code> remote method of the <code class=\"language-plaintext highlighter-rouge\">java:jdbc</code> client highlighted above returns a <code class=\"language-plaintext highlighter-rouge\">@tainted table&lt;record {}&gt;|Error</code>. This means that any value read from a database is considered untrusted.</p>\n\n<p>When the Ballerina compiler can determine that a function is returning tainted data without tainted data being passed in as parameters to that function, it is required to annotate the function’s return type as <code class=\"language-plaintext highlighter-rouge\">@tainted</code>. If not, the function author has to clean up the data before returning it. For instance, if you are to read from the database and return that result, you either need to annotate that function’s return type as <code class=\"language-plaintext highlighter-rouge\">@tainted</code> or you have to clean up and make sure the returned data is not tainted.</p>\n\n<h3 id=\"securely-using-tainted-data-with-security-sensitive-parameters\">Securely Using Tainted Data with Security-Sensitive Parameters</h3>\n\n<p>There can be certain situations where a tainted value must be passed into a security-sensitive parameter. In such situations, it is essential to do proper data validation or data sanitization to make sure the input does not result in a security threat. Once proper controls are in place, the <code class=\"language-plaintext highlighter-rouge\">@untainted</code> annotation can be used with a type cast operator to denote that the value is trusted:</p>\n\n<pre><code class=\"language-ballerina\">// Execute select query using the untrusted (tainted) student ID\nboolean isValid = isNumeric(studentId);\nif (isValid) {\n   var dt = testDB-&gt;select(\"SELECT NAME FROM STUDENT WHERE ID = \" +\n                           &lt;@untainted&gt; studentId, ResultStudent);\n}\n// ...\n</code></pre>\n\n<p>Additionally, return values can be annotated with<code class=\"language-plaintext highlighter-rouge\">@untainted</code>. This denotes that the return value should be trusted (even if the return value is derived from tainted data):</p>\n\n<pre><code class=\"language-ballerina\">// Execute the select query using the untrusted (tainted) student ID\nfunction sanitizeSortColumn (string columnName) returns @untainted string {\n   string sanitizedSortColumn = columnName;\n   // Insert sanitization logic to ensure that the return value is safe.\n   return sanitizedSortColumn;\n}\n// ...\n</code></pre>\n\n<h2 id=\"securing-passwords-and-secrets\">Securing Passwords and Secrets</h2>\n\n<p>Ballerina provides an API to access configuration values from different sources. For more information, see <a href=\"/1.2/learn/by-example/config-api.html\">Config Ballerina by Example</a>.</p>\n\n<p>Configuration values containing passwords or secrets should be encrypted. The Ballerina Config API will decrypt such configuration values when being accessed.</p>\n\n<p>Use the following command to encrypt a configuration value:</p>\n\n<pre><code class=\"language-cmd\">$ ballerina encrypt\n</code></pre>\n\n<p>The encrypt command will prompt for the plain-text value to be encrypted and an encryption secret.</p>\n\n<pre><code class=\"language-cmd\">$ ballerina encrypt\nEnter value: \n\nEnter secret: \n\nRe-enter secret to verify: \n\nAdd the following to the configuration file:\n&lt;key&gt;=\"@encrypted:{hcBLnR+b4iaGS9PEtCMSQOUXJQTQo+zknNxCkpZ0t7w=}\"\n\nOr provide it as a command line argument:\n--&lt;key&gt;=@encrypted:{hcBLnR+b4iaGS9PEtCMSQOUXJQTQo+zknNxCkpZ0t7w=}\n</code></pre>\n\n<p>Ballerina uses AES, CBC mode with PKCS#5 padding for encryption. The generated encrypted value should be used in place of the plain-text configuration value.</p>\n\n<p>For example, contents of a configuration file that includes a secret value should look as follows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>api.secret=\"@encrypted:{hcBLnR+b4iaGS9PEtCMSQOUXJQTQo+zknNxCkpZ0t7w=}\"\napi.provider=\"not-a-security-sensitive-value\"\n</code></pre></div></div>\n\n<p>When running a Ballerina program that uses encrypted configuration values, Ballerina will require the secret used during the encryption process to perform the decryption.</p>\n\n<p>Ballerina will first look for a file named <code class=\"language-plaintext highlighter-rouge\">secret.txt</code>. If such a file exists, Ballerina will read the decryption secret from the file and immediately remove the file to make sure the secret cannot be accessed afterward. If the secret file is not present, the Ballerina program will prompt for the decryption secret.</p>\n\n<p>The file based approach is useful in automated deployments. The file containing the decryption secret can be deployed along with the Ballerina program. The name and the path of the secret file can be configured using the <code class=\"language-plaintext highlighter-rouge\">ballerina.config.secret</code> runtime parameter:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ballerina run --b7a.config.secret=path/to/secret/file securing_configuration_values.bal\n</code></pre></div></div>\n\n<h2 id=\"authentication-and-authorization\">Authentication and Authorization</h2>\n\n<h3 id=\"inbound-authentication-and-authorization\">Inbound Authentication and Authorization</h3>\n\n<p>Ballerina HTTP services can be configured to enforce authentication and authorization. Ballerina has built-in support for the following inbound authentication mechanisms whereas it is possible to add custom mechanisms:</p>\n\n<ul>\n  <li>Basic authentication</li>\n  <li>JWT authentication</li>\n  <li>OAuth2 authentication</li>\n  <li>LDAP authentication</li>\n</ul>\n\n<p>Ballerina inbound authentication is abstracted out into 2 layers called <code class=\"language-plaintext highlighter-rouge\">http:InboundAuthHandler</code> and <code class=\"language-plaintext highlighter-rouge\">auth:InboundAuthProvider</code>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">auth:InboundAuthProvider</code> is a protocol-independent entity that only knows how to authenticate a user when the necessary information is provided. The <code class=\"language-plaintext highlighter-rouge\">http:InboundAuthHandler</code> can be protocol dependent. Even-though the current focus is on HTTP, the <code class=\"language-plaintext highlighter-rouge\">ballerina/auth</code> module can operate with other protocols as well.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">http:InboundAuthHandler</code> is used to perform HTTP-level actions, which are extracting the required HTTP header or body, extracting the credentials out of it, passing them into the associated <code class=\"language-plaintext highlighter-rouge\">auth:InboundAuthProvider</code>, and getting the credentials validated. The <code class=\"language-plaintext highlighter-rouge\">auth:InboundAuthProvider</code> is used to validate the credentials passed by the <code class=\"language-plaintext highlighter-rouge\">http:InboundAuthHandler</code>.</p>\n\n<p>In a particular authentication scheme, the implemented instance of the <code class=\"language-plaintext highlighter-rouge\">auth:InboundAuthProvider</code> is initialized with the required configurations and it is passed to the implemented instance of the <code class=\"language-plaintext highlighter-rouge\">http:InboundAuthHandler</code>.</p>\n\n<p>Next, the implemented instance of the <code class=\"language-plaintext highlighter-rouge\">http:InboundAuthHandler</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:Listener</code> configuration as follows, and the listener is initialized with authentication.</p>\n\n<p>The following example represents how a listener is secured with Basic Auth with the above-mentioned configurations.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/auth;\nimport ballerina/http;\nimport ballerina/config;\n\nauth:InboundBasicAuthProvider basicAuthProvider = new;\nhttp:BasicAuthHandler basicAuthHandler = new(basicAuthProvider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [basicAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nservice helloWorld on secureHelloWorldEp {\n// ....\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>Note:</strong> It is a must to use HTTPS when enforcing authentication and authorization checks, to ensure the confidentiality of sensitive authentication data.</p>\n</blockquote>\n\n<p>Optionally, the <code class=\"language-plaintext highlighter-rouge\">scopes</code> attribute is configured for the authorization as follows. If it is not specified, that means the service is authorized for any authenticated user.</p>\n\n<pre><code class=\"language-ballerina\">listener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [authHandler],\n        scopes: [\"test-scope\"]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nservice helloWorld on secureHelloWorldEp {\n// ....\n}\n</code></pre>\n\n<h4 id=\"inbound-advanced-use-cases\">Inbound Advanced Use Cases</h4>\n\n<h5 id=\"using-multiple-auth-handlers\">Using Multiple Auth Handlers</h5>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">authHandlers</code> can be configured for advanced use cases, which use multiple auth handlers as follows:</p>\n\n<p>Case 1: Auth should be successful for <code class=\"language-plaintext highlighter-rouge\">authHandler1</code> OR <code class=\"language-plaintext highlighter-rouge\">authHandler1</code>.\n<code class=\"language-plaintext highlighter-rouge\">authHandlers: [authHandler1, authHandler2]</code></p>\n\n<p>Case 2: Auth should be successful for <code class=\"language-plaintext highlighter-rouge\">authHandler1</code> AND <code class=\"language-plaintext highlighter-rouge\">authHandler12</code>.\n<code class=\"language-plaintext highlighter-rouge\">authHandlers: [[authHandler1], [authHandler2]]</code></p>\n\n<p>Case 3: Auth should be successful for ((<code class=\"language-plaintext highlighter-rouge\">authHandler1</code> OR <code class=\"language-plaintext highlighter-rouge\">authHandler2</code>) AND (<code class=\"language-plaintext highlighter-rouge\">authHandler3</code> OR <code class=\"language-plaintext highlighter-rouge\">authHandler4</code>)).\n<code class=\"language-plaintext highlighter-rouge\">authHandlers: [[authHandler1, authHandler2], [authHandler3, authHandler4]]</code></p>\n\n<pre><code class=\"language-ballerina\">listener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [authHandler1, authHandler2]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nservice helloWorld on secureHelloWorldEp {\n// ....\n}\n</code></pre>\n\n<h5 id=\"using-multiple-scopes\">Using Multiple Scopes</h5>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">scopes</code> can be configured for advanced use cases as follows:</p>\n\n<p>Case 1: Auth should be successful for <code class=\"language-plaintext highlighter-rouge\">scope-1</code> OR <code class=\"language-plaintext highlighter-rouge\">scope-2</code>.\n<code class=\"language-plaintext highlighter-rouge\">scopes: [\"scopes-1\", \"scopes-2\"]</code></p>\n\n<p>Case 2: Auth should be successful for <code class=\"language-plaintext highlighter-rouge\">scope-1</code> AND <code class=\"language-plaintext highlighter-rouge\">scope-2</code>.\n<code class=\"language-plaintext highlighter-rouge\">scopes: [[\"scopes-1\"], [\"scopes-2\"]]</code></p>\n\n<p>Case 3: Auth should be successful for ((<code class=\"language-plaintext highlighter-rouge\">scope-1</code> OR <code class=\"language-plaintext highlighter-rouge\">scope-2</code>) AND (<code class=\"language-plaintext highlighter-rouge\">scope-3</code> OR <code class=\"language-plaintext highlighter-rouge\">scope-4</code>)).\n<code class=\"language-plaintext highlighter-rouge\">scopes: [[\"scopes-1\", \"scopes-2\"], [\"scopes-3\", \"scopes-4\"]]</code></p>\n\n<pre><code class=\"language-ballerina\">listener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [authHandler],\n        scopes: [\"scopes-1\", \"scopes-2\"]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nservice helloWorld on secureHelloWorldEp {\n// ....\n}\n</code></pre>\n\n<h5 id=\"per-resource-and-per-service-customization\">Per-Resource and Per-Service Customization</h5>\n\n<p>The security enforcements can be customized by the <code class=\"language-plaintext highlighter-rouge\">@http:ServiceConfig</code> annotation and the <code class=\"language-plaintext highlighter-rouge\">@http:ResourceConfig</code> annotation.</p>\n\n<p>For example, authentication and authorization can be modified for a particular service as follows by configuring the <code class=\"language-plaintext highlighter-rouge\">auth</code> attribute of the <code class=\"language-plaintext highlighter-rouge\">@http:ServiceConfig</code>.</p>\n<ul>\n  <li>Authentication can be disabled only for a particular service by using the <code class=\"language-plaintext highlighter-rouge\">enabled</code> attribute</li>\n  <li>The authentication mechanism can be changed for a particular service by using the <code class=\"language-plaintext highlighter-rouge\">authHandlers</code> attribute</li>\n  <li>Authorization scopes can be changed for a particular service by using the <code class=\"language-plaintext highlighter-rouge\">scopes</code> attribute</li>\n</ul>\n\n<pre><code class=\"language-ballerina\">@http:ServiceConfig {\n    basePath: \"/hello\",\n    auth: {\n        enabled: false,\n        authHandlers: [authHandlerA],\n        scopes: [\"scope-A\"]\n    }\n}\nservice helloWorld on secureHelloWorldEp {\n// ...\n}\n</code></pre>\n\n<p>Further, authentication and authorization can be modified for a particular resource as follows by configuring the <code class=\"language-plaintext highlighter-rouge\">auth</code> attribute of the <code class=\"language-plaintext highlighter-rouge\">@http:ResourceConfig</code>:</p>\n\n<pre><code class=\"language-ballerina\">@http:ResourceConfig {\n    basePath: \"/\",\n    auth: {\n        enabled: false,\n        authHandlers: [authHandlerA],\n        scopes: [\"scope-A\"]\n    }\n}\nresource function sayHello (http:Caller caller, http:Request req) {\n// ...\n}\n</code></pre>\n\n<p>The same configuration patterns used for the listener-level configurations are applied for <code class=\"language-plaintext highlighter-rouge\">authHandlers</code> and the <code class=\"language-plaintext highlighter-rouge\">scopes</code> attributes in service-level configurations and resource-level configurations.</p>\n\n<h5 id=\"implementing-inbound-custom-authentication-mechanism\">Implementing Inbound Custom Authentication Mechanism</h5>\n\n<p>The user can implement a custom version of AuthHandler and AuthProvider with the use of the object-equivalency pattern as follows. With that, the <code class=\"language-plaintext highlighter-rouge\">http:Listener</code> can be enforced with custom authentication and authorization mechanisms.</p>\n\n<pre><code class=\"language-ballerina\">public type InboundCustomAuthHandler object {\n\n    *http:InboundAuthHandler;\n\n    public function canProcess(http:Request req) returns @tainted boolean {\n        // Custom logic to check whether the request can be processed.\n    }\n    \n    public function process(http:Request req) returns boolean|http:AuthenticationError {\n        // Custom logic to process the request, extract the credentials, and get them validated from the AuthProvider.\n    }\n};\n</code></pre>\n\n<pre><code class=\"language-ballerina\">public type InboundCustomAuthProvider object {\n\n    *auth:InboundAuthProvider;\n\n    public function authenticate(string credential) returns boolean|auth:Error {\n        // Custom logic to authenticate the given credentials.\n    }\n};\n</code></pre>\n\n<h5 id=\"disable-https-enforcement\">Disable HTTPS Enforcement</h5>\n\n<p>The enforcement of HTTPS can be disabled by configuring the value <code class=\"language-plaintext highlighter-rouge\">mandateSecureSocket</code> into <code class=\"language-plaintext highlighter-rouge\">false</code> as follows:</p>\n\n<pre><code class=\"language-ballerina\">listener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [authHandler],\n        mandateSecureSocket: false\n    }\n});\nservice helloWorld on secureHelloWorldEp {\n// ....\n}\n</code></pre>\n\n<h5 id=\"modify-authorization-or-authentication-filter-index\">Modify Authorization or Authentication Filter Index</h5>\n\n<p>The authn/authz filters are engaged as the top most filters of the filter array, which is configured in the HTTP listener configuration. The uer can configure the index of the authn/authz filters if it is needed to engage a custom filter before the authn/authz filters.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">position</code> attribute represents the authn/authz filter position of the filter array. The position values starts from 0 and it is set to 0 implicitly.</p>\n\n<p>The following example engages the authn/authz filters in between the <code class=\"language-plaintext highlighter-rouge\">customFilter1</code> and <code class=\"language-plaintext highlighter-rouge\">customFilter2</code>. Then, the internally-updated filter chain would be <code class=\"language-plaintext highlighter-rouge\">[customFilter1, authnFilter, authzFilter, customFilter2]</code>.</p>\n\n<pre><code class=\"language-ballerina\">listener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [authHandler],\n        position: 1\n    },\n    filters: [customFilter1, customFilter2],\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nservice helloWorld on secureHelloWorldEp {\n// ....\n}\n</code></pre>\n\n<h4 id=\"jwt-inbound-authentication-and-authorization\">JWT Inbound Authentication and Authorization</h4>\n\n<p>Ballerina supports JWT Authentication and Authorization for services. The <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code> is used to extract the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header from the request and extract the credential from the header value which is <code class=\"language-plaintext highlighter-rouge\">Bearer &lt;token&gt;</code>. Then the extracted credential will be passed to the initialized AuthProvider and validated. The <code class=\"language-plaintext highlighter-rouge\">jwt:InboundJwtAuthProvider</code> is used to validate the credentials (JWT) passed by the AuthHandler against the <code class=\"language-plaintext highlighter-rouge\">jwt:JwtValidatorConfig</code> provided by the user.</p>\n\n<p>JWT validation requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">jwt:JwtValidatorConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">issuer</code> - The issuer of the JWT</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">audience</code> - The audience value for the current service</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clockSkewInSeconds</code> - Clock skew in seconds that can be used to avoid token validation failures due to clock synchronization problems</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">trustStoreConfig</code> - JWT trust store configurations\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">trustStore</code> - Trust store used for signature verification</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">certificateAlias</code> - Token-signed public key certificate alias</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">jwtCache</code> - Cache used to store parsed JWT information as <code class=\"language-plaintext highlighter-rouge\">CachedJwt</code></li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">jwt:JwtValidatorConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">jwt:InboundJwtAuthProvider</code> when initializing. The initialized <code class=\"language-plaintext highlighter-rouge\">jwt:InboundJwtAuthProvider</code> is passed to the `http:BearerAuthHandler.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> For demonstration purposes, the <code class=\"language-plaintext highlighter-rouge\">ballerinaTruststore.p12</code> included with Ballerina runtime is used. In a production deployment, the truststore should only contain the public key certificates of the trusted JWT issuers.</p>\n</blockquote>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/jwt;\nimport ballerina/config;\n\njwt:InboundJwtAuthProvider jwtAuthProvider = new({\n    issuer: \"ballerina\",\n    audience: [\"ballerina.io\"],\n    trustStoreConfig: {\n        certificateAlias: \"ballerina\",\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nhttp:BearerAuthHandler jwtAuthHandler = new(jwtAuthProvider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [jwtAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/hello\"\n}\nservice helloWorld on secureHelloWorldEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\",\n        auth:{\n            scopes:[\"hello\"],\n            enabled: true\n        }\n    }\n    resource function sayHello(http:Caller caller, http:Request req) {\n        http:Response resp = new;\n        resp.setTextPayload(\"Hello, World!\");\n        checkpanic caller-&gt;respond(resp);\n    }\n}\n</code></pre>\n\n<p>When the service is invoked without authentication information or invalid authentication information, an authentication failure will occur:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; \n&lt; HTTP/1.1 401 Unauthorized\n&lt; content-type: text/plain\n&lt; \nAuthentication failure\n</code></pre></div></div>\n\n<p>If a request is made with a valid, signed JWT but without the expected <code class=\"language-plaintext highlighter-rouge\">scope</code>, an authorization failure will occur. An example of a JWT without the <code class=\"language-plaintext highlighter-rouge\">scope</code> attribute is as follows.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n  \"sub\": \"ballerina\",\n  \"iss\": \"ballerina\",\n  \"exp\": 2818415019,\n  \"iat\": 1524575019,\n  \"jti\": \"f5aded50585c46f2b8ca233d0c2a3c9d\",\n  \"aud\": [\n    \"ballerina\",\n    \"Ballerina.org\",\n    \"ballerina.io\"\n  ]\n}\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello -H \"Authorization:Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYWxsZXJpbmEiLCJpc3MiOiJiYWxsZXJpbmEiLCJleHAiOjI4MTg0MTUwMTksImlhdCI6MTUyNDU3NTAxOSwianRpIjoiZjVhZGVkNTA1ODVjNDZmMmI4Y2EyMzNkMGMyYTNjOWQiLCJhdWQiOlsiYmFsbGVyaW5hIiwiYmFsbGVyaW5hLm9yZyIsImJhbGxlcmluYS5pbyJdfQ.X2mHWCr8A5UaJFvjSPUammACnTzFsTdre-P5yWQgrwLBmfcpr9JaUuq4sEwp6to3xSKN7u9QKqRLuWH1SlcphDQn6kdF1ZrCgXRQ0HQTilZQU1hllZ4c7yMNtMgMIaPgEBrStLX1Ufr6LpDkTA4VeaPCSqstHt9WbRzIoPQ1fCxjvHBP17ShiGPRza9p_Z4t897s40aQMKbKLqLQ8rEaYAcsoRBXYyUhb_PRS-YZtIdo7iVmkMVFjYjHvmYbpYhNo57Z1Y5dNa8h8-4ON4CXzcJ1RzuyuFVz1a3YL3gWTsiliVmno7vKyRo8utirDRIPi0dPJPuWi2uMtJkqdkpzJQ\"\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; Authorization:Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYWxsZXJ\npbmEiLCJpc3MiOiJiYWxsZXJpbmEiLCJleHAiOjI4MTg0MTUwMTksImlhdCI6MTUyNDU3NTAxOSwian\nRpIjoiZjVhZGVkNTA1ODVjNDZmMmI4Y2EyMzNkMGMyYTNjOWQiLCJhdWQiOlsiYmFsbGVyaW5hIiwiY\nmFsbGVyaW5hLm9yZyIsImJhbGxlcmluYS5pbyJdfQ.X2mHWCr8A5UaJFvjSPUammACnTzFsTdre-P5y\nWQgrwLBmfcpr9JaUuq4sEwp6to3xSKN7u9QKqRLuWH1SlcphDQn6kdF1ZrCgXRQ0HQTilZQU1hllZ4c\n7yMNtMgMIaPgEBrStLX1Ufr6LpDkTA4VeaPCSqstHt9WbRzIoPQ1fCxjvHBP17ShiGPRza9p_Z4t897\ns40aQMKbKLqLQ8rEaYAcsoRBXYyUhb_PRS-YZtIdo7iVmkMVFjYjHvmYbpYhNo57Z1Y5dNa8h8-4ON4\nCXzcJ1RzuyuFVz1a3YL3gWTsiliVmno7vKyRo8utirDRIPi0dPJPuWi2uMtJkqdkpzJQ\n&gt;\n\n&lt; HTTP/1.1 403 Forbidden\n&lt; content-type: text/plain\n&lt;\nAuthorization failure\n</code></pre></div></div>\n\n<p>A request with a correct “scope” attribute will result in a successful invocation. An example of a JWT that has the correct “scope” attribute is as follows.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n  \"sub\": \"ballerina\",\n  \"iss\": \"ballerina\",\n  \"exp\": 2818415019,\n  \"iat\": 1524575019,\n  \"jti\": \"f5aded50585c46f2b8ca233d0c2a3c9d\",\n  \"aud\": [\n    \"ballerina\",\n    \"ballerina.org\",\n    \"ballerina.io\"\n  ],\n  \"scope\": \"hello\"\n}\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello -H 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYWxsZXJpbmEiLCJpc3MiOiJiYWxsZXJpbmEiLCJleHAiOjI4MTg0MTUwMTksImlhdCI6MTUyNDU3NTAxOSwianRpIjoiZjVhZGVkNTA1ODVjNDZmMmI4Y2EyMzNkMGMyYTNjOWQiLCJhdWQiOlsiYmFsbGVyaW5hIiwiYmFsbGVyaW5hLm9yZyIsImJhbGxlcmluYS5pbyJdLCJzY29wZSI6ImhlbGxvIn0.bNoqz9_DzgeKSK6ru3DnKL7NiNbY32ksXPYrh6Jp0_O3ST7WfXMs9WVkx6Q2TiYukMAGrnMUFrJnrJvZwC3glAmRBrl4BYCbQ0c5mCbgM9qhhCjC1tBA50rjtLAtRW-JTRpCKS0B9_EmlVKfvXPKDLIpM5hnfhOin1R3lJCPspJ2ey_Ho6fDhsKE3DZgssvgPgI9PBItnkipQ3CqqXWhV-RFBkVBEGPDYXTUVGbXhdNOBSwKw5ZoVJrCUiNG5XD0K4sgN9udVTi3EMKNMnVQaq399k6RYPAy3vIhByS6QZtRjOG8X93WJw-9GLiHvcabuid80lnrs2-mAEcstgiHVw'\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYWxsZX\nJpbmEiLCJpc3MiOiJiYWxsZXJpbmEiLCJleHAiOjI4MTg0MTUwMTksImlhdCI6MTUyNDU3NTAxOSwia\nnRpIjoiZjVhZGVkNTA1ODVjNDZmMmI4Y2EyMzNkMGMyYTNjOWQiLCJhdWQiOlsiYmFsbGVyaW5hIiwi\nYmFsbGVyaW5hLm9yZyIsImJhbGxlcmluYS5pbyJdLCJzY29wZSI6ImhlbGxvIn0.bNoqz9_DzgeKSK6\nru3DnKL7NiNbY32ksXPYrh6Jp0_O3ST7WfXMs9WVkx6Q2TiYukMAGrnMUFrJnrJvZwC3glAmRBrl4BY\nCbQ0c5mCbgM9qhhCjC1tBA50rjtLAtRW-JTRpCKS0B9_EmlVKfvXPKDLIpM5hnfhOin1R3lJCPspJ2e\ny_Ho6fDhsKE3DZgssvgPgI9PBItnkipQ3CqqXWhV-RFBkVBEGPDYXTUVGbXhdNOBSwKw5ZoVJrCUiNG\n5XD0K4sgN9udVTi3EMKNMnVQaq399k6RYPAy3vIhByS6QZtRjOG8X93WJw-9GLiHvcabuid80lnrs2-\nmAEcstgiHVw\n&gt;\n\n&lt; HTTP/1.1 200 OK\n&lt; content-type: text/plain\n&lt;\nHello, World!\n</code></pre></div></div>\n\n<h4 id=\"oauth2-inbound-authentication-and-authorization\">OAuth2 Inbound Authentication and Authorization</h4>\n\n<p>Ballerina supports OAuth2 Authentication and Authorization for services. The <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code> is used to extract the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header from the request and extract the credentials from the header value, which is the <code class=\"language-plaintext highlighter-rouge\">Bearer &lt;token&gt;</code>. Then, the extracted credentials will be passed to the initialized AuthProvider to get them validated. The <code class=\"language-plaintext highlighter-rouge\">oauth2:InboundOAuth2Provider</code> is used to validate the credentials passed by the AuthHandler against the introspection endpoint configured at <code class=\"language-plaintext highlighter-rouge\">oauth2:IntrospectionServerConfig</code>, which is provided by the user.</p>\n\n<p>OAuth2 token validation requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">oauth2:IntrospectionServerConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">url</code> - URL of the introspection server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">tokenTypeHint</code> - A hint about the type of the token submitted for introspection</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientConfig</code> - HTTP client configurations, which calls the introspection server</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">oauth2:IntrospectionServerConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">oauth2:InboundOAuth2Provider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">oauth2:InboundOAuth2Provider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/oauth2;\nimport ballerina/config;\n\noauth2:InboundOAuth2Provider oauth2Provider = new({\n    url: \"https://localhost:9196/oauth2/token/introspect\",\n    tokenTypeHint: \"access_token\"\n});\nhttp:BearerAuthHandler oauth2Handler = new(oauth2Provider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [oauth2Handler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/hello\"\n}\nservice helloWorld on secureHelloWorldEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function sayHello(http:Caller caller, http:Request req) {\n        http:Response resp = new;\n        resp.setTextPayload(\"Hello, World!\");\n        checkpanic caller-&gt;respond(resp);\n    }\n}\n</code></pre>\n\n<p>When the service is invoked without authentication information or invalid authentication information, an authentication failure will occur:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; \n&lt; HTTP/1.1 401 Unauthorized\n&lt; content-type: text/plain\n&lt; \nAuthentication failure\n</code></pre></div></div>\n\n<p>Although a request is made with valid authentication information, if the introspection endpoint does not respond either with the <code class=\"language-plaintext highlighter-rouge\">scope</code> attribute of the response JSON payload or with an unexpected <code class=\"language-plaintext highlighter-rouge\">scope</code> attribute, an authorization failure will occur.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello -H \"Authorization:Bearer &lt;token&gt;\"\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; Authorization:Bearer &lt;token&gt;\n&gt;\n\n&lt; HTTP/1.1 403 Forbidden\n&lt; content-type: text/plain\n&lt;\nAuthorization failure\n</code></pre></div></div>\n\n<p>A request, which gets a successful response from the introspection endpoint with a correct “scope” attribute will result in a successful invocation.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello -H 'Authorization: Bearer &lt;token&gt;'\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; Authorization: Bearer &lt;token&gt;\n&gt;\n\n&lt; HTTP/1.1 200 OK\n&lt; content-type: text/plain\n&lt;\nHello, World!\n</code></pre></div></div>\n\n<h4 id=\"ldap-inbound-authentication-and-authorization\">LDAP Inbound Authentication and Authorization</h4>\n\n<p>Ballerina supports LDAP Authentication and Authorization for services. The <code class=\"language-plaintext highlighter-rouge\">http:BasicAuthHandler</code> is used to extract the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header from the request and extract the credentials from the header value, which is <code class=\"language-plaintext highlighter-rouge\">Basic &lt;token&gt;</code>. Then, the extracted credentials will be passed to the initialized AuthProvider to get validated. The <code class=\"language-plaintext highlighter-rouge\">ldap:InboundLdapAuthProvider</code> is used to validate the credentials passed by the AuthHandler against the LDAP server configured at <code class=\"language-plaintext highlighter-rouge\">ldap:LdapConnectionConfig</code>, which is provided by the user.</p>\n\n<p>LDAP token validation requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">ldap:LdapConnectionConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">domainName</code> - Unique name to identify the user store</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">connectionURL</code> - Connection URL to the LDAP server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">connectionName</code> - The username to connect to the LDAP server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">connectionPassword</code> - Password for the ConnectionName user</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">userSearchBase</code> - DN of the context or object under which the user entries are stored in the LDAP server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">userEntryObjectClass</code> - Object class used to construct user entries</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">userNameAttribute</code> - The attribute used for uniquely identifying a user entry</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">userNameSearchFilter</code> - Filtering criteria used to search for a particular user entry</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">userNameListFilter</code> - Filtering criteria for searching user entries in the LDAP server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupSearchBase</code> - DN of the context or object under which the group entries are stored in the LDAP server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupEntryObjectClass</code> - Object class used to construct group entries</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupNameAttribute</code> - The attribute used for uniquely identifying a group entry</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupNameSearchFilter</code> - Filtering criteria used to search for a particular group entry</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupNameListFilter</code> - Filtering criteria for searching group entries in the LDAP server</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">membershipAttribute</code> - Define the attribute that contains the distinguished names (DN) of user objects that are in a group</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">userRolesCacheEnabled</code> -  To indicate whether to cache the role list of a user</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">connectionPoolingEnabled</code> - Define whether LDAP connection pooling is enabled</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">connectionTimeoutInMillis</code> - Timeout in making the initial LDAP connection</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">readTimeoutInMillis</code> -  Read timeout in milliseconds for LDAP operations</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">retryAttempts</code> - Retry the authentication request if a timeout happened</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">secureClientSocket</code> - The SSL configurations for the LDAP client socket. This needs to be configured in order to communicate through LDAPs</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">ldap:LdapConnectionConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">ldap:InboundLdapAuthProvider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">ldap:InboundLdapAuthProvider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BasicAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/ldap;\nimport ballerina/config;\n\nldap:LdapConnectionConfig ldapConfig = {\n    domainName: \"ballerina.io\",\n    connectionURL: \"ldap://localhost:20100\",\n    connectionName: \"uid=admin,ou=system\",\n    connectionPassword: \"secret\",\n    userSearchBase: \"ou=Users,dc=ballerina,dc=io\",\n    userEntryObjectClass: \"identityPerson\",\n    userNameAttribute: \"uid\",\n    userNameSearchFilter: \"(&amp;(objectClass=person)(uid=?))\",\n    userNameListFilter: \"(objectClass=person)\",\n    groupSearchBase: [\"ou=Groups,dc=ballerina,dc=io\"],\n    groupEntryObjectClass: \"groupOfNames\",\n    groupNameAttribute: \"cn\",\n    groupNameSearchFilter: \"(&amp;(objectClass=groupOfNames)(cn=?))\",\n    groupNameListFilter: \"(objectClass=groupOfNames)\",\n    membershipAttribute: \"member\",\n    userRolesCacheEnabled: true,\n    connectionPoolingEnabled: false,\n    connectionTimeoutInMillis: 5000,\n    readTimeoutInMillis: 60000,\n    retryAttempts: 3\n};\nldap:InboundLdapAuthProvider ldapAuthProvider = new(ldapConfig, \"ldap01\");\nhttp:BasicAuthHandler ldapAuthHandler = new(ldapAuthProvider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [ldapAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/hello\",\n    auth: {\n        scopes: [\"hello\"]\n    }\n}\nservice helloWorld on secureHelloWorldEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function sayHello(http:Caller caller, http:Request req) {\n        http:Response resp = new;\n        resp.setTextPayload(\"Hello, World!\");\n        checkpanic caller-&gt;respond(resp);\n    }\n}\n</code></pre>\n\n<p>When the service is invoked without authentication information or invalid authentication information, an authentication failure will occur:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; \n&lt; HTTP/1.1 401 Unauthorized\n&lt; content-type: text/plain\n&lt; \nAuthentication failure\n</code></pre></div></div>\n\n<p>If a request is made with valid authentication information but the LDAP server responds with an empty group list or unexpected scopes, an authorization failure will occur.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello -H \"Authorization: Basic &lt;token&gt;\"\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; Authorization:Bearer &lt;token&gt;\n&gt;\n\n&lt; HTTP/1.1 403 Forbidden\n&lt; content-type: text/plain\n&lt;\nAuthorization failure\n</code></pre></div></div>\n\n<p>A request, which gets a successful response from the LDAP server for the “scope” request will result in a successful invocation.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v https://localhost:9091/hello -H 'Authorization: Basic &lt;token&gt;'\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n&gt; Authorization: Bearer &lt;token&gt;\n&gt;\n\n&lt; HTTP/1.1 200 OK\n&lt; content-type: text/plain\n&lt;\nHello, World!\n</code></pre></div></div>\n\n<h4 id=\"basic-auth-inbound-authentication-and-authorization\">Basic Auth Inbound Authentication and Authorization</h4>\n\n<p>Ballerina supports Basic Authentication and Authorization for services. The <code class=\"language-plaintext highlighter-rouge\">http:BasicAuthHandler</code> is used to extract the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header from the request and extract the credential from the header value, which is the <code class=\"language-plaintext highlighter-rouge\">Basic &lt;token&gt;</code>. Then, the extracted credentials will be passed to the initialized AuthProvider and gets validated. The <code class=\"language-plaintext highlighter-rouge\">jwt:InboundBasicAuthProvider</code> is used to read the user information from the configuration file and authenticate the credentials passed by the AuthHandler.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/auth;\nimport ballerina/http;\nimport ballerina/config;\n\nauth:InboundBasicAuthProvider basicAuthProvider = new;\nhttp:BasicAuthHandler basicAuthHandler = new(basicAuthProvider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [basicAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/hello\",\n    auth: {\n        scopes: [\"hello\"]\n    }\n}\nservice helloWorld on secureHelloWorldEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function sayHello(http:Caller caller, http:Request req) {\n        http:Response resp = new;\n        resp.setTextPayload(\"Hello, World!\");\n        checkpanic caller-&gt;respond(resp);\n    }\n}\n</code></pre>\n\n<p>To enforce Basic Authentication, users and scopes should be configured through a configuration file. The following example file introduces two users. The <code class=\"language-plaintext highlighter-rouge\">generalUser</code> has no scopes and the <code class=\"language-plaintext highlighter-rouge\">admin</code> user has the <code class=\"language-plaintext highlighter-rouge\">hello</code> scope.</p>\n\n<p><strong>sample-users.toml</strong></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[b7a.users]\n\n[b7a.users.generalUser]\npassword=\"@encrypted:{pIQrB9YfCQK1eIWH5d6UaZXA3zr+60JxSBcpa2PY7a8=}\"\n\n[b7a.users.admin]\npassword=\"@encrypted:{pIQrB9YfCQK1eIWH5d6UaZXA3zr+60JxSBcpa2PY7a8=}\"\nscopes=\"hello\"\n</code></pre></div></div>\n\n<p>Restart the service using the following command.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ballerina run --config sample-users.toml basic_auth_sample.bal\n</code></pre></div></div>\n\n<p>Since passwords are encrypted, the Config API will request the decryption key. Use <code class=\"language-plaintext highlighter-rouge\">ballerina</code> as the decryption key in this sample.</p>\n\n<p>Also, the passwords can be hashed and provided with the configuration file. The following example file introduces three users along with the passwords hashed with <code class=\"language-plaintext highlighter-rouge\">sha256</code>, <code class=\"language-plaintext highlighter-rouge\">sha384</code>, and <code class=\"language-plaintext highlighter-rouge\">sha512</code> hashing algorithms.</p>\n\n<p><strong>sample-users.toml</strong></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[b7a.users]\n\n[b7a.users.userA]\npassword=\"@sha256:{cd2eb0837c9b4c962c22d2ff8b5441b7b45805887f051d39bf133b583baf6860}\"\n\n[b7a.users.userB]\npassword=\"@sha384:{1249e15f035ed34786a328d9fdb2689ab24f7c7b253d1b7f66ed92a679d663dd502d7beda59973e8c91a728b929fc8cd}\"\n\n[b7a.users.userC]\npassword=\"@sha512:{9057ff1aa9509b2a0af624d687461d2bbeb07e2f37d953b1ce4a9dc921a7f19c45dc35d7c5363b373792add57d0d7dc41596e1c585d6ef7844cdf8ae87af443f}\"\n</code></pre></div></div>\n\n<p>Once the service is restarted with the first configuration file in place, the <code class=\"language-plaintext highlighter-rouge\">generalUser</code> will not be able to invoke the service due to authorization failure:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v -u generalUser:password https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n\n&lt; HTTP/1.1 403 Forbidden\n&lt; content-type: text/plain\n&lt;\nAuthorization failure\n</code></pre></div></div>\n\n<p>‘Admin’ users will be able to invoke the service:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v -u admin:password https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; User-Agent: curl/7.47.0\n&gt; Accept: */*\n\n&lt; HTTP/1.1 200 OK\n&lt; content-type: text/plain\n&lt;\nHello, World!\n</code></pre></div></div>\n\n<hr />\n\n<h3 id=\"outbound-authentication-and-authorization\">Outbound Authentication and Authorization</h3>\n\n<p>The Ballerina HTTP client can be configured to send authentication and authorization information to the endpoint being invoked. Ballerina has built-in support for the following outbound authentication mechanisms, whereas it is possible to add custom mechanisms:</p>\n\n<ul>\n  <li>Basic authentication</li>\n  <li>JWT authentication</li>\n  <li>OAuth2 authentication</li>\n</ul>\n\n<p>Ballerina outbound authentication is also abstracted out into 2 layers called <code class=\"language-plaintext highlighter-rouge\">http:OutboundAuthHandler</code> and <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code> is a protocol-independent entity, which only knows how to generate credentials with the necessary information provided by the user. The <code class=\"language-plaintext highlighter-rouge\">http:OutboundAuthHandler</code> can be protocol dependent. Even-though the current focus is on HTTP, the <code class=\"language-plaintext highlighter-rouge\">ballerina/auth</code> module can operate with other protocols as well.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code> is used to create the credentials according to the provided configurations. The <code class=\"language-plaintext highlighter-rouge\">http:OutboundAuthHandler</code> is used to get the created credentials from the <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code> and perform HTTP-level actions, which are adding the required HTTP headers or body using the received credentials.</p>\n\n<p>In a particular authentication scheme, the implemented instance of the <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code> is initialized with required configurations and it is passed to the implemented instance of the <code class=\"language-plaintext highlighter-rouge\">http:OutboundAuthHandler</code>.</p>\n\n<p>Next, the implemented instance of the <code class=\"language-plaintext highlighter-rouge\">http:OutboundAuthHandler</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:Client</code> configuration as follows, and the client is initialized with authentication.</p>\n\n<p>The following example represents how a client is secured with Basic Auth with the above-mentioned configurations.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/auth;\nimport ballerina/http;\nimport ballerina/config;\n\nauth:OutboundBasicProvider basicAuthProvider = new({\n    username: \"user\",\n    password: \"ballerina\"\n});\nhttp:BasicAuthHandler basicAuthHandler = new(basicAuthProvider);\n\nhttp:Client secureHelloWorldClient = new(\"https://localhost:9092\", {\n    auth: {\n        authHandler: basicAuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n</code></pre>\n\n<blockquote>\n  <p><strong>Note:</strong> It is better to use HTTPS when enforcing authentication and authorization checks to ensure the confidentiality of sensitive authentication data.</p>\n</blockquote>\n\n<h4 id=\"outbound-advanced-use-cases\">Outbound Advanced Use Cases</h4>\n\n<h5 id=\"implementing-outbound-custom-authentication-mechanism\">Implementing Outbound Custom Authentication Mechanism</h5>\n\n<p>The user can implement a custom version of the AuthHandler and AuthProvider with the use of the object equivalency pattern as follows. With that, the <code class=\"language-plaintext highlighter-rouge\">http:Client</code> can be enforced with custom authentication and authorization mechanisms.</p>\n\n<pre><code class=\"language-ballerina\">public type OutboundCustomAuthHandler object {\n\n    *http:OutboundAuthHandler;\n\n    public function prepare(http:Request req) returns http:Request|http:AuthenticationError {\n        // Custom logic to prepare the request.\n    }\n\n    public function inspect(http:Request req, http:Response resp) returns http:Request|http:AuthenticationError? {\n        // Custom logic to inspect the request after the initial outbound call.\n    }\n};\n</code></pre>\n\n<pre><code class=\"language-ballerina\">public type OutboundCustomAuthProvider object {\n\n    *auth:OutboundAuthProvider;\n\n    public function generateToken() returns string|auth:Error {\n        // Custom logic to generate the token. \n    }\n\n    public function inspect(map&lt;anydata&gt; data) returns string|auth:Error? {\n        // Custom logic to inspect the data map received from the AuthHandler. \n    }\n};\n</code></pre>\n\n<h4 id=\"jwt-outbound-authentication\">JWT Outbound Authentication</h4>\n\n<p>Ballerina supports JWT Authentication for clients. The <code class=\"language-plaintext highlighter-rouge\">jwt:OutboundJwtAuthProvider</code> is used to issue a JWT against the <code class=\"language-plaintext highlighter-rouge\">jwt:JwtIssuerConfig</code> provided by the user. The <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code> is used to add the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header with the value received from the AuthProvider as the <code class=\"language-plaintext highlighter-rouge\">Bearer &lt;token&gt;</code>.</p>\n\n<p>JWT issuing requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">jwt:JwtIssuerConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">username</code> - JWT token username</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">issuer</code> - JWT token issuer</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">audience</code> - JWT token audience</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">customClaims</code> - Map of custom claims</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">expTime</code> - JWT token expiry time</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">keyStoreConfig</code> - JWT key store configurations\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">keyStore</code> - Keystore to be used in JWT signing</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">keyAlias</code> - Signing key alias</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">keyPassword</code> - Signing key password</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">signingAlg</code> - JWT signing algorithm\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">jwt:RS256</code> - The RSA-SHA256 algorithm</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">jwt:RS384</code> - The RSA-SHA384 algorithm</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">jwt:RS512</code> - The RSA-SHA512 algorithm</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">jwt:NONE</code> - Unsecured JWTs (no signing)</li>\n    </ul>\n  </li>\n</ul>\n\n<p>The<code class=\"language-plaintext highlighter-rouge\">jwt:JwtIssuerConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">jwt:OutboundJwtAuthProvider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">jwt:OutboundJwtAuthProvider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/jwt;\nimport ballerina/config;\n\njwt:OutboundJwtAuthProvider jwtAuthProvider = new({\n    username: \"ballerinaUser\",\n    issuer: \"ballerina\",\n    audience: [\"ballerina.io\"],\n    keyStoreConfig: {\n        keyAlias: \"ballerina\",\n        keyPassword: \"ballerina\",\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nhttp:BearerAuthHandler jwtAuthHandler = new(jwtAuthProvider);\n\nhttp:Client downstreamServiceEP = new(\"https://localhost:9091\", {\n    auth: {\n        authHandler: jwtAuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n</code></pre>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">http:Client</code> defined in the program calls the the <code class=\"language-plaintext highlighter-rouge\">http:Listener</code>, which is secured with JWT authentication (For more information, see the example added under JWT inbound authentication).</p>\n\n<h4 id=\"oauth2-outbound-authentication\">OAuth2 Outbound Authentication</h4>\n\n<p>Ballerina supports OAuth2 Authentication for clients. It supports the Client Credentials grant type, Password grant type, and Direct Token mode, in which, the credentials can be provided manually and after that refreshing is handled internally.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> is used to create a token against the configuration provided by the user. It can be the <code class=\"language-plaintext highlighter-rouge\">oauth2:ClientCredentialsGrantConfig</code>, <code class=\"language-plaintext highlighter-rouge\">oauth2:PasswordGrantConfig</code>, or <code class=\"language-plaintext highlighter-rouge\">oauth2:DirectTokenConfig</code> according to the grant type that is required by the user. The <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code> is used to add the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header with the value received from the AuthProvider as the <code class=\"language-plaintext highlighter-rouge\">Bearer &lt;token&gt;</code>.</p>\n\n<h5 id=\"client-credentials-grant-type\">Client Credentials Grant Type</h5>\n\n<p>OAuth2 token issuing requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">oauth2:ClientCredentialsGrantConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">tokenUrl</code> - Token URL for the authorization endpoint</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientId</code> - Client ID for the client credentials grant authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientSecret</code> - Client secret for the client credentials grant authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">scopes</code> - Scope of the access request</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clockSkewInSeconds</code> - Clock skew in seconds</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">retryRequest</code> - Retry the request if the initial request returns a 401 response</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">credentialBearer</code> - How authentication credentials are sent to the authorization endpoint\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">http:AUTH_HEADER_BEARER</code> - Indicates that the authentication credentials should be sent via the Authentication Header</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">http:POST_BODY_BEARER | NO_BEARER</code> - Indicates that the Authentication credentials should be sent via the body of the POST request</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientConfig</code> - HTTP client configurations,which calls the authorization endpoint</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">oauth2:ClientCredentialsGrantConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/oauth2;\nimport ballerina/config;\n\noauth2:OutboundOAuth2Provider oauth2Provider = new({\n    tokenUrl: \"https://localhost:9196/oauth2/token/authorize\",\n    clientId: \"3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxStwNEW4cfStBEGRxRL68\",\n    clientSecret: \"9205371918321623741\",\n    scopes: [\"token-scope1\", \"token-scope2\"]\n});\nhttp:BearerAuthHandler oauth2AuthHandler = new(oauth2Provider);\n\nhttp:Client downstreamServiceEP = new(\"https://localhost:9091\", {\n    auth: {\n        authHandler: oauth2AuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n</code></pre>\n\n<h5 id=\"password-grant-type\">Password Grant Type</h5>\n\n<p>OAuth2 token issuing requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">oauth2:PasswordGrantConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">tokenUrl</code> - Token URL for the authorization endpoint</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">username</code> - Username for password grant authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">password</code> - Password for password grant authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientId</code> - Client ID for password grant authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientSecret</code> - Client secret for password grant authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">scopes</code> - Scope of the access request</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">refreshConfig</code> - Configurations for refreshing the access token\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">refreshUrl</code> - Refresh token URL for the refresh token server</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">scopes</code> - Scope of the access request</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">credentialBearer</code> - How authentication credentials are sent to the authorization endpoint</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">clientConfig</code> - HTTP client configurations, which calls the authorization endpoint</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clockSkewInSeconds</code> - Clock skew in seconds</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">retryRequest</code> - Retry the request if the initial request returns a 401 response</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">credentialBearer</code> - How authentication credentials are sent to the authorization endpoint\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">http:AUTH_HEADER_BEARER</code> - Indicates that the authentication credentials should be sent via the Authentication Header</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">http:POST_BODY_BEARER|NO_BEARER</code> - Indicates that the Authentication credentials should be sent via the body of the POST request</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clientConfig</code> - HTTP client configurations, which calls the authorization endpoint</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">oauth2:PasswordGrantConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/oauth2;\nimport ballerina/config;\n\noauth2:OutboundOAuth2Provider oauth2Provider = new({\n    tokenUrl: \"https://localhost:9196/oauth2/token/authorize\",\n    username: \"johndoe\",\n    password: \"A3ddj3w\",\n    clientId: \"3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxStwNEW4cfStBEGRxRL68\",\n    clientSecret: \"9205371918321623741\",\n    scopes: [\"token-scope1\", \"token-scope2\"],\n    refreshConfig: {\n        refreshUrl: \"https://localhost:9196/oauth2/token/refresh\",\n        scopes: [\"token-scope1\", \"token-scope2\"]\n    }\n});\nhttp:BearerAuthHandler oauth2AuthHandler = new(oauth2Provider);\n\nhttp:Client downstreamServiceEP = new(\"https://localhost:9091\", {\n    auth: {\n        authHandler: oauth2AuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n</code></pre>\n\n<h5 id=\"direct-token-mode\">Direct Token Mode</h5>\n\n<p>OAuth2 token issuing requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">oauth2:DirectTokenConfig</code> including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">accessToken</code> - Access token for the authorization endpoint</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">refreshConfig</code> - Configurations for refreshing the access token\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">refreshUrl</code> - Refresh token URL for the refresh token server</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">refreshToken</code> - Refresh token for the refresh token server</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">clientId</code> - Client ID for authentication with the authorization endpoint</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">clientSecret</code> - Client secret for authentication with the authorization endpoint</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">scopes</code> - Scope of the access request</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">credentialBearer</code> - How authentication credentials are sent to the authorization endpoint</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">clientConfig</code> - HTTP client configurations, which calls the authorization endpoint</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">clockSkewInSeconds</code> - Clock skew in seconds</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">retryRequest</code> - Retry the request if the initial request returns a 401 response</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">credentialBearer</code> - How authentication credentials are sent to the authorization endpoint\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">http:AUTH_HEADER_BEARER</code> - Indicates that the authentication credentials should be sent via the Authentication Header</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">http:POST_BODY_BEARER|NO_BEARER</code> - Indicates that the Authentication credentials should be sent via the body of the POST request</li>\n    </ul>\n  </li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">oauth2:DirectTokenConfig</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">oauth2:OutboundOAuth2Provider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BearerAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/http;\nimport ballerina/oauth2;\n\noauth2:OutboundOAuth2Provider oauth2Provider = new({\n    accessToken: \"34060588-dd4e-36a5-ad93-440cc77a1cfb\",\n    refreshConfig: {\n        refreshToken: \"15160398-ae07-71b1-aea1-411ece712e59\",\n        refreshUrl: \"https://ballerina.io/sample/refresh\",\n        clientId: \"rgfKVdnMQnJSSr_pKFTxj3apiwYa\",\n        clientSecret: \"BRebJ0aqfclQB9v7yZwhj0JfW0ga\"\n    }\n});\nhttp:BearerAuthHandler oauth2AuthHandler = new(oauth2Provider);\n\nhttp:Client downstreamServiceEP = new(\"https://localhost:9091\", {\n    auth: {\n        authHandler: oauth2AuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n</code></pre>\n\n<h4 id=\"basic-auth-outbound-authentication\">Basic Auth Outbound Authentication</h4>\n\n<p>Ballerina supports Basic Authentication for clients. The <code class=\"language-plaintext highlighter-rouge\">auth:OutboundBasicAuthProvider</code> is used to create a token against the <code class=\"language-plaintext highlighter-rouge\">auth:Credential</code> provided by the user. The <code class=\"language-plaintext highlighter-rouge\">http:BasicAuthHandler</code> is used to add the HTTP <code class=\"language-plaintext highlighter-rouge\">Authorization</code> header with the value received from the AuthProvider as the <code class=\"language-plaintext highlighter-rouge\">Basic &lt;token&gt;</code>.</p>\n\n<p>Token issuing requires several additional configurations for the <code class=\"language-plaintext highlighter-rouge\">auth:Credential</code> config including:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">username</code> - The username for Basic authentication</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">password</code> - The password for Basic authentication</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">auth:Credential</code> record should be provided into the <code class=\"language-plaintext highlighter-rouge\">auth:OutboundBasicAuthProvider</code> when initializing and the initialized <code class=\"language-plaintext highlighter-rouge\">auth:OutboundBasicAuthProvider</code> is passed to the <code class=\"language-plaintext highlighter-rouge\">http:BasicAuthHandler</code>.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/auth;\nimport ballerina/http;\nimport ballerina/config;\n\nauth:OutboundBasicProvider basicAuthProvider = new({\n    username: \"user\",\n    password: \"ballerina\"\n});\nhttp:BasicAuthHandler basicAuthHandler = new(basicAuthProvider);\n\nhttp:Client downstreamServiceEP = new(\"https://localhost:9091\", {\n    auth: {\n        authHandler: basicAuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n</code></pre>\n\n<h4 id=\"token-propagation-for-outbound-authentication\">Token Propagation for Outbound Authentication</h4>\n\n<p>Ballerina supports token propagation for outbound authentication. The token propagation happens if the user does not provide any configuration when initializing the <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">auth:OutboundAuthProvider</code> reads the token/username from the <code class=\"language-plaintext highlighter-rouge\">runtime:InvocationContext</code> according to the outbound authentication scheme and uses that for the outbound request. The <code class=\"language-plaintext highlighter-rouge\">runtime:InvocationContext</code> is initialized based on the authentication information from the inbound request.</p>\n\n<h5 id=\"example-one\">Example One</h5>\n\n<p>The following program has an <code class=\"language-plaintext highlighter-rouge\">http:Client</code> secured with Basic authentication and it is configured inside an <code class=\"language-plaintext highlighter-rouge\">http:Listener</code> secured with Basic authentication.\nThe <code class=\"language-plaintext highlighter-rouge\">auth:OutboundBasicAuthProvider</code> is initialized without providing any configurations. Therefore, the program gets the token from the <code class=\"language-plaintext highlighter-rouge\">runtime:InvocationContext</code> and uses it for the outbound request.\nIf the downstream service is also secured with Basic authentication and as same as the upstream service, the user does not need to configure the client.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> This scenario is the same for all the scenarios in which both the upstream and downstream services are secured using the same authentication scheme and clients are also configured using the same authentication scheme but without any configurations. The token propagation happens internally.</p>\n</blockquote>\n\n<pre><code class=\"language-ballerina\">import ballerina/auth;\nimport ballerina/http;\nimport ballerina/config;\n\nauth:InboundBasicAuthProvider inboundBasicAuthProvider = new;\nhttp:BasicAuthHandler inboundBasicAuthHandler = new(inboundBasicAuthProvider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [inboundBasicAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\nauth:OutboundBasicAuthProvider outboundBasicAuthProvider = new;\nhttp:BasicAuthHandler outboundBasicAuthHandler = new(outboundBasicAuthProvider);\n\nhttp:Client downstreamClientEP = new(\"https://localhost:9092\", {\n    auth: {\n        authHandler: outboundBasicAuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/hello\",\n    auth: {\n        scopes: [\"hello\"]\n    }\n}\nservice helloWorld on secureHelloWorldEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function sayHello(http:Caller caller, http:Request req) returns error? {\n        // http:Request req = new;\n        http:Response response = check downstreamClientEP-&gt;get(\"/downstream\");\n        checkpanic caller-&gt;respond(response);\n    }\n}\n\n// ----------------------------------------------\n// Following code creates the downstream service\n// ----------------------------------------------\n\nlistener http:Listener downstreamServiceEp = new(9092, {\n    auth: {\n        authHandlers: [inboundBasicAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/downstream\"\n}\nservice downStreamService on downstreamServiceEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function downStreamResource(http:Caller caller, http:Request req) {\n        http:Response resp = new;\n        resp.setTextPayload(\"Downstream service received authenticated request with the token: \" + req.getHeader(\"Authorization\"));\n        checkpanic caller-&gt;respond(resp);\n    }\n}\n</code></pre>\n\n<p>To enforce Basic Authentication, create a configuration file as follows:</p>\n\n<p><strong>sample-users.toml</strong></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[b7a.users]\n\n[b7a.users.tom]\npassword=\"123\"\nscopes=\"hello\"\n</code></pre></div></div>\n\n<p>Start the service using the following command after creating the <code class=\"language-plaintext highlighter-rouge\">sample-users.toml</code> file.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ballerina run --config sample-users.toml example.bal\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">Tom</code> user will be able to invoke the <code class=\"language-plaintext highlighter-rouge\">/hello</code> resource and invoke the Basic Auth protected downstream service.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v -u tom:123 https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; Authorization: Basic dG9tOjEyMw==\n&gt; User-Agent: curl/7.60.0\n&gt; Accept: */*\n\n&lt; HTTP/1.1 200 OK\n&lt; content-type: text/plain\n&lt; content-length: 602\n&lt;\nDownstream service received authenticated request with the token: Basic dG9tOjEyMw==\n</code></pre></div></div>\n\n<h5 id=\"example-two\">Example Two</h5>\n\n<p>The following program has an <code class=\"language-plaintext highlighter-rouge\">http:Client</code> secured with JWT authentication and it is configured inside an <code class=\"language-plaintext highlighter-rouge\">http:Listener</code> secured with Basic Authentication.\nThe <code class=\"language-plaintext highlighter-rouge\">jwt:OutboundJwtAuthProvider</code> is initialized using the provides configurations but without the username. Therefore, the program gets the username from the <code class=\"language-plaintext highlighter-rouge\">runtime:InvocationContext</code>, which is set based on the inbound authentication information and uses it for the outbound request.\nIn this example, the downstream service is secured using JWT authentication and expects a JWT issued against the user authenticating by the upstream service (protected by Basic authentication). Ballerina can dynamically issue such JWT while propagating the user information internally.</p>\n\n<pre><code class=\"language-ballerina\">import ballerina/auth;\nimport ballerina/http;\nimport ballerina/jwt;\nimport ballerina/config;\n\nauth:InboundBasicAuthProvider inboundBasicAuthProvider = new;\nhttp:BasicAuthHandler inboundBasicAuthHandler = new(inboundBasicAuthProvider);\n\nlistener http:Listener secureHelloWorldEp = new(9091, {\n    auth: {\n        authHandlers: [inboundBasicAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\njwt:OutboundJwtAuthProvider outboundJwtAuthProvider = new({\n    issuer: \"ballerina\",\n    audience: [\"ballerina.io\"],\n    keyStoreConfig: {\n        keyAlias: \"ballerina\",\n        keyPassword: \"ballerina\",\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\nhttp:BearerAuthHandler outboundJwtAuthHandler = new(outboundJwtAuthProvider);\n\nhttp:Client downstreamClientEP = new(\"https://localhost:9092\", {\n    auth: {\n        authHandler: outboundJwtAuthHandler\n    },\n    secureSocket: {\n        trustStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/hello\",\n    auth: {\n        scopes: [\"hello\"]\n    }\n}\nservice helloWorld on secureHelloWorldEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function sayHello(http:Caller caller, http:Request req) returns error? {\n        // http:Request req = new;\n        http:Response response = check downstreamClientEP-&gt;get(\"/downstream\");\n        checkpanic caller-&gt;respond(response);\n    }\n}\n\n// ----------------------------------------------\n// Following code creates the downstream service\n// ----------------------------------------------\n\njwt:InboundJwtAuthProvider inboundJwtAuthProvider = new({\n    issuer: \"ballerina\",\n    audience: [\"ballerina.io\"],\n    certificateAlias: \"ballerina\",\n    trustStore: {\n        path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaTruststore.p12\",\n        password: \"ballerina\"\n    }\n});\nhttp:BearerAuthHandler inboundJwtAuthHandler = new(inboundJwtAuthProvider);\n\nlistener http:Listener downstreamServiceEp = new(9092, {\n    auth: {\n        authHandlers: [inboundJwtAuthHandler]\n    },\n    secureSocket: {\n        keyStore: {\n            path: config:getAsString(\"b7a.home\") + \"/bre/security/ballerinaKeystore.p12\",\n            password: \"ballerina\"\n        }\n    }\n});\n\n@http:ServiceConfig {\n    basePath: \"/downstream\"\n}\nservice downStreamService on downstreamServiceEp {\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/\"\n    }\n    resource function downStreamResource(http:Caller caller, http:Request req) {\n        http:Response resp = new;\n        resp.setTextPayload(\"Downstream service received authenticated request with the token: \" + req.getHeader(\"Authorization\"));\n        checkpanic caller-&gt;respond(resp);\n    }\n}\n</code></pre>\n\n<p>To enforce Basic Authentication, create a configuration file as follows:</p>\n\n<p><strong>sample-users.toml</strong></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[b7a.users]\n\n[b7a.users.tom]\npassword=\"123\"\nscopes=\"hello\"\n</code></pre></div></div>\n\n<p>Start the service using the following command after creating the <code class=\"language-plaintext highlighter-rouge\">sample-users.toml</code> file.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ballerina run --config sample-users.toml example.bal\n</code></pre></div></div>\n\n<p>The ‘Tom’ user will be able to invoke the <code class=\"language-plaintext highlighter-rouge\">/hello</code> resource and invoke the Basic Auth protected downstream service.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -k -v -u tom:123 https://localhost:9091/hello\n\n&gt; GET /hello HTTP/1.1\n&gt; Host: localhost:9091\n&gt; Authorization: Basic dG9tOjEyMw==\n&gt; User-Agent: curl/7.60.0\n&gt; Accept: */*\n\n&lt; HTTP/1.1 200 OK\n&lt; content-type: text/plain\n&lt; content-length: 602\n&lt;\nDownstream service received authenticated request with the token: Bearer eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ==.eyJzdWIiOiJ0b20iLCAiaXNzIjoiYmFsbGVyaW5hIiwgImV4cCI6MTU2NTUwMzUzNywgImlhdCI6MTU2NTUwMzIzNywgImp0aSI6ImJhMjczNTM5LTcxZWItNDExOC04MzNiLTQyNDlhMjY0MmZmNCIsICJhdWQiOlsiYmFsbGVyaW5hLmlvIl19.OwMHPrQfjpIujHSAIq3ycKsP4SYTR2nW9lBHXBOgIZV6-FcM1Lxz8xtjY1AwcIAd_L4XmiODN_5HYUluZb3jDj1F6ZeI4FQeTKygiGgJs_nTww56bHFQXPe9_IW1zxRGM8G51cJBKxTH6YsOTXgNVhcGoe5f-kaESmGze-XLCnCXgj0GYnG2ECnejSHRh89gjWMyfyMFRDhioPi9IYZEQGIFBQzrModFWXNKQZh5vxaF5KW4KWXLTRgrBX8uY2IIS6S80nf83oaUlrrApieaGf88cwSqOjGjaPpxj3I810qGa996ZVE3P5DkzgxrJYHrJMwcVgBX7sgDFUUcD3RrEA==\n</code></pre></div></div>\n\n   \n                                 </div>\n\n                                \n\n\n                         \n\n\n\n                              </div>\n                           </div>\n                        </div>\n                     </div>\n                     <a class=\"cTopLink\" href=\"#top\">Back to Top &#x2934;</a>\n                  </div>\n               </div>\n            </div>\n         </div>\n      </div>\n      <div id=\"iBallerinaFooter\" class=\"row cBallerina-io-White-row\">\n    <div class=\"container\">\n    <div class=\"col-xs-12 col-sm-12 col-md-3 col-lg-3 cBallerina-io-left-col cBallerinaFooterLinks\">\n        <ul>\n            <li><a class=\"cBioFooterLink\" href=\"/downloads\">DOWNLOAD</a></li>\n            <!--<li><a class=\"cBioFooterLink\" href=\"/community/#report-issues\">REPORT ISSUES</a></li>-->\n            <li data-toggle=\"modal\" data-target=\"#reportissues\" data-whatever=\"@mdo\"><a href=\"/community/#report-issues\">REPORT ISSUES</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"https://github.com/ballerina-lang/ballerina/blob/master/LICENSE\">CODE LICENSE</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/license-of-site\">SITE LICENSE</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/terms-of-service\">TERMS OF SERVICE</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/privacy-policy\">PRIVACY POLICY</a></li>\n            <li><a class=\"cBioFooterLink\" href=\"/trademark-usage-policy/\">TRADEMARK USAGE POLICY</a></li>\n            </ul>\n        </div>\n    <div class=\"col-xs-12 col-sm-12 col-md-3 col-lg-3 cBallerina-io-middle-col cBallerinaFooterSignUp\">\n        <div class=\"cSocialmedia\">\n            <ul>\n                <li>\n                    <a class=\"cBioFooterLink\" href=\"https://github.com/ballerina-platform\" target=\"_blank\"><img src=\"/img/github.svg\"/></a>\n                    </li>\n                <li><a class=\"cBioFooterLink\" href=\"https://stackoverflow.com/questions/tagged/ballerina\" target=\"_blank\"><img src=\"/img/stackoverflow.svg\"/></a></li>\n                <li><a class=\"cBioFooterLink\" href=\"https://twitter.com/ballerinalang\" target=\"_blank\"><img src=\"/img/twitter.svg\"/></a></li>\n                <li><a class=\"cBioFooterLink\" href=\"/community/slack/\"><img src=\"/img/slack.svg\"/></a></li>\n                <li><a class=\"cBioFooterLink\" href=\"https://www.youtube.com/c/Ballerinalang\"><img style=\"width: 15px;\" src=\"/img/youtube-icon.svg\"/></a></li>\n                </ul>\n            <div class=\"pdframe\"></div>\n            </div>\n\n\n           <a class=\"cNLButton\" href=\"/community/#subscribe-to-the-newsletter\">Subscribe to the newsletter</a> \n\n           <div class=\"modal fade\" id=\"reportissues\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"reportissueslabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\" role=\"document\">\n              <div class=\"modal-content\" style=\"padding:15px;border-radius:0px;\">\n                <div class=\"modal-header\">\n                  <h3 class=\"modal-title\" style=\"color: #20b6b0;\">Report Issues</h3>\n                  <p style=\"padding: 10px 0px ;\">Report issues in the GitHub repositories of the areas and components listed below.\n                  </p>\n                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                  </button>\n                </div>\n                <div class=\"modal-body\" style=\"background-color: #fff; font-size: 20; color: #465867;font-size: 20px;\">\n                  <ul class=\"b\">\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-lang/issues/new/choose\" target=\"_blank\"> Compiler, runtime, or tooling</a></li>\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-standard-library/issues\" target=\"_blank\"> Standard Library</a></li>\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-standard-library/issues/new/choose\" target=\"_blank\">  Language specification</a></li>\n                    <li><a class=\"linkText\" href=\"https://github.com/ballerina-platform/ballerina-dev-website/issues/new/choose\" target=\"_blank\">  Website</a></li>\n                    <li><a class=\"linkText\" href=\"mailto:security@ballerina.io\" target=\"_blank\">Security</a> <span style=\"font-size: 16px;\">(For details, see the</span> <a class=\"linkText\" href=\"/security\" target=\"_blank\">security policy</a>.)</li>\n                  </ul>  \n                \n                </div>\n                <div class=\"modal-footer\">\n                 \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n    <div class=\"col-xs-12 col-sm-10 col-md-6 col-lg-6 cBallerina-io-right-col\">\n        <p>In the creation of Ballerina, we were inspired by so many technologies. Thank you to all that have come before us (and forgive us if we missed one): Java, Go, C, C++, D, Rust, Haskell, Kotlin, Dart, TypeScript, JavaScript, Python, Perl, Flow, Swift, Elm, RelaxNG, NPM, Crates, Maven, Gradle, Kubernetes, Docker, Envoy, Markdown, GitHub and WSO2.</p></div>\n    </div>\n</div>\n\n<div class=\"cCookie-Policy\">\n    <div class=\"container\">\n        <div class=\"col-xs-12 col-sm-12 col-lg-12\">\n            <!-- <div class=\"closebuttoon\"><img src=\"/img/close-w.svg\"/></div> -->\n<h4>Cookie policy</h4>\n<p>This website uses cookies so that we can provide you with the best user experience. Read our <a href=\"https://ballerina.io/cookie-policy/\">Cookie policy</a></a> to find out more.</p>\n<p>If you wish to disable cookies you can do so from your browser. </p>\n  \n<!-- <a href=\"https://ballerina.io/cookie-policy/\"></a> -->\n<a class=\"cIUnderstand \">I understand </a>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n<script src=\"/js/prism.js\"></script>\n<!-- <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.14.0/components/prism-core.min.js\"></script> -->\n<script src=\"/js/prism-ballerina.js\"></script>\n\n\n\n<script>\n\n$(\".cIUnderstand \").click(function() {\n    $(\".cCookie-Policy\").addClass('cHide-Policy');\n   \n    \n});\n\n\n\n</script>\n\n\n<!-- \n<script>\n    (function () {\n\nif (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n}\n\n/**\n * Plugin name which is used as a class name for <pre> which is activating the plugin\n * @type {String}\n */\nvar PLUGIN_NAME = 'line-numbers';\n\n/**\n * Regular expression used for determining line breaks\n * @type {RegExp}\n */\nvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n/**\n * Resizes line numbers spans according to height of line of code\n * @param {Element} element <pre> element\n */\nvar _resizeElement = function (element) {\n    var codeStyles = getStyles(element);\n    var whiteSpace = codeStyles['white-space'];\n\n    if (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {\n        var codeElement = element.querySelector('code');\n        var lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n        if (!codeElement || !lineNumbersWrapper) {\n            return;\n        }\n        var lineNumberSizer = element.querySelector('.line-numbers-sizer');\n        var codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n        if (!lineNumberSizer) {\n            lineNumberSizer = document.createElement('span');\n            lineNumberSizer.className = 'line-numbers-sizer';\n\n            codeElement.appendChild(lineNumberSizer);\n        }\n\n        lineNumberSizer.style.display = 'block';\n\n        codeLines.forEach(function (line, lineNumber) {\n            lineNumberSizer.textContent = line || '\\n';\n            var lineSize = lineNumberSizer.getBoundingClientRect().height;\n            lineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';\n        });\n\n        lineNumberSizer.textContent = '';\n        lineNumberSizer.style.display = 'none';\n    }\n};\n\n/**\n * Returns style declarations for the element\n * @param {Element} element\n */\nvar getStyles = function (element) {\n    if (!element) {\n        return null;\n    }\n\n    return window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n};\n\nwindow.addEventListener('resize', function () {\n    Array.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);\n});\n\nPrism.hooks.add('complete', function (env) {\n    if (!env.code) {\n        return;\n    }\n\n    var code = env.element;\n    var pre = code.parentNode;\n\n    // works only for <code> wrapped inside <pre> (not inline)\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n        return;\n    }\n\n    // Abort if line numbers already exists\n    if (code.querySelector('.line-numbers-rows')) {\n        return;\n    }\n\n    var addLineNumbers = false;\n    var lineNumbersRegex = /(?:^|\\s)line-numbers(?:\\s|$)/;\n\n    for (var element = code; element; element = element.parentNode) {\n        if (lineNumbersRegex.test(element.className)) {\n            addLineNumbers = true;\n            break;\n        }\n    }\n\n    // only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n    if (!addLineNumbers) {\n        return;\n    }\n\n    // Remove the class 'line-numbers' from the <code>\n    code.className = code.className.replace(lineNumbersRegex, ' ');\n    // Add the class 'line-numbers' to the <pre>\n    if (!lineNumbersRegex.test(pre.className)) {\n        pre.className += ' line-numbers';\n    }\n\n    var match = env.code.match(NEW_LINE_EXP);\n    var linesNum = match ? match.length + 1 : 1;\n    var lineNumbersWrapper;\n\n    var lines = new Array(linesNum + 1).join('<span></span>');\n\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.setAttribute('aria-hidden', 'true');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines;\n\n    if (pre.hasAttribute('data-start')) {\n        pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n    }\n\n    env.element.appendChild(lineNumbersWrapper);\n\n    _resizeElement(pre);\n\n    Prism.hooks.run('line-numbers', env);\n});\n\nPrism.hooks.add('line-numbers', function (env) {\n    env.plugins = env.plugins || {};\n    env.plugins.lineNumbers = true;\n});\n\n/**\n * Global exports\n */\nPrism.plugins.lineNumbers = {\n    /**\n     * Returns the node of the given line number in the given element.\n     * @param {Element} element A `<pre>` element with line numbers.\n     * @param {Number} number\n     * @returns {Element | undefined}\n     */\n    getLine: function (element, number) {\n        if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n            return;\n        }\n\n        var lineNumberRows = element.querySelector('.line-numbers-rows');\n        var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n        var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n        if (number < lineNumberStart) {\n            number = lineNumberStart;\n        }\n        if (number > lineNumberEnd) {\n            number = lineNumberEnd;\n        }\n\n        var lineIndex = number - lineNumberStart;\n\n        return lineNumberRows.children[lineIndex];\n    },\n    /**\n     * Resizes the line numbers of the given element.\n     *\n     * This function will not add line numbers. It will only resize existing ones.\n     * @param {Element} element A `<pre>` element with line numbers.\n     * @returns {void}\n     */\n    resize: function (element) {\n        _resizeElement(element);\n    }\n};\n\n}());\n</script> -->\n\n<!-- \n<style>\n    pre[class*=\"language-\"].line-numbers {\n\tposition: relative;\n\tpadding-left: 3.8em;\n\tcounter-reset: linenumber;\n}\n\npre[class*=\"language-\"].line-numbers > code {\n\tposition: relative;\n\twhite-space: inherit;\n}\n\n.line-numbers .line-numbers-rows {\n\tposition: absolute;\n\tpointer-events: none;\n\ttop: 0;\n\tfont-size: 100%;\n\tleft: -3.8em;\n\twidth: 3em; /* works for line-numbers below 1000 lines */\n\tletter-spacing: -1px;\n\tborder-right: 1px solid #999;\n\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n\n}\n\n\t.line-numbers-rows > span {\n\t\tdisplay: block;\n\t\tcounter-increment: linenumber;\n\t}\n\n\t\t.line-numbers-rows > span:before {\n\t\t\tcontent: counter(linenumber);\n\t\t\tcolor: #999;\n\t\t\tdisplay: block;\n\t\t\tpadding-right: 0.8em;\n\t\t\ttext-align: right;\n\t\t}\n</style> -->\n\n      <script src=\"/js/theme.js\"></script>\n      <script>\n         $(document).ready(function () {\n            var gitstar = '<iframe id=\"iGitStarIframe\" src=\"https://ghbtns.com/github-btn.html?user=ballerina-platform&repo=ballerina-lang&type=star&count=true&size=small\" frameborder=\"0\" scrolling=\"0\"></iframe>';\n            $('[data-button=\"iGitStarText\"]').replaceWith(gitstar);\n         \n            var gitwatch = '<iframe id=\"iGitWatchIframe\" src=\"https://ghbtns.com/github-btn.html?user=ballerina-platform&repo=ballerina-lang&type=watch&count=true&size=lsmalle&v=2\" frameborder=\"0\" scrolling=\"0\"></iframe>';\n            $('[data-button=\"iGitWatchText\"]').replaceWith(gitwatch);\n         \n         });\n         \n     </script>\n     <script src=\"/js/ballerina-leftnav.js\"></script>\n\n     <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n     <script src=\"/js/abixTreeList.min.js\"></script>\n     <script>\n         $(document).ready(function() {\n             $('#tree').abixTreeList();\n         });\n\n\n\n\n\n         $(window).scroll(function () {\n        var bodyclass = document.body;\n\n        if ($(this).scrollTop() > 200) {\n            $('.cTopLink').removeClass('dispalaynone');\n          \n        } else {\n            $('.cTopLink').addClass('dispalaynone');\n          \n        }\n\n   \n\n\n    });\n\n     </script>\n\n\n\n\n   </body>\n</html>\n\n","id":"index"},"__N_SSG":true}